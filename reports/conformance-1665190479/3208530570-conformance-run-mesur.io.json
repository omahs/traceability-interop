{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "165bc857-315b-4aa3-9be0-e53dad084e1e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "45777dd6-d324-45a7-a176-3dfdcad4660b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8c74d4a5-bc00-40f3-97c1-136d472d6dcf",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "77b89441-4e8d-4df6-b8b5-b6fcb66cc5e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "992db51f-4b5b-4716-81da-affe99f31d32"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d6661fc8-4c42-46da-a3b3-4ff180ffc95d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6e23b666-1bf5-4b7a-b09e-9c9d240c6506"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "030e069e-5328-4d8b-be59-b050d564c775",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "696a9b98-646a-47db-885a-e75d7a86e253"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "466a6c17-171e-4877-87e7-12f0231a7374",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "575f5d3c-ce1a-4591-8933-a50477631e5c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dd06e41c-644b-4c70-93b5-8b4f2d9d37a8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e2ca1e0-1646-4d2e-8111-5a7a2388d47b"
            }
          }
        ]
      },
      {
        "id": "641706b4-6bee-4b7e-ada0-614354f1d759",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "bb333b50-2078-4d75-8bfc-08918a265fd3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ef000d74-ad40-4733-bddb-77adcc0fcb43",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3d060a12-020a-4de4-998d-288c8b7ad504",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77daf812-f795-4419-862d-147de338ae47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92762302-8a7c-4208-9013-0633c3f84e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b09469f-ab34-4af7-a72f-9095e6aac923",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f9dd19-190b-4904-9c6a-e5aca91c1974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6acf13cb-4883-4a60-a9d2-415a674eb09c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582c9b56-4779-4473-8297-c216b8d1aa83",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "691fce48-9647-419a-aca4-24d24ece7891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84dbe963-7483-46c6-b377-21d486b586d6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3ae9f828-2465-4aff-9ff3-be999324c897",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "71c4e1c4-4a37-4e45-b8a0-6a067828e2a0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ef9872-cb6f-44ee-9982-8f88515a43ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad4fcc39-3af6-4585-ab01-6e16b2eb554a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed0e7c1-80f6-444b-b144-771990b080a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2cc1f2c-94f5-4071-8e3d-803f5a444783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e73a0e8-26c0-49be-9b7d-8cc158dcf492",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8308fb93-c001-41f4-8060-42abb15c0b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5a40a9d-64f2-4145-95e2-ed38fd35e6b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "015be051-b8e0-4a14-b201-252701c4a97f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "0cd2dbcf-33ea-48c6-b508-1f1c712cdcc6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2dce919a-5e7a-4b98-bd27-60aa1f99527a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9c14fcec-0de9-431d-bc04-938ac7d2aafa",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f37c647-a69a-4bc1-93af-c414f4f7fa2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "45c3cb42-30c8-43ba-b2f7-b642d1ed15c5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2a4b2a97-52cb-4ea3-bccc-528039970799",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "8b7f3fed-0951-427e-b197-992e918d895a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e72df039-2c23-471d-ac15-1e88a01f4997",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "06889ed1-223e-4f20-90e5-e323e279d693"
            }
          }
        ]
      },
      {
        "id": "da4d237f-2119-4e73-9cb5-9e3a15691063",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "838d81a1-4d4f-403d-bf27-6eb54a648cea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "72025ab8-11d6-49d1-b5ad-d58f61705e23",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2504fca9-f154-4882-9fe9-016d89681499",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5800ea5-c091-4edc-9748-6fab060ab3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f35ee6d-4875-41e9-bd50-d95c46488625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62895b8b-de97-4dde-977f-9887e805a4fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9128b484-3955-4683-834a-bb5496994714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf1d929-980a-4042-9cb8-e6be470c4ea9",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed42d2d9-81d4-46f0-bb54-81eef1eaba5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2828ca7-2628-434f-a014-8222a33a4194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c61161-0dde-4ddd-ad81-7913bc986039",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5a33250-6d24-49b6-a71a-f28ad6c81cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af7e8a91-d5b6-4f7e-9bd7-982b30a6f021",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1edda12b-19d7-49b3-ba43-db271f649613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "404f213a-3e6d-4ea8-9a82-f8d67b55f9af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f189c4-3358-4565-bc48-e1afe4690e33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8915f51-352d-471c-aa97-35c33fd81b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542fb051-4e55-401a-b772-714b9e79ad5a",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86535b57-0754-4e25-8b04-b329c3a94198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99888fa7-a53a-48b5-ac12-19632907901e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69ef53c-071f-4210-b130-eae3011f6709",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f95c5c01-f3da-4709-856a-e7c574903994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc25278-9b8c-450f-9d0a-454fe07c9e94",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20eefc66-5ed5-4f72-82dc-bbbe06763565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4c0cbc6-08df-4427-8dc1-066b6e92ae1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6291d7fb-022d-437e-96fb-c553f8a9679d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5faca57e-02d1-4e6d-97cb-6f94a39f137a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a29e41-b62c-483d-8d15-58478b1b3363",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad85992d-b682-4411-b16a-73452d1567a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08cfbf03-6952-42c9-9669-9bdc94d8031a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5461a1ba-48b0-436c-a3c2-6fbd7cc08528",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f29c7746-9c81-432c-babf-1109d1a9c3bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174c9aae-ebcb-4618-9967-d35d6ab1622f",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48cdfbd6-9805-4381-873a-2d5b1bac99a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae4e0f07-64e4-4462-a017-01e66c885b84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edcfc8af-ac78-4138-a8de-2f030b2bd892",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d5ab497-c356-4a0f-9b66-a6bd2bfe51a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee7a3cd-42c1-47fe-85ea-83ef2ecf47d9",
                    "name": "credentials_issue:credential.type.members:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562df07a-7568-40a9-8816-11f4b553b5e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e644bc-2cb4-4b34-b2a8-d48c587afc77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7158a47-5a5c-43cf-8444-d12526c476be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain at least one element",
                            "rawBody.credential.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bf8ee04-9a89-4ea5-9829-7d5e90b42878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0853dd69-53a4-4af2-b751-e6f261818444",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22572864-fd39-4c5c-9613-89d83907c93b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "851c0c03-5fb6-477d-abb2-ce2fb4f8c45b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae840faf-59b6-4f50-938a-fe62ec3fdd45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "440af66d-7622-4ad7-911d-3709e7346aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7559c1b5-1930-4a1f-8bda-7f17fc78a2ac",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c44e64-2ae5-4667-83a0-511ca0578223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d519b8bb-ca0e-4902-b159-c99a365177b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4efbef9a-d197-4d77-bc64-2be4b3eaebdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89a87554-5bbf-4d8b-860e-9a1ef62c29a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d35f69-2667-44ea-b637-56643d25b79c",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a488e509-f5b0-4f28-a758-74c6568aca77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a8b579d-bc7d-421a-a38b-b3bd21212559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b2bbbe-faa3-4ede-aab8-92be240a6433",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39ef7534-6b42-4d30-a926-12ead9d399fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8826e722-b3d8-4ff4-86a5-9b0d6826256c",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b24752-439d-4e5f-86a6-2fa8e64fa64b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "356912fd-27f9-4f7b-af75-8cdb78f36697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a05fc39-c652-4b73-9294-a2e7aac45593",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "eea9d7e8-84eb-49b3-b5aa-5a2dc52399ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "656555eb-cfda-4768-adb7-6d3c28a8ce0d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162386ec-7c7b-47ca-96d1-170f44cc2b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "946e3996-e12d-47ab-b46b-a765493af75d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713e9795-2ab3-478a-9445-6fa3139bae09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "f73ab5e5-b9f5-43f3-8ad8-584b305fc70f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ee6795-5c0f-4739-b06c-be659c49d26e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9abf1f-9e74-4c4f-b7a6-21754fae1794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fa8079c-ae72-4d8d-ac6b-b7a597993699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9fbbb97-173d-48a0-91e5-0dd3e5e1e69a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "372b8ada-1240-4655-a695-fe1af0be8e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ddf97a-ba45-48e8-9536-8f1c29f663d0",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d16462-c996-4383-ac18-b26929115a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad94aa22-4fc0-4984-a128-caddf0484d76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e56637d-f3a0-4d33-9440-c356f442cf9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9fe9268-f98a-4188-8ccc-390ef7a598e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f187a078-a04c-48e7-a34d-eca752001569",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5730cca-dc26-415a-8af7-6d8bd798d5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f799a1-5218-485a-b496-7f1404b8a736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9620a6bd-8349-4b68-9565-5999dcba3e5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "fd63aebb-4715-46a6-a370-d6f68ffb8da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a96cdb3-4548-4669-a421-b387b8898796",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f41feb3-7caa-4bf7-9fec-27b397c32ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63186dad-5d66-4220-a320-5696fa39c9f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f23bf7-92b2-47e7-a794-25c830dbe0b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "de642657-6ea1-4036-b345-77d8b84e7323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e574012b-b883-45c5-b05e-9745f98b8eb0",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f26e63-a665-4f52-a452-f66894bc6cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "269f135a-945c-4305-9cf9-b8e4e41e51e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f552a695-e919-4f77-b12a-6a4d4ba8e3d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd2bda37-9b81-43c0-9628-508feb428971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "231efac1-2bea-4edc-921d-1d889bac9c58",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1089d840-5dad-45b9-a6bc-d38b636fb552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c53f585d-8f0b-4517-b61d-444fbbf6b612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796e9628-cd7f-401e-9120-5cb24ac6080a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b00d8a6e-ac78-411b-b1c3-691e1f2bc57b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd72fd93-c5a6-48c8-8585-df5c5a366b14",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16148562-5c43-4c4c-bee3-22fb630bd1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90188325-4893-453b-88da-3177000a0ad9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836198ad-1aca-4f58-ab53-6a7e3edce715",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eeca5629-9615-49b3-820a-99f134e58a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ecae03-f357-44bd-bb71-0c0033091f54",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e872d3-c9b8-4a68-8a27-dc038114c1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2c39df5-2d44-4636-8845-9c4795434be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c894d4fb-49ae-4aad-8e18-9595c3222ff8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7b179c1-25c7-422b-98ce-d6c5e3167c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c7ce262-662c-47ed-bbf1-98f988e9126f",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "391ddb4d-3d8c-4f8a-a2c0-6c406853f9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "760cfeb1-6301-4f2d-9b16-d8ca6231c80a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f101dbcc-508a-4d0b-bd60-ed054aadcf7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c44f2a67-cac2-4548-a2a5-bfc4cb4cad56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32aa3f19-a602-4899-87fa-c92a8ba77446",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "598a5edd-61ea-42fc-9653-03bba7a0a79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "642fd965-5de8-4389-89b9-326f173342e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf941fc-6b46-4429-b05c-cd132e4c8d63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b154541f-4ad7-4f35-8376-45ae6cc604a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a5fc28b-8948-4b83-b155-ad89cd61b916",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59540687-1126-4a29-8c7c-a082a3614890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f796a5ea-8b8b-49c0-972a-324c985bf58b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd591e1-7605-4df3-82ab-2c3146225cad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08b50044-7ecb-4a8f-a732-5dd627b52252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "604a4b2b-2b3d-44b1-a6d1-d193589b11a4",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a92f8ba-ec3b-44c4-8876-77ff0ddf9e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6066464-fc19-488d-9ce6-c04bbdc7a2a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea7889a5-641a-42f5-b0ab-097bd6b9af2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "136494f6-ccb8-49d6-b56f-ce67089e5a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f085bd67-6d4a-4d37-84ed-f2ee00257a93",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6eec937-d41d-4842-bf30-e7c35bdbd226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e579b70a-a142-45a9-a7fc-1c470f989a5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc48a2b-57e7-457c-9945-c047556bfeb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6143fcc7-15b7-4bc4-873f-1d53b0893250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea465c8-7f27-4311-9cfb-09b9e8e79d58",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1940ff3-fb91-456f-91f3-8cb3aa812fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44a4a037-3d51-4552-852c-297246107606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad92f6a0-4944-45bd-a96e-02eedc7214b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07a29cf2-6549-48c8-aae3-8a6cb4479577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b915b8-38ca-469a-83a4-6358d926f440",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3243a1a-71cb-4a4c-b812-8b5c7e53909b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a614785-5362-4ce2-9961-151b843ccc05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c78812-940b-48fe-85fa-dcd1e8b18e15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c57e929c-f067-44ad-afbd-36d14f063d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1430e6d8-aea7-48b7-980a-630a28111000",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee977ea7-8362-4a4c-a321-e0a1c52bd5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e52e6569-6d4b-4c0f-a5f1-64efbdb86e7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c282caf-4a7c-490b-ae2b-8e278e519f53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "650105c8-694d-446f-971c-ee177f3135ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c74737b-f275-4b9a-bc6a-85b71f46250b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2789d9bd-6bff-4b17-aba0-b1a0913a5b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce3b7040-44e8-47c0-b139-ba143de217b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ffb47c3-f6ca-4cd7-885c-3a0fc5614208",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must contain \"type\" when present",
                            "rawBody.options.credentialStatus = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d58f28d-c79b-44e8-b0aa-92a6fb88696b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718eab15-1158-460d-a46b-9a358abfb67e",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c4c771-6313-4844-9cfe-01ca2146697e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a6eb1b8-0167-475f-afb1-3714105aeb7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb453530-5636-4e9e-9995-532ef7edf8ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5d8133f-ee91-4d80-887f-6fb9b80c365e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98aca23b-9c6c-4e1a-bc4e-e57abc9ae7c3",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "767e0438-8ec3-4988-aa77-c4f37a6f142f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ea865b1e-09df-4d73-8b01-57cf41911a9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c79f533-f36e-4f0c-ba14-becfe08ab43c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c01c1f03-cb80-4d64-bbf8-185952e91b77"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "142bdbbe-1892-4ded-86a2-a530376237c4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fe8801a8-ff7a-4762-b223-cf22990a6cb8",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca90339-ca8d-4fe3-a5bd-315ba4816384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "387f1d74-69f6-42c6-bf36-2051a32b29f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "576d66e3-1f25-415b-a648-ca2be47e4271",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d041b6b5-b7fe-424b-ba34-bca9032f1a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f731c8-e5ca-45c6-a4ad-52a5d98a0314",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0af0397-7ba8-4c78-85f6-2d492abb9ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "baf1bcb8-5a37-400f-874d-defb3494dff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59329562-da9d-4d43-ab47-b158b1629195",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "5cdcfddc-3aec-455f-b713-e0383960fc00"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f3327621-742a-4391-aaf8-f4f3c5d503ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "888e34ee-dc91-4f1f-b781-ef4c500f01c9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3cc2da03-4354-48a8-8092-5b39510b5072",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34707813-9479-437b-9634-d7a717212d0e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0ff78c28-a9d3-4edf-80e1-f4975f1989b9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "634459d1-7f1c-42a4-8742-32c972f75430"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ef014f83-4166-44ae-98ea-a843b690d625",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "056e96ea-18c8-4758-aa4f-a206a3228df7"
                }
              }
            ]
          },
          {
            "id": "66469046-7b0d-42e7-8ef9-16db3b00d4ff",
            "name": "Positive Testing",
            "item": [
              {
                "id": "30bf9d68-5244-4017-9a10-3e3e03e3f5d5",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8720f4c2-99bb-4f66-95c9-4f35641d40be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f3bb5f1-05d5-4304-96d1-eba25df4346d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98a12507-1ce6-48e1-ad22-0848c464a8b0",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "3a41c58f-9393-4185-943c-0e51379ac5c0"
                    }
                  }
                ]
              },
              {
                "id": "f6dea9e0-60b1-4e70-a097-311f38d95793",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a7f31af-121d-4ab3-9301-19d8bc4cd8e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f07bd495-77c1-4ad1-8bf8-77476ba86576"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd4eedff-6462-49b0-b171-7d28fa2eabdd",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "d036e27c-0c37-4001-8dd9-c24884207eb3"
                    }
                  }
                ]
              },
              {
                "id": "7df030cf-436b-4c0d-b15b-ce37b34ac19f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "adf34f9d-0bc7-4102-8dc3-36428105be99",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3394a4f0-32e2-43f5-ac1d-ea03d4179a6b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6593e50-45ab-4912-a1c5-32d64a183429",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "1544a392-7549-44b3-852b-cf488c73798f"
                    }
                  }
                ]
              },
              {
                "id": "cfa4e6df-276a-4eec-ba4e-be5d8517d4d0",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09ef34ff-6e44-4f70-b1ad-1a48e125a8c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8d3910a3-2830-45b0-81ec-660b9a7f4411"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff6f56b4-63cc-415b-9061-58b98bcfb1fe",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "38bfb228-9477-4a0a-8727-721b0c31b3fc"
                    }
                  }
                ]
              },
              {
                "id": "828bafde-2fd2-4bab-8b60-572107f70dac",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "253f0df7-0d43-4da0-863f-11a1f86dc43b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "40156f8a-2b37-40fc-9103-481a6c62436d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29bbd3b7-0828-4710-913a-0ea664054406",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "a3b9e5ef-c127-43d5-a762-3b89ec0aff01"
                    }
                  }
                ]
              },
              {
                "id": "0cbe661f-173d-469b-a77b-6b5580f8225a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c937548c-84b6-4935-b953-c4876fd173b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2175b81b-242a-4f84-b626-7546b8a69bc3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7139c9aa-b01a-49cc-87fc-46e0c642fc26",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "5e8b3524-7d12-4ddf-8916-29f014b765f2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d8caf419-afc8-4b02-9411-4c41bcbc92c4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5e564a07-36c3-4a89-9ddb-93fc720bb3cf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a4dcfcd8-d691-4963-a928-7a1094eae614",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fb85444c-676e-4024-b274-34faae5c69d0"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5fbc8aab-5368-4a36-9738-105383142a7a",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{ORGANIZATION_DID_WEB}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "6d1122ab-a66d-4067-bad7-31ca82fd8f13"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3b59908f-60a6-4cf4-a49b-4df480651f5e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6dadce2a-90ab-4ba3-871a-056089358ead"
            }
          }
        ]
      },
      {
        "id": "7af1097c-c23a-46e2-8024-9fa526e60074",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "33bf6cd0-165c-4eab-bd35-9c40e76f63cd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "282a48e2-82eb-47a6-8e5f-739709832904",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5caaa8cd-37cc-4bc8-8b82-9c45bc5aa32f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820fb649-85a9-44be-a7ba-4e5e753ac6cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2472f5d8-f18d-41fd-9fb5-57e283d75639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7892983-f928-41bf-abae-50709602a059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b706ac0d-723b-4b32-9ee8-bf3b6bb1583d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ceb5ad-f242-4b6c-88c7-9bb3c225f317",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c39aa0-4864-4957-a128-c0906122f954",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "8cbcd2ca-42b3-4bfc-a522-ab3221713c6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "357ad52c-7693-47fd-b9c6-176cca713543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4fadf91b-1e9b-42e7-b687-e59ada250568"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d45b31d6-8d22-4c14-b390-0346b646c0e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2b13ae7-d837-42d8-8ea7-aba10f05da43"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab155912-d40b-433b-8f40-1ddc36235c11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "571cb019-f7e5-4895-bf1f-6cd39f300ef9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79f85972-1787-4b5f-b193-05398bbbd88e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "06897ef0-ba17-49b6-9bf4-2ec8d5bc3ab6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "af5b6b28-35c4-4afc-a079-4ef1e40d3bad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "777f3ab8-0c8d-4751-85e2-be0f3ace9372"
            }
          }
        ]
      },
      {
        "id": "63be70ac-1735-422a-89ea-868c6735865e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5d4545cf-0921-4c2d-b011-b7f81aad3883",
            "name": "Negative Testing",
            "item": [
              {
                "id": "839d30c0-d8fd-4b3f-97e7-5a1e9d5ddabc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "545c914b-995c-4985-bd20-519e63f1ffa2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a83f67b-35a0-4a5a-87f4-d20e2f4107c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2d4fc19-dd0f-4f10-9d12-6900e11b0b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab931c7f-f533-4d92-89ba-a1a3091ada83",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "165acc2b-c729-44ad-b8a1-a6905bdac75c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "500ec44b-da23-4e62-b347-dc2605cfb4f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf3d9cae-2fd3-4845-be2e-3286f78c0d41",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5449bc17-5e20-4d96-bf7e-f45c13bcb248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cff0ff29-4c1b-4b67-b294-404f821c4a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958eb50c-4de0-449f-ad33-01e6b75b8923",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "173132b8-70c8-4845-b418-bbc34e258249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a7d92c-3965-4f41-8703-c6156933d223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1547c139-37d8-4400-aed5-8f968dffec54",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77cc7acd-c5d3-462f-a041-7e27775489c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7af00a70-02cd-4584-ba20-5686a39ea06c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ca8b48-44e8-456c-9f8c-d3239c877536",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35fe29b-e335-4130-ac98-4ecae29d2059",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "702d9a5a-2336-4e90-a56f-0601088935d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db5ee17-4b91-48e6-80af-f2495166c78b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733d4dce-6e36-4399-b4cb-a56e138687fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28305af3-53e8-4fbd-923c-a7420ee0ddcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "035881fc-7aa3-4aec-93d1-d18a71e4d15b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc84dada-5ff5-42f7-ac8d-41a4da9d5dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846356f6-c090-44a6-8f9d-5db18c4ef17f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20603c1d-baaa-496b-a6ec-2fb8b4156bcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff3b1d07-f8fa-4c21-9760-672791fac36e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8495f15-6213-4add-9d94-6027481847d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c6987a6-1340-4a5e-8a65-7bd7da221436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9036b662-ef39-4519-9d2d-6422b3449799",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173b982e-914b-4bf2-bf7e-a2e9f02f42a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9f91e93-89d9-4c6e-b6f9-410e688424e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7efda26-76d3-41d2-978b-19f977c56f8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d226434f-a0ec-4a38-aa01-dc726750cfe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5857555c-ec1d-4f73-bb4e-eb1c4b93d23a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4917f7f-fd1e-4960-9986-aea909812c51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "646c1bea-54c6-4a69-9596-a5a347f1b842"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8ca4b7-794f-4724-9560-ce0a946a48b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d7e0de3-4b35-492f-8ae4-29182044d669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3731fa-6537-4e4e-87cc-b6d8f0169cf8",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca77e80f-0265-4fd0-b896-b17d0b344566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d577a81-18cb-484d-bdeb-86f67fcafce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c278a8e9-d0ec-4138-ae27-e0a00b9c6733",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a25bbbec-26d0-43c3-ade7-8331dc8dddf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66e3570-50db-48e8-97c3-d84aff73578d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e950b6b-d1b0-4af3-b666-984bded283b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3a76236-ecf7-46e8-8e7d-b793aa46964b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa94f09-0ea2-475d-b043-e0200279388c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0122e379-6c31-4940-b776-73d2dc284123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655607d0-e482-4869-a9f8-167704443f96",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0594dbe0-8474-4ba0-801b-2561578f4644",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de6a74fc-6503-4486-b672-f9a3c103995e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b387fd81-0049-4e93-9a31-a00dfb23dd04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e93616c2-d0ef-4111-b6e9-bfe2ffbda6f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c786e264-5032-4e78-97ec-21e5658a32fe",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ddafb65-fb29-41a4-b345-9003957f8156",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "796705ab-18b7-4c66-a8c7-639969f73f86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e70bec9-3d3e-4162-8e8d-c26eb4cbcc58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf90f6a-97f3-42b0-bb9b-a67f1aea1024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21958396-7819-4c36-bd9c-1459ddfe2f8c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b95ec2-b84d-4da5-8656-30c84d4d6215",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4e8bb88-adda-4f1d-9229-c1e97455ee85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77b5bdf-853c-4cc3-85be-ad86e8457326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a10390e1-baed-4b60-8be5-444836c178a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842fb39f-d7a7-4424-9026-4913f8b868bb",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d5a9e49-899e-4247-ac2e-0e2fcb87133a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7c03f2d-1175-40fd-b325-8460212726d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a528972-0139-4028-b083-8ebf95285b7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14162741-45bd-4251-b99c-5602accafdaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9906d0bf-5665-4d93-a933-8ba57851f4d1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f0de1b-fa53-40d5-89ca-4536725f9bae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "328500d2-a622-45e1-80fc-0d5e88622723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48c97b28-680d-4036-bf81-bb8c2090b760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c83df54-0c40-4bfa-833e-8919db935344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd325acb-28d8-4839-948a-13eacdf0a242",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b723de6-17b5-422b-8394-43e42ee6c75c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e6d6f5f-41f6-4138-8ffd-b446d325b801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "645e290e-0045-487e-a891-19d163320b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80c8b94e-3533-486e-a30a-6f2100615bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f7852bf-162c-4839-a166-c16cc93c98fd",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ce657c-34fd-4f47-90c3-9f1ad0f2fc88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8be7593-6ba0-467a-bb5e-9a76db3603e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9aa45b-f7ee-4869-9207-999b14f7f0c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b0d6787-7518-4d54-b084-64b16980e902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "133c7e2e-df8b-4a6f-9269-bf9c71a9f0df",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26ea5b7-de2e-4b93-8e08-f619fdc62f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12a28c43-2390-4adf-b145-a7148cd5f17f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b12b219-7912-45dd-80e9-61b64c873651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "742326be-cb4d-4506-b392-5bc4ab025d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "381ad8c3-0e32-4543-9555-706316ebaec4",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d399f1-76f2-4070-8727-f1f1e1471bf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aab3775-9567-4689-a646-e21c6b1893fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c767393b-99cc-4e34-8f17-f16ff3da3ea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d480500-7038-4270-b5c7-ccf5cd680d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f1a93f6-0af6-4c30-8646-9528952f7471",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aeca33f-b99b-4c5e-950a-afab9434ac60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf50a6a9-96b7-49a7-a475-cb24622841a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e8f983-257f-4455-b85e-ed748ae791c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "380658f5-f9a1-42f4-9e7b-fa3d6b81df79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de246ad3-3334-468e-9bb5-d148dba32297",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb4dd53-74ce-4f00-b4e3-1722d12c22ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7cd3d80-136f-4679-83e3-dc1bcc2d61ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a4491d-e7b4-4463-a0d5-ecb2fcccf399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "751743f1-869d-4d04-ab3e-a3ad43c66648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20eb55a6-99fc-4a13-8c76-e3a1d224c582",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41191ec7-ea9f-4080-88aa-55a5e2a2bcda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "431dd18a-66de-4d91-a624-f9dfb85d0e46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "351ba019-baaf-464c-b4d5-36d6ab9f0748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48107e00-34c4-4d51-b165-aacb98a3cc64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d59fd7-feae-4050-9cce-e8004ceb86e1",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7fb0caa-bf73-4b57-b62e-be9f7d0d3ca4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0f61deb-b059-4788-81ae-7eb0f2427d04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf8f193-5b3e-422f-b63d-2ad764f2cfde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e2fd1e-fcce-4177-bee9-6d5dbc3dbfe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b244f9-e942-4f44-a73a-e2c48a4b5d17",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2611da0-41de-4a4f-86dd-87e966378a69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e88e4e6-79dc-4fd0-a9da-e4e91e8b953c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9765481a-6d57-4af3-b4dc-5bc854b4ab5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe4f97aa-abe0-4502-ac53-330d876b5c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd65318-0d66-4d57-ab4f-b91b8aa4239f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6230be12-0d94-40f9-a079-cca59e920c44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4725afe3-9dc7-44fb-9314-c8000c7630a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1286eaa9-aac4-4e0f-9c7b-d7e114e2cd3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0addfab1-7994-4d3d-a0d6-3f1368cc0c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936b5835-bc18-4371-919e-cb5152cb5949",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038f6c7e-a9c8-4acd-8119-2e0d4bc4d446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da3d634-1422-45b7-b39c-0639d626ef9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "976b1c5b-a249-4983-bd64-f29e5c342b2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5bcbae4-27fe-4244-9bf9-67635e7c3972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fcb05f7-0298-4a29-a9ca-b79622e31885",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6757e8f1-3b26-41cc-b9f9-84a8a9bffd26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4344441-9b47-4552-bc4b-edd4539aba7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5679e9-c880-464d-bdb4-78863503e587",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1767886f-5f14-4df2-b7e1-1de198a13e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56de5ebc-af7e-4b5f-b546-8e709fbb6e23",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef481a22-a729-47b4-86f7-73bf4d270b2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8fb890c-6f35-4a71-b537-8ee906e1812b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1c47c9-de4d-4b2d-be71-11270e0cbb3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "132372ec-0275-4264-83f0-2de5d44c65f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b464c63b-9f82-48a8-863b-a50320f9ac24",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "318001e6-9d07-40d6-ac06-0b5c4dadb3a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "601fe857-d96d-4fe4-a603-59f260b7e34c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ead307-cc57-4c8b-8ca7-50dde15e5486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bc2c618-784f-42c6-bdca-0d5b453a2715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a34854e-e5cc-4db4-bae4-0d54ca7f58ad",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da158398-1776-47cc-9926-c421eb6e845d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c52caa8b-394b-4bd2-a634-db805b1ed467"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29f7ff3-0e0a-4c4a-a1c3-fb9b90e09701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65309eb5-97ae-49a7-8d0f-e3959ffe56c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9734b2f7-8095-4ebf-b777-95591eb46c04",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ee5097-c7eb-4d50-8e15-74bcc9e748bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3fd30f4-fe3c-4a45-9fd7-fba08ae9f20a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7609b63e-0d4b-4b77-8b38-a8d687224543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9920d6b3-4944-4953-8373-b66e70ce8e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51575256-9c11-43f1-8406-4afad39037ef",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "731cff5e-39e9-4810-b5ab-3c32f9ea7458",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79ab2501-cff9-4582-846a-bfddbcc85ba3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31562cea-087c-488a-8369-63a03fede469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a12f00-b3dc-45f8-ad69-a12f355ab246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01aff773-b3cb-41ad-9152-d1b3dab979a4",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b535d928-a7a7-4b7f-adac-6670863d4fb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19917e83-9637-4d08-b9c1-717f87e15bc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "939a2aaf-351a-46ab-bc11-7413018094d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e84c9dcf-3735-4326-9480-b0d81f1a6ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1692c6-1f54-4fd5-a9f8-6bc8303bdc76",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a32ef9c-1885-43cc-b0a0-65e23a8f9e33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd448a2-6f82-4228-8e5d-a632efe0ebd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29933057-5eb7-4506-8666-46987da77b1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cec4ed1e-2110-45ab-90da-7c36627534a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6223bdf4-c33b-43a1-803f-12e576ef05ab",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55177cd5-8c84-43d1-b744-bea41a0ef49e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00115c2f-8006-4ac5-a8bb-426773f0af44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ec3124-7594-4ee5-b293-5b1fdb35fb30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c096a948-5ce2-4412-bbd0-41fee57183fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72afc59-10ef-423e-97c1-dbe22de4929b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be27cfa4-adca-4207-8307-591e5740c243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e67c39-bab0-4a52-8c6c-929f16e98775"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95a94e1-7b5a-4568-8748-ff316727193f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d64dd1a1-6040-4e90-8053-80c31ece8de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04052339-80bd-40f7-a5b5-7ca3afb69a61",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea8e170d-8ff2-466e-9a88-46bfca35f1a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "542f6aee-2924-433b-9bc1-91e7ecd5cede"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6faf488b-49a5-4bcd-9f47-ae25b0338766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f16ec857-0fc4-444f-872c-6918e10890ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1988e1-a551-4394-93be-70b833876bf2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e494c4-9185-4e10-b389-61531db19cfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef3e268d-87e0-4344-9438-12adaabc9590"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e6707b-f26d-4e9a-86c1-fd59758fdd0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "212f9f1d-009a-4a90-af78-0a805e9302fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fec10df-36aa-4e7e-843e-eb34d54249e9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8450e8b-07d9-4b8b-b539-489103691365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be83b19-ee96-42d5-aac6-056a1dfb6c0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5558fe89-b91a-4d6d-aa9f-348de7f0a957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b04c12a-5627-4593-a655-c86dcfed4637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a88b404-5bad-4432-b9bd-d8a699fd042b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f8b11e9-0405-41c2-bb24-d8e59bce3251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff8058bf-fda9-42f8-bd41-18027eecc7ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d179c9-fb8e-42e8-b1ae-4d88d8ffb748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb890a4a-34d4-475b-bcab-c7d8bf4a0ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64878b33-bf56-4d80-af5b-7331c7332c49",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b57224c-ccbf-4fa3-a7ab-8a7bacf35e93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90a9a2b5-cf8e-43a0-95f3-bc72a7d27c07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f59021-645c-47ee-8aaa-0b7d4e819435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f754fba8-dada-49ea-996f-52f4c6b1e1f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3bda17c-ba47-41d2-a26f-ed27bd15c50e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed15a5f-5e02-4e1a-ae52-9f57d4776afd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e68a4d8-995c-48c4-b9fd-3e543b092a16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06023d93-f0ca-4d11-a68f-09740cbad7f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efcbd7d2-ffa0-46f8-b22f-7004d26d2d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9666d032-54d3-4393-bf90-5ed9e275d651",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a628877e-697b-424d-a045-3919ea3e236e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bcc2e82-7b99-44da-add1-5b46fb3a9ca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e5c410-5267-4de2-a1a6-ed6896ca5407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93af03cb-be36-49ec-bf3f-c06820fa73c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902f5573-daa2-454f-83c5-50eed4f66373",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ab8023-a0da-4fe4-9e62-9692cec8f059",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad0c9a6c-2edf-40b0-84ad-d6a0cf82a89d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d0216b-c3b4-46a9-bce8-b8f2277f140a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04ed21c9-5bb7-406b-89fb-55f21004e5c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111ab0e5-e8a8-47de-93e5-2d0a6841e983",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ee74bf-1674-4124-b76c-1ca78eb70cd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ad03de-01d8-4d1e-8b91-5c16e1496eba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8890b76a-a821-4fa6-88fb-f19372afe122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f00350f0-9f1e-40bf-afd4-5887417bb43c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6180a50-adad-4fc9-9559-8a844bec445b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d50b839-f27d-4ff8-8648-bfa6d05ef73d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fc56a95-55d2-4888-a947-daff0c75b345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9802509-caf5-46e2-891d-9b87056eb1ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21a7a8ac-3220-4831-8b5e-7c5b8bdfdbfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67998979-1dcc-4917-b4b1-84345bd1fb2c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac02596-dd11-4941-9587-c0680fa8484b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "215b1b87-e99a-4c7c-8af3-f6f0941d6d80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5194d3cf-251b-4da1-a032-4e89f8b7b291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b70862cf-6c2b-43b3-a621-00db008419b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79870f4c-e457-419a-bf4e-d2c2d140e250",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b278d4-602d-4e38-9969-50cf57328b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b7e6aad-7cc8-47b0-a9b5-f50e82a41938"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb67e3b3-1859-457c-848c-2b40ce5c6fde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cca3755f-871e-422e-b40b-3688961cbd7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6746ee4-85a1-4cb7-b47c-d22dc48c7dbe",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d69503-0a31-4ab6-8844-6220d21c89ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef2bbc52-c9e5-42e4-8115-45eebcaedfcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f33655-a5d1-4fc8-b710-04ecfaa753db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b245af7d-1ec3-4b82-89da-e88a3185511c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96221123-36b6-487f-a22d-e4462f22b9a5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f481dd-e0b4-49f9-bad5-9d3012baf163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b799d92a-dfa5-43ca-81ff-b5e1f012f842"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b5e044-ea23-4bff-b8d2-04d1e0f109fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63aaa121-17d8-497c-9873-b548e408d829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2df33ea-410e-4668-b950-337f9d192809",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083ffecc-f823-4fef-b87a-5f9a95d15a09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2018a79-f81b-4124-98eb-eab8b32894e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce810bc-b711-491c-9c44-8a31549b461f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6120e7f-60eb-4ac9-a335-bfafb2d56a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cef4205-25db-4b7b-aee8-54d507b73da6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ab7c5e-1b00-4fb8-a5b4-f1e3a0ceb742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5588c21-cd8a-4bb7-a5de-a640e8a92f5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd7406d-0054-4a54-9530-b79704741e00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a5ba01a-8501-4574-bb05-0da4342cb5f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dca87b6-cf4a-4193-936a-cf074b69fe75",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c32ff3f-3e52-4b7d-bbda-1a796e7009cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0876a76f-f95b-4b00-8850-0395275600b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59fc57d9-8e08-4e98-aa00-4750feef3dda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd7b4260-8376-4df5-8982-fb7e32f3cdfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6874aa23-4178-4903-af9c-2f904e42d601",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e483732b-63f5-4cb6-ad09-fe77a5829d19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c793b45-f8cb-482a-a5d7-825bee1946cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2068945f-f9da-4d7e-a2cf-e0ab438d1cf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84cafd93-091d-4808-820c-2583eb49ee1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e1eddb-ccfe-432e-9167-c8c3828258ee",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110e7979-0480-483d-9727-303efd756c5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75c0b884-f939-49f9-b4b8-a9fcec8ab45e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "babe9efe-b9be-4280-9495-c4d2bc63cbda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8acc2628-130d-4088-ab92-5b5a960c407b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ef077d-1179-4abd-bd03-0466d8e34059",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f97975-798f-4cec-bb6e-de0503aeb360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e2bd14b-1686-496d-9910-c759ab6406cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f2d39e-90cd-4504-a405-4a1b5df75085",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f2151aa-ca14-4f56-b639-2db3814ba26a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03acd34-78d0-471e-92bf-a66f64e2cea0",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ae5fd0-5f64-4e0c-b331-0bcd0d60f12d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5b364b6-ab43-426c-b4e9-dae9c741aa7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b284829c-f77e-49b5-8901-e6a5d39b675c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4119c178-87f6-4d2a-a4ce-f47e7bfa9501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f992b069-b50c-433d-bd3d-654e6ab7c831",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0839563-efe2-467c-8732-803856e9887d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03c299ec-83ae-4d92-bf01-4f16f72282e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "345f6a0e-96bc-4bd6-981c-891d93a028b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caadf5c5-be7f-4b95-81bd-7d39af753684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b92ddc7-6f09-4ae2-b3ac-4fbfeaeaa34e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f2f0cd-db67-48d1-80f2-699d15e81502",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82183264-793d-4046-8383-c6e3e695f67a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f14d092-286c-4178-9a6a-b4e81827a75e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a77518f-f97c-4706-82db-ca7465451ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e199c1a0-e5f8-421b-913f-caa47945ee16",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6bca771-a8ac-4591-bc9a-bd65bb5a90c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "964da9f0-92d3-4f08-a02c-798de7a93a83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dee13b5-3aa4-4c38-b749-3c8c29987c39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4934cc71-56b1-42dd-8ba8-f589cafff953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d61dee1f-05b5-4982-9ff2-dd3a86e8c00a",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d7a38c-8065-4706-9189-8e3d890a3ea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e09c9a4a-bfbc-4614-9b11-14c09484b6d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fdb5076-6877-4b71-8267-1d90598357fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b9fc38d-5e90-4b19-b0eb-826415ed9d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b65986-7444-4f94-ba46-d8ef4daec8af",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d529382-864e-4044-b552-ba606b825690",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bc2d394-dbaa-4b4b-80e3-29e5c21e9190"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cfb1ebe-3ff2-4b56-a06f-f44047841d57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c569d91-3d51-4e0f-9f5b-4e72ce0bdead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce1f181-aec0-43d0-aff6-18156ba5fa61",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f461c158-a67f-432b-8f1d-df8360c3497d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb0131be-6cbc-4daf-b86f-235428c9db75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c3e0ba-4609-4072-8fba-98bb2b89d758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6c0e577-6ba4-46af-99fd-a5b007bab9ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d18a69-393d-4123-aba6-7a72796e3eaf",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c46425-a91f-43c7-b66d-f57cefc03044",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fa42269-85e5-4d35-974b-428a06494c20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd44afd6-6ce2-4ab2-a1e7-e4b3d2adfe87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fbfa8bf-4f76-4c1b-8fb2-199dffd389eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42de123f-a0dc-4c37-8691-915ea49a975a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7bee0ba-551e-4a64-b15d-b7c24144a4ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71ab7ade-6bd7-4dd9-92ac-e51bb3bb782f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ebd198-3bd6-473f-85a5-8e96482ae24d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c426b53f-2e74-4907-abc8-227923b7d623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53024ad2-c70c-4a4d-849d-c969059e3ecc",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1412edc4-b110-4ff5-8993-27cebd885814",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "262da532-f7b7-4d5d-beb5-0d6f526dd331"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c67d655-2259-4e82-81a2-f08012df51ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e23d78a1-0e5c-4360-b54e-2d41d6447328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9922ab4-4984-4622-b24a-8dd722d228bc",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86432700-f56d-4d40-8800-1ea0396db8df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d161949-cb93-47ca-8310-c82b5f6a6e0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0203a325-ca19-4e56-8a0b-ce4922bf72e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eb23672-b282-45b8-ad3a-ca927c2d3ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a6cabf1-f6e1-4349-aea3-36683c8d9472",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61a7c02-dca8-475f-8dee-ea1293b399da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd27f6e2-1f6c-4173-affe-796de7fd5613"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa31ea8-3e26-4f12-9b77-31465686bef7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b0cdf86-d20b-4de1-866c-0d7e84e09d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbeec1b-7c62-4c5b-8bcc-e792d1ea95c4",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c18aaca-1546-497c-8576-23cec6127b9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7feb9682-cb0b-4d55-b494-8aae965dce94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b9b652-1157-42b1-a027-88962828d0e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28efe896-99c8-4e6e-bcd3-4914bdb8b1e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f113bcb0-1364-4539-ad32-9ecbefa4564a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b11278d-ac5a-4d1e-ae6e-6ae45c30314d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "913fa4aa-1bc6-4460-93e1-1da125c0280c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06d610b-0e3e-46a4-a68d-cf912634146a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf69f3bc-94d0-4fa7-97fc-9e5403b13726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726f522d-efb8-4105-ad62-8cc0a427b67a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff301aa0-282d-454c-a776-590dcf43de1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17b480c5-e11b-4ba4-b176-341574d85773"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd286d7-d943-4478-9c49-a9aa7e9c58cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75419033-22e6-4fa4-b81e-6ffeddffe478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7465c22-336a-4607-87f6-9f187e8ef6d8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c59ff3-567d-442b-b43c-46ab4296db8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec9777cf-daf0-441d-bdd8-6d9be7a4871a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d6e413-2548-4947-a226-5f33790287e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdc4f752-2cfc-4f45-8543-2ac4923bd4c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b188de3c-f0f2-4784-8a8e-bf56d6537556",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826dae80-c29e-4092-b63a-e646cf171e25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90b07efe-51e8-4fab-b643-e2d4b82d4bfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f57c21-03be-4a67-ade7-306f905872c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d273ff1-a555-4977-8f16-e28ecd05eb34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7239a0a4-4b6b-4a54-974d-de6f1da8abc1",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71e7318-7c17-4618-acd3-92e53fe70b58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73561eb9-f6b1-4be5-8819-935eba9c8961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9ddff1-f186-4f47-bfbc-95288e2474c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "383dbd46-ffb8-40e5-a298-29542f7b5a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c67973-0ee5-4c1d-8804-d95211b0a7af",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "749b8e30-2fb4-41e9-a216-7f7f9b8079a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aaf415b4-9bdd-4709-90cd-f8eb81cedc70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0abf44-9c3c-485b-a6e6-453c3a6773f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "641feb89-e886-4457-9b40-c3f97ba0454c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d599bf0f-71d8-4427-9d2b-3998e6eeecb1",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f120ff4-881f-4d9c-9c75-1d4c7d4c4dc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65479519-a5bd-4dc7-b5ff-9eff8f0b57a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a66e7dd-ebf1-48aa-bf22-d453a4c9ced7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5020873f-d026-406e-a64e-57b1bf6ec23b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53619715-fd46-4fb2-b4c0-7987133f5360",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "478e0c6b-664d-4a46-a304-454916cf0725",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2593d763-7ca1-402d-adf6-80bd4562fedb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4cf57d9-bc96-402c-8378-9e13be25d3c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab24bb5-1001-482d-b0e4-df4717b6d62f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca4d5f2-1e19-4fa1-982d-f238571e6328",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147f5aed-b888-40ce-b875-501eb215e66a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02d4b7d4-0ce8-40b1-854a-20b8e7aa2c67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3428f57-ee94-4920-978b-ae6782770083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd852dee-4002-4e4b-a29c-d480e20df4cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f26058a3-9231-4497-a9c3-94733fe67c95",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821a8953-ccda-4def-94cb-f2faa5c90f28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0394943c-ddd2-4475-b6ad-9ba84bd4a72c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46652468-0a60-41bc-a3c3-d3eca7819920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e9867d-314a-4038-b6e6-4b827fcf18ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11881111-8c39-4ecb-8560-503987094bd6",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a38d5e-3df8-4b26-ba5d-e3c187291721",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4195ae25-23b9-49c0-b6a1-b67681297973"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de27a63-8ec0-4645-abc3-946f0c47a569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9df68a7-be45-42e7-aa33-65e761ee7196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01fd8d2c-9bae-4325-bee7-e749ccddd230",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315a0023-8d03-47a4-bf7c-99b10c307615",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0aa16cd-3988-4098-b4d4-3b4ec9e9cc26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d6f961-4085-4a4e-9556-2e192b51ba53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eb1c40f-b40a-4173-bcc3-493655c31c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896cfdc0-4dcb-4aea-848a-d3f01519eafd",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca424ec-1f8f-476f-ab60-93247b8c8a67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e05ebcb8-15b8-42d7-b2c0-9f4f30f410d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a91853b-303b-46b1-9284-3d4e8e578944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d725645d-545e-447b-ba2a-b30000e04905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a82391-596e-491c-b996-d0cf3ab10a53",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "218eaaa4-0765-4517-b7f9-7bbfb0356089",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "745216cc-9338-479d-9292-b41cb880a791"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dbbcbad-6b37-4ff2-9565-f5f83dcb976a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "825aa06e-ed0c-43d8-8bf3-9828ec5ad28e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5f5fcd-7d97-4098-9c9b-5e8fac349527",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8aa7c0a-b612-4862-85c7-94b1bf8b0f81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f677b62-cc6d-4aa2-bf82-9cf5d781f96b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c91777e-3f51-4f0b-9b6a-9db0943244aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47232509-0157-4c8c-bc08-41f3c64165c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa3ded3-10f9-4b6b-b89b-6107bafacb55",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4808e4-7172-4819-9108-dc6794ccad4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8698a286-d33e-46d0-aa73-7456b08a8e83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e634c5-b5e3-450e-8168-790ba03b8591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "291da0ac-d011-41dd-8897-6a193e90c084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e0fbfa3-dc27-4ab7-8571-405c8b484db8",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed325645-b154-4baa-acdd-37b52e895d46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18689584-1516-417e-b0ed-1d429f4811ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3ce4cd-67ce-457d-bf9b-cbb2bad7b7e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca46c9f1-700b-4a4b-b53d-deef323341de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf332535-0d40-4223-8d2c-70b0ab28a25f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26c71cb-4e10-4508-a1c8-865de33f5ac0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81710fb1-8e1c-493f-bcb8-b9118c7279c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e45c50-c735-44a2-916b-43ea51bb96db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5b9d268-6bf6-4009-8198-5b19ee1955de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f2fc55-e89a-41f5-bddb-e1ed323b02f3",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec38ad0-7979-48cc-9ec3-f5e3ffcffcc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a09ed98-9090-4903-bc77-c158c0553c6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "214f7050-8d3d-4d4c-997f-d544bcc3ef42",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9426a4a-7ab4-48e1-b293-2ebf91e0f229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141690ef-ec4e-434e-8dd7-2be5b322fc59",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e502cbd1-7cec-436d-9171-171678909329",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea94e147-2544-457b-8eaf-0eb99b1ae5ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96bcc9c-b46f-40a8-b8e4-315015c31251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c1199b7-66a0-4748-968f-7c2ca71412ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fcbe5a2-b6af-49bf-b123-63c434621482",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da459125-f216-46de-b066-a04dccbe25b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bcd61a2-bedd-44b8-98cd-090706f515f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba2d67f6-5091-4827-b147-b028fae6c796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71e6644f-fb03-4caa-bde0-b7d6a1903575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd73a85c-06ca-4307-94d8-2dc0bc54b132",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b830c41d-4af3-48e1-b852-771f2c2bd797",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "904e785d-06ee-4123-a6d8-02ac1a6ad600"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b757371a-3527-4670-849b-5155143d8853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "726e1964-66c8-4b14-9b54-435a71f22ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d780e996-5222-4a0b-a81b-f9f135372a58",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643bf952-43a2-4296-94f8-96a80b522592",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5a5ba1a-92eb-45cc-9422-0177246e09e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0eef3e-437d-4ae8-b6b9-3b65992b4ccb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb34aadc-ab3e-44a8-af7a-2f4bfd24554b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9497c6-23a4-4239-bfdd-df61bbec6bcc",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f743e68-26e7-40c3-b3af-9342ddaa9d4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f23aa88c-4d69-4011-b435-c366043b56c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f3d035-d14d-4f7b-960e-a232da104292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6d376ed-316c-490e-880c-db23d0152ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa6b255-1f4e-49a3-a834-096a98ed79d3",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9bcac8-03dc-400c-a3fa-7deef3f0ee07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf7369e0-43a8-47d7-82c9-43ebdbda2947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db133ec4-e00d-4f85-84ab-e046911aad9c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d294217-e426-4e40-9575-c7e27c3052ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f71b760-a9de-4219-9737-3d2271d95b24",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42dcc430-0bb8-46bb-abb0-70534a64f0e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71e34a02-d16b-4432-9e08-d83a0923ea2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c38a9bf-f6b7-4b42-bc01-9a70f16e7851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf41081c-6dc0-4928-96ae-592063fc9ca4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99fc7382-cd1b-4b0c-86cc-bd7c13218d72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83a3c90a-ae2f-406f-8e22-54d59c080d38"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3eade32e-6709-438e-b67d-4444b6b38d83",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a47e88b6-03f8-4918-96d3-408e35f284ce"
                    }
                  }
                ]
              },
              {
                "id": "4c7a1191-c6ea-4bd1-bd3b-4b38898f21a2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6a8d7e7c-bea0-4f53-ab15-29bb50430c2e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36d82c8-b75b-4744-8e6b-becfef88ce70",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "253fce7d-b5cb-4045-8f7b-f7537084bd93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2763bebe-f497-495e-9a74-7a17cfe771ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca409b7b-e308-450d-867b-a71f940bfba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da078a6-3746-4696-8621-4e2ae7f5fdbc",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6010a5c5-81f0-4443-a088-56925504ddd0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "303e8038-5019-4f9e-8b6d-3dacaaf5cafa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e250d9-cbf6-47e6-a663-8640ac2185c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39c43dec-72b8-41f5-a229-c390a0650ba8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "50ec1145-a7a9-4fd5-bcb4-42dff6fdd203",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77a521f2-55cd-425a-8255-78e6ed35d21a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4659189-16f8-4304-aa71-9c1c2aa46cfe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eecec3d6-3d1a-4e65-929a-5ef68926ba81"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "40031f75-b301-4d3b-ab6a-cfa98f73f4fe",
            "name": "Positive Testing",
            "item": [
              {
                "id": "66f59261-8ecd-4d45-95cf-e28332a23dc9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2485654-11d3-450e-a910-d891aea7b6c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "baaada24-e00e-49cc-970a-3955de4ea559"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82c28e03-1076-4778-8512-2c09525b1c6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0699ee9e-8225-4800-880d-40a496096167"
                    }
                  }
                ]
              },
              {
                "id": "e30a5143-8d8a-4641-933f-adb57c36bb01",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b970f224-f394-4541-8af4-4ae4a374e4d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a5f6d736-d46a-4575-b83c-8c4ff2290c7f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5bbc981-9a8c-48f5-a864-df20c435dd17",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18123115-d2f3-482f-8b38-ec97e802024b"
                    }
                  }
                ]
              },
              {
                "id": "f68694f3-0ebc-44f6-ae03-9e1f9bdbe1de",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fdb1c276-b635-4cf9-a404-f0daf30720eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7eea1892-2c65-4151-9905-2333cf59b1bb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "357b0fc5-0e78-4b07-9dac-08be9ab9810c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0cc0883-6916-48ba-9cf3-f2d60f7d0ba3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67d8ed0f-ec6d-4a68-ad1e-8f850f4eada3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2cec2226-1e7f-4023-856b-32a178407d87"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3a12fb70-8d49-452a-bd14-614c7478c468",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "21acb58b-d830-4446-b7b0-7cbf85700d5c"
            }
          }
        ]
      },
      {
        "id": "e0d66a17-982d-4fea-a4bf-d14ed5ebe148",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1d0bcf75-d322-4a60-a177-29ebaf6fdc61",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f9e57fd0-189f-4dae-a2af-bf4f6da5d299",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "70d1a2d1-ec4b-4df6-80b2-d0a8750fd872",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777eaecc-394d-4959-963b-2996bc23f8c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "aa930e33-6cbf-402b-857c-2501a4570121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32d4547-49a3-4e32-b4a2-1a3c5975a11f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72160df9-230f-46dd-9b79-a9bd5eba1825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe293333-0bb3-4c24-9775-ed0229d4d810",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cff3017-a006-4d3f-86a6-06d31996d613",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c2044482-3c97-46a6-8966-e991ede4f4df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1e3bb8-916c-43f5-9fa8-6e96ed2ecddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c018d169-ebe8-4f3b-840e-b4695d124418"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86b67717-403e-4720-bba5-41d3a39ee363",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86c46a24-e89f-47e7-90d5-f66c7db6e551"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "41576d83-23c5-417a-b92e-abe42a2f12ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bfbaba48-db75-4e40-890a-c3b0e3a12e89"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c1a6d190-bf6a-4eb3-acd8-c9036557f553",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f41ac886-8e30-4a79-bd24-05dd80fc061b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ec84ead4-2bbf-4137-990c-585f0f3de586",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "52f9e839-0c3e-4bc9-8214-0752ce7d10c6"
            }
          }
        ]
      },
      {
        "id": "6ecfeda6-4d54-4be3-a48d-f19d13931610",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3a0ed7d5-d34b-4301-95c0-19ada72c8648",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d03cc935-e443-4943-b654-347761d23aaa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "38d6609b-ca1a-4535-a02d-3a3c2107e699",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e236dfa2-d527-400c-938c-d250878be73a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3d613559-b157-49ce-884e-d474f4393510"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0faf97-3ab3-436e-aa16-993a8a0158a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0459116-1e87-4e3c-a2e3-640d9e51efde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "decee382-b7dd-4946-aff2-536e0268e9a5",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5f582a-4110-40e7-8100-6720fd1f112c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "85d8a398-da60-46b8-ad7e-e3b71e2825aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7012903-5b6b-41ce-8f21-d89ec02c5450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c9deb83-187f-4927-8257-143e24980652"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a147e1f-0447-492c-abd4-da0d618dad00",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1d9493b8-28b5-4bec-9c1f-d569cbba3064"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5f65e32-6032-4560-bbe6-ebe20257eb3c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "776971e9-d082-4043-8ee8-275e8d2625ba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4556b19-9d57-4fd6-a28c-cff3e81a1a03",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2e14dcfa-17e6-45a0-aab9-1cfa4a85a761"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8ce709df-20eb-43e2-a994-364720abc688",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "97c9ff55-0525-46fb-b112-524139e2b034"
            }
          }
        ]
      },
      {
        "id": "38b486b8-f390-438c-9cec-1634c8c9ded7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "45969017-c5de-44b6-8864-501b8c167ec2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "369a2390-e5de-4041-a914-b930b0b03feb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "74364c6d-142c-4829-aca7-db3939cf5f28",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16bea359-3680-4d3a-88d4-d7523dcdf0df",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d8e2b158-d037-493b-88ad-945032f9352c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af5d41c-5cd3-4bec-b437-c571fd7b67cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "314c4b03-cc5f-4cdb-aefe-3c900912128d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2818f1f-18cf-42a9-8414-20cd604290ca",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "125f5e7e-249f-48e4-9496-0bda472ca8e2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "02dbea00-1c6f-45e0-bb36-2c34dd61350d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c713b7c-9dac-454f-ba76-4318cf53671d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae8b8f22-749b-44eb-b6bf-c50a26dce996"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ca2d68b-7429-4eaa-a7f9-f7edae110df3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5de214e3-c9e6-4584-8fc4-e426c5d3254a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ca5abcb-c8a0-469c-b1cd-5da52f9c1b21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6e32111-7af3-4e7b-ac58-845e9de66ccb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85925cfb-8a7c-4ee5-9ca6-9548e7618dc1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f20e34d1-68b5-4d73-a913-ceb1c5526fec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6369e363-6bb2-4cac-b5e1-9e75fea5b57e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "44c3745c-06f4-4366-a68a-ece13e823249"
            }
          }
        ]
      },
      {
        "id": "c562b697-011e-4da1-a31f-3ee617f7e8ca",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8ce92d6b-9545-4d72-b0a6-0a22e4d979e3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "64e1dd7c-e0de-4bc6-8f8c-0ed4c0f3b44d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "43a9c191-a1b3-4ac0-9117-585d7d0a545c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21ca2935-0136-4712-9c71-3ae610183d51",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc78ef32-9e25-4e44-a8fb-98d7e19b3a6a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 157,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1231,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 157,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 166,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 157,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 320,
        "pending": 0,
        "failed": 290
      },
      "testScripts": {
        "total": 621,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 610,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 39.63253012048194,
      "responseMin": 9,
      "responseMax": 504,
      "responseSd": 71.968056180961,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1665190293079,
      "completed": 1665190306621
    },
    "executions": [
      {
        "id": "8c74d4a5-bc00-40f3-97c1-136d472d6dcf",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 157,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "288de288-60e6-4169-abaa-aa42ff659520",
          "httpRequestId": "98fbc8b7-36df-4648-ace1-edd5b6c1dcc6"
        },
        "item": {
          "id": "8c74d4a5-bc00-40f3-97c1-136d472d6dcf",
          "name": "did_json"
        },
        "response": {
          "id": "fb792026-65e0-4277-bf58-07b6f34d8476",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.service[0].type should be array",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.service[0].type should be array\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "3d060a12-020a-4de4-998d-288c8b7ad504",
        "cursor": {
          "ref": "a85adde4-6f8d-4b5e-bce7-2f1fce9f0e58",
          "length": 157,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3a4f19e3-be85-4027-83f3-a3e64e6f62e4"
        },
        "item": {
          "id": "3d060a12-020a-4de4-998d-288c8b7ad504",
          "name": "did:invalid"
        },
        "response": {
          "id": "a9f33079-af18-4c9f-b2a1-d318947a9438",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "3d060a12-020a-4de4-998d-288c8b7ad504",
        "cursor": {
          "ref": "a85adde4-6f8d-4b5e-bce7-2f1fce9f0e58",
          "length": 157,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3a4f19e3-be85-4027-83f3-a3e64e6f62e4"
        },
        "item": {
          "id": "3d060a12-020a-4de4-998d-288c8b7ad504",
          "name": "did:invalid"
        },
        "response": {
          "id": "a9f33079-af18-4c9f-b2a1-d318947a9438",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "4b09469f-ab34-4af7-a72f-9095e6aac923",
        "cursor": {
          "ref": "e44630de-567e-4f8d-965f-2cede3df39bb",
          "length": 157,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7fbb1a24-c613-416f-8e66-bec4e82a1e82"
        },
        "item": {
          "id": "4b09469f-ab34-4af7-a72f-9095e6aac923",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a9968563-33d2-4b17-9b09-bd2654d8ccac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "582c9b56-4779-4473-8297-c216b8d1aa83",
        "cursor": {
          "ref": "955ee4cf-a171-42a3-930a-ac189e17cb15",
          "length": 157,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b5f0edf2-0eb7-48d3-8010-b2e3a8167540"
        },
        "item": {
          "id": "582c9b56-4779-4473-8297-c216b8d1aa83",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b7f2dcce-6929-49f4-9af5-f0a7da50a1e0",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "71c4e1c4-4a37-4e45-b8a0-6a067828e2a0",
        "cursor": {
          "ref": "1430cb0a-43d4-46fb-bb52-551c84149769",
          "length": 157,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "61ba5dbd-81f7-4473-b503-0be0b4cad1f2"
        },
        "item": {
          "id": "71c4e1c4-4a37-4e45-b8a0-6a067828e2a0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "59bcfaae-2ff4-4337-8a76-bf0b6cca00ec",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "7e73a0e8-26c0-49be-9b7d-8cc158dcf492",
        "cursor": {
          "ref": "b61f03e1-d18a-4494-9b83-e6fd6a7c81d8",
          "length": 157,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "70f40e7b-6b41-416c-8a07-bcd03fa2d91b"
        },
        "item": {
          "id": "7e73a0e8-26c0-49be-9b7d-8cc158dcf492",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "18468cea-7eea-4305-92cf-9ed5454ccf49",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "7e73a0e8-26c0-49be-9b7d-8cc158dcf492",
        "cursor": {
          "ref": "b61f03e1-d18a-4494-9b83-e6fd6a7c81d8",
          "length": 157,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "70f40e7b-6b41-416c-8a07-bcd03fa2d91b"
        },
        "item": {
          "id": "7e73a0e8-26c0-49be-9b7d-8cc158dcf492",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "18468cea-7eea-4305-92cf-9ed5454ccf49",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "9c14fcec-0de9-431d-bc04-938ac7d2aafa",
        "cursor": {
          "ref": "702f6e6c-6536-4b36-9fad-bcd25ab8a13d",
          "length": 157,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f98812f6-2875-45da-87a3-c7b9c87fcaa2"
        },
        "item": {
          "id": "9c14fcec-0de9-431d-bc04-938ac7d2aafa",
          "name": "identifiers"
        },
        "response": {
          "id": "c572a7e1-8358-44bf-a198-9a18e6d4e1a5",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2504fca9-f154-4882-9fe9-016d89681499",
        "cursor": {
          "ref": "faf2ae9e-6dc1-4688-9c23-3688d0dfcc4d",
          "length": 157,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c537a7c0-ed07-4b3d-86f8-d29f4ad677ec"
        },
        "item": {
          "id": "2504fca9-f154-4882-9fe9-016d89681499",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4f5f4177-1fb6-47fd-a101-6961910001dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 463,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "2504fca9-f154-4882-9fe9-016d89681499",
        "cursor": {
          "ref": "faf2ae9e-6dc1-4688-9c23-3688d0dfcc4d",
          "length": 157,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c537a7c0-ed07-4b3d-86f8-d29f4ad677ec"
        },
        "item": {
          "id": "2504fca9-f154-4882-9fe9-016d89681499",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4f5f4177-1fb6-47fd-a101-6961910001dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 463,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "ccf1d929-980a-4042-9cb8-e6be470c4ea9",
        "cursor": {
          "ref": "073058c0-9a8f-44a9-afca-c76a2764ab73",
          "length": 157,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ae4fb739-82a0-47fb-b999-bd2e92806a18"
        },
        "item": {
          "id": "ccf1d929-980a-4042-9cb8-e6be470c4ea9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e6fba45e-8c3c-4a50-b318-a72493e172c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "af7e8a91-d5b6-4f7e-9bd7-982b30a6f021",
        "cursor": {
          "ref": "2c72c775-390a-44b7-a026-11c291cc1407",
          "length": 157,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "44d35a80-c885-4daa-a868-c7abbdc309bc"
        },
        "item": {
          "id": "af7e8a91-d5b6-4f7e-9bd7-982b30a6f021",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "5cf82f86-37ef-4e59-a088-49fec9e42263",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "542fb051-4e55-401a-b772-714b9e79ad5a",
        "cursor": {
          "ref": "d7fc7eb3-ee7b-4135-8f21-2677e2b1ce6a",
          "length": 157,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "17fea43f-3215-4406-b6d6-8c7a8c03b554"
        },
        "item": {
          "id": "542fb051-4e55-401a-b772-714b9e79ad5a",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "89498a18-fdab-429e-b466-ed0bfe449e60",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "9cc25278-9b8c-450f-9d0a-454fe07c9e94",
        "cursor": {
          "ref": "8f62010f-fbbe-4057-9105-f4c111d3a3c8",
          "length": 157,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "679b99ea-204a-4ede-b92b-b86bc8aeee57"
        },
        "item": {
          "id": "9cc25278-9b8c-450f-9d0a-454fe07c9e94",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "cdc07097-31e0-48af-8a30-f6c28ac62c3c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "27a29e41-b62c-483d-8d15-58478b1b3363",
        "cursor": {
          "ref": "6f7df317-030d-4c10-8db4-553c6d1a34c0",
          "length": 157,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6a1df541-ebfe-4c3d-8754-0520abb139a0"
        },
        "item": {
          "id": "27a29e41-b62c-483d-8d15-58478b1b3363",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c362c55d-0830-433a-9f9f-139c4d36df1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "174c9aae-ebcb-4618-9967-d35d6ab1622f",
        "cursor": {
          "ref": "5b9450f2-0cb3-491a-abde-10ec0d8cd858",
          "length": 157,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8a4b10c0-0d3c-4f5c-9c4b-9ab86cf7fadb"
        },
        "item": {
          "id": "174c9aae-ebcb-4618-9967-d35d6ab1622f",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "09befc16-5bac-4135-af97-ea30d83fd15a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "eee7a3cd-42c1-47fe-85ea-83ef2ecf47d9",
        "cursor": {
          "ref": "b24f2e05-7d0e-47a9-af80-e58385793e7c",
          "length": 157,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "aa7672a2-c202-42eb-a8fb-1bd1d8399348"
        },
        "item": {
          "id": "eee7a3cd-42c1-47fe-85ea-83ef2ecf47d9",
          "name": "credentials_issue:credential.type.members:missing"
        },
        "response": {
          "id": "75700016-922d-4f9b-a3e9-aa38df1e0254",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "0853dd69-53a4-4af2-b751-e6f261818444",
        "cursor": {
          "ref": "4ab99f27-4c63-406c-a7c2-eefc13bcb7c3",
          "length": 157,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a36bd464-f539-41c5-b6bb-5800d921501f"
        },
        "item": {
          "id": "0853dd69-53a4-4af2-b751-e6f261818444",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "3e7752c3-724d-428e-8ad2-f9858373d0a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "7559c1b5-1930-4a1f-8bda-7f17fc78a2ac",
        "cursor": {
          "ref": "741db287-ea51-428b-8ff7-a1b4f67efc86",
          "length": 157,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1c2fb4d2-a427-4014-b2a6-fb943be17df9"
        },
        "item": {
          "id": "7559c1b5-1930-4a1f-8bda-7f17fc78a2ac",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "98a70825-a4e9-4e17-b657-83cdf606c22f",
          "status": "Created",
          "code": 201,
          "responseTime": 40,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "c3d35f69-2667-44ea-b637-56643d25b79c",
        "cursor": {
          "ref": "0750ef17-d42d-4f92-aa30-3d656019ffcd",
          "length": 157,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6aedd341-ab34-490f-9ab3-63197a2e711f"
        },
        "item": {
          "id": "c3d35f69-2667-44ea-b637-56643d25b79c",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "2b1f0e06-5683-4076-bac4-cd777dfa1537",
          "status": "Created",
          "code": 201,
          "responseTime": 46,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "8826e722-b3d8-4ff4-86a5-9b0d6826256c",
        "cursor": {
          "ref": "4ce6e571-bf83-44a6-8be2-8ba40e72be13",
          "length": 157,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "24493a5c-5f72-4dbe-8a88-1da1a5256e56"
        },
        "item": {
          "id": "8826e722-b3d8-4ff4-86a5-9b0d6826256c",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "2135581d-5367-492b-90bc-68e864aec7d1",
          "status": "Created",
          "code": 201,
          "responseTime": 51,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "656555eb-cfda-4768-adb7-6d3c28a8ce0d",
        "cursor": {
          "ref": "0242fdc8-259b-427c-8b40-4542a41aa1bb",
          "length": 157,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b3b8eeb7-36b0-4308-a06d-f2ca37cb64b5"
        },
        "item": {
          "id": "656555eb-cfda-4768-adb7-6d3c28a8ce0d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e21d5764-1d02-4819-87ec-e9b4db0573b9",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "80ee6795-5c0f-4739-b06c-be659c49d26e",
        "cursor": {
          "ref": "41cbeba2-3049-4139-aa86-5dd2164adcdc",
          "length": 157,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "cd3632f5-0acc-497c-8bb7-bb0ef103bebc"
        },
        "item": {
          "id": "80ee6795-5c0f-4739-b06c-be659c49d26e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6be42682-4a11-4ff6-acc6-c0a96a28f663",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "62ddf97a-ba45-48e8-9536-8f1c29f663d0",
        "cursor": {
          "ref": "89d2ef1c-98f9-4a79-93d9-5258b1fcb5c4",
          "length": 157,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "29e92c9a-bc0b-45b4-b540-e94739693074"
        },
        "item": {
          "id": "62ddf97a-ba45-48e8-9536-8f1c29f663d0",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "d0458ab2-159d-4fcd-bb6c-2744dbc43a38",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "f187a078-a04c-48e7-a34d-eca752001569",
        "cursor": {
          "ref": "0ec37303-564e-4658-954b-6a43d54a5e93",
          "length": 157,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f075ebbb-f135-4469-94c9-e8c717108399"
        },
        "item": {
          "id": "f187a078-a04c-48e7-a34d-eca752001569",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "6d0a9637-ad18-47e0-a212-3b43767a2a74",
          "status": "Created",
          "code": 201,
          "responseTime": 40,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "3a96cdb3-4548-4669-a421-b387b8898796",
        "cursor": {
          "ref": "1a5eb7da-1101-4567-bda2-3f0d5a629a26",
          "length": 157,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6be1a01e-3b90-44dd-95ab-dc9b4511c7ad"
        },
        "item": {
          "id": "3a96cdb3-4548-4669-a421-b387b8898796",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "8c543d0f-5131-40e6-a68e-626aee1dedeb",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "e574012b-b883-45c5-b05e-9745f98b8eb0",
        "cursor": {
          "ref": "d3654cb5-d911-4506-9749-893b4b70e421",
          "length": 157,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7f4dd56d-d9ca-476f-8165-ff8662f9d221"
        },
        "item": {
          "id": "e574012b-b883-45c5-b05e-9745f98b8eb0",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b2f98437-31da-4985-96be-e3be85f09977",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "231efac1-2bea-4edc-921d-1d889bac9c58",
        "cursor": {
          "ref": "63d2b528-753b-4be4-b3f6-0ace8b8a7598",
          "length": 157,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "be5496f9-abc7-4ee0-8edb-680e300da01e"
        },
        "item": {
          "id": "231efac1-2bea-4edc-921d-1d889bac9c58",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "03589fe3-7fc5-4167-9283-f3ec066dc294",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "bd72fd93-c5a6-48c8-8585-df5c5a366b14",
        "cursor": {
          "ref": "ae3830c5-a3c0-495d-8c9d-f07fa9d721ad",
          "length": 157,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "48d7666c-1876-402b-aff5-4fac34cc6a7d"
        },
        "item": {
          "id": "bd72fd93-c5a6-48c8-8585-df5c5a366b14",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "85c6772c-6758-4ad6-b443-c3db123e2a01",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "18ecae03-f357-44bd-bb71-0c0033091f54",
        "cursor": {
          "ref": "b09cda4b-86b0-4be2-b25e-e2aab7bce041",
          "length": 157,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f9151676-5a3c-483e-b76c-0e05b10c25da"
        },
        "item": {
          "id": "18ecae03-f357-44bd-bb71-0c0033091f54",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d4dcf454-dbcc-4730-9551-d2fe8979230a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "4c7ce262-662c-47ed-bbf1-98f988e9126f",
        "cursor": {
          "ref": "a3a70adf-5e14-44f1-a188-2bc37dbbbeb8",
          "length": 157,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "dfc2293c-7463-4f4e-bae3-dc8a4be2d183"
        },
        "item": {
          "id": "4c7ce262-662c-47ed-bbf1-98f988e9126f",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "3985e426-ba39-40dc-8fef-5051bb4ec6cf",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "32aa3f19-a602-4899-87fa-c92a8ba77446",
        "cursor": {
          "ref": "24d6a8f7-62d2-47fb-a625-f9ec1966300a",
          "length": 157,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "31cd40a6-5105-4557-adfd-f526ec775ae8"
        },
        "item": {
          "id": "32aa3f19-a602-4899-87fa-c92a8ba77446",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "a9a94c8b-414a-4643-b412-b0b248b50aa3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "3a5fc28b-8948-4b83-b155-ad89cd61b916",
        "cursor": {
          "ref": "6c9c1b01-53da-447c-93c9-6338f2f4dcab",
          "length": 157,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6dd49745-cf2a-44d1-a1b0-1f5f97a3706f"
        },
        "item": {
          "id": "3a5fc28b-8948-4b83-b155-ad89cd61b916",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5422a5bf-46e8-4721-af83-dafb38447036",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "604a4b2b-2b3d-44b1-a6d1-d193589b11a4",
        "cursor": {
          "ref": "83a6f4bd-af94-4197-98ba-a326e7113e42",
          "length": 157,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f9e70a14-568b-4871-8b31-257dc7642c87"
        },
        "item": {
          "id": "604a4b2b-2b3d-44b1-a6d1-d193589b11a4",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "697e9775-5fd2-42ec-8836-7398c22074e7",
          "status": "Created",
          "code": 201,
          "responseTime": 41,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "f085bd67-6d4a-4d37-84ed-f2ee00257a93",
        "cursor": {
          "ref": "e8287212-0656-46bc-a6ce-af0ae56f6032",
          "length": 157,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "458c354b-e20e-4a82-9143-5c11a6267fd3"
        },
        "item": {
          "id": "f085bd67-6d4a-4d37-84ed-f2ee00257a93",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b9ff7c22-a612-4357-82d1-8309b031918c",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "cea465c8-7f27-4311-9cfb-09b9e8e79d58",
        "cursor": {
          "ref": "e69cda80-307a-4938-b4f3-54ed13bc06d0",
          "length": 157,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1a791612-2c35-488b-8428-dc93476e407a"
        },
        "item": {
          "id": "cea465c8-7f27-4311-9cfb-09b9e8e79d58",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "6c4625f9-9745-4ac1-b00b-dc98123e4d8f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "49b915b8-38ca-469a-83a4-6358d926f440",
        "cursor": {
          "ref": "333052bc-282d-4fa4-86c8-ecd0711de1d2",
          "length": 157,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3b21cf41-a7d0-45c1-b7fd-462505743904"
        },
        "item": {
          "id": "49b915b8-38ca-469a-83a4-6358d926f440",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3cddff17-a953-4255-ae29-d2a9f65c0d82",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "1430e6d8-aea7-48b7-980a-630a28111000",
        "cursor": {
          "ref": "62785058-bab9-4270-abbc-912de94bed90",
          "length": 157,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c6b391d3-1b42-49ec-aa39-03c2c45ebfdd"
        },
        "item": {
          "id": "1430e6d8-aea7-48b7-980a-630a28111000",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "7e369b1e-5ca8-4817-ae1f-9bf41a55ad68",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "5c74737b-f275-4b9a-bc6a-85b71f46250b",
        "cursor": {
          "ref": "e8afad2a-ce13-4064-81e1-97d86dc51fad",
          "length": 157,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "74bbf50f-f439-49c0-8eef-d13145df0d2b"
        },
        "item": {
          "id": "5c74737b-f275-4b9a-bc6a-85b71f46250b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2adfb9f1-cc07-44e3-a503-67538c462e28",
          "status": "Created",
          "code": 201,
          "responseTime": 41,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "718eab15-1158-460d-a46b-9a358abfb67e",
        "cursor": {
          "ref": "6c41ec23-615b-4b35-9c02-683582653069",
          "length": 157,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "0c28102c-9d1b-4afd-97dc-77cbb07f8da6"
        },
        "item": {
          "id": "718eab15-1158-460d-a46b-9a358abfb67e",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "be3110b1-5ed5-468b-9fa8-b50dc131771b",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "98aca23b-9c6c-4e1a-bc4e-e57abc9ae7c3",
        "cursor": {
          "ref": "b4e75eda-d16d-44b2-a3cc-bd04f96463e8",
          "length": 157,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "32f33ccc-ba1b-4343-a724-2a37efdc71dc"
        },
        "item": {
          "id": "98aca23b-9c6c-4e1a-bc4e-e57abc9ae7c3",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "9b8264c1-19cd-4698-b4a4-e7725775c3e7",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "fe8801a8-ff7a-4762-b223-cf22990a6cb8",
        "cursor": {
          "ref": "78c435a3-e6bb-4e1b-b6fd-e992461fe7e8",
          "length": 157,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1078a44f-e531-492a-b441-d5215f0bc29c"
        },
        "item": {
          "id": "fe8801a8-ff7a-4762-b223-cf22990a6cb8",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a45f1cc9-10bd-4530-9197-df3c109aaf28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "65f731c8-e5ca-45c6-a4ad-52a5d98a0314",
        "cursor": {
          "ref": "ca15d182-ad7b-4cd9-9bed-c14b0545d93b",
          "length": 157,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1e29d6a5-1b8e-4cb2-8dc9-42f5faaedd08"
        },
        "item": {
          "id": "65f731c8-e5ca-45c6-a4ad-52a5d98a0314",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "8fc32727-b8a9-40c1-a4a7-8fa860a12681",
          "status": "Created",
          "code": 201,
          "responseTime": 34,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "30bf9d68-5244-4017-9a10-3e3e03e3f5d5",
        "cursor": {
          "ref": "7c095805-2e15-4f57-9712-c96fb6eaa7bb",
          "length": 157,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c97b914d-b0b1-4321-943f-0d182c91dbca"
        },
        "item": {
          "id": "30bf9d68-5244-4017-9a10-3e3e03e3f5d5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "04a5214b-d598-496a-a15a-6123cb24a056",
          "status": "Created",
          "code": 201,
          "responseTime": 48,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal undefined",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal undefined\n   at Object.eval sandbox-script.js:3:42)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6dea9e0-60b1-4e70-a097-311f38d95793",
        "cursor": {
          "ref": "182cc756-c7eb-46c4-87bd-61870090ae7a",
          "length": 157,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "daec8200-d7fa-458b-99a7-5998cf78f32d"
        },
        "item": {
          "id": "f6dea9e0-60b1-4e70-a097-311f38d95793",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "3113b74a-87ba-492f-a9a9-f2305175cb1c",
          "status": "Created",
          "code": 201,
          "responseTime": 42,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df030cf-436b-4c0d-b15b-ce37b34ac19f",
        "cursor": {
          "ref": "66c30930-5e7f-47ea-aa1b-4813dea67814",
          "length": 157,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a645e3c3-8711-4e43-993b-7e5d10386d3d"
        },
        "item": {
          "id": "7df030cf-436b-4c0d-b15b-ce37b34ac19f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c9ced765-5c41-4a91-a36b-f8743b15a01c",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal undefined",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal undefined\n   at Object.eval sandbox-script.js:3:44)"
            }
          }
        ]
      },
      {
        "id": "cfa4e6df-276a-4eec-ba4e-be5d8517d4d0",
        "cursor": {
          "ref": "3a42ac07-3329-4d37-9bb5-5bd19740331f",
          "length": 157,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "754ff95b-36d8-4013-82fe-a4bae15c3b64"
        },
        "item": {
          "id": "cfa4e6df-276a-4eec-ba4e-be5d8517d4d0",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c94e88fe-80c5-47b8-a0f7-df32be60c5e3",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "828bafde-2fd2-4bab-8b60-572107f70dac",
        "cursor": {
          "ref": "c02e8bc0-319a-47b7-88aa-c4158d22acce",
          "length": 157,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "357b045a-2db7-4f5f-9f67-066232d4b863"
        },
        "item": {
          "id": "828bafde-2fd2-4bab-8b60-572107f70dac",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5a52ff22-c4ad-437e-ab53-ff5e4c018c0c",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cbe661f-173d-469b-a77b-6b5580f8225a",
        "cursor": {
          "ref": "7ba14bcf-d339-4977-8df9-5cbbbd02f8db",
          "length": 157,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e7687060-3ba9-4d65-969e-8cd4f49778a0"
        },
        "item": {
          "id": "0cbe661f-173d-469b-a77b-6b5580f8225a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "fb103dc6-6c68-4999-9aba-6fec9832a116",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5caaa8cd-37cc-4bc8-8b82-9c45bc5aa32f",
        "cursor": {
          "ref": "c381d174-bb64-4cc2-96e0-3b55a586a8e0",
          "length": 157,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e283dbb6-63d3-4b95-a1b4-eb007cfd702f"
        },
        "item": {
          "id": "5caaa8cd-37cc-4bc8-8b82-9c45bc5aa32f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ee54484a-f8fa-4cb3-addd-16d2393266d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "5caaa8cd-37cc-4bc8-8b82-9c45bc5aa32f",
        "cursor": {
          "ref": "c381d174-bb64-4cc2-96e0-3b55a586a8e0",
          "length": 157,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e283dbb6-63d3-4b95-a1b4-eb007cfd702f"
        },
        "item": {
          "id": "5caaa8cd-37cc-4bc8-8b82-9c45bc5aa32f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ee54484a-f8fa-4cb3-addd-16d2393266d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "58ceb5ad-f242-4b6c-88c7-9bb3c225f317",
        "cursor": {
          "ref": "04cb59dc-49ad-48f9-9efd-a4623a4724d4",
          "length": 157,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6da91d51-a59c-42ed-91a0-890e73ca95de"
        },
        "item": {
          "id": "58ceb5ad-f242-4b6c-88c7-9bb3c225f317",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "3a48b5fd-c3f4-4e2e-9a4b-c1651340a7da",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 12,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "545c914b-995c-4985-bd20-519e63f1ffa2",
        "cursor": {
          "ref": "84bb4c13-3ec1-45a3-b024-c2e0ff743690",
          "length": 157,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "dd12753d-37ad-4bb8-b51f-5c1d2c543014"
        },
        "item": {
          "id": "545c914b-995c-4985-bd20-519e63f1ffa2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a3c8f078-e135-4d10-b802-983ac3625cd5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "545c914b-995c-4985-bd20-519e63f1ffa2",
        "cursor": {
          "ref": "84bb4c13-3ec1-45a3-b024-c2e0ff743690",
          "length": 157,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "dd12753d-37ad-4bb8-b51f-5c1d2c543014"
        },
        "item": {
          "id": "545c914b-995c-4985-bd20-519e63f1ffa2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a3c8f078-e135-4d10-b802-983ac3625cd5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "ab931c7f-f533-4d92-89ba-a1a3091ada83",
        "cursor": {
          "ref": "40f58bce-5385-4718-8420-6b3b4e8e7b42",
          "length": 157,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c9b7c972-ab07-40e9-bc9f-6eca7260533f"
        },
        "item": {
          "id": "ab931c7f-f533-4d92-89ba-a1a3091ada83",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "295dbb3f-81be-4122-82e8-d61ae12fff0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 56
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "bf3d9cae-2fd3-4845-be2e-3286f78c0d41",
        "cursor": {
          "ref": "f9c7b333-04b5-4477-97d4-00e5559ac9e8",
          "length": 157,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e2fd177b-d2bf-4755-8d8a-8f73e26380ee"
        },
        "item": {
          "id": "bf3d9cae-2fd3-4845-be2e-3286f78c0d41",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "de5d1188-819c-4f10-9881-cbf9fea18aa3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 65
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "958eb50c-4de0-449f-ad33-01e6b75b8923",
        "cursor": {
          "ref": "53a87fa8-f821-40d1-9252-3fe18e27a58d",
          "length": 157,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0bb07a95-5c31-4d50-bf91-728cdb42114f"
        },
        "item": {
          "id": "958eb50c-4de0-449f-ad33-01e6b75b8923",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b1f6acbe-ec18-4fb1-aea1-2ea203a482db",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "1547c139-37d8-4400-aed5-8f968dffec54",
        "cursor": {
          "ref": "7a1fd740-ab70-4805-9148-d107d3fb916c",
          "length": 157,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d3e23d60-f62b-4857-b0bb-9e27fba32570"
        },
        "item": {
          "id": "1547c139-37d8-4400-aed5-8f968dffec54",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "41a5daf7-0359-4c82-a9d4-0a03d44d0b61",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "d2ca8b48-44e8-456c-9f8c-d3239c877536",
        "cursor": {
          "ref": "602eeba9-34c0-4247-a717-fa8c36990570",
          "length": 157,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0e5083f9-2faf-42ef-abb3-a17bc3d813ae"
        },
        "item": {
          "id": "d2ca8b48-44e8-456c-9f8c-d3239c877536",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cdc44686-3f2b-4bbb-b357-7647f39a83cf",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "9db5ee17-4b91-48e6-80af-f2495166c78b",
        "cursor": {
          "ref": "0e93e340-e7e9-4c6c-8891-38dd298b6617",
          "length": 157,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ff9db9be-d44a-4d92-a853-da99b1e355d2"
        },
        "item": {
          "id": "9db5ee17-4b91-48e6-80af-f2495166c78b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ec7d2507-4ec4-4c96-b3a6-128b80b34760",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "846356f6-c090-44a6-8f9d-5db18c4ef17f",
        "cursor": {
          "ref": "50333895-c833-4f4c-850a-0f1ffdd21687",
          "length": 157,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "005c2654-8181-4513-adbe-1eb380924607"
        },
        "item": {
          "id": "846356f6-c090-44a6-8f9d-5db18c4ef17f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "379af4b4-f2eb-4e11-8280-eb2f9d23f53c",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "9036b662-ef39-4519-9d2d-6422b3449799",
        "cursor": {
          "ref": "b5244685-f7c6-455b-bb45-d874a3e86094",
          "length": 157,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9d9f04af-263e-4f8e-a8ac-db4aba273060"
        },
        "item": {
          "id": "9036b662-ef39-4519-9d2d-6422b3449799",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "07c90689-ef5a-45b6-a98f-802eda09e5a6",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "5857555c-ec1d-4f73-bb4e-eb1c4b93d23a",
        "cursor": {
          "ref": "95af2f0f-2dfa-49e0-82ef-49e266ea071e",
          "length": 157,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "07e8aeac-5c72-4a9c-8294-fca0c5e1d158"
        },
        "item": {
          "id": "5857555c-ec1d-4f73-bb4e-eb1c4b93d23a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3cd84a54-2aba-4f0f-92f4-f4cf3c16c559",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "fe3731fa-6537-4e4e-87cc-b6d8f0169cf8",
        "cursor": {
          "ref": "c439d51c-db24-4f43-95b7-57888cd6aaa9",
          "length": 157,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "3fd006fc-4063-470c-84fd-15ff13d52c01"
        },
        "item": {
          "id": "fe3731fa-6537-4e4e-87cc-b6d8f0169cf8",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e003fee2-cddb-4a16-a023-18a08db18a49",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "f66e3570-50db-48e8-97c3-d84aff73578d",
        "cursor": {
          "ref": "06ff3055-fbe0-4a2d-929b-32c09e9bec8c",
          "length": 157,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7702fa00-1dde-433e-b9e3-b6661b755224"
        },
        "item": {
          "id": "f66e3570-50db-48e8-97c3-d84aff73578d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "807d8cc9-72bf-4a24-b423-670cee1dfed0",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "655607d0-e482-4869-a9f8-167704443f96",
        "cursor": {
          "ref": "9bc63d1b-3d99-4427-9806-40a3674dbdde",
          "length": 157,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "70678d1e-f521-445e-8227-298d93867606"
        },
        "item": {
          "id": "655607d0-e482-4869-a9f8-167704443f96",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "45c36bfb-0ca1-44da-801e-a25b65c68b1a",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "c786e264-5032-4e78-97ec-21e5658a32fe",
        "cursor": {
          "ref": "5ba3b732-7f02-4d08-bea7-e021af3599ff",
          "length": 157,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "76852471-2216-41f6-a9e0-eb382c12cccb"
        },
        "item": {
          "id": "c786e264-5032-4e78-97ec-21e5658a32fe",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "83c75a8a-d77b-4f48-a2e1-f29d0ec03561",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "21958396-7819-4c36-bd9c-1459ddfe2f8c",
        "cursor": {
          "ref": "f53adf65-3854-42d1-a3cd-888f1f544f60",
          "length": 157,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9af6c851-287a-43b0-8033-5917f46c07f5"
        },
        "item": {
          "id": "21958396-7819-4c36-bd9c-1459ddfe2f8c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "36f5ff8f-5993-4023-b0d0-784e0d6f097c",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "842fb39f-d7a7-4424-9026-4913f8b868bb",
        "cursor": {
          "ref": "72731cbe-0963-4e6b-ac8b-a75248ddcc40",
          "length": 157,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "03b989ab-59c2-4f7f-bed7-e93ff86bcc3e"
        },
        "item": {
          "id": "842fb39f-d7a7-4424-9026-4913f8b868bb",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "262e2f12-8519-4b91-b35c-36ce64408b2b",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "9906d0bf-5665-4d93-a933-8ba57851f4d1",
        "cursor": {
          "ref": "c93b2f2a-eada-451d-b43e-510873006c44",
          "length": 157,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "43d379ae-baef-4de4-b0e7-ecdf033bb375"
        },
        "item": {
          "id": "9906d0bf-5665-4d93-a933-8ba57851f4d1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9241e909-c478-4e1f-8974-47b5f9b126c5",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "fd325acb-28d8-4839-948a-13eacdf0a242",
        "cursor": {
          "ref": "1b50b71e-2f1c-42a5-8800-4a2dbdcfde29",
          "length": 157,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "662be0bb-619f-45e1-860d-5a981fc30c78"
        },
        "item": {
          "id": "fd325acb-28d8-4839-948a-13eacdf0a242",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "fd14d52e-c766-4690-aa6e-1d326711755f",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "3f7852bf-162c-4839-a166-c16cc93c98fd",
        "cursor": {
          "ref": "ea785890-f82c-4e7a-bffc-74e5f9317d61",
          "length": 157,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "98c50f7c-cb16-42b0-8c6d-c24bab1c9ed2"
        },
        "item": {
          "id": "3f7852bf-162c-4839-a166-c16cc93c98fd",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ae2c21f5-7eab-4cf7-9d8a-c5ec2ba1fea7",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "133c7e2e-df8b-4a6f-9269-bf9c71a9f0df",
        "cursor": {
          "ref": "e6f8b43a-c8b9-4c04-8272-5b2a178cf0fd",
          "length": 157,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "30891a47-eff7-42dd-8a83-46233243a08c"
        },
        "item": {
          "id": "133c7e2e-df8b-4a6f-9269-bf9c71a9f0df",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "bf75344f-c53a-45cd-8289-16acde961432",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "381ad8c3-0e32-4543-9555-706316ebaec4",
        "cursor": {
          "ref": "d4dab186-9c73-4e17-81dd-0983d7ded59c",
          "length": 157,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "444cb5de-a8dc-487c-b8e6-2edf6894d3af"
        },
        "item": {
          "id": "381ad8c3-0e32-4543-9555-706316ebaec4",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b5698d58-8fb1-4b27-a4fd-f030cbb65947",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "5f1a93f6-0af6-4c30-8646-9528952f7471",
        "cursor": {
          "ref": "2ef2aa37-1e0a-43d9-86f5-43fee21b45f7",
          "length": 157,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0729e6b2-c6af-464c-836b-26af63e198f2"
        },
        "item": {
          "id": "5f1a93f6-0af6-4c30-8646-9528952f7471",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b13e1de6-83dd-4cac-82c4-1575947b04a7",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "de246ad3-3334-468e-9bb5-d148dba32297",
        "cursor": {
          "ref": "3292436d-e0ed-4a7e-a19b-aabf3b0da401",
          "length": 157,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f68d0702-a702-4ce6-8211-1ccf582fd466"
        },
        "item": {
          "id": "de246ad3-3334-468e-9bb5-d148dba32297",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f6397783-c716-42e3-bd08-9971c1f336b5",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "20eb55a6-99fc-4a13-8c76-e3a1d224c582",
        "cursor": {
          "ref": "5915be7b-75f4-4558-856d-4f0278122533",
          "length": 157,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6880ed35-7f6f-445c-9493-b8c8e2c6ff08"
        },
        "item": {
          "id": "20eb55a6-99fc-4a13-8c76-e3a1d224c582",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "20b308aa-52bd-4a0e-a30c-b822169df28f",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "e8d59fd7-feae-4050-9cce-e8004ceb86e1",
        "cursor": {
          "ref": "2f47a432-7e0f-46bf-a757-adc4560d3cc1",
          "length": 157,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "afb90ae9-0277-4820-845c-37671062ee1e"
        },
        "item": {
          "id": "e8d59fd7-feae-4050-9cce-e8004ceb86e1",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "62cb14b2-d290-45f1-9bf5-c5a0833548f0",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "52b244f9-e942-4f44-a73a-e2c48a4b5d17",
        "cursor": {
          "ref": "d3cfe0ba-3961-4c64-be28-426f9830ad56",
          "length": 157,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f1ea8fd1-660f-440d-8f20-d1004d756c79"
        },
        "item": {
          "id": "52b244f9-e942-4f44-a73a-e2c48a4b5d17",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "53e61a29-f397-462c-8b9f-a43130d9e040",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "cdd65318-0d66-4d57-ab4f-b91b8aa4239f",
        "cursor": {
          "ref": "3291b69c-6af4-4e45-97a9-db508c76ec44",
          "length": 157,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b497ba8b-b442-4f1a-8786-2be384bd58cb"
        },
        "item": {
          "id": "cdd65318-0d66-4d57-ab4f-b91b8aa4239f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "faeeaf6e-d494-42b2-b6ec-3c9c05d9a05e",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "936b5835-bc18-4371-919e-cb5152cb5949",
        "cursor": {
          "ref": "10607417-ee42-4782-a846-d6d1561e5ca8",
          "length": 157,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "86dc5093-b200-4f42-abe0-f16eec18724d"
        },
        "item": {
          "id": "936b5835-bc18-4371-919e-cb5152cb5949",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b3b99a80-92f0-4262-b95c-ac313eef0d0d",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "8fcb05f7-0298-4a29-a9ca-b79622e31885",
        "cursor": {
          "ref": "8e16d622-9782-47db-bea1-35840581d851",
          "length": 157,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "8cae3493-3bd4-408d-8a2a-4d96801f8f37"
        },
        "item": {
          "id": "8fcb05f7-0298-4a29-a9ca-b79622e31885",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "04771480-61dd-44c9-913b-ec62887f94f1",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "56de5ebc-af7e-4b5f-b546-8e709fbb6e23",
        "cursor": {
          "ref": "70f85c17-1d79-4223-a2fe-4d516a879fbc",
          "length": 157,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "aab296f0-f9ca-4262-9beb-02a465a457de"
        },
        "item": {
          "id": "56de5ebc-af7e-4b5f-b546-8e709fbb6e23",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ffd65783-5ab8-4f76-b5f3-568c95b250a6",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "b464c63b-9f82-48a8-863b-a50320f9ac24",
        "cursor": {
          "ref": "8a3cd7c5-99b8-4b73-a1bd-67623a9fd5a7",
          "length": 157,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9e7d3baf-cbfb-470f-89cf-2ef68ae9ff91"
        },
        "item": {
          "id": "b464c63b-9f82-48a8-863b-a50320f9ac24",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f17992b4-d752-44e7-8878-8f390cbd21ea",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "7a34854e-e5cc-4db4-bae4-0d54ca7f58ad",
        "cursor": {
          "ref": "34b17b43-e975-44de-b1ba-9a055d259bce",
          "length": 157,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "80d5f43f-3321-4dcb-9971-429b3002943d"
        },
        "item": {
          "id": "7a34854e-e5cc-4db4-bae4-0d54ca7f58ad",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0291a7e9-e34c-4006-9b0f-762c23a81840",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "9734b2f7-8095-4ebf-b777-95591eb46c04",
        "cursor": {
          "ref": "27092cf0-ce0e-4068-be6f-96badb8a8dac",
          "length": 157,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1d7e76b3-ecff-4cf2-9d0f-194f078b1239"
        },
        "item": {
          "id": "9734b2f7-8095-4ebf-b777-95591eb46c04",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f82f82cf-73c1-40dc-ba8e-8325c5bd9b03",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "51575256-9c11-43f1-8406-4afad39037ef",
        "cursor": {
          "ref": "85d40274-52ba-4733-8521-26dc5bf41c47",
          "length": 157,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "6fe5fe77-2c1d-4fb3-873e-6cd74cb3446d"
        },
        "item": {
          "id": "51575256-9c11-43f1-8406-4afad39037ef",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "bbf99fb6-25a1-4c82-9cb0-a84efdb95eb6",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "01aff773-b3cb-41ad-9152-d1b3dab979a4",
        "cursor": {
          "ref": "1b350bc9-3f38-4564-8ef0-dc47bb85cf9d",
          "length": 157,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "3560319c-fe69-4402-b90a-963c751af425"
        },
        "item": {
          "id": "01aff773-b3cb-41ad-9152-d1b3dab979a4",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "590d2d40-da6c-41e3-aaad-6a22e1804a4f",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "de1692c6-1f54-4fd5-a9f8-6bc8303bdc76",
        "cursor": {
          "ref": "3cbfef34-e275-4148-bf9b-298f4903679e",
          "length": 157,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4e1cbc49-66d5-404b-a368-77ddb3a1d92a"
        },
        "item": {
          "id": "de1692c6-1f54-4fd5-a9f8-6bc8303bdc76",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "21abceca-f88b-4b98-a5e8-4ee6a63ebded",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "6223bdf4-c33b-43a1-803f-12e576ef05ab",
        "cursor": {
          "ref": "b96d160b-3b3c-4e95-aecd-ef5d0c3ff07a",
          "length": 157,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "cf83bfc3-2fba-4080-b8bc-7c8712303244"
        },
        "item": {
          "id": "6223bdf4-c33b-43a1-803f-12e576ef05ab",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b559fc1a-e81d-4e1a-aac4-4e9007848b57",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "a72afc59-10ef-423e-97c1-dbe22de4929b",
        "cursor": {
          "ref": "977622cb-3183-4d6b-acab-5bc50c2540ef",
          "length": 157,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "bf63f056-e7a9-4c87-9557-f51336a457a9"
        },
        "item": {
          "id": "a72afc59-10ef-423e-97c1-dbe22de4929b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "bb02fa04-8e7b-491d-bcaa-81e1fed78a7c",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "04052339-80bd-40f7-a5b5-7ca3afb69a61",
        "cursor": {
          "ref": "7edaaa24-d696-46d4-bf9a-a9b1ef299942",
          "length": 157,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "262bd120-d8f1-4155-8452-fcca7003016d"
        },
        "item": {
          "id": "04052339-80bd-40f7-a5b5-7ca3afb69a61",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b932ce7a-6da8-4952-b238-c969859c03a7",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "0d1988e1-a551-4394-93be-70b833876bf2",
        "cursor": {
          "ref": "85692152-3b1c-4c43-bdd2-63943e01725c",
          "length": 157,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0c6d4093-3a2d-4971-9a95-b3a662e448bc"
        },
        "item": {
          "id": "0d1988e1-a551-4394-93be-70b833876bf2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "46f2a934-8fa5-42c3-afdf-2e53f4d2d05b",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "6fec10df-36aa-4e7e-843e-eb34d54249e9",
        "cursor": {
          "ref": "c75ab504-d113-47a3-ab17-5c59d5f709bd",
          "length": 157,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b9f9e106-9bc9-4a17-bc89-0d3106eadb42"
        },
        "item": {
          "id": "6fec10df-36aa-4e7e-843e-eb34d54249e9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1bb2e137-f0d5-4f2c-bea8-11a68c3df43a",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "6a88b404-5bad-4432-b9bd-d8a699fd042b",
        "cursor": {
          "ref": "2012f44a-d556-4857-9811-6c8a78f281eb",
          "length": 157,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "02569b8f-939d-496c-a3d6-f095a6233c9c"
        },
        "item": {
          "id": "6a88b404-5bad-4432-b9bd-d8a699fd042b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b596e3ea-3224-47ad-ab02-1a4e1bf41f79",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "64878b33-bf56-4d80-af5b-7331c7332c49",
        "cursor": {
          "ref": "505fb046-37fa-4581-a944-d21b8277176d",
          "length": 157,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5acbaf16-9fe2-49f3-a4b9-d1ea564d277f"
        },
        "item": {
          "id": "64878b33-bf56-4d80-af5b-7331c7332c49",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6f52456f-1b4e-42e4-a8c9-e4b27f640963",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "b3bda17c-ba47-41d2-a26f-ed27bd15c50e",
        "cursor": {
          "ref": "ff109d1f-ab35-4442-98b2-a470dcf10740",
          "length": 157,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "2d8befdc-e3a5-4a4e-845a-639f4ed13673"
        },
        "item": {
          "id": "b3bda17c-ba47-41d2-a26f-ed27bd15c50e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "dab48669-e407-4d1a-80bb-b55fc2897a6e",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "9666d032-54d3-4393-bf90-5ed9e275d651",
        "cursor": {
          "ref": "96414692-0657-43b6-9c25-9d841c234fce",
          "length": 157,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d3125c00-1c09-4662-ac11-057614d27eb9"
        },
        "item": {
          "id": "9666d032-54d3-4393-bf90-5ed9e275d651",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "90b2897d-fa91-46fc-90ec-bfcc3fde27a2",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "902f5573-daa2-454f-83c5-50eed4f66373",
        "cursor": {
          "ref": "0524f076-fddd-41e8-b9e7-7f152b55fc0b",
          "length": 157,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3347eca9-287f-49ac-9aa2-6b9f55ad9863"
        },
        "item": {
          "id": "902f5573-daa2-454f-83c5-50eed4f66373",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6de05e75-1a8d-447f-aa22-9b1cbfc81f32",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "111ab0e5-e8a8-47de-93e5-2d0a6841e983",
        "cursor": {
          "ref": "675f1acd-c343-4eed-ab24-a08486bc85e6",
          "length": 157,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "eafb041e-133f-426e-82d7-1e544f658bca"
        },
        "item": {
          "id": "111ab0e5-e8a8-47de-93e5-2d0a6841e983",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c758435a-2922-4b7e-87e3-104b55d448b2",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "d6180a50-adad-4fc9-9559-8a844bec445b",
        "cursor": {
          "ref": "ae46b5d0-0eb9-4b48-8786-c2c46c64b3ec",
          "length": 157,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "557b8687-a9f4-4615-8ae8-5b3dece2b02c"
        },
        "item": {
          "id": "d6180a50-adad-4fc9-9559-8a844bec445b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d485fce8-7d8c-4602-97ec-1bc4cab2867c",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "67998979-1dcc-4917-b4b1-84345bd1fb2c",
        "cursor": {
          "ref": "c1bb9afc-63b8-4a15-bbae-6f34b4ac4149",
          "length": 157,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "03854908-5349-4361-a396-1a8242271ec8"
        },
        "item": {
          "id": "67998979-1dcc-4917-b4b1-84345bd1fb2c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f3463a1f-276f-4725-86e0-e68af07d855f",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "79870f4c-e457-419a-bf4e-d2c2d140e250",
        "cursor": {
          "ref": "70d535b4-c4ce-42f5-94a7-0dc29dc19156",
          "length": 157,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3cd6d580-4832-49f1-b6c2-579dcd543bcd"
        },
        "item": {
          "id": "79870f4c-e457-419a-bf4e-d2c2d140e250",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e975f655-2be5-491d-8b73-9a4437b18034",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "f6746ee4-85a1-4cb7-b47c-d22dc48c7dbe",
        "cursor": {
          "ref": "de05c579-6360-4993-9eba-20a419b1d8c7",
          "length": 157,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "cc0690ef-20d5-429d-a762-07e84d727b6f"
        },
        "item": {
          "id": "f6746ee4-85a1-4cb7-b47c-d22dc48c7dbe",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "25cfb7fe-417e-4bd7-9a7d-477d64d5ab90",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "96221123-36b6-487f-a22d-e4462f22b9a5",
        "cursor": {
          "ref": "6e9b5d26-7144-42dd-a48f-48ae9d1eda7a",
          "length": 157,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "27d1c794-ed7e-4245-bc85-b931eb6049fd"
        },
        "item": {
          "id": "96221123-36b6-487f-a22d-e4462f22b9a5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e11c0f9b-533f-4aee-8881-6f1677fbb35f",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "c2df33ea-410e-4668-b950-337f9d192809",
        "cursor": {
          "ref": "3181c6bd-2c46-4e11-b203-ffcb6bc7ea7c",
          "length": 157,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ded357c5-60f9-4194-b9b2-91bd53fd16c2"
        },
        "item": {
          "id": "c2df33ea-410e-4668-b950-337f9d192809",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "50443127-22fd-4b4c-bb03-a6ef6c12cbcd",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "2cef4205-25db-4b7b-aee8-54d507b73da6",
        "cursor": {
          "ref": "ba86a930-738c-4af7-b85e-b8cf968f3cc0",
          "length": 157,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "891bae82-9763-4458-bcb5-d36c3a45f31d"
        },
        "item": {
          "id": "2cef4205-25db-4b7b-aee8-54d507b73da6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b9ee109f-dadb-47c1-9d73-79c24310a12f",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "3dca87b6-cf4a-4193-936a-cf074b69fe75",
        "cursor": {
          "ref": "292ecca1-0d06-457b-8f9f-2d96acc844f7",
          "length": 157,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "63d37cd0-770b-4768-8b04-6a08e78894d1"
        },
        "item": {
          "id": "3dca87b6-cf4a-4193-936a-cf074b69fe75",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8b2b62e7-954c-4896-a13c-3ca9c284bdfc",
          "status": "OK",
          "code": 200,
          "responseTime": 28,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "6874aa23-4178-4903-af9c-2f904e42d601",
        "cursor": {
          "ref": "88c3adc4-5b91-40ce-a8a4-a63b6e9ac0ff",
          "length": 157,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "717349b8-0db4-4250-b08f-a6eb62e7ba2d"
        },
        "item": {
          "id": "6874aa23-4178-4903-af9c-2f904e42d601",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1549a17e-9024-4b51-aa20-187f09346868",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "86e1eddb-ccfe-432e-9167-c8c3828258ee",
        "cursor": {
          "ref": "614ded20-7039-41c7-98a1-3da83e22dc1c",
          "length": 157,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9b165cbd-1a07-4299-ab1b-6b6acc48ed81"
        },
        "item": {
          "id": "86e1eddb-ccfe-432e-9167-c8c3828258ee",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "7b19e730-1906-465e-aaff-02bc00286f28",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:106)"
            }
          }
        ]
      },
      {
        "id": "94ef077d-1179-4abd-bd03-0466d8e34059",
        "cursor": {
          "ref": "6daa8978-ef44-413f-a135-c43fb6878af7",
          "length": 157,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3cc3eb00-41f1-4391-bb7f-b0ef4446093b"
        },
        "item": {
          "id": "94ef077d-1179-4abd-bd03-0466d8e34059",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "78d0f6e2-a0ec-4ab0-809a-054bab15ca8b",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "b03acd34-78d0-471e-92bf-a66f64e2cea0",
        "cursor": {
          "ref": "64e5d11b-9ae6-43d0-9ae0-b29738661eaa",
          "length": 157,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "401459c5-3bb2-44c4-a5f1-fafadb3ed50a"
        },
        "item": {
          "id": "b03acd34-78d0-471e-92bf-a66f64e2cea0",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8462d2b3-5074-4bde-bc96-581834fa559f",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "f992b069-b50c-433d-bd3d-654e6ab7c831",
        "cursor": {
          "ref": "46d0dbd7-7c41-42b8-8caf-56e7aef4b292",
          "length": 157,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5030885a-5961-43d4-a4a0-487c6483b1a9"
        },
        "item": {
          "id": "f992b069-b50c-433d-bd3d-654e6ab7c831",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "59575531-1904-47eb-986a-096bf7aef339",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "8b92ddc7-6f09-4ae2-b3ac-4fbfeaeaa34e",
        "cursor": {
          "ref": "85985f33-ebf4-44f8-bde4-02643c4644eb",
          "length": 157,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "633c5dea-f24d-4dd7-b817-71a49190d5ab"
        },
        "item": {
          "id": "8b92ddc7-6f09-4ae2-b3ac-4fbfeaeaa34e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "13a02e9e-10ca-4cdd-aa77-b6890a6dffca",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "e199c1a0-e5f8-421b-913f-caa47945ee16",
        "cursor": {
          "ref": "63ca62e9-83d6-497e-9be3-61fc4400eb76",
          "length": 157,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a5fc7773-6f87-4ebb-8c83-6a4b1029220d"
        },
        "item": {
          "id": "e199c1a0-e5f8-421b-913f-caa47945ee16",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "88c0c06d-2b46-4989-8607-8d87bcd8b835",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "d61dee1f-05b5-4982-9ff2-dd3a86e8c00a",
        "cursor": {
          "ref": "09d1907b-f396-4bcf-bb2b-bb6e27f526b5",
          "length": 157,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "43a51298-a62c-4199-bfcb-519dc1561914"
        },
        "item": {
          "id": "d61dee1f-05b5-4982-9ff2-dd3a86e8c00a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6881fa5a-58cf-4570-b93e-9ea5d71754c0",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "18b65986-7444-4f94-ba46-d8ef4daec8af",
        "cursor": {
          "ref": "013e567b-dea1-4b77-9aa1-ccde9fd975a7",
          "length": 157,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "3274c32b-e395-4bcd-9e7c-8be885213f65"
        },
        "item": {
          "id": "18b65986-7444-4f94-ba46-d8ef4daec8af",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9196a82c-3dd3-4196-8a9b-20942d5af6a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 15,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "2ce1f181-aec0-43d0-aff6-18156ba5fa61",
        "cursor": {
          "ref": "473e8705-6aa6-4b2c-89d3-ffff6c4b150d",
          "length": 157,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "df4f02fd-9f01-4289-ab0e-6bf3045a218e"
        },
        "item": {
          "id": "2ce1f181-aec0-43d0-aff6-18156ba5fa61",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "bdd31114-9e16-44b0-85a2-022ad6cba07d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 21,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "42d18a69-393d-4123-aba6-7a72796e3eaf",
        "cursor": {
          "ref": "23ee46c2-21cc-4680-b6aa-cc77fdfa708e",
          "length": 157,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2cce734e-8103-40fd-a94b-a5465c71d63b"
        },
        "item": {
          "id": "42d18a69-393d-4123-aba6-7a72796e3eaf",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "764aa7a2-339a-46a5-a6b3-4dde6e6cca72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 14,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "42de123f-a0dc-4c37-8691-915ea49a975a",
        "cursor": {
          "ref": "df2e4906-2872-4e24-9b71-26161615e196",
          "length": 157,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0ae57a7c-f7f8-4044-94ee-80eb075811e3"
        },
        "item": {
          "id": "42de123f-a0dc-4c37-8691-915ea49a975a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "2d46d77b-d48e-4464-8a9f-3bba368e8161",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "53024ad2-c70c-4a4d-849d-c969059e3ecc",
        "cursor": {
          "ref": "957dbdc7-3aef-4f4e-861c-629a5a8915f9",
          "length": 157,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2eaf9e4b-c19c-4ee9-9864-7fec9b7717dd"
        },
        "item": {
          "id": "53024ad2-c70c-4a4d-849d-c969059e3ecc",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7271ae9d-ccfb-4a67-8156-536d880abad8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 14,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "b9922ab4-4984-4622-b24a-8dd722d228bc",
        "cursor": {
          "ref": "997d143e-eff8-4a07-a0f0-f9d17be69e6c",
          "length": 157,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1664f611-cc3c-4fb1-bcd1-452899ce9b51"
        },
        "item": {
          "id": "b9922ab4-4984-4622-b24a-8dd722d228bc",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "98446a14-55ec-4b8c-84a9-55654d633e47",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 19,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "7a6cabf1-f6e1-4349-aea3-36683c8d9472",
        "cursor": {
          "ref": "f5f03de3-65dc-4a4f-b157-27b8588d9ccb",
          "length": 157,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "11cb47ee-8ee4-4b47-bd9e-91768eafcd57"
        },
        "item": {
          "id": "7a6cabf1-f6e1-4349-aea3-36683c8d9472",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "78c16188-8f3d-4f19-8d74-a6f530ce895f",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "5dbeec1b-7c62-4c5b-8bcc-e792d1ea95c4",
        "cursor": {
          "ref": "1a037eec-8ad2-4ed2-9922-281bbacdeaff",
          "length": 157,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ed07e9d3-f35d-45cd-89d9-7fd57076ea55"
        },
        "item": {
          "id": "5dbeec1b-7c62-4c5b-8bcc-e792d1ea95c4",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d043332f-613b-44e1-82ed-c343a05b4008",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 16,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "f113bcb0-1364-4539-ad32-9ecbefa4564a",
        "cursor": {
          "ref": "b370fe4b-5aeb-427e-9cbf-8b085492cff2",
          "length": 157,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d06e53b4-27db-4faf-ab4a-a6207badfbb1"
        },
        "item": {
          "id": "f113bcb0-1364-4539-ad32-9ecbefa4564a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d6dcefe1-fb43-49f2-81d3-16bd59cf35b6",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "726f522d-efb8-4105-ad62-8cc0a427b67a",
        "cursor": {
          "ref": "9203a4a1-91ef-4be6-b92c-75d4b87f0db0",
          "length": 157,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "984a1cf8-fc2b-4017-a32d-31fac0143559"
        },
        "item": {
          "id": "726f522d-efb8-4105-ad62-8cc0a427b67a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "7e7d9866-ed19-4e60-9478-14fc969e5e14",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "e7465c22-336a-4607-87f6-9f187e8ef6d8",
        "cursor": {
          "ref": "d2746427-fe78-4953-b0a5-28d384db3a65",
          "length": 157,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c442b598-8861-4f58-9591-fe5ec381216a"
        },
        "item": {
          "id": "e7465c22-336a-4607-87f6-9f187e8ef6d8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c497d216-d5e6-484d-8bc6-6add06ab6cd9",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "b188de3c-f0f2-4784-8a8e-bf56d6537556",
        "cursor": {
          "ref": "e8aadb93-0158-4acd-a596-6d9659edad1c",
          "length": 157,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "23681be4-d467-4aa4-940d-f76ef707c4ff"
        },
        "item": {
          "id": "b188de3c-f0f2-4784-8a8e-bf56d6537556",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2ab9e121-d8d6-43ef-919d-e1d3efac9257",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "7239a0a4-4b6b-4a54-974d-de6f1da8abc1",
        "cursor": {
          "ref": "59f88ba0-e86b-4dc5-8442-1f1ceca908f8",
          "length": 157,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "eff3683c-fba7-4600-bd28-980552cca5fd"
        },
        "item": {
          "id": "7239a0a4-4b6b-4a54-974d-de6f1da8abc1",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b5c5c7ff-0bcf-480b-ba38-849257138126",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "83c67973-0ee5-4c1d-8804-d95211b0a7af",
        "cursor": {
          "ref": "48fae6c5-b883-4220-b7ba-3734fe63ab19",
          "length": 157,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8b598b38-6b41-47a9-9dbd-4491fd8240a9"
        },
        "item": {
          "id": "83c67973-0ee5-4c1d-8804-d95211b0a7af",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0d1d4e39-a8b1-4ab5-b8e5-359085916d35",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "d599bf0f-71d8-4427-9d2b-3998e6eeecb1",
        "cursor": {
          "ref": "7ef84d9f-4135-4ea5-ad32-ff525a41337a",
          "length": 157,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "dadf6b0c-da6a-49ba-b130-28097fcdc7f8"
        },
        "item": {
          "id": "d599bf0f-71d8-4427-9d2b-3998e6eeecb1",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c663d31f-7f3c-4f85-8c80-d5478cf76669",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "53619715-fd46-4fb2-b4c0-7987133f5360",
        "cursor": {
          "ref": "cd70716e-4dca-4d05-9cc7-ba7e2de4399b",
          "length": 157,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1f833616-dbad-4e96-a985-b17eb0595f78"
        },
        "item": {
          "id": "53619715-fd46-4fb2-b4c0-7987133f5360",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1df3d92f-3f29-4d38-92f0-7c9d05fc9563",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "eca4d5f2-1e19-4fa1-982d-f238571e6328",
        "cursor": {
          "ref": "a846a357-00f8-4ef5-aa13-2d7cfa31d4f4",
          "length": 157,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d9de1e7a-8779-4264-9b4e-b463d2d29431"
        },
        "item": {
          "id": "eca4d5f2-1e19-4fa1-982d-f238571e6328",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "47cf482a-0748-4093-a835-4b18aa9049c0",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "f26058a3-9231-4497-a9c3-94733fe67c95",
        "cursor": {
          "ref": "e4dcd9f5-68aa-48c3-b86b-f1615f23057d",
          "length": 157,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "51d394ea-1923-495e-a51f-280c74dcd895"
        },
        "item": {
          "id": "f26058a3-9231-4497-a9c3-94733fe67c95",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6d43a3a1-20a2-4025-a160-3001925ddd03",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "11881111-8c39-4ecb-8560-503987094bd6",
        "cursor": {
          "ref": "2366e1fd-1217-46bf-b423-cc0543971b07",
          "length": 157,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "578c1d77-bbbb-40ab-8114-431618f6a96b"
        },
        "item": {
          "id": "11881111-8c39-4ecb-8560-503987094bd6",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e8d7851d-5fc4-480f-b54e-426728b95c9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 19,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "01fd8d2c-9bae-4325-bee7-e749ccddd230",
        "cursor": {
          "ref": "ca0304a0-32f3-4712-bc8c-96c2e1550023",
          "length": 157,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "169cbb3a-48c9-4538-9cf6-18bc40c401fc"
        },
        "item": {
          "id": "01fd8d2c-9bae-4325-bee7-e749ccddd230",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "22978464-9e38-4fbe-833f-7f22e8d1ef55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "896cfdc0-4dcb-4aea-848a-d3f01519eafd",
        "cursor": {
          "ref": "b3375122-26d3-4e02-bc67-99ff6381aef9",
          "length": 157,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6ef9991d-c03e-466c-b42a-7d6eca99be6c"
        },
        "item": {
          "id": "896cfdc0-4dcb-4aea-848a-d3f01519eafd",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ad18066e-60fb-4dd2-822c-3d95a1e97b89",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 17,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "b0a82391-596e-491c-b996-d0cf3ab10a53",
        "cursor": {
          "ref": "ca086ac5-377a-4b02-8d19-9a5b03d05ce3",
          "length": 157,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e1b915ce-6162-4429-814b-494f054882fc"
        },
        "item": {
          "id": "b0a82391-596e-491c-b996-d0cf3ab10a53",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2ba7f2a9-b57a-4236-b8e9-e0a7222a00b3",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "2e5f5fcd-7d97-4098-9c9b-5e8fac349527",
        "cursor": {
          "ref": "dd9de3db-8456-4f85-bb5d-ec4c4b1940c4",
          "length": 157,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5fba7654-cacc-4004-834b-92935d7ecc96"
        },
        "item": {
          "id": "2e5f5fcd-7d97-4098-9c9b-5e8fac349527",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "327b1d65-e7ae-4f69-8166-8343c716f31d",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "caa3ded3-10f9-4b6b-b89b-6107bafacb55",
        "cursor": {
          "ref": "59afc9d3-082c-4133-a171-2cb4bdbdd6b7",
          "length": 157,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ffafcb2f-791f-4bb1-bd37-5e0aedadd5c4"
        },
        "item": {
          "id": "caa3ded3-10f9-4b6b-b89b-6107bafacb55",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a8dfc3f5-a9e4-492a-a1c1-8e81fc929314",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "0e0fbfa3-dc27-4ab7-8571-405c8b484db8",
        "cursor": {
          "ref": "865610de-ed7e-4373-8ab1-128f4bded010",
          "length": 157,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8314ab9f-6948-4569-94b1-5eed77124a02"
        },
        "item": {
          "id": "0e0fbfa3-dc27-4ab7-8571-405c8b484db8",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b442f5b6-1852-48e6-8a3c-c46a5fcc6c6b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "cf332535-0d40-4223-8d2c-70b0ab28a25f",
        "cursor": {
          "ref": "dda3e947-45b0-40b0-a53f-5c2dcb11e1f6",
          "length": 157,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e99b9664-1f1c-4f85-96a4-bd5fef2e83c1"
        },
        "item": {
          "id": "cf332535-0d40-4223-8d2c-70b0ab28a25f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "01c4b60e-7d68-4f06-9879-d7f31b8d3e2c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "90f2fc55-e89a-41f5-bddb-e1ed323b02f3",
        "cursor": {
          "ref": "9377f19f-680e-424d-830f-2cd9709f0b0d",
          "length": 157,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "050e9d60-d9b7-49d5-b383-d793a1530fff"
        },
        "item": {
          "id": "90f2fc55-e89a-41f5-bddb-e1ed323b02f3",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "fc79d810-679e-4608-b400-cee24a5413d8",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "141690ef-ec4e-434e-8dd7-2be5b322fc59",
        "cursor": {
          "ref": "a90d852b-c755-48a6-b8e1-8e23f73d349f",
          "length": 157,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d6ed72a6-2706-4ca5-b2fd-1d96d5c198cc"
        },
        "item": {
          "id": "141690ef-ec4e-434e-8dd7-2be5b322fc59",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f898084b-3e2e-4058-9a3b-15510fe95b8f",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "1fcbe5a2-b6af-49bf-b123-63c434621482",
        "cursor": {
          "ref": "c89debbc-8f6d-4a85-b52f-0e82768a2434",
          "length": 157,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ec5737d5-041f-4a9a-bfb7-bb40a46d8181"
        },
        "item": {
          "id": "1fcbe5a2-b6af-49bf-b123-63c434621482",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a008e3d1-335b-4bf3-a92b-d9231a3ad819",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 15,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "cd73a85c-06ca-4307-94d8-2dc0bc54b132",
        "cursor": {
          "ref": "b64b181e-bed9-4f2d-8c47-ff3e14545445",
          "length": 157,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3427cf8e-1410-4daa-8e2d-fe600a017616"
        },
        "item": {
          "id": "cd73a85c-06ca-4307-94d8-2dc0bc54b132",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "84509a67-92dd-4f2e-890d-d5ab10710017",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 16,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "d780e996-5222-4a0b-a81b-f9f135372a58",
        "cursor": {
          "ref": "39605acf-a368-4289-8e07-34abe941fe44",
          "length": 157,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "8357888f-7c30-4164-83ea-f65eb0ef9abc"
        },
        "item": {
          "id": "d780e996-5222-4a0b-a81b-f9f135372a58",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "28a382be-c413-4c52-bfdd-f4b3e325870f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 15,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "9c9497c6-23a4-4239-bfdd-df61bbec6bcc",
        "cursor": {
          "ref": "44674687-37cc-4ac7-b2cb-61d2cd198d8e",
          "length": 157,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4e3bf66f-2b1e-4600-a0a4-7fa64bc602af"
        },
        "item": {
          "id": "9c9497c6-23a4-4239-bfdd-df61bbec6bcc",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "71fa9c99-edc7-4ea1-8c2f-d4b694afa622",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "cfa6b255-1f4e-49a3-a834-096a98ed79d3",
        "cursor": {
          "ref": "f5fdb795-230b-45bf-ac64-5864d637aa2f",
          "length": 157,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "af8dc529-b3f8-45ee-b3d3-9d37a6066e50"
        },
        "item": {
          "id": "cfa6b255-1f4e-49a3-a834-096a98ed79d3",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1f0a42d6-40bb-429b-a6ae-2093b119bded",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "2f71b760-a9de-4219-9737-3d2271d95b24",
        "cursor": {
          "ref": "54fdc27c-4b5a-4227-ab69-84b9a5203dc8",
          "length": 157,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "fea093f0-c259-412e-a58c-83533561b385"
        },
        "item": {
          "id": "2f71b760-a9de-4219-9737-3d2271d95b24",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "85ba83cc-c494-4429-a813-b38d515cb58b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "6a8d7e7c-bea0-4f53-ab15-29bb50430c2e",
        "cursor": {
          "ref": "89b15781-819a-4535-a4b8-eb2b197b0207",
          "length": 157,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "7a42c1c5-f09d-40d5-a7bd-73520929a28d"
        },
        "item": {
          "id": "6a8d7e7c-bea0-4f53-ab15-29bb50430c2e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d6533a88-5305-483e-a2c3-386304460786",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "7da078a6-3746-4696-8621-4e2ae7f5fdbc",
        "cursor": {
          "ref": "19592573-5e6e-4f16-8b3a-1437b2851a30",
          "length": 157,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2f14aae9-df66-425c-9852-8160a6ebded1"
        },
        "item": {
          "id": "7da078a6-3746-4696-8621-4e2ae7f5fdbc",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "564da531-49bb-40d5-a074-197b762ef30b",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "66f59261-8ecd-4d45-95cf-e28332a23dc9",
        "cursor": {
          "ref": "74d80063-8cbe-45c5-a476-2e00c8848de1",
          "length": 157,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5b2c5215-b857-4626-8e03-a0877274b70f"
        },
        "item": {
          "id": "66f59261-8ecd-4d45-95cf-e28332a23dc9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "695ae6c1-917b-43a2-aef4-33651aaffb84",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e30a5143-8d8a-4641-933f-adb57c36bb01",
        "cursor": {
          "ref": "a6e22d74-91df-40ae-9244-0e964024bc6e",
          "length": 157,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "35482f18-9dad-43eb-bb21-62df3e47152d"
        },
        "item": {
          "id": "e30a5143-8d8a-4641-933f-adb57c36bb01",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "7f70f21e-345c-4d7b-b024-74c93b88d02c",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68694f3-0ebc-44f6-ae03-9e1f9bdbe1de",
        "cursor": {
          "ref": "4e03be45-db43-4f0a-bde9-d28c8982a519",
          "length": 157,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2a6c4b78-88af-45d6-8b52-956d03e2ad68"
        },
        "item": {
          "id": "f68694f3-0ebc-44f6-ae03-9e1f9bdbe1de",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1114e1bb-32db-4de4-9276-cac0d3eb0905",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d1a2d1-ec4b-4df6-80b2-d0a8750fd872",
        "cursor": {
          "ref": "f9799139-575e-4425-9efe-8991a4a362ab",
          "length": 157,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e1a399b7-7b51-45ff-9a61-eadbb7fecc78"
        },
        "item": {
          "id": "70d1a2d1-ec4b-4df6-80b2-d0a8750fd872",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "03fa9fce-8c70-4fb3-82c3-7f24ed2a78d9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 12,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "70d1a2d1-ec4b-4df6-80b2-d0a8750fd872",
        "cursor": {
          "ref": "f9799139-575e-4425-9efe-8991a4a362ab",
          "length": 157,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e1a399b7-7b51-45ff-9a61-eadbb7fecc78"
        },
        "item": {
          "id": "70d1a2d1-ec4b-4df6-80b2-d0a8750fd872",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "03fa9fce-8c70-4fb3-82c3-7f24ed2a78d9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 12,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "70d1a2d1-ec4b-4df6-80b2-d0a8750fd872",
        "cursor": {
          "ref": "f9799139-575e-4425-9efe-8991a4a362ab",
          "length": 157,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e1a399b7-7b51-45ff-9a61-eadbb7fecc78"
        },
        "item": {
          "id": "70d1a2d1-ec4b-4df6-80b2-d0a8750fd872",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "03fa9fce-8c70-4fb3-82c3-7f24ed2a78d9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 12,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "fe293333-0bb3-4c24-9775-ed0229d4d810",
        "cursor": {
          "ref": "03e3d837-b1bc-47c5-af0a-cc9f8d527daa",
          "length": 157,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6bf1512e-2aa7-4a34-a062-c1e1c76bed9c"
        },
        "item": {
          "id": "fe293333-0bb3-4c24-9775-ed0229d4d810",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "04b57c13-c89c-4951-8e24-9bf18d26abc1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 12,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "38d6609b-ca1a-4535-a02d-3a3c2107e699",
        "cursor": {
          "ref": "66f2066b-2062-4258-aff6-9cb3469609ad",
          "length": 157,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "50a2c8f3-41da-4639-9da7-80e763f1f687"
        },
        "item": {
          "id": "38d6609b-ca1a-4535-a02d-3a3c2107e699",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "28a9f179-113b-4e1d-b65c-d570bf1b115c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "38d6609b-ca1a-4535-a02d-3a3c2107e699",
        "cursor": {
          "ref": "66f2066b-2062-4258-aff6-9cb3469609ad",
          "length": 157,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "50a2c8f3-41da-4639-9da7-80e763f1f687"
        },
        "item": {
          "id": "38d6609b-ca1a-4535-a02d-3a3c2107e699",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "28a9f179-113b-4e1d-b65c-d570bf1b115c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "decee382-b7dd-4946-aff2-536e0268e9a5",
        "cursor": {
          "ref": "e9895d6b-315e-4161-abcc-83b4d5b7165d",
          "length": 157,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1897124d-8b41-4f08-9712-b20b2cd88666"
        },
        "item": {
          "id": "decee382-b7dd-4946-aff2-536e0268e9a5",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "533c1a17-3f4b-4eac-9465-e1c38d60108b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "74364c6d-142c-4829-aca7-db3939cf5f28",
        "cursor": {
          "ref": "52e1143f-d349-4ddb-8f47-36192c0fc868",
          "length": 157,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "168d283f-d03d-425e-914f-10c0b61b4c60"
        },
        "item": {
          "id": "74364c6d-142c-4829-aca7-db3939cf5f28",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b70cb26e-537a-4506-8772-705a7e2521e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "74364c6d-142c-4829-aca7-db3939cf5f28",
        "cursor": {
          "ref": "52e1143f-d349-4ddb-8f47-36192c0fc868",
          "length": 157,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "168d283f-d03d-425e-914f-10c0b61b4c60"
        },
        "item": {
          "id": "74364c6d-142c-4829-aca7-db3939cf5f28",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b70cb26e-537a-4506-8772-705a7e2521e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "b2818f1f-18cf-42a9-8414-20cd604290ca",
        "cursor": {
          "ref": "34cefc6e-3df3-4274-85f5-8e9c2dd0aea8",
          "length": 157,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "da1f0833-cc6e-4133-9027-37a22541227d"
        },
        "item": {
          "id": "b2818f1f-18cf-42a9-8414-20cd604290ca",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "74a5faaf-e4e3-4448-abbd-95631f3799d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 12,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      }
    ]
  }
}