{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "40ce51dc-8a0c-45bb-8dcd-2784e4863964",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6d19058d-a432-463b-b7a4-2bc02d296d61",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dac857e1-3c9f-467d-87df-da9170fedca8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3dd3a788-5697-467a-a1f8-515de25a4b06"
                }
              }
            ]
          },
          {
            "id": "155ab056-2dba-46f1-b3de-18fd1ef45856",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7f6f60cd-0c52-4db8-90dc-464b808291a3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7265e74d-6539-43a1-9057-1d0fee511aa5"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f125b7df-701a-431d-8549-b533c1c11c40",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "50ef9416-8c31-4233-a4ab-fb4cd42e7645",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ea591b4f-0c7b-429f-b146-cf65bef5e066",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3cf519d5-d4ba-4e84-b1fb-f2a3b1ce8ed9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2ff9f30b-dc14-40a1-905d-d82ff691f88a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8f8bd044-eaf9-452f-bcdc-0d7c1284c211",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b34bcba1-77a9-4cf0-ae34-cd4dd24745e4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "33a3334b-1a77-41b1-9673-4aca53875ae2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "336638d6-d46f-4169-ab3f-edbd7de50422"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f4c839f-70cc-401d-a03e-dd75232aaadd",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1ee808fb-e662-4c65-8861-03d8dc50d220"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f179190-1ed5-4301-bcdb-ea84e1578882",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f8515777-f3b7-4e4a-9ea3-ead1d20c4124"
            }
          }
        ]
      },
      {
        "id": "0673f112-2114-4a8d-b9b9-4b8dbc2246a5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2b41e552-ddfc-43a9-b734-de52f64d4d86",
            "name": "Negative Testing",
            "item": [
              {
                "id": "528ebfa5-3365-4129-b60d-45903cfe06fd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1fd60812-207d-47b2-9ab6-7933b55f9d51",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2328778d-6ade-484c-a188-43e6f0cbc91f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82c695e4-4d8f-4a9a-aa21-02218a511007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28afb369-5452-49c5-8d80-6553dbf2dd76",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9745ad-b866-4c0e-ba91-c7f5d8c0b2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2fc197f9-3796-40b8-ac37-284f031be048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d5083b2-27aa-41bb-ac85-80a83cacc549",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6fe1d10-4143-4d70-859f-340df3e9361b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a9ef4f5-71e3-44ed-a1ad-a6bd4fe00c31"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5a577e09-e118-42a1-ba3e-0fd905c3cf98",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4252d1e8-e96c-401f-af90-326661f4d22a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15d2d74-789b-49dc-87dd-b1135b7d5007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d079e9e-6e04-4f29-b001-ee32f88f1d8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938834e2-456c-4300-8e4f-8230b7428993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d3b8d19-8ceb-4634-a36c-a93c4aea1e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cabc07f-afef-4ae1-9653-9cd51ebd75c7",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b679ec-e794-459d-a487-e35c155e495f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc8dac0c-8b95-48e8-9be6-aef66c920e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb48de9-9dd5-4a32-babb-a31895079db6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "7168ab0d-ccfa-4b64-9253-34418653f4dd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e6a3c910-0468-45be-a86b-7ee0e9da428d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a85a57e0-ed7b-47a2-82c1-18818a34a998",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6321b65f-dd2d-4c42-80ed-c6144084d011",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "beacd51d-59ef-4afc-8837-e2dc83ae4b58"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "35a9662b-fc83-4832-a72e-8475c34b5a7b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "167b1d2b-ad3e-4d92-83a9-55e1a791b0f4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "90444ca1-8487-4d80-bb4d-6d73719a4645",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0929f1ae-2e72-4464-bcd2-eea250f7529c"
            }
          }
        ]
      },
      {
        "id": "c140a61d-d812-4fbf-aeca-38ad848a8996",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "157a5089-d922-4026-922a-455a7abc7297",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7cfdb621-3eab-4b40-aa87-5ed18529dacf",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9ff05314-4830-405b-b0e5-1097ef025308",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba56832-f3cb-456d-b0a9-f184502a9cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c29d5477-d5a2-4507-86cb-fd5d44da23fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e965262-94aa-4cf3-8179-73dbd64e9aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "998679c2-b0bd-4471-9180-5870cf677d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f886c1-2a4b-4550-83bc-94f07c8d0498",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8085b6ee-0eaa-4423-b9ca-7529bc84661d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "878f56bd-47ff-4665-931a-5e5f68772b9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f34bc1-8196-40b2-9141-a80f26e09e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad7ebc56-b95e-4a1d-95cb-9573a811493c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9efb268-aece-400a-815e-4acbbf49f31d",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c0696b-6d43-4345-9d1b-2f28871df67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc821fe1-16e3-4dd8-a3b6-3c031eae07cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f731af80-d0bc-4758-a840-93afcc6c5dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d42149e5-affa-4f02-8237-2bc9d921c8c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bca41f0-b760-403e-b3b5-355fa84a24ae",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3db526-c541-4ded-b3c0-99029bd7fd68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f105ef53-2caa-43e8-b550-3da9464ed55c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9929bb2-fd8a-4a82-bb96-900652d609f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f65e9ca-46ef-40e9-987a-6add4525571b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120cb5e4-4578-4aa9-afc4-e61fb308c758",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4319b21a-55e5-4014-9c1c-48fa3ca95cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5b7a7c8-2cb1-4969-8e20-677fe1ec32e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1980af-56b9-4405-b530-d85347422118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c3421c0-b855-429a-81bf-d267fafa8c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b4ab4b-9b3c-411e-8277-73e36bd8133a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "affa3137-6736-4ddd-bab0-57892101291b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e21252f8-770b-4b04-b9f1-c54ca833f992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412a9199-5560-4608-9ac5-16b01f435ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52c02df7-9052-4c5c-b531-d18fe03886d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad18095c-017d-4fc5-931e-369e77b0aae3",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327a8adc-694b-4b26-830d-26f2c7b800fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b4d29a6-c4fc-470b-b285-2023d26c750c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "396dc89c-c055-470b-a466-ea697710b3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14306d24-9cdd-498e-99e0-8907c97ac609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79491dea-8e96-44ba-ad7a-718f40080e09",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5b2841-80e7-4c54-b91e-636871bfc0f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8c594f6-d60e-414a-b9e4-872961aef8ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d984338-be28-41f0-9870-2926ce877012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d90f30b-a129-4e5e-bec8-af4c7e9d6b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c865ec-c825-49cb-86bc-9b1eae3ddfa7",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14027711-2036-42f9-93ef-d275df32e103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a14f787e-1814-49ba-94a2-95ba7d13eabb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c94e48-00eb-4408-b2f8-719e037a0889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "074bfa38-5f74-438c-9eb5-2debb8b779f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "accb1cf0-c403-4381-98a5-4238a9461bf3",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7bd2fd-bf13-4be3-ac34-0352aabc6a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6959af62-f3c4-4d47-9d1b-8e08b49c5379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25634227-d579-433c-acea-7230f30dedd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b0cb25b-7144-460b-8cf0-56672a9e8508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8adf9d40-0cca-4501-9632-6efb1b06a9ca",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "877f8708-5cc8-4dae-a4b6-d748044c36c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a65e7b5-bbef-4f1a-beec-4ced05b1eb1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3603e9be-0a11-4899-a797-e07e13f0652a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2316f26d-fafa-48b2-9814-66ed8561c28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e1f3238-187b-4c55-b4ec-7dfdf7e1d5af",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "994748be-7fa0-437f-bd30-3667d7e357ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38292ea4-eb5c-4a9b-a3fc-a0d9afe5fcb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7670adc-b149-4696-bdbe-3448481ebd4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1ef19a9-0641-4ac8-a223-ac6fffe41f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0b62fe-56b2-49d9-93ce-905ff48ba3b0",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8516826-9955-4d17-8998-cc8fa96a0306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8477f2c-dddc-4ec0-82bf-851ce15a5ab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5899a3d2-0ffd-4197-9fad-7aba64910dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40751abc-1ef1-4655-89ab-022a6b807e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9343dcd-4636-40b6-a9e3-4605c36b6689",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7cf4423-f161-42c8-8364-caeb8132affa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5576c0c9-2400-4db2-8ef8-05dd7ee4d705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "764bda06-bb1c-4499-81d1-ddbd80d9b19a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d49db12-8d5a-4405-99e4-0808218606f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2574dbfb-d2bb-42df-93ae-b2713847e5b8",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e64da40-fd35-4a2d-aa16-47ce70870689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9150d0ed-6c44-4ec8-ac73-b59974c3d4be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85cb25de-6ac3-49f7-a38e-c56024825d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02e86f0f-37c6-42b6-93be-8efc4ea99ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744c2ec3-8fb1-46be-a1b0-9cf726d34cca",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40430686-4b88-4677-9f6b-ca32ac366b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dde83e0-096b-49ea-8615-f01a7f53995b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2dd4c8-7b48-4570-b2ef-26b46388805d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aed37a95-d481-41cd-ac7d-d088ce669d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a05f72f-4b3d-403c-9139-0eed675b6722",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c9ce03-aeb5-4727-9787-372d61a7f86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57f262e9-7027-4280-a38d-f7b3ec6cb819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6abdea2-7a21-406b-ba84-a1f6af55ade6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e059153d-38f2-499a-b44c-616eff461b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e8aefd-6e48-4fa3-8b5b-3faf5d3aefe6",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6d45d7-8383-4bae-b8ac-d68b7d26c7aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "745acb1d-8c7e-4720-a679-6c6573b98ad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377c52f4-a20c-4572-bab3-77f4404572f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e80fcdb-0310-4cce-ae0b-0e4e7a060e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "792d7194-6e46-418b-a464-4734314f5f27",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d462f9f0-d850-49a9-9099-b5be4d8387c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74f15d77-1f70-40fd-a9ba-33ffe2f498ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6ba0a2-b83a-4304-9949-6b71cdbfbfcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa2c1c2f-ea21-4809-b184-fb52ec34b6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce0461e-1587-4fe9-92f5-fe77d6e96879",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d2c8284-bed0-4ba8-adf4-cb3d3cd2faa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8426c15d-a9c4-4cef-897b-0ff5e3b8fb7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa68dd2-fc24-49c0-9095-39574c357d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbf820b9-d9bd-41c4-ba9d-99ca0389ba99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ea5e9b-3231-4133-81bb-ca60e38483e8",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3bfaa9c-9b19-47ca-9b72-259fd7e332f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e377e527-181b-468c-ab33-2a5bdc0c159e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6909d1d-6956-46cf-8980-a4b59723918c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "92a51feb-8ed0-4707-801c-43b8cfaeccc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f137ccd7-ca7c-4308-bb91-6c3ea55c4fb6",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9213bca-67a8-4f75-9073-e5bf84fc9151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a017b026-f9b3-4569-b3ec-7a8510f33e7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72264ec3-e790-4a27-9179-392d91eb003c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f418284-5bcf-4a49-8a6c-48eb4fac0e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af3ba37c-9b22-402a-b575-6e79874a6e9d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4cf7b6-e7c7-4f30-a420-280a63de8dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f203e01-967a-4599-a2ed-382304bc4974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db02d8c3-6add-4dc7-8d4d-b5ddce96ff4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae91ede7-2992-44fc-a175-c64c4e18aa6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d03ade-5b99-4e82-b9fe-38847c40812d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fbf373c-b4d7-48e6-9b60-661d557a30ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a15d987-c555-4ab1-940f-d2400bdb8078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6074b7bc-34f3-4923-93c0-fdbfb960fa53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fba73892-9346-4e4e-9bee-72a490c27df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fde0190-085f-4b90-bb2b-2ececf866b9f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "879d1713-a07e-4230-8d5e-a6894b43b953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9e5df50-cdfb-49b0-8c74-1bf8465f0634"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e86297a4-7320-4f6a-afa4-9b0c37cde00f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "55fd2ab4-2396-4750-940a-00e6ab42ff24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12dceecd-fbc4-4079-b8f2-902c3259e724",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f23b668-3758-418e-ba1f-c4d961c6336c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57be6377-0dec-4dae-ab87-6520222a227c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb15a867-e8a0-4afe-a3e3-fc23af3815ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d89f7ed1-916f-457a-9773-96071c94a6e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e510c5c1-8c22-41c9-a93b-39b5f0e066e6",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f068ffd-60d5-4d07-b6b7-18508de0eb66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "097f865d-2144-4834-a343-751426614982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073a7b5e-e17a-48ce-8bdb-2645f24cd601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "efb1d5e1-77ce-4167-aba0-c5107cf4f1d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1238b7b7-2e71-4c1b-a6a5-5421aaedc2be",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad77ea87-5352-4881-b194-34c651bfcdef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ff94a52-83cf-448b-bc7f-1acfa0a6895a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341fff50-36df-436c-ab6c-22fb5ef92321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a49b1dce-cab6-42e5-a7be-347685183754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b2c48e-65e8-4bb0-83e5-72fe161994fb",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b98c1c-355b-45f9-ac4e-3b5b3bbb7ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36dfe9bb-f723-4b29-a636-d699630cb5d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f43f5c2-e9ae-4143-8e65-37f9f91c1248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "63274d4b-f0f8-4cc6-a075-491c6383bc2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc06232-98a8-40be-bcac-177c8b9720ef",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d306dd8b-88cb-4736-a37f-07d19a9357b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a24b77a3-5b5d-4d12-8aa5-52829f9d4897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c67018f-831a-44a6-abd9-df226a40fc4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c9a1a2-9afa-46c7-8966-a0fa6707890c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16451a6e-0370-46e6-82d9-46bd1e1cdd65",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb597162-7fd8-4e2b-ae35-5e739eb2c577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d17d8ac-ae24-4e59-89f1-665280d9172f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e105a390-d9d6-4c07-9ea3-e8fbcc294386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed8b5294-edcc-4a99-a88c-ac52f4887401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20ca11c2-774e-4793-88ae-2d4f05f3dd8e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23707a20-80ec-49d5-a8c1-5ed64bb97651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66a98446-2aca-44bd-be03-0dd45c301ccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc6af7e-6d25-4f10-a012-fc169e015d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e811f87-ddd2-4f7f-a1e2-5aad7c275822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abec368c-58e0-476d-9013-a18f7bd3926f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f00f438-835e-4275-86ec-dde2394ee245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b5b5f1f-931f-435e-9c11-c4398371bbfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd687cda-5bd7-4f90-b397-2c44e635e648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a543f7e2-e80a-4a1d-8148-5d9fa056d917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b302ab-0367-4407-9a9b-7cdb4497fe33",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b01c42b2-fcfb-43c3-9394-2dfde86ef8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1582fb5-6c1e-4409-ab06-e5b0278b4ec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1abd2940-c5bd-4d2c-ade9-16fb52e98a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d2fef1e-31c3-4e6f-ab7a-3216b5fbe4c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e59676-c431-4a1b-80e8-b1da3d9a9998",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b476d6f5-b899-4fb6-b96c-8d97a34007ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ed87213-8979-45ba-951f-4413fc6942e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e5a034-958c-492c-aaee-90b78ff26dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2be39c5d-4e48-4701-b7df-5356d58128d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b777975-be71-4379-b322-369b1ba394ed",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380753d5-735f-4478-912f-a84c299b6b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05d24ad9-c032-43a3-8a41-84a066293d05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653085f5-e843-4f5e-8704-d24347e71ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ee654c0-ba98-4036-82f3-b33be51a030c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a81e150-21be-423b-a8c0-e364788dc86b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0e2186-c80b-4402-8f61-055b49aba008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60fdcf8c-153f-4129-ad5c-8c13335c1297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33460216-e0b5-4d21-b517-8a97705dfe2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "95fcf042-d4a5-428f-ae81-874386aa48d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "985a2cb5-8d46-424f-ac96-369ab380d592",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c255a2-e4a9-426a-b478-e2605aa7f1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b1da5a3-e71c-43ed-bb02-8d7ccf381ac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56878aae-2816-44fb-b6e4-8b492a18e188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f6275bd9-b71f-4337-ab44-ab2c8b509b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9103ed8-63ff-4ade-8c0e-bf942f90ced2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baab81a6-2cd8-4c76-8496-12d214753d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5552577d-3ece-4d62-b416-7445b9029d12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00168289-c4ac-440f-966c-99541d849c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ce5ea73-afd1-4e7b-8de0-5ae4bb0561f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f03dac2-57e9-4a45-a883-55649286bee0",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83343660-7ca0-44f7-995b-6273d7c9776e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c6e72a6-0130-488e-b70d-04fae254af32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df200b97-e6cd-40c6-9417-9b9ce2ecd053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f7890bb-d2dc-41ea-a527-fa44843053b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd7a21d-30be-4cfa-bbcb-1510b69f648f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b5c4c6f-0ca8-460e-9888-d3135d6a62ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "036c2b01-0529-4f66-b261-346173e846b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f98cb6-d730-441d-a2e4-5960b02bed2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f37f4118-5d7f-4849-ab2e-167bfde4047b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa85b866-49cd-4786-bfbd-0601c22a505d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8e144f-f773-4599-adb7-c573b758cbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3768ab0-1e52-4ca8-8158-7f72eb0aa796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a996aa-b032-43df-9684-3ae518839580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6245773c-6962-4d0f-8199-777e91a7505e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b32122-20f9-4eb0-8f24-7df2d0d245f5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d6dba0-e0a8-484b-ba50-f50e99182807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78ed30bf-7c08-4f95-b820-4c7a870cb1e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "197921ff-23c7-4584-b318-c693c6146cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea685a0a-ed1d-4f69-98b1-9dd4c2fb0052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096cb959-e20f-43e6-8e39-6540c3efcb18",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07907a56-50a2-4b82-a09a-bd39565753e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96f8a4f2-e523-4c20-b5d3-80808abf4ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3f5ee61-a3ee-4bdb-9a7a-56bf47c6ff91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "59bfe5f4-4a05-4710-aab4-18d7f3b98606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff64bcd-2613-47e2-9ad9-153514678d6a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "918e19b2-eb35-48e4-b739-7660434b53d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa46ce9d-c3c9-4261-86b9-63c16923e249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61325ce8-2869-4526-a868-5c06fd34a5ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc1e5be-0a6a-4d8e-8023-f473be70e80a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ce097e-0786-4372-8fc8-e03f512dbaa5",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2943f4c-277b-4b36-8892-7bab34cae722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b640121c-04a6-49bc-b9c1-77d141518902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ef3dd7-4b56-4d8e-bfa6-a3a52f538185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2dd0026a-104c-40cf-837f-7eee5dd443c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7756954e-d68a-44a6-a51a-c9a6e00f5f7d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5f5763-4252-4084-84f7-9b6a814998ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "025edf8d-0700-45d2-bfdf-74a2ae13a0de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baab45d0-80c1-43dd-bb46-17e9f29d3c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6420a394-21f8-4a9d-b622-4cbe0a0a9151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a6cd4f0-df7a-4fd1-9837-0cefd733834c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb58398-6023-4b2d-a06c-de4422e4cbcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93958501-5373-48ec-b253-d8455254b386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b4b042-b1db-4bf8-965d-e9d50a432da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b936021-8fd5-4c37-8eb7-46d57bc346db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028c8834-8fc0-4507-9bba-7e552c1f2eef",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "014922dd-1938-448f-9867-02ae91a99169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c579d8c-c589-4f4e-aac3-00d8f4766bdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df480cc5-c31b-4d82-ad32-6a5a2a22ada2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13df3683-f1e4-455a-b432-c91f8659bf32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681e8b8a-4c1a-40dc-a1b7-e5daf19ff6ad",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c91e174-673d-4804-9c6b-2ef948cfd495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7284b085-5b96-437b-a005-933a5591260e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eef89f3-1396-4a3d-a947-1d57c7385b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa8cc9d6-481c-48d4-b0e6-23989c6bb553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58175cc2-8eeb-4c06-86d5-6ed84221cd69",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f26626-d165-4b58-ae9b-412f5fd7dc99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e21a4030-d7a5-4281-8ce9-b1d98a5bcb2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f7eafc-5603-46a5-b48d-5c12f04f2561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2111007a-552c-4ed0-b19d-301f260f1d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb434139-bdd8-4a1c-b473-35fa0ab8db5d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "450986f3-75f8-4ec9-8a77-4700114ce5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed567e0-ab3a-4d5d-85f3-a030371bf96f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a64a68-0035-434c-b1db-25d6ddbe1e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "95b99c76-d0e3-4488-bf78-5324397c17c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978eccbe-b08a-4077-858a-87dda3ca3f34",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0227a93a-03dc-4ebd-a781-96e7bee41012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07c5464d-d37d-47f7-9554-6597a0414828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05bf073-1905-4d61-b4e7-e9045270c0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b4919d1-5b92-4b7e-9c10-f29f832e0bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06adba5f-fe1e-4c63-80d8-3399ca1d989b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb317919-6629-4bac-aec1-2b2715da1a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed9242b-fdbf-4b88-9ac9-51b04dd4ef4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d80aa55f-9c52-41f2-8e65-982dd053e2b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3fa70ad-f0cb-4dab-8671-55d3109cd4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab4945d-4651-465c-85cf-d366673fff3c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a3465e4-3296-40a5-a7fd-356897b130d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72c9107c-12bb-4a82-a2d0-11a16c90ff0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f1b47f-15aa-409d-b04a-ac02f9374f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ce62b81-f771-49cc-8dc7-0d3c1c4fe4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff392c79-78cb-44f3-bb27-53040e136fa2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d22a470-5a0c-4dcd-88e4-f982ea92f674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca8c1c09-a052-4e2e-a91c-0a481f07a931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ec931a-9275-4aa7-8366-2981b2c28ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "414a2db5-b1dd-4328-801a-aa5b1731c5c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afabe96f-d286-4de1-af54-c484d9b4001f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f0ae77-0ccc-44bc-9bbf-7039a759e8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89010052-8777-410f-b223-5f90fbb0b11f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e753dba8-0bd5-44e3-9eab-ceb4a676038a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b2726f2-5ac0-4505-8912-175abc13e6e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807a1e04-9663-4cfa-8797-85e13c034f59",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2729e2a-5988-41f7-b2da-43ae28f799c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6e5c4c1-286f-4d20-8e02-f6daf7b6e58d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c842cdf5-bf43-48a1-8934-4069255bb676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8d2485ce-81a2-416e-9ab6-2b336514342e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c17d8235-71d6-4682-bdc3-375c32a2fb84",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c77671d-0834-4c4c-b3eb-df0803918853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd4585c7-4208-4442-bb6e-a86e49f8e24c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6635f840-887a-4ffb-be54-58537b1f0fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c974f48-cf26-4390-9d84-deea30a7d9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b94f53a-a11f-4425-96c8-d3270f8ac1af",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d66ed2-cd88-469e-bc21-f3dbe6bdd5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1481ab3-f8d0-4654-ac11-64c15319ca0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b61e71-53ef-43ae-abb2-1dcf8abde583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e98ab25-2141-494c-a33e-7940c0df3197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d341085-f6a9-4662-9e2c-30772c83af53",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd733a3-267f-44e3-9b53-844439150ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44aa4074-7c64-40c3-8fd6-b1fc8f12a43d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae91c430-e8c9-46d2-8e5d-38105b931f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a70de2eb-99b5-4bad-838d-599dce3df427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "095720ca-3429-462d-83f0-343bb4bf4522",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e770f47b-642f-4aa9-b95f-c8712ffb3f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae5350e1-6414-4777-9358-7d4ca9fb5739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94f01d2-7708-4fd6-ba74-04d336578b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1ff70ea-abcf-4ea2-88f9-6db0122f1925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c750dcb8-0d45-4a45-94ee-9cda02bef2ee",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d75937a-0977-4a48-abc4-088d9dcf3a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "841bfdcb-ef87-42ba-93a3-8a3f05c169e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc553711-b891-4342-a1f2-4b44e31c50a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e329272-6400-4231-950d-2e849a0704dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7330fd6-bae3-49c1-97ca-2dbbc2fc496b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69245fca-4c4b-430c-a103-b8c4df79a31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52390e41-729c-472b-83b3-34cbfe4e5614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9173814b-d9aa-4762-9c6a-a3648501a3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c51d46a-3713-4844-8ff3-7227ec63b84c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3bed23-8c21-44df-b837-1efa877ef58c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcddb861-b337-4ec3-8217-3803dfb0c145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d71d6b9d-d33a-4913-b8b0-eeaf35c42def"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b3cc9b-239a-45e4-8ac0-47d5a28af2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f532e083-072d-4fa6-bf8a-d062e442601a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b224e8-54ee-4d21-b079-8592ed5c95c7",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b108f76-df78-4591-91dc-01e32fa93460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "815d8caf-5b79-4a0a-ad0f-9b558df5fdc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3780eed5-83a7-478b-a2b9-fcb4e8ace5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b97fd16-4470-43c1-b1b1-441641e4d040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa8f051-1cdb-4bcb-a794-ad0eb8f762ba",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af33dc25-0f0f-42c9-958d-f5834244f27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0212a12d-cf81-4622-a364-8654bdd85b3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f2a2bc9-cafa-4241-a0d7-3e04c7d7f513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "adc061fa-c08f-4c69-991b-411d8f24e6b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "821903ec-685c-4a7c-af01-b56eba03df61",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b1358f-750e-4881-b739-4703775db52a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfcdc7a7-f4c8-4643-8841-dd23783c56ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45be561c-bc36-4b60-bcdc-f465398c4586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "187b3aaa-a571-4de1-a00b-df8fc2af11c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "248e3d45-cec3-4168-a0b0-350090cdc3a3",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4322347a-d528-4b68-b53b-a2b955d331c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcce96a9-2033-417d-acb6-085c3b72ffbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcaa917d-35f1-4838-aafe-0cd2470970ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "caa99d8a-944f-4446-b0f8-37ae16555c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9fa9645-7539-4acd-a7da-be5b8e77dfb5",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00cc9a28-0cf1-4681-8729-d918d9d0d0e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55df4745-bdbd-4aa3-b102-f484ecde2cb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e8ad77-b00d-4b84-8f24-1fc27a6af229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8a2cb73-388a-436f-ad9f-4e1e46b94d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d22bd9b-0cec-4484-8410-080cd9468626",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb762cb-ace3-4a9b-b3f8-ce554deb1ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41803a41-4190-44c0-a90e-afa2ece13488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9feea39-6e07-4046-be24-4a4509ef42dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fe926f7-a74e-470c-bb3d-211712535c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521192e6-e263-4ac6-bf85-9c11a7e29aca",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f132ce3e-16f3-4d2f-9766-c43efe806a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da56ffe1-531d-441e-9ebf-6e92c833c903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc15b1d5-4f99-4672-864d-68753a5a959d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb4f85ac-2f99-45bb-8789-8b68aa5bfc3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7dd972-a3a9-4756-905b-1410d179c57a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91285603-4837-431d-a954-38cbb02725bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9b22c48-4ae4-44ef-a14c-2ff4f8d8adb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb0a5a2-25f8-4d70-8b65-b5d36233b8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5817595-5dbe-4868-b862-11dccf086e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cbf70e2-d768-4855-9155-024f2316ebd8",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d30090f-9b3a-4a37-8f6c-a3ccf3a05f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eec74e55-efe4-4ae7-8e28-67236d8b53e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b876daf-cb2c-4c25-a87b-dc2256d42b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "050b01c5-666b-47af-b637-84a1c413e0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989e4ddb-8d13-4ee5-8a5a-b739e139178f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "524b0156-e3a6-4511-9a66-4d5b28b66dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c57e203-60d5-4242-b117-995fd25cb1f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2d644c-ef1b-4ee1-afe6-9be46559e0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "04b8347e-08e4-4a01-9bd4-b2e0c183b08f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "659608b0-cd08-4e6f-8008-63826a990eef",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4e79cf-e454-4a91-b419-6a54e172cd4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa67998a-bead-4c09-89bf-a816fe386b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae78266e-d013-4a3a-b938-25dba67f5b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a3183266-335a-4126-ad7f-7bd24b5a1194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eefbd6ea-e71e-47b8-b529-b8e635fd9c89",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5efbe197-3c79-4ab1-a37c-fe361e82a634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "198e3092-2449-465e-b808-e62e3a9d4514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25bc3c2c-7383-4d87-885a-ed7f4dfe650b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c97ba10-dc9f-43a4-bc8d-4e55fe527e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9fcf34-edd4-48f8-b732-751497c36041",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b14db78-b575-4419-95d2-a1616594614c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecfed513-be92-4f85-8757-56c7d80413a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e571b9a9-54a8-4e06-a95a-437a1eb7a492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a429db1-4a59-43db-8e01-ddc9212b86b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0936206f-6c11-4a25-bf7f-aca3d1345b72",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e771e0-ba54-4e00-9147-1b1741cb05fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "284480ec-76c2-47c2-9045-87e06fa0901d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b589dd4a-cd37-45a8-b41d-57f8be1f7d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b19191fc-f2b5-4bb7-96ef-997b956bfb9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca25c6c-dd2a-4ba5-b560-4bc176cc9e91",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ad7094-681c-438e-b84f-3f21d13defe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d651f8eb-da60-4468-a43c-dd9bdb2c1e69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19be48d7-632f-4e0e-955e-e929f73bcb72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bddc419f-6d02-401b-bc69-2b9995b28183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315d1378-80c7-4c09-a067-253bd41b7b1e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba55200d-386c-4e8e-a1ab-9390e373ccab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aca43c56-f0b0-4743-a110-54b1373a7952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855a103f-fc96-436c-b5a2-8b06b4802e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc910746-d8c5-49f4-89ef-d5e6a47313f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ab1b48-d8e8-431f-8222-18bac6379fa8",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d19a2e-9e74-4207-909d-ead85be926a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be01466f-ecaa-4532-8317-f2edb7ba36bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b590ed14-37bd-41eb-b27e-022e9d3fa42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "af8adf48-da51-43ba-b7ab-cd8fbbe27cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8cfc6c-77be-4d42-8891-c7df873cc010",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e9b1fe6-f977-42cc-8575-bbd56358af34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66718bb7-7565-499b-b736-9741c44d360a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587dde7f-1ff2-4690-b3ff-2b83fa0d749c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c759ab6-c222-4f98-aaf8-03c1f9bc0b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b36206a8-9e89-48ea-949b-d7c32ae5c10a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6ef069-cd70-4961-ad40-8f7b150a772d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8923d156-96aa-446b-ac2a-1cfa1f88be60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c83511-5dfd-4186-a1de-27cedaf85ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ada11706-5dd0-49ec-99c5-b09d1692241c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce8d6bc-3383-4895-a663-f338d2abff07",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a345d5-84ca-42b9-b8fa-4897cd25a26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bec78c13-c913-44f8-9f70-4a93a233ff08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98cd779a-ff3d-40b3-963e-ade2828655c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4477281-5da4-48cc-8684-e55a35381f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b9fb8d4-42b4-418d-9a0c-8e08c27a3033",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aeec0b1-02c4-4ffe-92e8-9e6c25fd47c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "319f1d10-85cb-4008-8ec4-80ddcc78b3df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd9a891f-69a0-4a38-8fc4-b7f7d2adac0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8fd4767-a6e8-4507-88b1-e88aa176e8d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f17f06-b791-408e-900d-c3850469ef6a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63ada81-5629-46a8-ba5f-7ea929880d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aa491c0-726d-4754-a2e7-2bb57abab49d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa221519-fd5d-4652-af91-3e81c14c8234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4d3490c0-1183-4cd1-8c8b-2e0b82f6eca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717b9b3c-fe1a-4b24-abc7-d4a9c1e823e5",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5f202d-5f39-41cd-8e3c-61bba441d008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88506c99-2e51-40a2-8ff2-4247b85eed98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b25567a-effd-4224-9e98-3fed6c19c3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5393e03-3e48-45bb-8827-f1f73ee02f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4d5ab2-f33a-49f4-b4fe-e21259196cd7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecbe3fd6-100d-481e-aafc-60476a40a022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d321d06f-97e2-461d-86fa-de7cdf518244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7e42b6-70ec-4ec1-8d9f-c93768bb0827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fdefe91-94dc-4a1a-8e71-63fb87b05210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d9664e-2190-4547-8233-c9d10b5c2da8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "550c9674-5b4c-4811-a30a-dbe81331fd4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "900e319b-e001-4e7f-9a7e-3690780ea852"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd008eea-5449-4708-b890-b242ad76ebe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc248fe2-b92d-43e7-9570-f32e1b7c6287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe24377e-1971-4f3a-aff5-be2fb6727cf2",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d9a26e-8af4-40ca-a84f-fbe4938d4599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8758dd8d-2e1a-48fe-b709-ee5fc335196f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2d9832-6be7-4dcf-b6d7-1d81c0486a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "237cead2-6dda-421f-ae6a-92b533d3e87d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc7d07c-6eeb-49ed-b6b4-cc8d9f5c4c62",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4171b6-9de4-4484-a430-424bca5319d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c38203e-8b5a-4f18-abb8-78659cd2a869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae285b9-81c7-4890-97db-f888d3cd90f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "325fdd81-24e1-4156-9774-e978789e29a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "808c5c6a-e518-449f-9946-e721de063133",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3374a841-ad89-48a4-8e13-5d49f2fdc3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3edcafb7-7f91-4b96-9ca5-60993e80f3d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe11f99-8720-4ffc-8dc5-1afa451c4d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "46405878-072e-461e-8eeb-c4e1eaeb3b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "248022af-68f9-48f3-bb4c-b13a956d161f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "597eb3cc-3b36-4b9b-b875-182d11520699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "19adcc1f-865a-4ef5-b612-22000e72c8fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb33151-fedf-4337-a490-f4e49d929e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f60253ee-f042-4640-a667-f7756bc5b939"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6a5fdc96-6e4c-4b05-b9e8-db71a1aa55e8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ab64b91d-64de-4f85-83a0-73760191c3fe",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea408469-55cf-470e-9f3c-82d6047145e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f534eae-4f06-4235-b536-a573ec90adbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e7c359-4e52-4b7c-a144-8cf173d872ad",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "5889e408-202c-40ed-911d-9be72301cdf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c726bb-e5ec-45ba-bb68-519a7d7b24d0",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb92c72-008b-4cdf-a2bc-92163c3e4f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c0afec4-34db-4561-957c-b72b1fc51849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73065d1e-fc5a-4187-a120-429cffb153ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "6a2c1fc1-e818-46e4-9c4d-b8b315648161"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0db159db-c5aa-4212-bfe4-9862eb8d5092",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9e014be-b0f5-43c5-a837-6e6ec0bfb13e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0807f58-6da9-46c8-9d33-ae021f4af6d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7382e693-1148-4cf2-84ad-0cb82abb1ee2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "378a2290-a466-4d5c-8e06-441c895ae4a6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "002bf405-0ef8-4aef-8f85-19c3e00dcade"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9f04e2c0-3077-4ad6-b3b8-11ddd14493b5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2dd887bd-f1ec-47c5-8d39-414a9217fd5a"
                }
              }
            ]
          },
          {
            "id": "ae82e1f2-1051-48c5-a5dd-f0bd8d21be4e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "26dfc6d5-bf37-4ee2-8794-1cc678ca1e1d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0e33e0c-bca4-48db-8497-7d8b97704585",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bed8b0b7-5551-4ed2-86af-12b2f708ab8b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76b0f8f1-e70d-4051-9390-ebe83efb3d85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "50152bee-6536-4282-96f3-cf947c63a961"
                    }
                  }
                ]
              },
              {
                "id": "1c2bf90b-d4fb-4e01-97dd-5f162fa2453c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "48557151-ca5b-4d41-ab5e-b691bd151239",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eb11f7de-f2a6-4de7-a837-59173bf1eb1d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c6822ca-0849-436f-8975-05eaaee86d17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "77b08e8d-3c42-4147-aac4-f0ea92812091"
                    }
                  }
                ]
              },
              {
                "id": "14764d36-7f95-4543-9cc1-686fb0c1f6c4",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8723005e-22e8-41e1-a780-7939be5b3f4f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6713cd66-c4c5-4fbb-9956-381159145b25"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86b8c3a2-3dc6-4575-9271-dd5a3e54983d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "aaa7de5c-64fb-4def-8099-9fbc5725e031"
                    }
                  }
                ]
              },
              {
                "id": "0ed20425-8ff6-4820-b32c-892702fddf04",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "307b65ad-8163-4b0c-8c2e-1005f0b7bcf4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb3729a4-a942-4da7-a32b-60a30686e10f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2ca0cda-60c1-47bd-93d6-f3d0d6beb5f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "06e06194-38aa-4c12-90ea-aa82e7fdc6c4"
                    }
                  }
                ]
              },
              {
                "id": "dce5ddd0-6337-4f0e-87b5-91cc9887a4ed",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1526a95d-32ea-444f-8c3f-e86a38e83fea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "143449d3-4106-4b49-aefc-297c6e9f235e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86a1ae09-a229-4588-bbeb-4ae3db764941",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "229575cc-9abc-4173-bc1d-4bdb906aaffa"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ec99d91f-55b0-4099-9d7c-3c57aebc2482",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "489a9103-502e-4a9a-a6e6-c147691d3354"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4130e757-ca9f-4103-82bd-cd9008f3ca1c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6b2d3c5a-8464-4b4c-b07a-92bcef1eb971"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "16f2eea4-5d1e-4bb0-9af6-119c238d611e",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1b950211-0b09-417f-82b8-a3775720bfba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d5775ffc-8ce1-45e3-8e94-6e46da1ab665",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7afa28d7-2210-4ec3-89c5-76e1ceb3a22c"
            }
          }
        ]
      },
      {
        "id": "f55af8e6-8020-49ee-9c76-eebc1356838e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0c1aa38d-f5b9-49c2-8d50-9d67c8bd98cc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "14e04338-c263-4f80-b993-baedc7377c3c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c8ce34e1-0960-4faa-acd9-726f69b28fd6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f99fdb8-21cf-4444-bf59-a564dbeb0a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f94af8-5379-4d3a-b486-c8c6b1c6fe45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24243ec3-f667-4fb6-84d0-1447cb5f9ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e2fc191-4438-4968-89e7-6f3544bf4ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe56e15-175e-4a98-b706-7a6ecda4bf3d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "273b2ae8-9c14-4bf0-bba1-179a5a2dcadd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bef20dc-7b3a-44ba-afa6-1aa8d315affd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6debe029-d5e1-41ea-bb27-e385af53e114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a73d6ed-c3b7-489f-a0f7-ae536d5751f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389b9cc7-ef1e-4057-81d6-f7e116103e3d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67765bc-8504-4212-bbf3-14fe66ffd6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ba82a02-758b-4c70-b3b9-5b8e63524c19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea53bc4f-fb01-4f4b-a804-9770d2fd5749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "03aa719f-e2c6-499e-888b-ac331152a43b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c643e5bb-f319-4a9e-8ae9-1d3e922c02e4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64274ce8-2031-4350-99c6-b6eaf661fb4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afca2cba-eb0c-44be-a620-24bb43f79168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37edfe7d-3263-4cc2-a6d1-bb7205d4cbb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad809dd-fdc1-418c-b789-cb8f808d4bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35974c53-cb8a-4d8c-863d-18e116238754",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e5b5ef-ca67-4df6-8e0c-b689578139dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "408c3f07-9054-4e61-a329-1e282b490cd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d77a2acc-5d87-4cc7-8141-a3dc6f8ff1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76b9e852-1c55-4c83-85cb-ad14d1157637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5fcdf2d-405e-401e-9837-f39faee8b1db",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d521944-a617-46c5-9797-1bbb2bc2acb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4661921b-c847-4602-9529-d9bb021f2859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05aca8db-1e2b-418d-b596-b3fbd7e6128d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "884da333-b9bb-46df-aa79-93b5dfb9993a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce9f547-a8f2-4962-867c-b95634fc933a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "095545ca-a073-4ab2-9c0b-ce9d6cb313a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a9ba997-feb6-4800-87d3-a9bad9aa9790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5ec8bf-c6bd-4acd-90e8-4c7884f68758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef6c60c7-1dbb-46a7-8adf-2566ac3ddc11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c32b6fb-4a6a-496c-a3b9-88fd0f247f96",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded61425-2438-479b-ae18-1c7856806ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b75ea431-d812-458f-bc33-9f6c4fbe30a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0528b433-d3f4-461d-a8a6-4876948c8408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ceecf6f0-4542-411f-abfb-31b2f30af432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "537572cd-779a-469d-a569-c3517ba2b4ea",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1691f233-086d-45ca-8116-004f6491b666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32cdd0f2-7917-4a0a-912e-3b3bc7a7a4af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a0ec88-3dcf-4974-b197-89bc4c629f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5c044a2-3068-4855-90fd-7e5925c91ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b8d7d3-7462-40a4-adea-11b24673d536",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f376e5-6119-4d36-8bc1-65db70c347ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fbf32ac-90d4-4bc9-9511-67b0ea0693cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc518b33-5a11-41fd-a734-bcde6ce144e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "858ae75a-6ebc-45e1-8d02-14185528c641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aacdbd5d-1397-4bbd-8d15-981de38a7031",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee2f010-eb78-4726-aa96-0759e74b980c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a66fee84-2429-4c77-8c6e-91e949ddf1eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c52c00-28b6-4e99-8ce5-6fd06415cd24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3f727cae-f583-4aaf-a972-3ca1fe8e83e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0071a8e-e13e-43ab-8b4f-2ec1d333c4bb",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4689674c-ef73-46a6-8f82-38ddb95f244e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adfc0082-a5b4-45b8-99e1-8655680df3c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6aeb8c-ff9d-4d0b-9c54-ba0a71954eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ee1e5c26-f3ae-49ff-a045-7f9a21365088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32da76fd-7a84-45af-a8e3-2760360e76e2",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "990c949c-73d3-4b6a-9c01-8580293a713b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de698a12-b80f-42ec-b847-af2314a3507b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eedde1f1-f9b6-4f29-b60c-a83d34f173ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b921d32d-3828-4dbc-b96a-8365a400fecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85dee730-0360-478d-bc02-982796b042a4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f137ee-922f-469b-8849-55328e782426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f37f444d-42f1-4290-9bce-848e9d65ff7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fdbe81b-a17c-4c16-a71e-c507b66ee3a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "757154f4-de13-4afe-9bda-d3a7d62b7370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb82528-540f-42d3-9a3a-170bbcdf326b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6a072d-6465-4180-a3bd-9649cabf0ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1868e0c8-a3d3-4abc-8646-0a34a4d27048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffaca6ad-6a0d-4fb5-8349-43d87c6860fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "64eea047-08e3-4a95-9f1e-e3f8e69a9fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500a3fb6-7e4c-43e7-a7f7-b549b4bf82c6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd9ff0d-cc59-43d5-8e1a-8bb4fd06bf83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "600e6796-ab93-42b9-b436-4eb4f585a8f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4383769b-b484-40e7-870c-4fe00664a85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "59560f77-d165-42fd-9ba7-7b4566815eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0729a97-e173-4917-9848-14d678d31626",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95418e50-32b9-41e9-a1ad-0c9a89eb69dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81fec886-d9ee-4da3-8838-6b95c0638ef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d432f9f1-2a60-459b-acfb-6fb1ce7259d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "505b79c5-b472-47da-b91e-132deff1c9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ebcacc0-cda9-48e5-9287-7e3b61b95995",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aad488b-3a19-4e44-b379-f73e80ed3ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48925e3a-6cba-486f-9259-21985eeaedbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3bc799-3408-455e-8349-7a42831d6942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c0416be-6f56-41af-94b3-07b85e1727ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f14b7de-5ee8-484f-abb4-3bd599a21302",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e137b5c-e8b0-43b3-a822-bfb4f8ac3b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a579ab1-ef77-4a2a-aab0-3aa0a118475a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05646880-fc7e-43e9-85f0-86973f6e7881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "409b2b95-4d20-4016-b6e5-3d8ca75743b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc946037-a018-4c8e-8fdc-241093ba90d6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91bd9b7f-27f0-4fcd-8d3f-e147b43235da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c592054-62ab-4f61-8812-c0da8b793cd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3cb3647-184d-4242-ae05-f428cfe819fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1e46e27-7ba2-4872-bbd3-e74bc651efb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd1e1a7-72c6-421a-b5ba-24cda37c59e7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed762fb4-a571-41a8-9b91-4eec67517a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "729e8403-aa35-41de-931c-c1179e7743d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8eee4cb-3b14-44e0-b820-a4d072ad422a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea8201b9-baaf-47fd-a0fa-9c9c231642ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6803620c-3214-4e99-b38d-3668a1ededfd",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb490a11-bef6-429e-9e6d-9beeb5105aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca26ddc-46c0-4156-8cbc-541af065541c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266dfa5f-8078-4ce9-a0bb-2ecb466abdaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f125fda5-086a-4c38-ab61-136b3bd3c262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e958277-7356-48b7-b5f6-8afce9832f7a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14059151-f8a9-41b5-b0f4-f7d3d3fb037e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "591fdd77-cd20-4ae4-8a44-abec33e77693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc11f91-50b4-4fa4-b070-748982c5bd3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f442a005-f4fa-49d3-bd7b-1f8ead21f233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a499bd7a-375a-490f-bd5b-46526d743dda",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f332904-524a-4102-b0ed-4c29b366eb64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d031a18-5337-4f13-b367-9bf033b94e26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0629bdc-b052-41cf-819f-abe895125900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bccca149-5263-4200-bdf6-bcc8939d3eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31bd5017-557f-4d8f-a409-672569c6a68e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b8a663d-8104-4d3c-bdbb-94dda033aa61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c489c56c-2948-4def-8a7b-8a9531e16501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1abc1e8-4a04-4ac3-9444-528e115a53a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84fd12c0-8559-4da1-ac9e-76eb84c19c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea8629f-8a86-4455-aa99-31a3e0d8ed4d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "407fa45b-984c-4d7b-bc21-9dbc752d5752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7989d906-bee9-46e6-8e23-10fee83412d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea015517-4f73-4654-8139-50850493ebf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d18ecf0-b6a2-45ee-861d-d79aa959b577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fab237a-15bc-4f8f-bbe9-0d5bcfd6fe02",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d74b583-f30f-4f90-9957-7f64bc9913bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1185d5e2-f628-4037-acee-00d6908c4473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd49365-afc9-496e-8d83-039c09628232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "336255b7-8519-46e8-a102-5cdfa41e2038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0448823a-04da-443e-82af-6ffc27cf20cb",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6393dd82-51e4-499a-8ad8-2a30c17974dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dc55c15-e8d6-44a9-9b43-4feb29921518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb1cfde9-77ae-4d8e-8e3f-508b4261b5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0068b9e-a456-4505-8721-9a451040fcac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72509ef5-3fc4-4996-a7ae-d57359162723",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "703bd2a1-13dd-49c0-b202-1257cdc6c7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "378378a6-02ce-4c75-8918-7296c5452c6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff5b0cd-e8d0-446b-b295-00ce0c62d785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0199bc2-61f2-44e2-9070-47223d84af01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb2fa423-31b3-4bcd-a90e-ecf191352760",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b927d1-40cc-4984-9a59-487c0e5614a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "febdc3cc-c409-411c-8bee-8fcf6942bbe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e03f9d-6ea6-4352-a3d2-0ac6a808f769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df28c729-dc9b-47b8-be66-6c5d6c2bee3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849c17a2-1398-4019-a553-9463e03abafc",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52bd894d-ab91-4949-87fd-2d55884cd2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd79862c-395c-4b2d-9b4c-e78d61c395b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e3fd4e-a2c9-4afd-8d33-2d138dc492a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b112c9-7d8a-4048-a8ef-f4d31190ed84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b26218c-c4d1-4324-8727-e3e967d037a2",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "663395d3-12c1-491d-ba37-9d0dcbf2359d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d337191b-7958-4fe5-b473-23043412b800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a19759-9a0d-4fd5-8070-825c4fa5515c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13418678-e369-4f16-a374-0444e8abab26"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e968a35c-4f3c-4185-9350-e9591e0ce26c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "683f8283-0ee1-4d32-a41d-45915e778d85",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882d8571-00b6-45f0-a307-e36e5e91f895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a8caa2-250c-4fcf-b921-4b70efb6a027"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd04546f-5e94-4047-b9bc-7567d43742ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe53e880-2392-4e03-86ad-bc9ded09d3d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6457ae4a-ac4e-46ef-abe7-e01bdce28398",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9d80c5-9135-4f63-b3a4-a8d801dea13d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "595b8c29-fe21-4a7b-88ac-78a64099a00b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a41a7f-c3eb-47a7-bdd9-2d89d6b70097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c810efe4-40de-4615-a96b-1cc29038797f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "50bf584c-ef5d-40d6-88b5-9ae3e4d80355",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9514ca1-d51d-44cf-b5bf-9529b855f961"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ff5ae8c-ecf4-44f4-a454-276c357b38ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da2286a3-767d-4dfa-a8aa-5dcef1f80049"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e8c5c80-20cd-4995-80af-e87633429544",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "93b5b3f9-43ed-43b1-a0a9-4407eb2dcb70"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7fb2744-74f3-4e4e-8430-fb27e17df96f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "747957af-e17f-4a1c-a850-d9254826cb18"
            }
          }
        ]
      },
      {
        "id": "e22f8d94-826c-454d-a50a-0f89fe690997",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "32a35fbb-2a82-4db9-abd6-800f36f1f2d1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a217877f-892c-49c8-bc19-77e3cb83b63f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f86c3c0d-b2e2-4fc9-ad36-392ad9ae6030",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a0f4a0-f255-46be-99a0-8665e117cf3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab6bcc29-bcc3-4712-a4d7-4af986842f8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8146da8-8d6a-44a8-a8ab-c25c6dcec329",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "482214a9-9619-4315-b609-d0cc7cbf2e2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4c527ad-fc5f-48dd-92ff-40682349f23b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605933f0-c61a-49fe-ae64-e0065616a920",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe42722-a638-4671-8e7f-4dd7bc0f0b4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "460f0e0e-6348-4924-ac5d-dc60bd5a6e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8574ca-530c-40bb-aaa8-ea0682aefbd6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a22a38-fff0-470f-9efa-8ba0fb1fb91b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "967043cc-ba1b-4c70-92e1-d8ddb3980d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45585c91-14d6-48b0-8126-a8100677d460",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f36f7c-2107-4b5d-98f3-35891cf0a9cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d949513c-8e00-4b4a-b4a8-ffdb74a03ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee54b7a9-d9a0-4a85-a04e-07dec57e5ea5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa532fa-d461-4870-a60e-56f41ab9a931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9643e46-04c3-4724-b083-8d8a259e0161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1277cbbc-3293-46e5-a15f-a099dbf15894",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdee33e9-fe62-43ff-acd5-56f2efa30457",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "232b06e8-85aa-4ddc-b15a-ced2fecd20ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "287a2e30-b847-4686-bd6e-161a5fe9671a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecc77fef-d587-4640-9297-5d4b21461d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "164bc1d6-9838-488f-a366-e7bc2e57962f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43fd3efa-d56a-48b5-a563-a8b3edefecdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7dccb3f-fae6-4153-81e9-c0d6753141e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3272dc5-f1ff-4c9e-9800-47ed99304fbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7da4d6e8-1134-485e-91bc-f3a25ae622a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358a5e8f-e489-4956-9baa-becadf396945",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f020c5b9-5745-4782-9a25-112f781a0d72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e817b77e-fc4a-45f3-9aac-d42c9a50abd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15eee62c-87cd-4874-b149-4d7bcbc5470f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13c76d5b-1dda-4956-af4e-6026bc973331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56a7976-34c7-4d29-b1b2-99034a75ff0b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c512a6-aa96-4e9e-9134-1eb2c37af8c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d06f7a5-ae18-442a-81e0-cdfd61c4009b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d386db-29ef-44cb-a901-49ffeb0c5095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3fb219c-c469-4ff6-acfb-e9effd88fed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fafa74de-beac-4c70-9a16-9594ff610cfb",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ef7ae6-7606-429e-8bb8-0aca2de1e63a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "746b77ad-e266-408f-a045-595d959134ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e373f9f-bc90-4d9d-9d6f-f82d8e6a8b50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc7a6d24-fc92-443c-989a-39342436f8d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a89cf36-4727-4f03-98ad-cb92dca1995a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b5f024e-e5c1-46a3-b6f5-be39fde34a79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3314205b-9866-4010-abe3-3e1548eb5631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d125baae-4ab5-484a-a6bf-82261809812f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eff2fb9-c750-49e7-9d11-3a156437634d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0ef21d9-6508-4a62-9385-3632a88675ab",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a404dac7-ce63-4ad4-a75d-38f4b5cbf689",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c789cde1-2382-4ec3-a4ee-1387c51d8671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e921b7c2-47b0-4237-86fe-94d7f7b6421f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01a1d31f-e137-4202-a9d7-33b16bae6978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d2c6ca-77c1-4668-9adf-2e6ea7fa730e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34486aa-18cf-4935-b6c8-bf19a19f37ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "692c94ad-ab62-4716-a157-8add9af60683"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ba0af2-a7ff-4b7c-a9f1-dc69bdd95858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "808d7f15-96ca-4096-a2aa-4e0eb0ea2668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c3384a-83a5-48c9-9c59-e45c4c739a34",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2446b982-2792-49db-925b-670ef155ff7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09da196f-a274-4f8c-a301-75529fca0988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c076f4-7adc-47c3-9024-bb1f3029774b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11d6c949-2652-405d-bd7e-6271da4a7328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae78d46-6515-4ffd-b389-65324c63cca5",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84cf1b90-9c3b-45ca-b8e9-e4af80965784",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "daf489a6-014e-4564-8a1f-ffb9c3252fb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ebff75a-b8d8-419e-9078-3460954a231f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c51c51e-ec67-4f7c-9250-92bd8ca70a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d28b0443-01ac-4ef9-b797-69a8dc3dea49",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d168b71-a617-468a-9a18-a21f032a6383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1bd503b-4893-4f12-92ff-8efec7e343a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6619287-7b05-4e18-913f-a488ae5dc368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b529d22-61da-479b-b786-98335a3f497a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6accd129-c8c6-4f8f-a053-746a7d8ce599",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9027a7e-401a-4b06-9f36-8db6b7ce68ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e0181a4-6da8-4108-9167-33f82a26b164"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17d9567-cb18-4714-9280-662e53f9e0dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af48fed2-001d-4bd6-a96a-a941c7b129af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e220081d-06ee-4e3b-ac6b-7fd3bcec7c8f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf3917a6-6ada-4ed9-99ba-d20d78dbf548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e5d4733-4bf7-4b1b-9398-472976a3835f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81178bfc-4bed-4347-9db4-5e2b24dc3a49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3537336-30cc-401c-b529-c5787f83427e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855eb93b-f389-43d2-91a6-c317bafd0451",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef09cdf-5741-41af-a4ac-74dafa45e69f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2824555-1c34-4474-a73a-8d564929a406"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09060299-26b1-4417-8398-7799ce9e1874",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4b8cd1-6752-4b27-92ad-5aeaabd2ed10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d34d34f-bc74-4d58-85ba-ab94c8ad9ea9",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83265b4d-6de5-441f-9503-ca50d8ef6fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc9563a0-c747-43c1-aa5c-999c2c3d3af6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad26f8e-d967-4b8c-b77f-826ddfd11cff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59dfb256-9a55-4419-8b5d-90eb001c111b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f838586-26a2-4354-9e7b-f6cc6844b131",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aba250f-cbd6-4abe-bba6-372f3695a2cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bda5be90-5d8a-466e-be0a-443ca62c35d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a151b1f5-80b6-4f37-b72f-67a2c623372b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0023d30-a0a9-410c-a56a-0f5e9734ba5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bebd4ab-8353-4494-86bd-15f86e2e1fdc",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f3d0c0-344d-4deb-9063-2950c1de9c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5f969c0-2357-4dc1-b3bf-7a42275e3d90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0bef5c0-245a-454f-82e8-3a8f6fb2eb43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbeab623-4baa-4af6-b354-f1ca9d08c180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c13abb0-8ed1-42dc-b5f6-3563fb8e4ef5",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8233b19-2222-4c72-9c87-f821e40185b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae64f13f-0d72-411c-a640-b49b859e3758"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd86f5b-da3a-4121-9ff5-d72345330803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dccae2b-08a0-4fa1-ae3c-5a93d8c2972c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a697f6-c6af-4fbe-be05-4fe918b9cb24",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16e4d3a-8907-4544-8c63-f3720a3db26a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8af4c0f6-aa9e-4db4-80bc-d649f25bff03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e98546-e410-45f4-ba36-5f0de307eaed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "275b85bb-1400-40d6-8d3c-7e703201b88e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90bf2c73-6a28-4a5c-bcad-13edc1059801",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea640d09-7875-4c6d-b8bd-d42e7b793b2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cadb185d-2d6d-49e0-8391-dc0eb957a187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0733bf4-7841-484c-b967-11a5a8c45425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af4044fb-2787-48a2-b07f-6fc9a1bce350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a3a18f-85c0-4766-8ac1-f946172585c5",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "225408df-ce4f-4e8d-80b4-b88d90816366",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3660db20-b815-4ba5-a371-fdf485093b5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81834d73-edb4-4996-81d9-809104abde11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f46d97f0-a90a-4c12-89cc-233ddb8b5124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad00c5b-f55d-4ae8-8a6f-faa1165c0571",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37e2345-f618-4cc2-9bb3-2e2c2c5a8458",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaeeaaa4-c824-4bbf-a858-0416b6b3324c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "196834bc-3237-49e1-aee6-ccc5f12d1f33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d44efca3-ebba-4d7e-968f-d044bcf61e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4926494b-589c-473a-9b1f-5e6c6291fe49",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd5fb77-e5d2-451c-a191-f83a6cf3f6ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "451188cc-68a7-4396-a2c2-d6f30b4c3431"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c623f46c-8b1e-4592-88bc-ac732ddd194f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eed2bc8b-4a54-4ab2-8f30-6627f48d0fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0003f653-98aa-4027-abb5-3daca4073e62",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b3f24f-8557-4114-880e-bf0d5a4051b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22fde431-15c5-49f6-bff0-8c0a8b29ed3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38170e15-8a1d-4a96-8d05-5bf07e5bcacd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dffbde9-0865-4ff0-9623-4a8f9486fc7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10bbc7c-aead-4961-b5e5-85863a2f991b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e24365-ba36-4058-921a-ddbc749d09f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79890892-55f7-4b3c-8b84-03aa924671e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac07c815-d971-46e2-a44b-65354846965d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7681fb6-c5e0-46a0-b717-5be884c76182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e064a7ce-ba51-4e2f-800e-9f64d8f55caa",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063babb6-80dc-4a87-aae3-7d2562b5eeb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80147ada-a43d-4322-b66a-b53cb887f793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf2ca10-d6bf-4a4e-a7b3-f9bd7d92ab57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bcce218-238f-4672-a18c-a5aade523420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8da142c1-124a-417a-b2a9-7279bf470471",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71624620-507f-483c-9784-bed746cedb72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ca5e153-2e6c-4c99-9d0a-3383d3d501ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9532310-3857-4827-98bd-43cd68d9a54c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fbe3753-574a-4c85-bf0e-159d436c2e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfb950a-3efa-403d-90d5-72c0fcedc192",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d46fab-b88d-49f0-b25b-c044cecb3c51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2cec6bd-ee81-4b3b-850c-0afb7a181413"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ea8b2c-133a-4e7a-a4d3-76e15981a519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "693496d2-78ae-4d99-96fe-c03087a2b6b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ff8ce9-7331-42e9-b3b3-91222fa42823",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335d924d-f2c1-4b01-909d-fc4e1656f523",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03c21e4d-57f4-48ff-a4f6-b1aea550667e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c52464-60f6-4652-a504-367b334fd6cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b11d6698-9ce9-44d8-8f78-65fbc5c62f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21816b74-869b-4e81-b56b-e5cdb268aad3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2126e55e-ea84-4201-aa9b-a1bb4b17b318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9f18eaf-59e9-4a9b-a28a-93a0ba03428e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a8a854-ab7e-4cf8-8365-7e46eeda9db9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "543fc89c-646f-468d-8010-6a932ce23bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192aa2d4-7276-4af0-ad93-53431d42e346",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e73100b7-20a5-4bb4-9720-4d1161ad6442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5376ec3-5c4b-4aaa-856d-cac0824a9668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "032f0bb5-99af-44f3-bce7-8a78510d7de2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7e3ff8d-9cf3-49fa-b52e-b3caa2788c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9a184c-8226-49d0-9465-ea3da944c972",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85288921-cfa7-430e-8d59-94cfc166411b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2c5e1a1-31c4-4eaa-8c11-0be5a3bb7108"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "749b2d90-1a18-4cbf-b757-2202400c907b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "742868ca-2436-415d-a2b2-80ee78304c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e370cf3-cd63-4e8d-a0e0-a4c2bb1563a9",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b83ba4da-45ff-4e4a-bb35-65838ce71d72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "217fee75-cddd-403e-b63e-0996e5defac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a041a608-e397-4e02-9707-f8871e1306dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f02bb92-6e07-4d3e-a5e6-e99d33a29646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9612fd62-f35a-450f-bd98-66183d769b5d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18866426-e090-4801-95ea-d35e4b7bb8a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f32d09-1d6c-414c-acee-28af4c3f7641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bfa84bf-794d-4997-a551-466351f14fa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb26dff4-00af-42ad-8cf8-b71790055356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddce8c61-771b-45ef-a9b1-1beafc1c6dd6",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed47233-62b1-4691-ae57-8154e3c4dbaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1693270-dbe4-4940-b123-a1966f562597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6771133-6e12-437a-84c3-4dafde8c1f7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74079e44-333b-4056-b4c2-3168beb5f72d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0644f5-7295-4625-a5dd-b38243aa4bb9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e78f5564-6920-444d-a049-9f80f505f44b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dcc8294-b221-42a5-ad35-23626ef9a76d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e524bd-6bed-434f-a864-08fd08fa3ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db466fb2-04f2-4427-b302-853f9d33b7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeaa23c9-db1a-4a83-9150-48a66ce395a4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e17c801-d1c2-4edc-bdcf-11d078ed2f82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6c07edf-ce89-4d7c-97f4-1c2343debcb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d57042-c43d-4cb0-97b9-fc017da31ee2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39f39c89-3d52-4544-9a64-fa8977ba51d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0d9455-09ae-4dbb-a511-81b90fd352b0",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bbc6018-ca55-4678-b5cd-395b2552a58a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d16b6b-93c6-4e51-a024-de4480662539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "275a9f12-a6ce-4ade-a5c8-4816a7795355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1baf1013-8781-405d-a708-33f2553eb661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf357e8-4ded-4b1c-9ee7-3df2c9c5aaae",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ed3881-9ab8-43bc-9c34-927224bcf04b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a279ff5-a018-4f56-8d90-bd6969b1250f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba88aca-34f9-4fcb-a0c4-f4e772f63fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0091fad8-5595-432b-8ea2-6e46a4ce82be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23abad6c-6180-4913-9766-a6a5f695aae6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b94f29-4eff-4d6b-916a-3b5c3d671e6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "858878dd-ea14-4cac-8fd8-a979cc1533be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d908374c-2ee4-4e43-a710-cf0a26c85c37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9608b31-8021-4412-a73b-ba1f5ecd96d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8e301f-92eb-4b91-9276-dbffd0584c33",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c8897c-b04f-46ed-957b-210d3382be6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "840df4f3-18cb-4de5-9bea-36325d68b3ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d0474f-041e-4dd7-8287-4f5bf7d7d00e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb7aef79-bfda-4e99-8421-58bfe8ae3c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13374a9e-481d-4d0a-bdad-f5ba21f18977",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce93ba7d-c3f6-48b8-b1a8-c764d23c162a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6eb85a5-55d1-407a-9795-c1e0b0371a99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70af1f4-23bb-4314-a92d-c564ff68c0ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51b0fe75-0dca-44e9-a4d4-4e3b8d547252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3a2522-6d5a-417e-bc3e-8c696caeda5d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7940a49-18df-47c4-8929-10cb3f80afe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37d4d289-ba5e-4bae-9165-51071d0d04d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a6a2a4-5d32-4336-82f3-0933c26429a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc2d6c8b-cdc4-4761-8609-9cd66a43b113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36a6b69-8fb1-46ae-adf2-0e99b8757f04",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6728dc-2818-4ce5-a4eb-4fa38dd69fc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57f81af5-d656-4db2-b2f4-b78401dbb0bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "607c94f9-8c44-44c4-bcbf-ddde6ce2c14e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c70499-40d5-4915-ac46-3e9c9cfdcb10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4097b0-4ce9-4929-b6b3-3ac7942c9daf",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d77311d-e157-453f-96af-c309121b145b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c1a447-f127-465e-ad6f-d8327439daf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a2ee96e-0253-46eb-9e8d-d6d5b57bf4f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f895a1c6-0d4a-4502-ab8c-3722438465bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c6e9cf-cf19-4ae8-92d0-30d555373113",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4250b6cd-baf8-4b9d-83ad-f19938a91f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "142ea765-9b3b-4acb-b51c-9c2653150801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8dfe42e-1dd5-4b23-bc3a-e911537fa92d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50e4315c-a622-487f-8742-cf7dd63ffbff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb492bb6-4198-4ca5-b181-494fbf4d91e5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc184a51-44fb-4440-8280-cbe971f64b19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75a332d5-c3ee-4bc5-8505-644632050796"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "694521b6-377e-4a00-a300-f99aa0bb6b14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f211fd8-0c2a-4d3c-bca9-5fa136ddf72f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df73300f-04c1-4985-937c-7fddc92b9c4f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5548d814-d112-41b1-a1fe-c2ebc23d5bb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42ea732b-4926-47a6-8aa5-201f4b2e9390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a8eec8-8e53-455a-a56d-6b764e879190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0af50e6f-1c3d-4cbd-8f1e-0b05dd78deee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d56a9f-4b1c-461d-9406-4f34b5aa5177",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973f4963-08f6-4949-802a-cfd8b839b265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f142fd1-5e7b-4b79-b7be-628f83e149e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ab7cba-b336-4424-a616-e8453891922f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7a074fc-d7dc-47b4-8b1b-a4f8e42a2cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c801f624-d4b9-45ed-afdd-3557d1faa857",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfaede2-5275-455d-84b0-fc72faef3691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fef5338-5092-4312-a452-77e4e370d98f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11312f20-d181-424b-bacc-1188ed5bddfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63d4058f-ab97-43d6-9fd7-57dd24ae10a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95554b2e-1800-4145-8c78-54a0caa1588a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0494cdc9-5083-45fb-93ad-b84a9f72b23f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d5c1eb6-1c5c-4d04-9b7c-675e7a9c47df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddfecc36-647d-4d6d-bf2a-c98f7d861021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d2f0e38-b505-46da-a8e6-daaab7b5d8d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7674d044-c549-4a64-a66b-b9ff9e4d04ec",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a253a19b-583f-4127-a35e-af6aa4840b14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f341f1d2-b9cc-49f2-92a4-ddd3a67fc1b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "739c26bf-7dd4-4fa5-82b4-3742ef1cb2b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d980061-8736-430d-bace-e0d4b4087857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "388b5ccb-4fc0-43c8-b6b5-f8e12406a1ed",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a04e17-8ea8-40fc-980d-55f9de6c9144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83482555-d99b-4fc0-b7f2-99dd10101527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12968ec8-5aec-407e-878a-a482d0e77471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a32d2a-b3d7-4dd5-b6ae-2df23435ba4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534df40a-4ffa-4f25-b78c-a42ff29bdda7",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449f0441-040c-495e-8a39-8681673d8ea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad69e139-6b2f-4087-b734-d4b58fdded3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e970606-b45a-4a4f-91bb-0775e30962f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1671797-4bc2-44d8-9f7c-eedfda5a8d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65d52904-05e0-4be6-b679-22af753e84a0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbabae70-6373-4f61-a595-4259e3de2dcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afd9040e-d868-40c8-bb3e-aa7a29126d4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc3e9c5-2122-4cd7-9013-ecf79f99148b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f46ddee9-a61f-4c1a-9548-44ca73574c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba0d98e-b66d-4aa6-909c-62ec6cfa688d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9581abad-6de9-406a-a1e8-7918d09a3e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "236447b0-352e-4e57-8781-0d924c22b0fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61232647-216d-4575-8ef0-4ef4e8d664a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9ca0ff6-0255-437e-b6a7-32ab5d91a8bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "626db54e-0b54-41ff-86d6-8a1192245a2a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5b6c94-1c57-4ffe-8c8d-eaae6f3c76ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bcca23c-e185-4895-ba96-fc6089c35fc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e418e1ae-db15-4ed4-9986-9c9cb3007cef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0f4e520-b231-4169-99df-25613c755dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d56c50b4-e675-4f1e-b88f-3dc564f33e3b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ed3460-cd67-4600-97db-87e109fc6aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc8891fd-d635-4905-b720-9be0b6610486"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "805411a3-f8d1-48ac-b89b-1435372933b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09c25560-e3a2-4189-87fb-b86848117428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2910a1fb-c26f-46ba-81c9-7176e2d62993",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1bb5de-f248-4aa4-ba8a-7a19b56a5aa2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1014097a-8a56-4051-9f3c-987d3f8cee68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0632d2-c2c6-485f-9d39-d2016f281742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a8e9c21-3e6e-467a-a05a-5ff0cffcf782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a87574d-67a5-4aa1-8d1a-a8e07dcde033",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbfc38e1-4e40-4ed6-8ce6-d152e4da4b2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25a62c74-5449-487e-b5d0-407f26099d0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbed844d-ef1c-4e58-aabd-25f6eb856cdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7ecf49a-d5c0-4ebe-818d-10cf2ca238e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e91bbc-2b93-46c1-b8bd-20b88750bd28",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0b5c69-ac2d-4a9d-9b1b-7060ae4de340",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44e5b517-5c8c-4899-a27c-4bace7c6307b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c31e020-7d6c-428d-b3e1-208b22347b4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b459b0-48cd-4709-a2fc-5c0fdf0858e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "911dd728-c371-48b9-9555-7810aada9e22",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8808b6c-bdf9-4a7f-8a18-a8e120acfe01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4edadfc-e7cc-475a-b7d0-704d07c0b48b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "367de9c3-ea85-4efb-bb3b-3f1853414538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "192344e4-44a1-462a-bb05-fc5f17aca85a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c089aa-98dd-48cf-86e8-767987e6bcad",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f191940f-58fa-4862-9d63-3dd58de14ca3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec953679-e78a-4833-9fa7-f53ee1282b0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c806c6b3-9e06-460b-8b92-7524ab7733e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96459f00-3c6c-4e75-9c14-0b1cb2a129ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51cdff06-8e27-4e74-9449-d61598cbdd98",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655416df-b811-400b-9ff1-e56966f5a347",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba48b28f-7cae-4e15-8887-375aa9e85143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67de239e-7af0-46ac-b294-c02c13415cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "480f1e65-ef87-43f3-9a2a-be9e99585017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd13120-99c0-415b-81d5-88702a5c868c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f68c2b-80e4-4169-8611-eb64167c91ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d13d7c5-be39-425b-8d38-4274d0b43f3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42026dd3-a2ab-4601-8a33-311260c9038b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "105027b1-6123-4293-9eba-8ded941804e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6671b1f2-a3a7-47a2-a237-8f3b4b1a3960",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c54618-a426-40c6-9e02-3e9f5f7b3d36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1350d693-0341-4ddc-8cd5-f4758c9603f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c9cd4e-dba3-4f38-855d-caf78ba140a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ce320f4-625d-40ab-a5db-4048afefbec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731eb6f5-4597-4c30-9d8c-e49042625b9f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e24c300-a282-4971-b3c0-e104924bd49a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a62f2c70-4c98-4dbf-af42-d00809046419"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79a5245-b6e2-4eda-945b-1c366954c267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08613a6c-9cba-4622-807d-fc8b01a3b118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5eb631-a271-438e-990c-ccc17c8f0ce3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b48a5e1-03a5-4f74-9ded-298f1f4778d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0539b650-e40a-43f5-a04e-9a59723b5656"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bd095fa-2dfe-43cf-a7b0-95af2a5da196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a078015-ce06-4191-ba0f-43cc9156e07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad3d6dc-0a94-4a02-a197-140d066e57c1",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ca37b4-8030-48c4-8d9d-afbc3f7d6897",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f9cf560-ff67-48a1-a7b8-f1220670edcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d063c36e-486f-4fee-a55e-306d2ec77b24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56fa0c54-9bfb-42b3-b343-50e9d6a3c9ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d50da5b-7206-4c91-adf6-88af8bf9d666",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "553e87a7-3b97-4730-a585-3216e18fa00d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9c46664-652d-411b-961a-e340d621d4b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3edf9d99-edc1-43bc-9915-d4a7caeefed5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0527e4f-3783-4865-9092-3989d75d71cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4bf2de1-e83a-4956-9699-054b77039f13",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d058f065-14ad-4749-977e-8be408da687d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "243dbf8c-4a58-400a-af5f-299b1dedd889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aa6386f-2253-4cc8-84ce-0a81694f74c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "788fbd2d-042d-4e89-a8ad-621bfd60b6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d9224d6-029b-424d-8e4f-8dec61c0a51e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ae4c9c-0334-4112-9c76-94bcfb2cf638",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ed5b906-7623-450a-98e8-a217f8a498b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08b003e-902e-4909-91f5-ab780cba0b17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64e22629-b3fa-43e8-9a5a-4c1592b446fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eced286-b972-4f70-be94-3addfe23c3d6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b6a797c-9526-4cfa-bbf1-4840b0b432be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93b1bc9b-230f-4338-9f44-cb59f4a74e21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e624c1-a16e-45bd-aecf-98995cdc5811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acfbc3a5-535f-4457-8afd-8d062894853b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ff4e17-d93e-4125-9a7b-3a6fb639957e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b48522-46f8-4eff-bbfb-522e2f8bc089",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8901e0b-758b-4c84-8a1d-f350db7d1a99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a679b3d-fe97-473e-859d-d381846c47b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0e154fa-18a4-4d23-b324-2ae2b111a13f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22d18d2-1f67-464e-a862-7949f950f536",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf37de4c-0099-4a5f-b548-85c2d455bf15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "853e7b19-7990-41f1-a46d-4751aa97cc08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a920ac87-7b4c-4408-80b1-5ac6ebac8a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "765c4fdf-a5fa-4c06-a970-dfdb9e28c040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80ae58e-05ee-4b24-98fb-33f5fe0634be",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8afeff-9ecf-4056-984f-8d1fcc589cda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "129d81cd-c2f2-48b0-ae8d-cc164f9d9469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c5d7d8-6b5a-45ec-9900-5ba7b58614ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e769599-e890-4da3-af00-aa143d799095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e13fe8c-5d23-4ce3-9d28-889c864faff1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84d7d6f-9272-4524-928e-a083b2204f88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "730ab7c4-9bb8-40af-8e9e-02cda4286c06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f9a530-4ffd-4ca3-84cd-5260a58e59fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8f1eaeb-de4d-4ff2-bb5a-27df8e954922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad45ed8-1245-4e48-9638-47b73ebf23a1",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d1afc6-6e75-4cbc-b4ca-2252efcd1d4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "716ecfaf-7fab-4a31-9b32-204570e46269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63802ba9-41a0-4f8c-9c7d-7cea39dd3070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f12d9a25-2bd3-4a8d-9802-b727aa1267b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a09eb4d-f125-4a2f-9e99-7725256d29bc",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88efb363-47bb-4738-aaaf-d6a849be2596",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60f4a0dc-5df6-4eb9-bbb1-ade0d2aee4c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26fcd7df-a3f3-4607-9149-5f2ab060b840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18f8f890-0875-4859-a2c3-fc9f5e11913c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed4aed6-5893-49f5-8344-14e1cef74337",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74b1f66-775e-419c-a4e1-e788b4391481",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f8c2d83-d14f-48bc-aad6-766a03b0cd08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "418dc2ee-31a2-410a-8cfe-0cee64db509a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06832c20-9e52-4bd5-b33a-ff2d49fe51db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f4daa2b-a858-405f-8fdb-8bc0b44977a6",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ecabea7-4d93-42d7-b5a5-48ee2f0f70c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46e7c91c-01ee-4dc2-8f18-188b75d244b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca2551cd-eca3-4fb9-aa1a-7831040a0374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3213761c-5a63-4cbb-877b-bd1901adfc9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b5c8feb-6764-46e4-a66b-5ec06c4f6043",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8f76733-2e7a-425e-baf1-b9d1a24782cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa3ff1dc-d5c1-4dcd-8267-d63cad6f4ddd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bcf0b2e-7c61-4e69-b8ef-80decb02319c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "692d81cc-fc41-4545-8027-de44931f37e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b1a36ef-9c1d-4d6c-bb0b-0cd117b47f67",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a80d67-e4da-48fb-9de4-37933a531bda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f838a2ea-5f51-4182-95bf-6cb32b3b3330"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82aa865a-7f88-459f-be17-db8daa294702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b1e52b3-752e-4ac4-bfe3-cd3e05c94492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce6974c-a94b-4959-9586-abb80748cb74",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb85ddbb-4bb2-4151-bf02-ce69e9bccea9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "724235fd-2287-45c9-92e0-e5ca2091d8bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ace41cf-0bfb-4e2b-ac61-d52a6e893b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e71bb10-6a00-4359-8bad-0c9b93d11371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4edbfe63-0cfc-4f0e-8599-6668ba02acaa",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71354a6b-154f-4e5b-867c-8225fb68453a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "905bf0f0-adc9-486a-882f-8945ab54d92e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa160077-8e3d-4d33-80be-06f3f54d47a3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "804d99b3-b1e7-47d2-ad02-ac87e48fe49a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5cf2cc8-aed4-4a4f-9a37-11784bb27d2f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa8d8ab-aeff-4c8d-bf31-17dc96ec8f04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66e7ff4b-54ce-4ff4-b2c7-2d09f7723db3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "318b6f81-1748-437b-a7fd-aa7214f56e8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a89ec38c-6ef1-4228-855a-c97b89b8ac7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffcbfd82-f9d9-4732-a646-2703f8521c0b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6aff62-45bb-42f0-87bb-3ce0171acf14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48158c95-8d5f-4f92-88e0-03ec70a85172"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb5f7c5-4533-4a9e-b84a-74fab7dee432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca1db8e-3c33-46d5-9839-f2669e465045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97135284-02ba-4706-820b-42cde0df9ee5",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b56957-e58a-4a96-add4-7181e1a8d081",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c90aef7f-253a-4add-b82b-717e4e5798ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4119e8d9-c108-48bc-81e7-e64f0e1064af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ce0adc-2e90-42cf-8504-5cece944f719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd5f02e-abb9-4248-8b9b-49c59e4f09b8",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b78547-6e18-437c-92a4-a0f6f73dbcf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "941f1873-8aa6-42c1-bfa5-a7bcd989f058"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "842c84b3-c51b-4f54-a51d-c8fe1f7d315f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df61c1b4-8b7e-4fe8-9a26-5a88c8fa4e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d888ee5-e14e-4b70-a8a5-d5f3b3e1d777",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af59ddad-ab72-41a7-b958-5a17e19fa0a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "495827d3-5718-46ae-b1b0-a962ddd23d52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af86632-0ace-451d-ad55-ec567802cb12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85b43fc1-4e5a-485c-9df1-c4573abedda0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0146c62b-6718-4c12-9bf7-5e55ae5562ae",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c2b778-a2bf-45f7-84b7-f700cec80654",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "938da4e2-601d-4e39-9945-4cfdda6266dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53873a76-f224-4fbf-ab3f-238a77a827b0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea6a432b-2ea6-4ecb-97c9-aa6204238e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b971698b-04ce-4e2e-b62b-d053e06e0b0b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae36496d-b89d-4597-bc82-752a0e699161",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d34f96e4-483a-469b-ad0e-92db40c8e34d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c9f477-4e43-4ced-884e-c2d4c922d782",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a800c7f-62c3-46f7-9b8b-ac8ac689eede"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d0fb921-4112-4a76-9390-808d9361d785",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1337bfa-c7f8-4908-80b8-a62c47c4164e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6749d5cc-6e88-4955-97d8-81a024a8affd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3bc48867-9c82-428c-848c-0012c4cb949d"
                    }
                  }
                ]
              },
              {
                "id": "12850001-feae-474a-a27e-9dcadf23f25b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eda1fe89-fdbd-4023-8a67-4a47af53c8ae",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eedb45d9-ca4c-4b40-b7d4-d7fc4483a052",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "13b11759-f5d1-46e7-ad8f-52826e0eeedf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f145e2-5719-418c-9648-db305fb74a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e917db3b-dd55-4616-add4-03e20c154a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc8a765a-5378-4e29-9159-300a6321261c",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df41848b-5790-42b5-89c7-80da6eab2926",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "93be6cc5-98cf-429d-9321-c0fa94934dbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d47d2ec-01fd-4465-b9db-f26f8f8f37b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91d2bbd0-438c-4689-8c49-844666b42e15"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47db061b-55d6-4247-9c53-0b73f46aae7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "36385313-6ae2-4777-a0da-589a41753681"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9599f2ae-8af6-4d17-bf32-c10ea696756c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2ab15b4-b51d-4874-b609-56271f55254b"
                    }
                  }
                ]
              },
              {
                "id": "2791d581-99ee-4345-8b3c-038e080ab903",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "816dcac1-f8da-44aa-a865-59e72d91803f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c770b3c7-8036-4c1f-8abd-2f63db6152ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "261db651-dd50-4dc4-828c-1b418595b1d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "519bbc0f-b7fc-41ca-97ac-ea9faa7fc864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19e3f8c4-b523-4298-a325-e3ec46b2218d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4c63238a-4c38-4fac-bbba-e4c4197fc1e3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "efd6c214-0aeb-498b-bf6d-4b8eaa35f077",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb42afc1-b039-446d-9f72-94967e06bd8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2bf48c75-bca2-4e7e-b6c8-4fded43548c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13fa1e41-2e72-4e92-85c1-bf689655ef24",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5ce7029-23a6-46d6-a555-84665839ebc4"
                    }
                  }
                ]
              },
              {
                "id": "10aa9622-1d5b-42b2-8546-1681ef1cddab",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "94f8aa2d-47b7-40a9-a4a6-e4c181bdec3a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d347448e-c18c-48b5-af5f-f80ed1402ae4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "550597e5-584b-41ae-b762-b6009513ff52",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0eb38a05-4cf5-4a08-82d9-2ff2cb5d3b8b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a2f61c96-6d7e-450e-8b76-3c4192279d35",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d08175c2-26ba-4880-a822-55389fe072e0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae2fedb1-a7a7-4761-8a8c-3dbb6efd79a0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "140dceb1-aaf9-4ccc-8443-641c4d307fc9"
            }
          }
        ]
      },
      {
        "id": "bbb5e251-684c-4c7d-87e9-576e5e08f7dc",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3879d068-a3c8-43d5-8962-99d803ff9c71",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2326822c-4dbf-40d3-a704-a52de70032be",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "91fb5be0-63bf-4834-affd-9bc4db7dd330",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf5ec895-d7c4-479a-b966-74ff025cb66b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e9341674-80d9-428f-ab37-dad4e2cb3361"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a9696e-7c74-4fda-afe0-f9e4b8c9f000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "06e1341e-e157-4049-9a79-a471f04d5cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb04441-79b6-4fe7-9f88-325fd4e58d86",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4742e1af-946f-49f7-a7ad-6605823549eb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "90ee904e-aa41-49b7-bf89-d2f70e86ac34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f5503c-03fc-4db7-b9fe-4183bec92ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f610cb33-48c6-429e-9815-2307fd69af56"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1ea8264-aa48-4eba-9b25-7a766792fcbd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d11bcde7-ffe2-4b80-b7d2-c974bf5721a6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "da6034fd-0c22-4fca-9360-d31bb799252f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "efdc7e1e-cace-4696-8894-0dac12ce0ebc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e13b8285-4a4a-4c78-b2de-4e11ba4aac93",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e4c6c14d-2855-419e-b1ca-b8462aaaf6b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52777c15-c0ae-4187-9c33-163a65f55aeb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d46bf319-d673-4293-b51e-fb76b25efad8"
            }
          }
        ]
      },
      {
        "id": "2bd438aa-4be8-4727-9c1d-8843ed40289d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "65171724-cb39-40ff-bb09-13777573a0d8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7a6ce9de-840c-4d72-885a-609bbbe69e84",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "44c6ab04-f43c-479d-a372-b6ee516f988c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "101a217b-e2f6-4997-8b16-7e6e2a131f72",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "859cd62f-ace2-41f3-98b5-03f4f084c2e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f71b697-3306-43b9-8023-dab7e7ca65fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e728467-101c-4976-b376-6ae213693e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95554606-711e-4f50-b771-9ecfdc8a3220",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aec4950-b878-4e9e-86e2-90d30393c515",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a57a8a1e-aa5f-4a86-9f60-faa3b68300f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e7079d-0d82-4c8a-ae21-0f36ada3e072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "adf3f5ab-a13c-4304-ac05-e85e79f518d0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1495c9eb-69f7-4f09-ac89-42ada0e9bac9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc05f2e9-dac9-4e8c-9c2c-9147e06f1719"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f112c31e-a5b3-4d24-8fb1-a42d52701fec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ecdc54f-8191-4f9e-865a-06474807c8c8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c8d4fc55-39ce-4cae-aa6d-308ee5400913",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1e484ddb-2bee-469b-940d-f2d423de8986"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5ee4c6b1-b176-489a-bd90-15e54ec80454",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5115f870-2149-401b-85e0-5e1139ebb4df"
            }
          }
        ]
      },
      {
        "id": "e2082c51-ca6d-406a-889a-e6a40f144f62",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9b41d13e-628b-4a91-843e-4afa89d15cc6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7c4b6e23-bbfb-4188-a67f-fdeb92997466",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "34656424-44aa-43f5-87da-07f85f78a312",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712d18a9-65f0-4107-8fce-0482d59e129c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7815e026-a090-4277-bec8-d4e1cae05d9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd04299f-7aeb-4fa8-8ca4-0607f8387857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66d40a2a-c4a1-4b05-8352-2816bcd98111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4598b566-f00b-4eb5-915d-a88daecfe551",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d288d4-bc1a-453f-a0fa-2eb180f89ab3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f65e9791-d892-4dbe-b73f-7a3f3690a019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6914ace6-de60-4f80-81dc-f449488d8656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "52359d0d-e946-4c23-9761-564bf4952b46"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a477f9c-1950-44b1-8b4c-3d5f57afc4f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ebe034e2-e004-4204-a68d-958a533c74a3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1019257e-bd74-42c3-a4cb-80b479b2a65f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3382741d-f25a-4b9e-b485-32ec60048231"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9ffb18a6-0c26-4597-aaf7-c7519edc8878",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9e6cd4ad-8307-4493-a857-3fb00d6ea117"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c12133b-6a7f-4ce6-b175-844ab7738573",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b7c37511-a000-4487-94d9-85ae3d7276e5"
            }
          }
        ]
      },
      {
        "id": "a0d47b04-1ea9-4129-91b2-27cf84827943",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "525ef864-57d4-4b89-a368-98a435fa4011",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b488b512-bd3a-49dc-b797-d1c9a5e5570a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e6b9680e-1898-4bd1-8eb0-5f6c865354fe",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "25c33382-e2f0-4af8-b5c5-030f03e5bb74",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5df3c618-985e-483f-93ad-8ab449ed92c7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 107.78244274809158,
      "responseMin": 16,
      "responseMax": 1050,
      "responseSd": 162.56635285647494,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1671582931865,
      "completed": 1671582971122
    },
    "executions": [
      {
        "id": "6d19058d-a432-463b-b7a4-2bc02d296d61",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f5bf5a27-ccc7-49e5-bc07-c29cda1d922c",
          "httpRequestId": "eb63cfb4-db80-4dec-8c25-b82018b03365"
        },
        "item": {
          "id": "6d19058d-a432-463b-b7a4-2bc02d296d61",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9e1e56ea-4111-4385-a564-5d0d80042bd9",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 0
        }
      },
      {
        "id": "155ab056-2dba-46f1-b3de-18fd1ef45856",
        "cursor": {
          "ref": "274a4e62-cdfd-4763-9571-606dfd3894a9",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "41293864-61d1-4c09-874f-adb9af64c62d"
        },
        "item": {
          "id": "155ab056-2dba-46f1-b3de-18fd1ef45856",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "522120b1-8f34-4cf1-ace5-6dc669c5a119",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 0
        }
      },
      {
        "id": "ea591b4f-0c7b-429f-b146-cf65bef5e066",
        "cursor": {
          "ref": "3ed5d2a0-09ef-45b3-abd8-4cb1eef9018c",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f0b86a02-8801-4a68-b3f3-88c91799f688"
        },
        "item": {
          "id": "ea591b4f-0c7b-429f-b146-cf65bef5e066",
          "name": "did_json"
        },
        "response": {
          "id": "f343ded5-f922-4172-a711-6b656389e46a",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd60812-207d-47b2-9ab6-7933b55f9d51",
        "cursor": {
          "ref": "27c32a39-4906-4b3f-bad8-0a937bc468f5",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cea0b0b3-75d7-4488-8e82-4a5ffc0fe4ff"
        },
        "item": {
          "id": "1fd60812-207d-47b2-9ab6-7933b55f9d51",
          "name": "did:invalid"
        },
        "response": {
          "id": "446c5af1-7b27-41b5-9ec4-632fe24749db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd60812-207d-47b2-9ab6-7933b55f9d51",
        "cursor": {
          "ref": "27c32a39-4906-4b3f-bad8-0a937bc468f5",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cea0b0b3-75d7-4488-8e82-4a5ffc0fe4ff"
        },
        "item": {
          "id": "1fd60812-207d-47b2-9ab6-7933b55f9d51",
          "name": "did:invalid"
        },
        "response": {
          "id": "446c5af1-7b27-41b5-9ec4-632fe24749db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28afb369-5452-49c5-8d80-6553dbf2dd76",
        "cursor": {
          "ref": "322e90a9-c149-4ff6-aafc-056a6dc9dfae",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "db9db8e0-4f9e-4520-aadb-107209562354"
        },
        "item": {
          "id": "28afb369-5452-49c5-8d80-6553dbf2dd76",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "bb9e7b94-f413-4514-b939-1bf43b1644e9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 80,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d5083b2-27aa-41bb-ac85-80a83cacc549",
        "cursor": {
          "ref": "bdd9704d-c4ed-44f6-98a0-30708494fd1b",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0864f7fd-f638-4268-8ac2-b843cf7dbe0a"
        },
        "item": {
          "id": "9d5083b2-27aa-41bb-ac85-80a83cacc549",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f9a64355-3191-441c-ae1f-e86da39e375a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4252d1e8-e96c-401f-af90-326661f4d22a",
        "cursor": {
          "ref": "dd077542-d5a7-4eb3-af5c-77d98a15ce38",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "04150b3b-fc77-45e9-8326-e7769b3bc8d7"
        },
        "item": {
          "id": "4252d1e8-e96c-401f-af90-326661f4d22a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "821e9387-5817-4451-8f73-5fc4204d4811",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cabc07f-afef-4ae1-9653-9cd51ebd75c7",
        "cursor": {
          "ref": "58c21abf-d0fd-4981-8fe5-6c51cc2b5dfe",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c4cd6963-34be-4c46-846e-3ae69bce79ea"
        },
        "item": {
          "id": "1cabc07f-afef-4ae1-9653-9cd51ebd75c7",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f4173a50-9491-473a-8ebd-5f23559d2314",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cabc07f-afef-4ae1-9653-9cd51ebd75c7",
        "cursor": {
          "ref": "58c21abf-d0fd-4981-8fe5-6c51cc2b5dfe",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c4cd6963-34be-4c46-846e-3ae69bce79ea"
        },
        "item": {
          "id": "1cabc07f-afef-4ae1-9653-9cd51ebd75c7",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f4173a50-9491-473a-8ebd-5f23559d2314",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85a57e0-ed7b-47a2-82c1-18818a34a998",
        "cursor": {
          "ref": "55336128-df0a-4eb2-8c54-524969dbd488",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "98c1a52f-c085-4f1b-8ee8-86fa1d730678"
        },
        "item": {
          "id": "a85a57e0-ed7b-47a2-82c1-18818a34a998",
          "name": "identifiers"
        },
        "response": {
          "id": "11d46ce4-6be2-40f2-a4c2-6f983d179bc6",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff05314-4830-405b-b0e5-1097ef025308",
        "cursor": {
          "ref": "9dade7e0-e0f6-417c-b4f4-0192dde8815a",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3cd3a200-37aa-46c8-b16a-d8755eb1e384"
        },
        "item": {
          "id": "9ff05314-4830-405b-b0e5-1097ef025308",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7ffe2a4b-11a5-48d0-a932-28f02a73da29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff05314-4830-405b-b0e5-1097ef025308",
        "cursor": {
          "ref": "9dade7e0-e0f6-417c-b4f4-0192dde8815a",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3cd3a200-37aa-46c8-b16a-d8755eb1e384"
        },
        "item": {
          "id": "9ff05314-4830-405b-b0e5-1097ef025308",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7ffe2a4b-11a5-48d0-a932-28f02a73da29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f886c1-2a4b-4550-83bc-94f07c8d0498",
        "cursor": {
          "ref": "318ce4d9-cb91-4d60-b8c5-a9a788052847",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0d0df4d2-5dc1-46ce-83b7-cc1cecef0ab5"
        },
        "item": {
          "id": "58f886c1-2a4b-4550-83bc-94f07c8d0498",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "ef21e7c0-1ebf-4cfe-94a3-b2d8f071b1ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9efb268-aece-400a-815e-4acbbf49f31d",
        "cursor": {
          "ref": "5868a0f5-4f64-4d3c-91d2-fb7b467a5fc5",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a9950826-b6e0-4b82-8b1c-05be2d84c108"
        },
        "item": {
          "id": "f9efb268-aece-400a-815e-4acbbf49f31d",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "63b9d323-e202-4144-ba1b-1108ff6d297b",
          "status": "Created",
          "code": 201,
          "responseTime": 591,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "8bca41f0-b760-403e-b3b5-355fa84a24ae",
        "cursor": {
          "ref": "577b58e6-9682-4645-b4c9-69dbc6a510b8",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5cfe20ba-528c-4d1f-95c2-7cc64e5db847"
        },
        "item": {
          "id": "8bca41f0-b760-403e-b3b5-355fa84a24ae",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f6dba0a3-ef6a-4d8f-850d-697b8db493e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120cb5e4-4578-4aa9-afc4-e61fb308c758",
        "cursor": {
          "ref": "2172eef8-7a90-4c5e-9eee-68424d08a625",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "19a8dabe-32e1-4237-a58a-0dcffcb52734"
        },
        "item": {
          "id": "120cb5e4-4578-4aa9-afc4-e61fb308c758",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "bba8c786-21cf-4374-9271-8ba68a07d1db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b4ab4b-9b3c-411e-8277-73e36bd8133a",
        "cursor": {
          "ref": "491c0c22-19ee-40a5-851b-f11c9c144b53",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "faa576b5-2809-4178-aaa2-bbcb867b0234"
        },
        "item": {
          "id": "c7b4ab4b-9b3c-411e-8277-73e36bd8133a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c988c93a-823c-4ccb-8a29-a84635ffd7d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad18095c-017d-4fc5-931e-369e77b0aae3",
        "cursor": {
          "ref": "14cef685-2599-46ff-be09-3b6fc124ff4f",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "778543e3-7b1b-47e7-bccc-4283dec5eb7d"
        },
        "item": {
          "id": "ad18095c-017d-4fc5-931e-369e77b0aae3",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c8c31f44-4bfd-42f6-88e5-5496237757e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79491dea-8e96-44ba-ad7a-718f40080e09",
        "cursor": {
          "ref": "9eedab2f-1068-4d0c-a179-f2ed6ceb5d31",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "33d4e155-e67f-46af-8d42-fc38e0292882"
        },
        "item": {
          "id": "79491dea-8e96-44ba-ad7a-718f40080e09",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b2629ccd-ef1e-44ce-98cf-a1f8b6604210",
          "status": "Created",
          "code": 201,
          "responseTime": 518,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "20c865ec-c825-49cb-86bc-9b1eae3ddfa7",
        "cursor": {
          "ref": "ea133304-c270-492f-9a9d-80216de3fc17",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d89ecdd0-23c1-4eb6-84c9-9959a9715e4a"
        },
        "item": {
          "id": "20c865ec-c825-49cb-86bc-9b1eae3ddfa7",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ffb750b5-cb0e-45ef-8fd6-f369af683f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "accb1cf0-c403-4381-98a5-4238a9461bf3",
        "cursor": {
          "ref": "eaa8f993-eb1f-4cb6-872a-7c8a72fbf817",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f419ab08-1314-4f72-8df8-7598677440b1"
        },
        "item": {
          "id": "accb1cf0-c403-4381-98a5-4238a9461bf3",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "0111aea3-06be-4998-a3ac-7478d30496da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8adf9d40-0cca-4501-9632-6efb1b06a9ca",
        "cursor": {
          "ref": "a2e867c8-a29e-4ef1-b369-a4de42f8a248",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ffd290f8-f6ac-4721-aeb3-1a4d70c30259"
        },
        "item": {
          "id": "8adf9d40-0cca-4501-9632-6efb1b06a9ca",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "74963cf5-2e15-461e-9b4d-ce517b7d43c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e1f3238-187b-4c55-b4ec-7dfdf7e1d5af",
        "cursor": {
          "ref": "347646dd-da15-4c65-9b42-9fca6901c97d",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ec2b6a72-9094-4ea9-935b-d89b626e3ca9"
        },
        "item": {
          "id": "5e1f3238-187b-4c55-b4ec-7dfdf7e1d5af",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8ee6e9a5-f50f-4ffd-8cb6-88529b6e68d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0b62fe-56b2-49d9-93ce-905ff48ba3b0",
        "cursor": {
          "ref": "32fb0b59-42d0-4082-beba-bc540d9e2e18",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b4044031-14c8-4b7f-bc8a-51c709d2722f"
        },
        "item": {
          "id": "af0b62fe-56b2-49d9-93ce-905ff48ba3b0",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "57f1bf64-4490-47d8-95cc-2e5d8cfb7c04",
          "status": "Created",
          "code": 201,
          "responseTime": 532,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "f9343dcd-4636-40b6-a9e3-4605c36b6689",
        "cursor": {
          "ref": "5df95ab5-b1c7-4a1d-8f59-92103b21031a",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a0e6f4cf-6fdd-4b81-a9c5-ed4e23c90514"
        },
        "item": {
          "id": "f9343dcd-4636-40b6-a9e3-4605c36b6689",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "b36f057d-3f3e-450f-8c12-773fe36fe46c",
          "status": "Created",
          "code": 201,
          "responseTime": 1050,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "2574dbfb-d2bb-42df-93ae-b2713847e5b8",
        "cursor": {
          "ref": "ab1a3331-e298-4f83-8d1e-f6ec2a4945e9",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "437d69ce-a360-48cc-b480-ac447a899def"
        },
        "item": {
          "id": "2574dbfb-d2bb-42df-93ae-b2713847e5b8",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0fe4282f-4265-45cb-b322-01c0994e1a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "744c2ec3-8fb1-46be-a1b0-9cf726d34cca",
        "cursor": {
          "ref": "cc5f1ac4-39aa-4696-8a2d-9f6b73695f91",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "da40aa61-85c9-47e3-848d-26f7e74b1efe"
        },
        "item": {
          "id": "744c2ec3-8fb1-46be-a1b0-9cf726d34cca",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "1d875647-96a7-4db2-b3e9-aaada8c9de69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a05f72f-4b3d-403c-9139-0eed675b6722",
        "cursor": {
          "ref": "faeea113-7769-4e05-ac10-06ae3932346d",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c03db891-6b33-491e-bbc0-22148321d0f3"
        },
        "item": {
          "id": "4a05f72f-4b3d-403c-9139-0eed675b6722",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7d688f32-067c-48f4-9fad-23e06ea43f27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e8aefd-6e48-4fa3-8b5b-3faf5d3aefe6",
        "cursor": {
          "ref": "e3a42988-0fdc-49cf-bb89-0959847b2d5f",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8b2f44eb-e0c2-4f8e-8c3b-407a1a444456"
        },
        "item": {
          "id": "58e8aefd-6e48-4fa3-8b5b-3faf5d3aefe6",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "fd3dc2c8-5358-4831-bf57-51014a23a3aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "792d7194-6e46-418b-a464-4734314f5f27",
        "cursor": {
          "ref": "47502510-da6a-4088-b2ff-fc0dad24cf33",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "80e48549-f7c8-468e-94ef-678cc11929ac"
        },
        "item": {
          "id": "792d7194-6e46-418b-a464-4734314f5f27",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "bc4ae3e0-5920-4a2d-92fc-c67bf18c06f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce0461e-1587-4fe9-92f5-fe77d6e96879",
        "cursor": {
          "ref": "f9373b00-6f51-42a9-a8c2-6808be0f53a1",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6d92cec4-d113-49eb-841d-a18f4d14aa1a"
        },
        "item": {
          "id": "4ce0461e-1587-4fe9-92f5-fe77d6e96879",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2bbdca03-ae0b-4855-ac81-a7ba88f944f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ea5e9b-3231-4133-81bb-ca60e38483e8",
        "cursor": {
          "ref": "7c9a69ec-4cfb-46cb-a822-f9b56e2f12fd",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "db519697-fac9-4db7-96c8-aa3285a02713"
        },
        "item": {
          "id": "07ea5e9b-3231-4133-81bb-ca60e38483e8",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "9a0cae09-0459-4cf9-b622-df64ece12d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f137ccd7-ca7c-4308-bb91-6c3ea55c4fb6",
        "cursor": {
          "ref": "14542dcf-89a4-4698-96e8-b732a97ddb92",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "20afc6cf-cfaf-4882-aa4f-c161a15d9452"
        },
        "item": {
          "id": "f137ccd7-ca7c-4308-bb91-6c3ea55c4fb6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "88d24198-e8d4-48c3-aa81-7d5c88374609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af3ba37c-9b22-402a-b575-6e79874a6e9d",
        "cursor": {
          "ref": "45567c36-ddbc-405a-8292-9b23753aecbf",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "56a91997-797e-4b1b-8368-a99acead5897"
        },
        "item": {
          "id": "af3ba37c-9b22-402a-b575-6e79874a6e9d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "fc0956f5-aa2f-4bd0-b582-4114527c47cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d03ade-5b99-4e82-b9fe-38847c40812d",
        "cursor": {
          "ref": "96042411-4100-4a6c-9d5c-5bee22424d22",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "10105cbc-eb0d-4bf6-aadc-76be2da091d6"
        },
        "item": {
          "id": "59d03ade-5b99-4e82-b9fe-38847c40812d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c2d23eb4-d227-4927-8d8a-4f389b4ffccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fde0190-085f-4b90-bb2b-2ececf866b9f",
        "cursor": {
          "ref": "ae255253-cf5e-40e5-ba63-c97fff1a8285",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "26d65715-5af3-4d34-9b50-c7becd853347"
        },
        "item": {
          "id": "3fde0190-085f-4b90-bb2b-2ececf866b9f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1162e161-2a4a-4cb9-b99e-c1c2aba2ed6c",
          "status": "Created",
          "code": 201,
          "responseTime": 651,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "12dceecd-fbc4-4079-b8f2-902c3259e724",
        "cursor": {
          "ref": "4390254f-464f-47b3-b6b4-3064313302d2",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5000ce06-2665-4244-86cf-2915b6e241f2"
        },
        "item": {
          "id": "12dceecd-fbc4-4079-b8f2-902c3259e724",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "40b3d64f-c354-4f61-8cf2-fe1d485400cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e510c5c1-8c22-41c9-a93b-39b5f0e066e6",
        "cursor": {
          "ref": "8bf2b58f-c842-4b97-9600-63d9a03d2310",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c362be78-ae1e-4563-8bf3-fba3388b34c7"
        },
        "item": {
          "id": "e510c5c1-8c22-41c9-a93b-39b5f0e066e6",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "913489bb-6c95-495d-b2a1-95ee0aa9f589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1238b7b7-2e71-4c1b-a6a5-5421aaedc2be",
        "cursor": {
          "ref": "4545f7ba-2496-4866-8196-5ebe3d63824e",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b9cad731-a03a-48dc-b910-11edd24c554f"
        },
        "item": {
          "id": "1238b7b7-2e71-4c1b-a6a5-5421aaedc2be",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1f2f9097-935a-4057-b67b-309f2680ee97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b2c48e-65e8-4bb0-83e5-72fe161994fb",
        "cursor": {
          "ref": "65dbb8b6-2909-4af4-b8d6-f59a3d78202a",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "77e6a395-0c7d-47a7-b4cc-eb70e6b03cca"
        },
        "item": {
          "id": "e5b2c48e-65e8-4bb0-83e5-72fe161994fb",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4fb3bcde-f9b9-4458-92bb-c326282ec16d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc06232-98a8-40be-bcac-177c8b9720ef",
        "cursor": {
          "ref": "c194435e-0970-41f6-ae97-8db1dfcd6dd9",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f609fb16-8a47-475c-9c86-8e78368c9ed3"
        },
        "item": {
          "id": "7bc06232-98a8-40be-bcac-177c8b9720ef",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "55de66f5-a160-44c1-a880-f2de8a50ac08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16451a6e-0370-46e6-82d9-46bd1e1cdd65",
        "cursor": {
          "ref": "f0b0c038-0f31-41af-9c54-9ef3571e4a35",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b1c6c3d7-7781-438a-97f3-1ed6f905210d"
        },
        "item": {
          "id": "16451a6e-0370-46e6-82d9-46bd1e1cdd65",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f3c04917-da5f-4db1-aa98-a7f0f617247d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20ca11c2-774e-4793-88ae-2d4f05f3dd8e",
        "cursor": {
          "ref": "2fedb5da-55a7-43e0-aa72-d81a184e4311",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f5a79e4e-60e4-4d14-b129-8b386f53e677"
        },
        "item": {
          "id": "20ca11c2-774e-4793-88ae-2d4f05f3dd8e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1dab345d-59ae-423b-a413-95586af74bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abec368c-58e0-476d-9013-a18f7bd3926f",
        "cursor": {
          "ref": "bab1d4d9-6976-431e-ad3e-0541db89c2c3",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "306f0985-4c0e-4841-aeaa-4b6fb8222a1f"
        },
        "item": {
          "id": "abec368c-58e0-476d-9013-a18f7bd3926f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "97da8f9a-dcfc-46a9-bde9-63b15d64a2b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b302ab-0367-4407-9a9b-7cdb4497fe33",
        "cursor": {
          "ref": "6516e18b-0d79-4d4b-8ed3-4bce23d508dc",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2500d36e-037d-4fe7-8392-bf63894b8a86"
        },
        "item": {
          "id": "39b302ab-0367-4407-9a9b-7cdb4497fe33",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "58228ce6-78dc-4c76-9332-2854b02784ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e59676-c431-4a1b-80e8-b1da3d9a9998",
        "cursor": {
          "ref": "6a84a8c0-bdac-4c3f-b142-3c09a9fe7882",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4b2a6141-c19a-49de-a7a1-5867dd8a6a7a"
        },
        "item": {
          "id": "d5e59676-c431-4a1b-80e8-b1da3d9a9998",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b66ada98-b12a-452e-ab36-e73715d330e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b777975-be71-4379-b322-369b1ba394ed",
        "cursor": {
          "ref": "2037e0de-7048-47f7-8927-743ce3cee7b9",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "43b6e9b3-c2f4-4c3f-8e12-3ff9a46b71bf"
        },
        "item": {
          "id": "3b777975-be71-4379-b322-369b1ba394ed",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "658517f5-db99-4da0-ae18-907bf3d06f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a81e150-21be-423b-a8c0-e364788dc86b",
        "cursor": {
          "ref": "2f34a72f-f58f-453b-8f34-6b331b602736",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7e12f7ba-4aa1-44fb-b2d5-e083411dc9b5"
        },
        "item": {
          "id": "8a81e150-21be-423b-a8c0-e364788dc86b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "18c7cf3a-c084-4a60-80d2-dbd4b6105efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "985a2cb5-8d46-424f-ac96-369ab380d592",
        "cursor": {
          "ref": "81368cb4-19e5-432c-9d49-770678627955",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7f4381cd-7303-4987-b220-37b46ff2e4ac"
        },
        "item": {
          "id": "985a2cb5-8d46-424f-ac96-369ab380d592",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ea374e5e-19e3-4599-8678-e5c646f53692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 341,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d9103ed8-63ff-4ade-8c0e-bf942f90ced2",
        "cursor": {
          "ref": "72f6bb4a-6733-4d36-a666-6326fe59b3ab",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "55967f59-bfb4-4600-b3de-6ea090a811f0"
        },
        "item": {
          "id": "d9103ed8-63ff-4ade-8c0e-bf942f90ced2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9b7d4486-e0c3-4dcd-8e28-759740768b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f03dac2-57e9-4a45-a883-55649286bee0",
        "cursor": {
          "ref": "3107e196-4a07-45e1-8128-463be1b23c45",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a20e4479-927c-45bc-aec3-4b030bfbda66"
        },
        "item": {
          "id": "1f03dac2-57e9-4a45-a883-55649286bee0",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "43c10c6a-980d-4b54-b851-947925cbd351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd7a21d-30be-4cfa-bbcb-1510b69f648f",
        "cursor": {
          "ref": "5c47e3e6-512b-4d2e-ae94-e97fe089cda6",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4ed40795-cdd1-4e8b-a142-aa7edff1e02d"
        },
        "item": {
          "id": "4bd7a21d-30be-4cfa-bbcb-1510b69f648f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "58e7b46f-bcdb-4c13-b154-0cdf616f8853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa85b866-49cd-4786-bfbd-0601c22a505d",
        "cursor": {
          "ref": "2da66f13-6dff-4838-b385-d106e6476f08",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d6b027ef-c5e2-4962-912d-52c6e9a0e84b"
        },
        "item": {
          "id": "aa85b866-49cd-4786-bfbd-0601c22a505d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "5f5f372e-2030-42d6-8e55-b887ddaf3606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b32122-20f9-4eb0-8f24-7df2d0d245f5",
        "cursor": {
          "ref": "d365a3f8-c938-4b35-bbe7-c1264581181e",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c6962d27-e5b9-46cf-8996-e8cb124cef1d"
        },
        "item": {
          "id": "15b32122-20f9-4eb0-8f24-7df2d0d245f5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ec637079-95aa-482c-8700-37d6387d1bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096cb959-e20f-43e6-8e39-6540c3efcb18",
        "cursor": {
          "ref": "fb4477fa-1327-4e6e-b4c8-f6010b620d3e",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "745f7259-af8a-46bd-9aad-5f85482da4c6"
        },
        "item": {
          "id": "096cb959-e20f-43e6-8e39-6540c3efcb18",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "82f42901-1087-4555-9542-165b65f9395f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff64bcd-2613-47e2-9ad9-153514678d6a",
        "cursor": {
          "ref": "4eaeb8a4-eb87-4b78-a7e9-579914b898b9",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ed29f9c7-cae0-46b5-8a2f-e523ec56f795"
        },
        "item": {
          "id": "eff64bcd-2613-47e2-9ad9-153514678d6a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "50820556-860c-45b0-9e43-9ab81bbf304d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 340,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "96ce097e-0786-4372-8fc8-e03f512dbaa5",
        "cursor": {
          "ref": "7cd83a36-063d-42ec-8008-229252c6e5f4",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "bf38a34d-002e-4bb0-a46c-bbd8ab6ee4df"
        },
        "item": {
          "id": "96ce097e-0786-4372-8fc8-e03f512dbaa5",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "5b752933-633d-4685-8bc7-b56eb4f4f5ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7756954e-d68a-44a6-a51a-c9a6e00f5f7d",
        "cursor": {
          "ref": "4641a8c8-b47f-4fb8-a2cf-e4b48fa55b5c",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f3635597-a5e8-4759-8986-06cd9d0bed6b"
        },
        "item": {
          "id": "7756954e-d68a-44a6-a51a-c9a6e00f5f7d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6504dcd3-004a-4c0e-a3a0-d9c77ac26285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a6cd4f0-df7a-4fd1-9837-0cefd733834c",
        "cursor": {
          "ref": "10fdb89c-2871-4773-86b8-4da3576f13a2",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "9337fc32-e5a0-43b7-be2f-dcfb72572bcf"
        },
        "item": {
          "id": "2a6cd4f0-df7a-4fd1-9837-0cefd733834c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "98a63895-79bb-481c-a8f6-79465e4c3095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028c8834-8fc0-4507-9bba-7e552c1f2eef",
        "cursor": {
          "ref": "b262c097-2420-482e-b178-1034f6e20c91",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "55b05ab9-d203-4d71-b028-e140ba74d19c"
        },
        "item": {
          "id": "028c8834-8fc0-4507-9bba-7e552c1f2eef",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4a123a76-3d55-4e87-80ab-9908f7021796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681e8b8a-4c1a-40dc-a1b7-e5daf19ff6ad",
        "cursor": {
          "ref": "c64506f4-e712-4b15-80d6-1e987c9ad6aa",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4d535020-7e24-458a-9481-880e9fac3db8"
        },
        "item": {
          "id": "681e8b8a-4c1a-40dc-a1b7-e5daf19ff6ad",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c38aca5e-a815-487d-90cb-a050b1580ccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58175cc2-8eeb-4c06-86d5-6ed84221cd69",
        "cursor": {
          "ref": "fc4028f5-ac72-493e-85f1-865022274064",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "aa875d32-0f55-472c-8cab-c5bb65568514"
        },
        "item": {
          "id": "58175cc2-8eeb-4c06-86d5-6ed84221cd69",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "03e0c853-7885-4253-b947-96e06cb96bcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb434139-bdd8-4a1c-b473-35fa0ab8db5d",
        "cursor": {
          "ref": "c5f0dd1c-40c5-40c5-aaf4-71366c617776",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "64b6c711-5224-4b8d-b02e-02d976bbb674"
        },
        "item": {
          "id": "fb434139-bdd8-4a1c-b473-35fa0ab8db5d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5f5e3167-a0a0-4e40-8483-92ed9a389e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "978eccbe-b08a-4077-858a-87dda3ca3f34",
        "cursor": {
          "ref": "391049ed-3ae1-45f9-9023-56ddf09209ca",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "55f1d5f0-6ff7-4b0c-8f0f-b5139a9939de"
        },
        "item": {
          "id": "978eccbe-b08a-4077-858a-87dda3ca3f34",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "eb168ce1-f332-4a77-bde0-068c692820b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06adba5f-fe1e-4c63-80d8-3399ca1d989b",
        "cursor": {
          "ref": "c5429972-ebb9-4c2c-b9a4-c7a48fe62c54",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0bfa610a-7789-4ac8-bec0-f2026fd39cc2"
        },
        "item": {
          "id": "06adba5f-fe1e-4c63-80d8-3399ca1d989b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "503cedc6-9408-491b-8f56-0513ecd2c0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab4945d-4651-465c-85cf-d366673fff3c",
        "cursor": {
          "ref": "af6a4b31-04f5-4c45-9fd9-f8f645793edb",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "32ce647d-5ff0-4101-9b3d-b4c96902e776"
        },
        "item": {
          "id": "fab4945d-4651-465c-85cf-d366673fff3c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f3ce2eed-16b4-4599-9dcf-98b90410ffe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff392c79-78cb-44f3-bb27-53040e136fa2",
        "cursor": {
          "ref": "c4ad2961-9d6e-4de5-9d2a-89ff57295430",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b5bc237c-0ba9-4c02-bdf7-fd8027b3d3c5"
        },
        "item": {
          "id": "ff392c79-78cb-44f3-bb27-53040e136fa2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1264105c-5fdd-47d3-b54e-bb590285ecce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afabe96f-d286-4de1-af54-c484d9b4001f",
        "cursor": {
          "ref": "a1b70270-8cff-444b-93aa-37903487474e",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "16301cc7-8bd5-4fa5-abe0-279f3949f746"
        },
        "item": {
          "id": "afabe96f-d286-4de1-af54-c484d9b4001f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "fb1ca256-e822-40ff-b6fd-9398e9978e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807a1e04-9663-4cfa-8797-85e13c034f59",
        "cursor": {
          "ref": "10521834-9d93-4d58-980e-140d1349dc2e",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5c8f4de1-21ef-41b8-b952-6140d523b373"
        },
        "item": {
          "id": "807a1e04-9663-4cfa-8797-85e13c034f59",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f47b85fd-a596-45ba-8c67-0266490e707b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c17d8235-71d6-4682-bdc3-375c32a2fb84",
        "cursor": {
          "ref": "c191ee32-b8a3-43a9-bf55-e05026a7f2ea",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5264f154-c9de-44e1-a3ee-f7b5d0c523dd"
        },
        "item": {
          "id": "c17d8235-71d6-4682-bdc3-375c32a2fb84",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f4f12477-6fcd-4b1a-b6ca-dafd6e86c4d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b94f53a-a11f-4425-96c8-d3270f8ac1af",
        "cursor": {
          "ref": "130988f7-7a58-4c48-bf09-e59b65ef95b0",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2f1cd97b-0295-4688-a173-94b95cf4ccd1"
        },
        "item": {
          "id": "3b94f53a-a11f-4425-96c8-d3270f8ac1af",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "79ece65a-eec6-44ec-896d-0b42a970107a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d341085-f6a9-4662-9e2c-30772c83af53",
        "cursor": {
          "ref": "877bbe39-2a30-44d2-8019-7dd296d01aeb",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c4937db6-d35b-436c-92bf-9ac95dbc40d7"
        },
        "item": {
          "id": "4d341085-f6a9-4662-9e2c-30772c83af53",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1e2854ce-e5d6-4663-99d9-62122ed28aec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "095720ca-3429-462d-83f0-343bb4bf4522",
        "cursor": {
          "ref": "a8b179e5-26c3-4b79-81d2-01c68e329821",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "51bb9f91-6ef3-45a7-9887-e1998ed9f370"
        },
        "item": {
          "id": "095720ca-3429-462d-83f0-343bb4bf4522",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "29b3d0c2-1d19-4052-a7c9-0f6fb385320b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c750dcb8-0d45-4a45-94ee-9cda02bef2ee",
        "cursor": {
          "ref": "6d8038c9-6a49-4947-91f3-1ee60e105f8e",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "87569fb7-f416-4d39-997b-78cae849f903"
        },
        "item": {
          "id": "c750dcb8-0d45-4a45-94ee-9cda02bef2ee",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "114755c8-d700-4d4e-837b-9e4fbaffd09b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7330fd6-bae3-49c1-97ca-2dbbc2fc496b",
        "cursor": {
          "ref": "9878b198-44a8-4bc5-9436-9d862847b12a",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "520ae7ec-fa59-4d60-9f58-62c459b78989"
        },
        "item": {
          "id": "a7330fd6-bae3-49c1-97ca-2dbbc2fc496b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "63048e4e-8a50-4df2-abd7-f62f7d557a55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3bed23-8c21-44df-b837-1efa877ef58c",
        "cursor": {
          "ref": "2be66ed3-63dc-42c5-9633-d043d18852d2",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "3aa53b01-d8f3-477c-8b52-274536c783d4"
        },
        "item": {
          "id": "7a3bed23-8c21-44df-b837-1efa877ef58c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "02efa3d1-7429-4312-aab3-8edd22004a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b224e8-54ee-4d21-b079-8592ed5c95c7",
        "cursor": {
          "ref": "3d135f48-af8d-4c2a-87a5-acda9061ab04",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "382282c7-ccf0-4317-9aeb-7b6f3beb7c0a"
        },
        "item": {
          "id": "b1b224e8-54ee-4d21-b079-8592ed5c95c7",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b4307c39-bdc7-4736-bcad-7a3c761a4931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa8f051-1cdb-4bcb-a794-ad0eb8f762ba",
        "cursor": {
          "ref": "63de43b9-8c43-4b22-9be3-cb18c302fd2d",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6a4306f0-bc1b-4d1c-a212-dee23cf151eb"
        },
        "item": {
          "id": "2fa8f051-1cdb-4bcb-a794-ad0eb8f762ba",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "84c5fd86-48fa-4da9-9a73-0a3cfa30768c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "821903ec-685c-4a7c-af01-b56eba03df61",
        "cursor": {
          "ref": "267e0796-520e-4674-ab86-ad5144d37651",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "8bf29ba3-9f58-464f-b8cd-4c02eb890645"
        },
        "item": {
          "id": "821903ec-685c-4a7c-af01-b56eba03df61",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "13c717a1-1602-4ddc-9dd2-c2f2b9b6a123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "248e3d45-cec3-4168-a0b0-350090cdc3a3",
        "cursor": {
          "ref": "bf911831-470a-4b8d-8625-255b112a588a",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ef77f569-b711-4352-83a3-5e3aa19e99cf"
        },
        "item": {
          "id": "248e3d45-cec3-4168-a0b0-350090cdc3a3",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "74e320d7-3b6a-4b41-a9fe-f8a133189ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9fa9645-7539-4acd-a7da-be5b8e77dfb5",
        "cursor": {
          "ref": "2b1bb15a-c39a-403f-96b0-f324eeeaaba4",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "bc99c7fd-50bf-44d0-9d3e-298357f7b0bd"
        },
        "item": {
          "id": "c9fa9645-7539-4acd-a7da-be5b8e77dfb5",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "616d692f-67a4-416d-9630-3a6a3697d710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d22bd9b-0cec-4484-8410-080cd9468626",
        "cursor": {
          "ref": "b83633ad-efb3-45c8-8ff8-7e47e6c51a3e",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "93bc4bd6-3603-4d21-b551-e083ad990614"
        },
        "item": {
          "id": "9d22bd9b-0cec-4484-8410-080cd9468626",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "92d13711-5809-4d3e-ab6f-f6b9b5b05a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "521192e6-e263-4ac6-bf85-9c11a7e29aca",
        "cursor": {
          "ref": "bdfcda28-5fca-43cc-a404-e309fd4f2377",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "556e987c-bf79-4036-b30e-172219698309"
        },
        "item": {
          "id": "521192e6-e263-4ac6-bf85-9c11a7e29aca",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3d9f8ac0-a6cf-45a8-8425-d7dfcb636b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c7dd972-a3a9-4756-905b-1410d179c57a",
        "cursor": {
          "ref": "bcfa7278-cdb0-4b98-908d-8f3d0e51e650",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e416d3f7-71e1-4ae3-90e2-3127e57e842e"
        },
        "item": {
          "id": "5c7dd972-a3a9-4756-905b-1410d179c57a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "543d2358-9bf3-4d97-a60e-0cd6798a28b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cbf70e2-d768-4855-9155-024f2316ebd8",
        "cursor": {
          "ref": "81bc2ad2-23de-46f6-b24f-6858bebc2991",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "03367771-ee04-45a3-b31b-7039895110fe"
        },
        "item": {
          "id": "9cbf70e2-d768-4855-9155-024f2316ebd8",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8f4099f2-224a-4070-b683-85726e2229e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989e4ddb-8d13-4ee5-8a5a-b739e139178f",
        "cursor": {
          "ref": "f0dc287a-9b3b-4d54-8def-179bbf765c03",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c6a3a4d9-6928-4a24-b7d9-7a81b3001b3b"
        },
        "item": {
          "id": "989e4ddb-8d13-4ee5-8a5a-b739e139178f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "50d90d67-259f-4905-8714-88e0573f0322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "659608b0-cd08-4e6f-8008-63826a990eef",
        "cursor": {
          "ref": "2e631358-97f3-4b75-b4ab-1c0f6b9120f9",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "cbb02ee5-8f06-40b2-9ecd-ed6ecb9e0905"
        },
        "item": {
          "id": "659608b0-cd08-4e6f-8008-63826a990eef",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c5570c63-240d-4fa9-bf86-f9e728fa9b30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 332,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eefbd6ea-e71e-47b8-b529-b8e635fd9c89",
        "cursor": {
          "ref": "807cc487-73a3-40dd-b636-c4737988dcd2",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ee897f21-34af-4be5-8342-2f813a79b030"
        },
        "item": {
          "id": "eefbd6ea-e71e-47b8-b529-b8e635fd9c89",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c67c6bd3-2382-48cf-9b11-58eee763057f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9fcf34-edd4-48f8-b732-751497c36041",
        "cursor": {
          "ref": "4e0f8e2c-5373-41f6-a70c-c3b12f7bed11",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "041dd290-042c-4b6c-bc33-fa5096ba6a11"
        },
        "item": {
          "id": "9c9fcf34-edd4-48f8-b732-751497c36041",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "19911b1e-749b-49ab-88ac-503f9eab0fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0936206f-6c11-4a25-bf7f-aca3d1345b72",
        "cursor": {
          "ref": "700e905b-08d1-4052-b087-3519e8caca2d",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "94c96597-a26e-4f22-9341-502ce362e8f8"
        },
        "item": {
          "id": "0936206f-6c11-4a25-bf7f-aca3d1345b72",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "45ab53e6-a552-490c-a8ec-521cb9be36ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca25c6c-dd2a-4ba5-b560-4bc176cc9e91",
        "cursor": {
          "ref": "1230fe83-177b-4761-9775-b4baaa5c3d01",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "baa52e28-0060-487b-a5f0-d31c35f39c69"
        },
        "item": {
          "id": "3ca25c6c-dd2a-4ba5-b560-4bc176cc9e91",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "29e728e1-9356-43c9-b722-4ca138b3f890",
          "status": "Created",
          "code": 201,
          "responseTime": 667,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "315d1378-80c7-4c09-a067-253bd41b7b1e",
        "cursor": {
          "ref": "b65cc880-8149-4994-abfb-98aaa72e5070",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "1a37403b-9477-4a3b-8eaf-3f75359809f6"
        },
        "item": {
          "id": "315d1378-80c7-4c09-a067-253bd41b7b1e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "6a3c958f-acd5-45d9-945e-f47e6ccacfd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ab1b48-d8e8-431f-8222-18bac6379fa8",
        "cursor": {
          "ref": "b7315876-6170-49c6-b48a-4892c57116a4",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "32bb347e-f453-482c-9e58-75538b0a9561"
        },
        "item": {
          "id": "64ab1b48-d8e8-431f-8222-18bac6379fa8",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "8cfde2d8-8125-4cb8-b365-8cc6ae079204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8cfc6c-77be-4d42-8891-c7df873cc010",
        "cursor": {
          "ref": "4c9e75cf-76d4-40e7-abf7-1b9f1b766117",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "4748ec09-f88b-48ba-9e73-f5e1a65faed0"
        },
        "item": {
          "id": "6f8cfc6c-77be-4d42-8891-c7df873cc010",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "32d89e47-8eae-4172-9839-ff14a9db0c70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b36206a8-9e89-48ea-949b-d7c32ae5c10a",
        "cursor": {
          "ref": "dcc3b085-0837-4fe6-8802-95aa44d22adf",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9fab3a0f-9fbc-45ae-a584-237263cccfc9"
        },
        "item": {
          "id": "b36206a8-9e89-48ea-949b-d7c32ae5c10a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f770868d-ef09-4591-89d0-7872c93194f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce8d6bc-3383-4895-a663-f338d2abff07",
        "cursor": {
          "ref": "75cbe1d2-61df-4e2f-b1d1-5ea83612720f",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "087e010d-2f53-470b-b675-65dc6771c5d3"
        },
        "item": {
          "id": "fce8d6bc-3383-4895-a663-f338d2abff07",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "db05804a-8659-40cd-8a45-ec2026dec7f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b9fb8d4-42b4-418d-9a0c-8e08c27a3033",
        "cursor": {
          "ref": "52facd3f-ad8b-4938-af31-3bf1a3d214a6",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "5a1bc055-8257-41a5-ac3c-4b2dc20c4d74"
        },
        "item": {
          "id": "0b9fb8d4-42b4-418d-9a0c-8e08c27a3033",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "068f2a88-8549-4b3b-a2dd-7883e77c542c",
          "status": "Created",
          "code": 201,
          "responseTime": 642,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "b9f17f06-b791-408e-900d-c3850469ef6a",
        "cursor": {
          "ref": "188d02ee-bb05-4127-82b8-d2e728deed1d",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0ff1d919-1498-4945-8c71-1a77ad49de79"
        },
        "item": {
          "id": "b9f17f06-b791-408e-900d-c3850469ef6a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7cbfa265-497d-4b1e-8ed3-66263e882d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717b9b3c-fe1a-4b24-abc7-d4a9c1e823e5",
        "cursor": {
          "ref": "aaa15107-9078-4d2e-8218-3d48fe77745a",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8c44e0fe-a0b9-4f92-ab34-f90539a28388"
        },
        "item": {
          "id": "717b9b3c-fe1a-4b24-abc7-d4a9c1e823e5",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f2a8af7d-4596-4c0d-9808-881cd71b7fac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd4d5ab2-f33a-49f4-b4fe-e21259196cd7",
        "cursor": {
          "ref": "2a7f416c-ccd0-4ad0-8268-e7aef3b07c13",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a558cf1e-9720-42a4-9200-d849313da28e"
        },
        "item": {
          "id": "cd4d5ab2-f33a-49f4-b4fe-e21259196cd7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e6511cae-1c1c-4401-9c53-e8853bf66b5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d9664e-2190-4547-8233-c9d10b5c2da8",
        "cursor": {
          "ref": "1d6359aa-fd41-4473-bbfc-7040f980c610",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5bf52e77-e6cd-49f8-90c2-110969635c8e"
        },
        "item": {
          "id": "93d9664e-2190-4547-8233-c9d10b5c2da8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c13f955a-4377-4ff2-8225-b00a10043075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe24377e-1971-4f3a-aff5-be2fb6727cf2",
        "cursor": {
          "ref": "cd17f18e-5957-4227-a59c-0eb81ea8ae72",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0e4a8e43-29fd-4210-ad82-4b3e7f2726ee"
        },
        "item": {
          "id": "fe24377e-1971-4f3a-aff5-be2fb6727cf2",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f1400303-853f-4b7f-836b-82b160574736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc7d07c-6eeb-49ed-b6b4-cc8d9f5c4c62",
        "cursor": {
          "ref": "8283e016-a8e0-49f6-bdc2-d75513c5c469",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "05079472-edb8-46e0-98c2-6ac88a09c3d2"
        },
        "item": {
          "id": "8bc7d07c-6eeb-49ed-b6b4-cc8d9f5c4c62",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d9842f06-f471-4ada-92ca-e6fd77185944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "808c5c6a-e518-449f-9946-e721de063133",
        "cursor": {
          "ref": "e56dd31a-750c-4d3e-a06e-bc27aceecbe2",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8eafa8bb-4704-469b-8796-873e231f5a68"
        },
        "item": {
          "id": "808c5c6a-e518-449f-9946-e721de063133",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ae4a5854-783b-4d62-aea7-09cc8eca7e75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "248022af-68f9-48f3-bb4c-b13a956d161f",
        "cursor": {
          "ref": "8b8deb35-e993-47c2-adff-9c0bfa2cc6c2",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9359242a-e370-4759-b62b-ca2b0986d3ea"
        },
        "item": {
          "id": "248022af-68f9-48f3-bb4c-b13a956d161f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "125244ff-9486-441c-9aa8-1a3e71fd64b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab64b91d-64de-4f85-83a0-73760191c3fe",
        "cursor": {
          "ref": "5580749c-61da-4507-8c57-8854b919aeb1",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6cb89b69-a846-474f-90bb-b95ccf0867ab"
        },
        "item": {
          "id": "ab64b91d-64de-4f85-83a0-73760191c3fe",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "880bdeb7-5482-450b-bb79-5d8e897ef9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "11c726bb-e5ec-45ba-bb68-519a7d7b24d0",
        "cursor": {
          "ref": "8f972f83-5c72-4bdd-87bf-72e10ab868bd",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "aceee4a2-672c-445b-b554-e1dcc420a578"
        },
        "item": {
          "id": "11c726bb-e5ec-45ba-bb68-519a7d7b24d0",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "f086f0f8-d934-4c36-afe1-b281e2f75e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "26dfc6d5-bf37-4ee2-8794-1cc678ca1e1d",
        "cursor": {
          "ref": "48d788c7-70b2-4472-af46-f1a10c62c4b2",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6494913d-e5b2-49ed-a64b-923132d579d3"
        },
        "item": {
          "id": "26dfc6d5-bf37-4ee2-8794-1cc678ca1e1d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e69a95af-3be4-4407-b4eb-f05dfd913f26",
          "status": "Created",
          "code": 201,
          "responseTime": 637,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c2bf90b-d4fb-4e01-97dd-5f162fa2453c",
        "cursor": {
          "ref": "86da64f6-f9d2-491d-b140-8d06f81f588a",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2100f86f-7691-48ea-a384-20d57b1fcaf7"
        },
        "item": {
          "id": "1c2bf90b-d4fb-4e01-97dd-5f162fa2453c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0ff7aa69-3ee6-44dc-8788-d8ca943ebf53",
          "status": "Created",
          "code": 201,
          "responseTime": 657,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "14764d36-7f95-4543-9cc1-686fb0c1f6c4",
        "cursor": {
          "ref": "e4814ed8-ef25-4d4f-9c28-6f4699e6ee0e",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "17c7fb21-ad16-4f4c-906e-7f9b28da427b"
        },
        "item": {
          "id": "14764d36-7f95-4543-9cc1-686fb0c1f6c4",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b7ee6c3c-ae6b-4181-b823-8d19e53d3b1d",
          "status": "Created",
          "code": 201,
          "responseTime": 646,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed20425-8ff6-4820-b32c-892702fddf04",
        "cursor": {
          "ref": "e6168fd2-897c-429f-b5db-67fcf598a647",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "91ab5212-c144-4a58-b962-122592c679fb"
        },
        "item": {
          "id": "0ed20425-8ff6-4820-b32c-892702fddf04",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "21e912d5-83ad-45f9-bc86-e4d1cdc29d9b",
          "status": "Created",
          "code": 201,
          "responseTime": 655,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "dce5ddd0-6337-4f0e-87b5-91cc9887a4ed",
        "cursor": {
          "ref": "4a2dd297-bfeb-48a1-9f1d-3fd5367f44dc",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3bd6ab59-ef18-44fa-bbf0-080635de5bff"
        },
        "item": {
          "id": "dce5ddd0-6337-4f0e-87b5-91cc9887a4ed",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3d4cc69c-655c-4091-8270-5beb92515da8",
          "status": "Created",
          "code": 201,
          "responseTime": 653,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8ce34e1-0960-4faa-acd9-726f69b28fd6",
        "cursor": {
          "ref": "8ef86f75-be51-484e-9ff2-ee4bb3084b96",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4b534c9c-599b-465a-98ff-be21f5298731"
        },
        "item": {
          "id": "c8ce34e1-0960-4faa-acd9-726f69b28fd6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "58b5bc99-c208-46fd-b9f8-f5f1e5bdb1a9",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "c8ce34e1-0960-4faa-acd9-726f69b28fd6",
        "cursor": {
          "ref": "8ef86f75-be51-484e-9ff2-ee4bb3084b96",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4b534c9c-599b-465a-98ff-be21f5298731"
        },
        "item": {
          "id": "c8ce34e1-0960-4faa-acd9-726f69b28fd6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "58b5bc99-c208-46fd-b9f8-f5f1e5bdb1a9",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "0fe56e15-175e-4a98-b706-7a6ecda4bf3d",
        "cursor": {
          "ref": "ed132f42-88d9-45b9-b3f2-6b3b9eefa511",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "559160e0-d791-4813-8a7d-c072a993d4a6"
        },
        "item": {
          "id": "0fe56e15-175e-4a98-b706-7a6ecda4bf3d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a623e1d8-c95b-4d40-b255-e9cc06c3636b",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "389b9cc7-ef1e-4057-81d6-f7e116103e3d",
        "cursor": {
          "ref": "338ff045-3826-4502-ad66-201d2d34e315",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "74393a76-a469-4514-9f3b-89771dfd8adc"
        },
        "item": {
          "id": "389b9cc7-ef1e-4057-81d6-f7e116103e3d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "15eaaa8c-59b8-4d59-bc0b-99275f9e95b2",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "c643e5bb-f319-4a9e-8ae9-1d3e922c02e4",
        "cursor": {
          "ref": "dc9c27d5-3d87-4679-a1e6-9ff5344360f8",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c9ab7405-4893-4496-ad79-ab27b94be2ca"
        },
        "item": {
          "id": "c643e5bb-f319-4a9e-8ae9-1d3e922c02e4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a33bb4f1-256c-4b69-9c0f-1ee7e3ec879f",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "35974c53-cb8a-4d8c-863d-18e116238754",
        "cursor": {
          "ref": "66ac2e76-6083-49ad-b597-3a1041d3a411",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "446bf116-1c27-4882-ad1f-19f8bbb06fa6"
        },
        "item": {
          "id": "35974c53-cb8a-4d8c-863d-18e116238754",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e1a3bff2-351e-41fa-85c7-f900ce7c3afd",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "b5fcdf2d-405e-401e-9837-f39faee8b1db",
        "cursor": {
          "ref": "2ff10e10-c9e7-4633-9e22-fb80b9a74b45",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ab08e50b-794d-4304-b406-284e5d5ed2e2"
        },
        "item": {
          "id": "b5fcdf2d-405e-401e-9837-f39faee8b1db",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "593924a8-5593-4bd6-acc6-652b521537b6",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "fce9f547-a8f2-4962-867c-b95634fc933a",
        "cursor": {
          "ref": "1e072fad-cfed-45bc-9ede-95f834762d52",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "04b7a1f6-3fd4-4858-85b2-a8ffb4ded815"
        },
        "item": {
          "id": "fce9f547-a8f2-4962-867c-b95634fc933a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4875b64f-ba14-4d65-9192-297ccb09c493",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "5c32b6fb-4a6a-496c-a3b9-88fd0f247f96",
        "cursor": {
          "ref": "4c1af96f-95d2-4840-8fc5-128db5c6e4f4",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1160d06b-47ac-4fdf-b89c-ad8dae9fdd82"
        },
        "item": {
          "id": "5c32b6fb-4a6a-496c-a3b9-88fd0f247f96",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2c3fb11b-22d4-4b88-a08a-ea0301ad03c8",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "537572cd-779a-469d-a569-c3517ba2b4ea",
        "cursor": {
          "ref": "01d8db90-69cf-4f68-9653-9d0ea3a2cb20",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "89d0c4ba-8b14-47c6-abc5-05e81f738a6c"
        },
        "item": {
          "id": "537572cd-779a-469d-a569-c3517ba2b4ea",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7d9a5d94-b62b-4ac9-80d7-ea2148290eb3",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "85b8d7d3-7462-40a4-adea-11b24673d536",
        "cursor": {
          "ref": "ad49a76b-bab8-4752-8d34-9d2c63e3e4c7",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2e9a300b-5928-432f-a67e-b2c464c78c89"
        },
        "item": {
          "id": "85b8d7d3-7462-40a4-adea-11b24673d536",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a46115ac-66b3-476a-9821-51185678ca0c",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "aacdbd5d-1397-4bbd-8d15-981de38a7031",
        "cursor": {
          "ref": "66d0dec2-401b-4f07-9b6f-6a69f251322b",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "bea73642-9621-4a1b-8a43-da359047ef8d"
        },
        "item": {
          "id": "aacdbd5d-1397-4bbd-8d15-981de38a7031",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5e93db6a-b27f-4393-85a8-c649702ad71d",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "f0071a8e-e13e-43ab-8b4f-2ec1d333c4bb",
        "cursor": {
          "ref": "06ddaa1f-9266-4e79-88c7-56e1e9a00706",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5da7422b-7aa7-480e-bb03-2a268090fe40"
        },
        "item": {
          "id": "f0071a8e-e13e-43ab-8b4f-2ec1d333c4bb",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "42a5bea2-b32f-4483-8193-d1bc8aecf417",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "32da76fd-7a84-45af-a8e3-2760360e76e2",
        "cursor": {
          "ref": "1ef549e6-254a-4850-bc06-18661fcbeed9",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "bb2a3a35-40bf-4360-a961-c1ea545f05b2"
        },
        "item": {
          "id": "32da76fd-7a84-45af-a8e3-2760360e76e2",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c0b2966c-db9c-4670-b614-5d87592268f2",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "85dee730-0360-478d-bc02-982796b042a4",
        "cursor": {
          "ref": "a2210660-38d4-4db7-9f77-5763ea36b526",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c2d2297f-da12-497f-b4ca-2ca3ca08d347"
        },
        "item": {
          "id": "85dee730-0360-478d-bc02-982796b042a4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1ea4107f-dd19-461a-977d-1456b1c66e71",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "8bb82528-540f-42d3-9a3a-170bbcdf326b",
        "cursor": {
          "ref": "5a00a598-4e56-4865-9011-a3071048bbef",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "8082b6d2-348d-46e1-86e7-637ece04dcc5"
        },
        "item": {
          "id": "8bb82528-540f-42d3-9a3a-170bbcdf326b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a9093a13-0a9e-4aaf-b66d-9569c7edce61",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "500a3fb6-7e4c-43e7-a7f7-b549b4bf82c6",
        "cursor": {
          "ref": "bfbba7b5-2c82-4d4d-a20b-62a7b2ae201f",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "734c9f48-d073-47db-b12e-9d87de2be431"
        },
        "item": {
          "id": "500a3fb6-7e4c-43e7-a7f7-b549b4bf82c6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d2c358fb-d681-4642-8564-14c83e40b812",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "d0729a97-e173-4917-9848-14d678d31626",
        "cursor": {
          "ref": "8d3383cb-2dd1-4bf7-a5bb-2f8accce6e8b",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "49871b88-6505-4ac1-bc28-5e9bddccb865"
        },
        "item": {
          "id": "d0729a97-e173-4917-9848-14d678d31626",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "01e53509-4102-4d52-9a8a-034f7815b946",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "0ebcacc0-cda9-48e5-9287-7e3b61b95995",
        "cursor": {
          "ref": "63d002c2-987f-4666-9e2c-5055d7be6cab",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "25b8ca4d-5c2a-4ea3-a761-b0c45fce14ae"
        },
        "item": {
          "id": "0ebcacc0-cda9-48e5-9287-7e3b61b95995",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "85cb60f9-78c6-4ec0-8789-ec99a7925a1c",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "0f14b7de-5ee8-484f-abb4-3bd599a21302",
        "cursor": {
          "ref": "2a23a61a-1593-41e7-aa76-0b0eb2a8f728",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "14e325f5-5e40-4ae1-838b-0be1feded49a"
        },
        "item": {
          "id": "0f14b7de-5ee8-484f-abb4-3bd599a21302",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f7a9e60c-9803-4a31-9ade-3a0f8e157677",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "fc946037-a018-4c8e-8fdc-241093ba90d6",
        "cursor": {
          "ref": "d334aa96-c5ce-4686-8ef2-7d78134a0155",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "66bab0a2-c8dc-42d1-9d8d-5e0910cb5fc9"
        },
        "item": {
          "id": "fc946037-a018-4c8e-8fdc-241093ba90d6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "afc55d3b-7c4f-47cb-aef8-5c3d3bd25ce2",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "fcd1e1a7-72c6-421a-b5ba-24cda37c59e7",
        "cursor": {
          "ref": "f692d05e-5407-4243-9941-a00f13799d5c",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "57388c63-6e8f-4c29-8250-472251e66995"
        },
        "item": {
          "id": "fcd1e1a7-72c6-421a-b5ba-24cda37c59e7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f178b8f2-bf18-49e6-8e55-6806ce6559b7",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "6803620c-3214-4e99-b38d-3668a1ededfd",
        "cursor": {
          "ref": "30125697-7a14-4afb-8d20-3d8a6ff7dc5c",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c2451024-59e5-4dfe-9535-ea8047121f16"
        },
        "item": {
          "id": "6803620c-3214-4e99-b38d-3668a1ededfd",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "449ac352-072f-4cda-a4d1-219dc5bce1f4",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "2e958277-7356-48b7-b5f6-8afce9832f7a",
        "cursor": {
          "ref": "8318259d-8717-499c-a4a4-8c4dba0b0eb8",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6f7532d0-9128-43a1-bb4b-0368ae288d21"
        },
        "item": {
          "id": "2e958277-7356-48b7-b5f6-8afce9832f7a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7099e9f8-3989-4e3a-9685-6807bced339e",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "a499bd7a-375a-490f-bd5b-46526d743dda",
        "cursor": {
          "ref": "078582b1-c585-41e5-a893-b990e5c9337b",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c0a5945d-27f7-4c53-97a9-0325586ce5c8"
        },
        "item": {
          "id": "a499bd7a-375a-490f-bd5b-46526d743dda",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5fa7a49a-02ac-4042-b281-88b7ad2ac687",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "31bd5017-557f-4d8f-a409-672569c6a68e",
        "cursor": {
          "ref": "21a7fc68-36a1-44af-a7dc-2d580599b1dd",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7645bb06-5ad4-483c-af17-eae6be9874fb"
        },
        "item": {
          "id": "31bd5017-557f-4d8f-a409-672569c6a68e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ffe93388-694a-46b5-a309-8f858714e84a",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "5ea8629f-8a86-4455-aa99-31a3e0d8ed4d",
        "cursor": {
          "ref": "0de662d8-dd44-4924-b7b1-51db3f98f299",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "cd0a1a1e-5600-44b3-8cdb-4dfd83d8e8cd"
        },
        "item": {
          "id": "5ea8629f-8a86-4455-aa99-31a3e0d8ed4d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8707b0e1-eeb0-469c-aac3-6c0c751f6440",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "6fab237a-15bc-4f8f-bbe9-0d5bcfd6fe02",
        "cursor": {
          "ref": "0de0e565-f748-41a2-a88f-388ad36bad8c",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f419f807-6012-45e7-b1d8-caf06268fb60"
        },
        "item": {
          "id": "6fab237a-15bc-4f8f-bbe9-0d5bcfd6fe02",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fe661a6f-b082-4c6c-b772-261eb16f2b30",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "0448823a-04da-443e-82af-6ffc27cf20cb",
        "cursor": {
          "ref": "929f38dd-2d54-4417-a1b2-190e4801b223",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b0b41eff-2f36-4019-a35b-9e675170b151"
        },
        "item": {
          "id": "0448823a-04da-443e-82af-6ffc27cf20cb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1cf68ea1-31cc-4d12-bcc7-0eb2b2f2189b",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "72509ef5-3fc4-4996-a7ae-d57359162723",
        "cursor": {
          "ref": "c726b5e0-b467-4ed9-8a0a-d4b486bfc700",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "069cec65-8523-40aa-9357-9c3f7700d314"
        },
        "item": {
          "id": "72509ef5-3fc4-4996-a7ae-d57359162723",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "787773f4-1998-4e2b-9d32-997704198349",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "cb2fa423-31b3-4bcd-a90e-ecf191352760",
        "cursor": {
          "ref": "c508c98e-7932-4449-9aa4-9209511f2bee",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "82546c31-5321-4c2b-a9e3-d3a54c73d121"
        },
        "item": {
          "id": "cb2fa423-31b3-4bcd-a90e-ecf191352760",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "326ec959-b855-42c3-ae70-b3eef22e9ff4",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "849c17a2-1398-4019-a553-9463e03abafc",
        "cursor": {
          "ref": "12805c24-e310-49c9-b306-4c83baa31785",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0f53c278-5c8a-47c4-b0f6-fc8970ac695e"
        },
        "item": {
          "id": "849c17a2-1398-4019-a553-9463e03abafc",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "625060eb-f5e6-4468-be92-db50e6f5113c",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "2b26218c-c4d1-4324-8727-e3e967d037a2",
        "cursor": {
          "ref": "42b1a0ba-07a6-471b-a4c9-2d4de7c0e8b3",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f985d45a-b94a-47b5-8b3e-ebcdbe00f117"
        },
        "item": {
          "id": "2b26218c-c4d1-4324-8727-e3e967d037a2",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "54b40ba8-44ec-4f68-bffa-44679a1603c7",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "683f8283-0ee1-4d32-a41d-45915e778d85",
        "cursor": {
          "ref": "eec2e3c6-2b3b-403b-91fa-9da4c65f8b01",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b6366e21-b757-4030-946b-d6b91c7c72ec"
        },
        "item": {
          "id": "683f8283-0ee1-4d32-a41d-45915e778d85",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8ebb9bb3-9ca3-4ca0-9eb6-d40990a7102f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6457ae4a-ac4e-46ef-abe7-e01bdce28398",
        "cursor": {
          "ref": "3446708d-559a-4657-8108-2d9652f93cd0",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b30c1b5e-4246-4261-8f51-fff61c68b76c"
        },
        "item": {
          "id": "6457ae4a-ac4e-46ef-abe7-e01bdce28398",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "035f8524-793e-40c7-a81c-834adf881af2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86c3c0d-b2e2-4fc9-ad36-392ad9ae6030",
        "cursor": {
          "ref": "631518fd-4d8f-428f-806a-1580773c11f4",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ccbdbee7-048d-4ec6-8fbb-88477fecda35"
        },
        "item": {
          "id": "f86c3c0d-b2e2-4fc9-ad36-392ad9ae6030",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1d0da4d3-9136-434f-aeaa-4efada9f93ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86c3c0d-b2e2-4fc9-ad36-392ad9ae6030",
        "cursor": {
          "ref": "631518fd-4d8f-428f-806a-1580773c11f4",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ccbdbee7-048d-4ec6-8fbb-88477fecda35"
        },
        "item": {
          "id": "f86c3c0d-b2e2-4fc9-ad36-392ad9ae6030",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1d0da4d3-9136-434f-aeaa-4efada9f93ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8146da8-8d6a-44a8-a8ab-c25c6dcec329",
        "cursor": {
          "ref": "8bcd2380-0251-4626-94fd-0226fbba9fae",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "525f0b90-610a-493a-825b-9d953650e625"
        },
        "item": {
          "id": "a8146da8-8d6a-44a8-a8ab-c25c6dcec329",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "484f0e20-5e18-4568-8152-a2415fcac01f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605933f0-c61a-49fe-ae64-e0065616a920",
        "cursor": {
          "ref": "5ff13a4f-b334-40d7-8d3b-2f2508a8fd56",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "962786df-d22d-4ef2-b37c-fce2b6e10ad8"
        },
        "item": {
          "id": "605933f0-c61a-49fe-ae64-e0065616a920",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b05cc20e-b718-4dcc-acd1-eaa96b2de50b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8574ca-530c-40bb-aaa8-ea0682aefbd6",
        "cursor": {
          "ref": "9b2ca0f7-85cf-4a65-9c1e-e3d8844fd2b0",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3b1e408f-7585-4d0d-be7e-3ce1875ad887"
        },
        "item": {
          "id": "bb8574ca-530c-40bb-aaa8-ea0682aefbd6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "fcd57db8-5a12-405e-af5c-4d65a4009567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45585c91-14d6-48b0-8126-a8100677d460",
        "cursor": {
          "ref": "560729d9-dc02-437f-b069-924b8e4581db",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "bf1881ec-a102-4b65-93b8-b2825c1b9098"
        },
        "item": {
          "id": "45585c91-14d6-48b0-8126-a8100677d460",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "234790ff-1dcb-462e-b8aa-2826bd0f50dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee54b7a9-d9a0-4a85-a04e-07dec57e5ea5",
        "cursor": {
          "ref": "3778c393-463b-4258-ba28-616bc904e98d",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d84c87e7-5119-4f62-98d5-7c0189c3d00e"
        },
        "item": {
          "id": "ee54b7a9-d9a0-4a85-a04e-07dec57e5ea5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "34e35508-c0a0-495f-84b5-66e97ce98723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1277cbbc-3293-46e5-a15f-a099dbf15894",
        "cursor": {
          "ref": "141d1164-1cb6-489f-90d2-0e388faa8e38",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "1edad98b-534d-4046-9568-b3aca7b91a56"
        },
        "item": {
          "id": "1277cbbc-3293-46e5-a15f-a099dbf15894",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "880ee5ca-949b-4198-99f6-f148bee2eb20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "164bc1d6-9838-488f-a366-e7bc2e57962f",
        "cursor": {
          "ref": "eb36e3ca-9d12-4c83-b570-8f4a3be2c56f",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "61d09f60-f975-4765-821b-ce0dc3bf78f8"
        },
        "item": {
          "id": "164bc1d6-9838-488f-a366-e7bc2e57962f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "c8c57372-6038-4b10-9193-34122846e541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358a5e8f-e489-4956-9baa-becadf396945",
        "cursor": {
          "ref": "f5424ace-584f-4d93-9181-f2ece2dd5687",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d333bdd5-e871-497d-9bc9-3674e3fdedc8"
        },
        "item": {
          "id": "358a5e8f-e489-4956-9baa-becadf396945",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "67eb8f81-3d3d-4aff-9fd2-fc64c2b578af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e56a7976-34c7-4d29-b1b2-99034a75ff0b",
        "cursor": {
          "ref": "85314c2d-5d43-4e35-8652-633d6a44ecef",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "270aeca2-51be-4054-ba88-845453e16bfe"
        },
        "item": {
          "id": "e56a7976-34c7-4d29-b1b2-99034a75ff0b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "73e46b05-551a-4e9f-82d8-a4121cbf01e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fafa74de-beac-4c70-9a16-9594ff610cfb",
        "cursor": {
          "ref": "453f8365-5878-4e6e-83da-09aa3da7cf24",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7dfcf930-a57d-43cf-bba5-5d0d4d2b0b98"
        },
        "item": {
          "id": "fafa74de-beac-4c70-9a16-9594ff610cfb",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "18b8eaac-bb30-4512-ae2b-ad8e4e5c1892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a89cf36-4727-4f03-98ad-cb92dca1995a",
        "cursor": {
          "ref": "c561283f-06d9-4e5c-af97-beadd67de152",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "121cc8e7-f3b4-4c0e-a028-c356383315af"
        },
        "item": {
          "id": "7a89cf36-4727-4f03-98ad-cb92dca1995a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b18d7718-41d8-460c-a4e0-6dcd80e9a959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0ef21d9-6508-4a62-9385-3632a88675ab",
        "cursor": {
          "ref": "97b6673e-421c-46fa-8983-af0b34faba45",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1b5dcfb3-4bda-4964-bc22-dadf232fa509"
        },
        "item": {
          "id": "d0ef21d9-6508-4a62-9385-3632a88675ab",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "92a299cd-7c4c-45b1-93ee-8106dc9bafda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d2c6ca-77c1-4668-9adf-2e6ea7fa730e",
        "cursor": {
          "ref": "d0a60e81-cdac-4f26-a263-a338c4202917",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "51ac4920-6ddb-4f28-8666-415d296f3642"
        },
        "item": {
          "id": "88d2c6ca-77c1-4668-9adf-2e6ea7fa730e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f2a80aad-3f33-486a-93c7-40f8e891c1a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c3384a-83a5-48c9-9c59-e45c4c739a34",
        "cursor": {
          "ref": "ca276b3a-6b3d-44ef-bd95-6ab029d63ea8",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d3007acf-fbdb-43a7-ab41-bd7b0ea5f125"
        },
        "item": {
          "id": "71c3384a-83a5-48c9-9c59-e45c4c739a34",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "16965a34-5f00-4508-86b6-ce1506c48892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae78d46-6515-4ffd-b389-65324c63cca5",
        "cursor": {
          "ref": "1e064db5-0ebe-4959-9fe7-5a366295b593",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2a08b6d6-d227-44ab-a029-dcaf890e52a8"
        },
        "item": {
          "id": "2ae78d46-6515-4ffd-b389-65324c63cca5",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "96989322-9a50-4a2e-a821-235cfbb91106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d28b0443-01ac-4ef9-b797-69a8dc3dea49",
        "cursor": {
          "ref": "343b85f4-0623-4861-a690-b8d843d1c479",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f77ac2f3-33eb-472e-a4aa-a5814496be91"
        },
        "item": {
          "id": "d28b0443-01ac-4ef9-b797-69a8dc3dea49",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2bb81cd4-6961-4342-b54d-ced4623a8a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6accd129-c8c6-4f8f-a053-746a7d8ce599",
        "cursor": {
          "ref": "bb1ec469-2231-4648-8d2a-45d1c0bac7ab",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f92c884a-27e2-4e22-934c-e507ff5899fc"
        },
        "item": {
          "id": "6accd129-c8c6-4f8f-a053-746a7d8ce599",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "c82d71c9-42bb-4831-b921-e16893023848",
          "status": "OK",
          "code": 200,
          "responseTime": 593,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "e220081d-06ee-4e3b-ac6b-7fd3bcec7c8f",
        "cursor": {
          "ref": "4330b40d-e985-454b-bfbd-3dc5a77f1b1c",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1a9c4529-6d50-4bc5-9d84-ce86ff46d137"
        },
        "item": {
          "id": "e220081d-06ee-4e3b-ac6b-7fd3bcec7c8f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b9e5d217-4e06-44bc-96ec-8ba03383c8d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 262,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "855eb93b-f389-43d2-91a6-c317bafd0451",
        "cursor": {
          "ref": "a119cc84-d69d-4907-807d-f1aeeec90712",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "5ff142a1-9b8c-4646-8414-f85a28424959"
        },
        "item": {
          "id": "855eb93b-f389-43d2-91a6-c317bafd0451",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c27a33fa-1af4-4cd8-bd61-abc3b6236f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d34d34f-bc74-4d58-85ba-ab94c8ad9ea9",
        "cursor": {
          "ref": "f3e7ca3f-e511-40ea-86bf-9deca08dc3e2",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6463d394-5230-41fb-bf67-8129d7914766"
        },
        "item": {
          "id": "7d34d34f-bc74-4d58-85ba-ab94c8ad9ea9",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "fbb05ff5-b3f0-4a66-aa20-16ec63c36520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 284,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f838586-26a2-4354-9e7b-f6cc6844b131",
        "cursor": {
          "ref": "9a485673-680a-4cb7-a68a-ebe51d36ba21",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "608faf06-107a-4494-840c-134a14282f7a"
        },
        "item": {
          "id": "4f838586-26a2-4354-9e7b-f6cc6844b131",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "833d4a0b-4ca9-4d4f-b0ad-1c7524cb0275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bebd4ab-8353-4494-86bd-15f86e2e1fdc",
        "cursor": {
          "ref": "0d150b35-52eb-4e85-a523-4505a5dce0fb",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e4d396a1-45eb-4c6f-95c9-000ee4a4f4ad"
        },
        "item": {
          "id": "5bebd4ab-8353-4494-86bd-15f86e2e1fdc",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "33cc6fb0-989d-4c2f-bab8-e3cee8185b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c13abb0-8ed1-42dc-b5f6-3563fb8e4ef5",
        "cursor": {
          "ref": "ebd031c2-ca03-403d-a58b-144163fd77e4",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "833a7594-cd3b-45a5-9fe8-c645971d42b6"
        },
        "item": {
          "id": "4c13abb0-8ed1-42dc-b5f6-3563fb8e4ef5",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f89951a6-95c6-4385-9601-f2acd53e2314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a697f6-c6af-4fbe-be05-4fe918b9cb24",
        "cursor": {
          "ref": "95d52f3e-ebf7-479a-b091-b4f02477834f",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5001faf6-0159-48f6-ab00-ad22d34a2435"
        },
        "item": {
          "id": "e4a697f6-c6af-4fbe-be05-4fe918b9cb24",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ba07c002-e6be-4e9d-a8ab-a98ae2c94b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90bf2c73-6a28-4a5c-bcad-13edc1059801",
        "cursor": {
          "ref": "2dd3fef5-3cd4-43c4-8e62-e2f2fda4b34f",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a1bf21b0-d3b5-4b2c-87e8-22b5f662a5ae"
        },
        "item": {
          "id": "90bf2c73-6a28-4a5c-bcad-13edc1059801",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "affbdc50-07c7-49e1-9ec4-27ac39dd2cdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a3a18f-85c0-4766-8ac1-f946172585c5",
        "cursor": {
          "ref": "80240a1f-daaf-43fd-8503-e3dabc9b9a8c",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1d9580b1-4197-45ab-8015-ff39da334422"
        },
        "item": {
          "id": "f2a3a18f-85c0-4766-8ac1-f946172585c5",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "79a0a5e3-4fa1-404c-9ec2-f94a26512d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad00c5b-f55d-4ae8-8a6f-faa1165c0571",
        "cursor": {
          "ref": "31757c02-0c0b-41db-b9c7-66ebf8423d72",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c9155e17-4d6a-464b-a153-deecdaaec8c6"
        },
        "item": {
          "id": "1ad00c5b-f55d-4ae8-8a6f-faa1165c0571",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2e7770ea-700d-43ea-bba3-206539699138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4926494b-589c-473a-9b1f-5e6c6291fe49",
        "cursor": {
          "ref": "9ab4f51d-4af1-4095-9a9d-5cc972cea8cd",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d0d04714-efcc-4c89-ac31-77471a678fa7"
        },
        "item": {
          "id": "4926494b-589c-473a-9b1f-5e6c6291fe49",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "bc33b7ef-42e7-4252-a1a8-34e0f39facbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0003f653-98aa-4027-abb5-3daca4073e62",
        "cursor": {
          "ref": "9ebf9ac1-b14c-4547-8f93-e5adf1ac5340",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "9f88d191-7a4c-4644-8c9a-03f6405aac42"
        },
        "item": {
          "id": "0003f653-98aa-4027-abb5-3daca4073e62",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "98da6e7a-dfd2-425f-a3e2-6cf58342b447",
          "status": "OK",
          "code": 200,
          "responseTime": 252,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "e10bbc7c-aead-4961-b5e5-85863a2f991b",
        "cursor": {
          "ref": "66885c1a-85a1-43a9-9e3a-a364e3a8be8f",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4c6db15a-6a00-43c0-9374-7c1bd83042c7"
        },
        "item": {
          "id": "e10bbc7c-aead-4961-b5e5-85863a2f991b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "61081e33-37e2-441e-a4b6-5bcf704c115c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e064a7ce-ba51-4e2f-800e-9f64d8f55caa",
        "cursor": {
          "ref": "53f712f3-7216-4588-b429-a017c29d716d",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a68edfc5-e9a8-4a90-8823-afc72fbbd713"
        },
        "item": {
          "id": "e064a7ce-ba51-4e2f-800e-9f64d8f55caa",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "730be3d1-f9bc-44c8-bedd-09baa9f2d2b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8da142c1-124a-417a-b2a9-7279bf470471",
        "cursor": {
          "ref": "c16e3ce3-943b-4d98-9018-bf81f4e902a7",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5e1ab784-aefe-4802-9163-dd739e7425a7"
        },
        "item": {
          "id": "8da142c1-124a-417a-b2a9-7279bf470471",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b13c37c0-d5b7-4914-935e-680860bd7689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfb950a-3efa-403d-90d5-72c0fcedc192",
        "cursor": {
          "ref": "81c5f861-683a-4e90-93a4-8a4c9231580b",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "6e8cd2e8-0d5a-481d-9cb0-6d4e4210fea4"
        },
        "item": {
          "id": "dbfb950a-3efa-403d-90d5-72c0fcedc192",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c2e154dc-dba3-428b-976e-026bc9c8929d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ff8ce9-7331-42e9-b3b3-91222fa42823",
        "cursor": {
          "ref": "26542d11-6bf2-440b-afa4-63d50d5eb5b0",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "41565182-309b-4832-a31b-841b3b37d76f"
        },
        "item": {
          "id": "21ff8ce9-7331-42e9-b3b3-91222fa42823",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a798a8ff-c138-469b-ab9a-f912ba5400fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21816b74-869b-4e81-b56b-e5cdb268aad3",
        "cursor": {
          "ref": "5b67f817-b8fb-44ab-a8ed-966f28de6d14",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b89a4c5c-b5ae-446e-a329-ae66c1e76ed4"
        },
        "item": {
          "id": "21816b74-869b-4e81-b56b-e5cdb268aad3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f532eefd-8f85-4591-9639-bddd0c08c7b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 267,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192aa2d4-7276-4af0-ad93-53431d42e346",
        "cursor": {
          "ref": "a7315da3-a16f-4ac3-8c90-4401f6526f62",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "cd52a55f-4c7c-4c78-b17f-f21465e7811a"
        },
        "item": {
          "id": "192aa2d4-7276-4af0-ad93-53431d42e346",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "37043e40-103a-4fd6-8453-7f7de63a97ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9a184c-8226-49d0-9465-ea3da944c972",
        "cursor": {
          "ref": "7de0c1c7-d7ef-4626-8cbb-c4402e4b7679",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3a10c4eb-e425-4b38-8191-1b4d163b724a"
        },
        "item": {
          "id": "2a9a184c-8226-49d0-9465-ea3da944c972",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "10b8fda1-4baa-4431-838c-80660590a4fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 326,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e370cf3-cd63-4e8d-a0e0-a4c2bb1563a9",
        "cursor": {
          "ref": "454a8127-2582-47fc-a83a-6693dc5bbb3b",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "29a0e464-50f1-44c1-bfc9-b7e7411a774c"
        },
        "item": {
          "id": "0e370cf3-cd63-4e8d-a0e0-a4c2bb1563a9",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "28a8887f-65fb-4703-972d-b7d41e15ba25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9612fd62-f35a-450f-bd98-66183d769b5d",
        "cursor": {
          "ref": "9d349f57-1c52-44aa-b18b-6049b94c2706",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8376efc8-3463-4f8f-8b04-455a5e357a5d"
        },
        "item": {
          "id": "9612fd62-f35a-450f-bd98-66183d769b5d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7276fb66-1b6f-4c5a-b5e7-610e4ea0d258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 419,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddce8c61-771b-45ef-a9b1-1beafc1c6dd6",
        "cursor": {
          "ref": "91c6c304-43e0-45ef-9250-0b22556c6cdb",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b23bec38-1a56-4909-bc24-325ac1dc820d"
        },
        "item": {
          "id": "ddce8c61-771b-45ef-a9b1-1beafc1c6dd6",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9e371961-bb8a-4dda-b19f-c3c724b20afd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 290,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b0644f5-7295-4625-a5dd-b38243aa4bb9",
        "cursor": {
          "ref": "04902b86-c136-4e5d-82d1-b92095e2d3cd",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "fc915254-6256-431c-b6ec-8c7136117344"
        },
        "item": {
          "id": "8b0644f5-7295-4625-a5dd-b38243aa4bb9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "cf74011f-8d84-4214-95ab-fe57a82f46f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 298,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeaa23c9-db1a-4a83-9150-48a66ce395a4",
        "cursor": {
          "ref": "99f17235-45cb-46cf-949a-f59d1acd8565",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "03a60773-1bef-4465-8999-9758692ba1d9"
        },
        "item": {
          "id": "eeaa23c9-db1a-4a83-9150-48a66ce395a4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b69125ad-3633-4959-a7a5-dcc18207805b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0d9455-09ae-4dbb-a511-81b90fd352b0",
        "cursor": {
          "ref": "ddaa12b3-1c86-4da2-a804-31f8a890a379",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7a77f6c1-9d84-4997-aad1-dcabb49134e5"
        },
        "item": {
          "id": "1b0d9455-09ae-4dbb-a511-81b90fd352b0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "311f6048-e1c2-49e3-9e62-c1c3c72eec38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 282,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf357e8-4ded-4b1c-9ee7-3df2c9c5aaae",
        "cursor": {
          "ref": "536f7ba1-f028-4ac6-82f5-240c79224856",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "42a88b83-f494-40e4-a213-1215d3b4fc1b"
        },
        "item": {
          "id": "7cf357e8-4ded-4b1c-9ee7-3df2c9c5aaae",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "32c0f4a5-257f-4951-b37d-02808b08fff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 278,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23abad6c-6180-4913-9766-a6a5f695aae6",
        "cursor": {
          "ref": "001d66e6-efde-45b0-bf9d-f2fe5364050e",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ed497639-aebc-4619-8900-a119f59bcdb1"
        },
        "item": {
          "id": "23abad6c-6180-4913-9766-a6a5f695aae6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ab45f9af-83ca-414c-8297-f8c7471d8b64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 336,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8e301f-92eb-4b91-9276-dbffd0584c33",
        "cursor": {
          "ref": "8aff0051-bb78-47da-b327-cd2970509379",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "48442862-1601-4c55-ae44-8f998e5c851f"
        },
        "item": {
          "id": "cb8e301f-92eb-4b91-9276-dbffd0584c33",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "db8b8b45-f207-4786-b355-f202c116952f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 291,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13374a9e-481d-4d0a-bdad-f5ba21f18977",
        "cursor": {
          "ref": "c18bc83d-891f-4729-aaf4-15fbabc4c5ea",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "01dba10a-4da4-4ebc-b8d6-7023f0b171d7"
        },
        "item": {
          "id": "13374a9e-481d-4d0a-bdad-f5ba21f18977",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "8eac3273-a9bf-4fe9-9c5c-e94cc99b836c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3a2522-6d5a-417e-bc3e-8c696caeda5d",
        "cursor": {
          "ref": "23ad15aa-df4b-454b-8fb1-03669bc683ee",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ea0aaffc-3cff-4f9b-9491-025262786b9d"
        },
        "item": {
          "id": "6f3a2522-6d5a-417e-bc3e-8c696caeda5d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "46d111c0-6824-4d93-8fa4-4fe2d2888b35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e36a6b69-8fb1-46ae-adf2-0e99b8757f04",
        "cursor": {
          "ref": "81bec687-c6d5-4af6-a170-e9d42a1ff90d",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "728d5ca1-5380-4b7d-b57a-ec4b7f1a8ffc"
        },
        "item": {
          "id": "e36a6b69-8fb1-46ae-adf2-0e99b8757f04",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "57e0de2d-b78a-421c-a41b-cc99f3bfd736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f4097b0-4ce9-4929-b6b3-3ac7942c9daf",
        "cursor": {
          "ref": "97a93562-9a4c-4e92-8a06-aab85a7ec41b",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "94e28d4b-444e-4643-9c0f-43eb44ddd635"
        },
        "item": {
          "id": "8f4097b0-4ce9-4929-b6b3-3ac7942c9daf",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bcd454c7-6ea3-46ae-b12d-806e357f27c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c6e9cf-cf19-4ae8-92d0-30d555373113",
        "cursor": {
          "ref": "b872ef84-394d-46e4-aace-ce8d890bd235",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "8f09d019-bef0-4275-957b-0e9af82d9332"
        },
        "item": {
          "id": "37c6e9cf-cf19-4ae8-92d0-30d555373113",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c1de9349-a314-4e4a-8f3d-e70a29af465a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 267,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb492bb6-4198-4ca5-b181-494fbf4d91e5",
        "cursor": {
          "ref": "a711f96f-cf96-4cb1-b1d3-e7d3c9145894",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "62ef8afb-4324-4c56-bc56-0be9e5cbd6a2"
        },
        "item": {
          "id": "fb492bb6-4198-4ca5-b181-494fbf4d91e5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c0ae7a7a-5452-4f79-83f5-a3931338257c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df73300f-04c1-4985-937c-7fddc92b9c4f",
        "cursor": {
          "ref": "847a1bc0-1bdc-4bbb-9762-3a100108c05d",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b27da23b-ee0c-41cc-b7e0-38f5fddf20bd"
        },
        "item": {
          "id": "df73300f-04c1-4985-937c-7fddc92b9c4f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7c678012-6db4-4402-9658-f34938a283db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 274,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d56a9f-4b1c-461d-9406-4f34b5aa5177",
        "cursor": {
          "ref": "fda2725f-d437-420b-81a0-962b294dfb9e",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3621c956-d8c9-4f84-bbc4-cdf25803a7e2"
        },
        "item": {
          "id": "f4d56a9f-4b1c-461d-9406-4f34b5aa5177",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "10906ce6-abf7-46f9-809c-aa3843f76572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c801f624-d4b9-45ed-afdd-3557d1faa857",
        "cursor": {
          "ref": "a1bccc02-524c-41b1-b147-c9a478e0a206",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "109b8fde-4940-4461-9014-ee69c39038ab"
        },
        "item": {
          "id": "c801f624-d4b9-45ed-afdd-3557d1faa857",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0f6e61ce-e1e2-4358-a0d3-149106ace8f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95554b2e-1800-4145-8c78-54a0caa1588a",
        "cursor": {
          "ref": "1016d3c6-e9da-4542-8169-c25cbeb6be84",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "791bbabc-5598-47ee-8da0-065ae2247e91"
        },
        "item": {
          "id": "95554b2e-1800-4145-8c78-54a0caa1588a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "da98a03f-3883-477a-af8e-36f8014f9862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7674d044-c549-4a64-a66b-b9ff9e4d04ec",
        "cursor": {
          "ref": "43d4a6ae-436b-416e-9af2-fda6d132e93d",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "da6d8fe5-0f92-4954-aea8-379334817583"
        },
        "item": {
          "id": "7674d044-c549-4a64-a66b-b9ff9e4d04ec",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ef979b74-2956-4b75-a4a6-7262e632be70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 267,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "388b5ccb-4fc0-43c8-b6b5-f8e12406a1ed",
        "cursor": {
          "ref": "0aad72c9-526d-4190-8225-5aed4dc0709d",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "cd1f0a88-4446-4c08-911f-01958ae21b14"
        },
        "item": {
          "id": "388b5ccb-4fc0-43c8-b6b5-f8e12406a1ed",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "eb509ee1-0ef3-47f9-b364-5109f7680835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 150,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534df40a-4ffa-4f25-b78c-a42ff29bdda7",
        "cursor": {
          "ref": "78f42e9c-2d38-4ab3-b2b7-309d5ee17c99",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0fe85b1a-7507-474c-be69-ac54a0315fab"
        },
        "item": {
          "id": "534df40a-4ffa-4f25-b78c-a42ff29bdda7",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "be3543d9-53d3-4964-95bb-4ae6d578c45d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65d52904-05e0-4be6-b679-22af753e84a0",
        "cursor": {
          "ref": "a97dd800-9abc-4eef-9fc9-1adda5eaf3a8",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2afc766d-c770-449d-a272-7db4c5a347da"
        },
        "item": {
          "id": "65d52904-05e0-4be6-b679-22af753e84a0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "fde6af1c-690a-436d-ab11-520465640360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba0d98e-b66d-4aa6-909c-62ec6cfa688d",
        "cursor": {
          "ref": "e8b847ae-bc82-4864-abb7-bf6dfd15f778",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "323b2ac8-cc48-4cbe-be10-bae0949e9816"
        },
        "item": {
          "id": "dba0d98e-b66d-4aa6-909c-62ec6cfa688d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f704bd04-b952-4a20-8b69-48f62a5de697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626db54e-0b54-41ff-86d6-8a1192245a2a",
        "cursor": {
          "ref": "fca8ae91-3420-4be3-a797-3c3ad1c0698c",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "65c080d2-1767-4015-949b-8d09489608a9"
        },
        "item": {
          "id": "626db54e-0b54-41ff-86d6-8a1192245a2a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a7c7c5dc-aee4-4172-8088-5e58491f3076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d56c50b4-e675-4f1e-b88f-3dc564f33e3b",
        "cursor": {
          "ref": "4daa75ad-ddfe-45f8-9c81-2991a8c1d30f",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "12438ccd-f654-4c68-bb7f-238997dc3c51"
        },
        "item": {
          "id": "d56c50b4-e675-4f1e-b88f-3dc564f33e3b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "66e1174f-1c22-4dd4-b47f-1eeb8f933fed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2910a1fb-c26f-46ba-81c9-7176e2d62993",
        "cursor": {
          "ref": "ddc29a99-81dd-4741-8d4d-01e97ef20889",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "70567ee3-aa73-41b5-a12e-c735a4d49e7a"
        },
        "item": {
          "id": "2910a1fb-c26f-46ba-81c9-7176e2d62993",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0e1c64e6-491b-4069-927e-32307b25df73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a87574d-67a5-4aa1-8d1a-a8e07dcde033",
        "cursor": {
          "ref": "c6352297-f0d7-435a-95a1-c5771bbcba7f",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "deeada05-0b6d-4b92-ba4a-a6f96e678e5d"
        },
        "item": {
          "id": "5a87574d-67a5-4aa1-8d1a-a8e07dcde033",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d97c3e6a-9ca9-400e-b36c-bf4587efb732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e91bbc-2b93-46c1-b8bd-20b88750bd28",
        "cursor": {
          "ref": "5b443424-8696-4794-a3b0-92273220d4c0",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "4bd70c61-4096-494b-b80e-f68f6d1347af"
        },
        "item": {
          "id": "17e91bbc-2b93-46c1-b8bd-20b88750bd28",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5cde9d3f-83e4-4ebf-918b-01d2b0bb63a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "911dd728-c371-48b9-9555-7810aada9e22",
        "cursor": {
          "ref": "f8914dd1-9236-4a25-966a-8b4c64d17495",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2e6d2bc6-4e62-41a2-9c48-6a5b344221c6"
        },
        "item": {
          "id": "911dd728-c371-48b9-9555-7810aada9e22",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0abc0b80-4373-49c9-8723-1ae17d509cdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c089aa-98dd-48cf-86e8-767987e6bcad",
        "cursor": {
          "ref": "6989f082-c9d5-4153-b76d-2b377f390e02",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5107bfc5-5204-411d-9367-66ebbf1c05d7"
        },
        "item": {
          "id": "20c089aa-98dd-48cf-86e8-767987e6bcad",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "526c46e5-d352-4db7-af50-9c2bac9e135b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51cdff06-8e27-4e74-9449-d61598cbdd98",
        "cursor": {
          "ref": "a1ce543f-5e36-440e-979d-cf98ba422fcb",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "68169877-fc52-4fcf-93d5-e032cf8ad341"
        },
        "item": {
          "id": "51cdff06-8e27-4e74-9449-d61598cbdd98",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2fe66629-8426-4644-a4dd-b1fcd28bfe35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cd13120-99c0-415b-81d5-88702a5c868c",
        "cursor": {
          "ref": "8f698b62-3397-4ed5-b0ab-1cf9b2a6020e",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8707ec2a-89a4-4b10-88d3-b8f77b301fc4"
        },
        "item": {
          "id": "8cd13120-99c0-415b-81d5-88702a5c868c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5dd89c4f-3e8d-4b44-9c68-bc9237e1f9a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6671b1f2-a3a7-47a2-a237-8f3b4b1a3960",
        "cursor": {
          "ref": "98563fa9-382e-4348-b60f-86ba2450fb57",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a95d3cdd-8139-4c58-83bc-f619fc74eb43"
        },
        "item": {
          "id": "6671b1f2-a3a7-47a2-a237-8f3b4b1a3960",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "83eebbd7-b861-479c-851d-6beb9da2b104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731eb6f5-4597-4c30-9d8c-e49042625b9f",
        "cursor": {
          "ref": "36a3fa84-6597-4d52-baf9-b884843bd5bb",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "91f986d7-9f05-4730-8a53-1a1ae5574290"
        },
        "item": {
          "id": "731eb6f5-4597-4c30-9d8c-e49042625b9f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "08afe3e2-ef26-4c87-8918-2f472a06ecd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f5eb631-a271-438e-990c-ccc17c8f0ce3",
        "cursor": {
          "ref": "9e991db6-1669-49fb-88fe-b89891721e25",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d4dc8fed-d63b-46ad-8617-0b9a92a39b7b"
        },
        "item": {
          "id": "6f5eb631-a271-438e-990c-ccc17c8f0ce3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "91c886cf-dd8c-4edd-9b55-e90538a503ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad3d6dc-0a94-4a02-a197-140d066e57c1",
        "cursor": {
          "ref": "aa89a714-a485-4e9d-b6f2-e3a97890401e",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "4443da6f-9fca-4698-bfc3-6f5604cfab3b"
        },
        "item": {
          "id": "7ad3d6dc-0a94-4a02-a197-140d066e57c1",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4bfe55eb-b2f2-48b8-b0c3-9c71335753bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d50da5b-7206-4c91-adf6-88af8bf9d666",
        "cursor": {
          "ref": "139a02ef-0e8a-46ab-b341-d104c48863c6",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "7647aee0-fb9d-48eb-bfe1-0bd049b68756"
        },
        "item": {
          "id": "6d50da5b-7206-4c91-adf6-88af8bf9d666",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d1cd7904-372d-4750-87a4-c2bc33544be0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4bf2de1-e83a-4956-9699-054b77039f13",
        "cursor": {
          "ref": "9c739509-9bad-4f3a-8bc0-6f8c3321d2d0",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e27a95b4-8807-4a9a-b7f6-657a1163196c"
        },
        "item": {
          "id": "c4bf2de1-e83a-4956-9699-054b77039f13",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "caee4fa1-c8ab-4562-9150-c300f0f60d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d9224d6-029b-424d-8e4f-8dec61c0a51e",
        "cursor": {
          "ref": "a3488b49-485c-42b8-b56e-895121cc010c",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "96cf17db-1c64-48d0-bc82-916bc88c38d8"
        },
        "item": {
          "id": "8d9224d6-029b-424d-8e4f-8dec61c0a51e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "444b5b22-d4f2-4b75-9a85-cda62798eedf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eced286-b972-4f70-be94-3addfe23c3d6",
        "cursor": {
          "ref": "b933b36e-10bc-41bd-b584-96a9b1601bc6",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f17d528a-7dc3-4822-a9ca-018460d426a1"
        },
        "item": {
          "id": "1eced286-b972-4f70-be94-3addfe23c3d6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "bd0a7ae2-eb15-475f-920a-fe7c955f8bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ff4e17-d93e-4125-9a7b-3a6fb639957e",
        "cursor": {
          "ref": "d912d1c6-90e8-44b6-8cbb-078657f12e97",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a2f65164-5d10-4a50-a6d1-b344c7f0161e"
        },
        "item": {
          "id": "91ff4e17-d93e-4125-9a7b-3a6fb639957e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b9e7da83-7403-45b9-a680-29d93364092b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22d18d2-1f67-464e-a862-7949f950f536",
        "cursor": {
          "ref": "967f8038-1366-453d-8696-706d10100190",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8e21ca12-3df6-44ae-ab48-9e4885db5ed0"
        },
        "item": {
          "id": "b22d18d2-1f67-464e-a862-7949f950f536",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3fa98744-7606-432d-9d4b-07e560d594d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b80ae58e-05ee-4b24-98fb-33f5fe0634be",
        "cursor": {
          "ref": "fcad767b-bce2-4a93-86f6-f22ad00776a7",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4e6e4109-b2d2-4e4d-9f2b-7f60252d39a7"
        },
        "item": {
          "id": "b80ae58e-05ee-4b24-98fb-33f5fe0634be",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "9953cb24-8345-41e5-8969-b9f8c7a0492e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e13fe8c-5d23-4ce3-9d28-889c864faff1",
        "cursor": {
          "ref": "06f6645b-4093-4d10-89d1-98dc93dcd73b",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "fe0c1e53-3ffc-44ed-9e6e-bdb724da0d00"
        },
        "item": {
          "id": "1e13fe8c-5d23-4ce3-9d28-889c864faff1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5e8d88be-6e96-4e95-a0ce-320b6c27c581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad45ed8-1245-4e48-9638-47b73ebf23a1",
        "cursor": {
          "ref": "ff83bfd2-2b50-48f1-95a2-5f4ac0703aaf",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ec9d1fa7-28ce-4bc4-9118-6b8d354d6ffb"
        },
        "item": {
          "id": "cad45ed8-1245-4e48-9638-47b73ebf23a1",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f998c704-3aa8-424a-93c8-5de8ff9749ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a09eb4d-f125-4a2f-9e99-7725256d29bc",
        "cursor": {
          "ref": "e71b815b-813f-4702-889a-27d9bd96c9cf",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "734900ba-7ffb-43a9-b2a4-69b2f4d1ff88"
        },
        "item": {
          "id": "5a09eb4d-f125-4a2f-9e99-7725256d29bc",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "34206932-4911-4b4b-8ca2-1877109ca00f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed4aed6-5893-49f5-8344-14e1cef74337",
        "cursor": {
          "ref": "a5a0e7d5-3bdd-43ac-a066-d57d856e7128",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4bb0606b-3e1c-41d0-8d3a-49d63cb953fc"
        },
        "item": {
          "id": "fed4aed6-5893-49f5-8344-14e1cef74337",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d4176252-ed81-462b-955d-25d436505edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f4daa2b-a858-405f-8fdb-8bc0b44977a6",
        "cursor": {
          "ref": "df6ce655-a13b-40c5-a169-0c912823ca6e",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8f792519-18d8-4dd3-a750-ed71205b5042"
        },
        "item": {
          "id": "4f4daa2b-a858-405f-8fdb-8bc0b44977a6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b46599f4-6266-474e-8ae7-041a70e3c445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b5c8feb-6764-46e4-a66b-5ec06c4f6043",
        "cursor": {
          "ref": "77f51499-f5da-4834-9fb4-c878cfa9dee0",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "bc1853a2-84e0-437e-af77-6cd2ce91696c"
        },
        "item": {
          "id": "6b5c8feb-6764-46e4-a66b-5ec06c4f6043",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e9375433-b9ce-4d33-8ae9-de1c81132cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b1a36ef-9c1d-4d6c-bb0b-0cd117b47f67",
        "cursor": {
          "ref": "cef1a4a0-b794-466b-a8c6-17352e6696ac",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4cb0e915-ba42-4e22-b783-d66f294344d0"
        },
        "item": {
          "id": "8b1a36ef-9c1d-4d6c-bb0b-0cd117b47f67",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "dff7e089-81d8-4169-bd9a-c90455579eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce6974c-a94b-4959-9586-abb80748cb74",
        "cursor": {
          "ref": "729e5915-83b8-4197-915a-1020ceaa9015",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a1c35735-b4db-483b-b46b-0d12bd92929f"
        },
        "item": {
          "id": "6ce6974c-a94b-4959-9586-abb80748cb74",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6748ceb6-003e-4fbb-af77-e240c80e798e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4edbfe63-0cfc-4f0e-8599-6668ba02acaa",
        "cursor": {
          "ref": "d45c0fd8-983e-4e18-ac6c-feab6f8c44ab",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7e454173-e34e-47a9-b4bd-5798dfdf612f"
        },
        "item": {
          "id": "4edbfe63-0cfc-4f0e-8599-6668ba02acaa",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "906c2572-f6ef-4285-a508-d53a17d366a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5cf2cc8-aed4-4a4f-9a37-11784bb27d2f",
        "cursor": {
          "ref": "cd04880f-b931-49af-9c86-481d28c2197b",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "408e5041-6371-4279-a4be-543e0acd8dad"
        },
        "item": {
          "id": "a5cf2cc8-aed4-4a4f-9a37-11784bb27d2f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "373f8e17-0f8f-4af9-8097-33f97bc0f3e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffcbfd82-f9d9-4732-a646-2703f8521c0b",
        "cursor": {
          "ref": "97e11ec5-7ac8-4c29-ae99-04d73481567a",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "4f0c07c3-4564-43dc-9a43-4f22e6e9d51c"
        },
        "item": {
          "id": "ffcbfd82-f9d9-4732-a646-2703f8521c0b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ff8d2da9-9296-4f37-a04e-de05c708db13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97135284-02ba-4706-820b-42cde0df9ee5",
        "cursor": {
          "ref": "35a6f75e-5d58-412f-aa1d-8e3c1a9f23d0",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "0b3db963-68e2-4a77-8c40-1f1993801091"
        },
        "item": {
          "id": "97135284-02ba-4706-820b-42cde0df9ee5",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c942eeef-fe79-49a6-b93d-faa7ce78e7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd5f02e-abb9-4248-8b9b-49c59e4f09b8",
        "cursor": {
          "ref": "e1fc4643-058b-4046-b6c6-6bf93c4f0d75",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a17b27eb-2680-4e92-a70e-162f419c8a61"
        },
        "item": {
          "id": "2bd5f02e-abb9-4248-8b9b-49c59e4f09b8",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "acc53858-8d1f-4ee0-b9f3-8b8f66d14eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d888ee5-e14e-4b70-a8a5-d5f3b3e1d777",
        "cursor": {
          "ref": "daa44e2b-4470-4df2-8d97-f4fb01904808",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7321c501-83bb-47ac-ba90-10e328f7c96e"
        },
        "item": {
          "id": "2d888ee5-e14e-4b70-a8a5-d5f3b3e1d777",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "950317df-b161-4d30-8128-ec0556d15e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0146c62b-6718-4c12-9bf7-5e55ae5562ae",
        "cursor": {
          "ref": "f0c7b127-194e-4bd3-9904-698490c65c77",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e035bf3b-8814-46ab-9ec5-76e4f204e5f5"
        },
        "item": {
          "id": "0146c62b-6718-4c12-9bf7-5e55ae5562ae",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7d22638e-c809-4cb5-a692-e29d58c1345a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b971698b-04ce-4e2e-b62b-d053e06e0b0b",
        "cursor": {
          "ref": "2b233cc2-864b-4142-ad68-3c98a41a6f1f",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ca92bebf-c748-4d7d-9ed8-7fd8d97ffbe9"
        },
        "item": {
          "id": "b971698b-04ce-4e2e-b62b-d053e06e0b0b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "98844168-46fa-4332-95f7-dbf5e7004485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda1fe89-fdbd-4023-8a67-4a47af53c8ae",
        "cursor": {
          "ref": "03657cca-cf10-4f7e-9ef9-09952732d06a",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6b0c7e71-66df-4439-86a8-748b1e2525f1"
        },
        "item": {
          "id": "eda1fe89-fdbd-4023-8a67-4a47af53c8ae",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4d2735c9-2dc7-4d73-bf8b-4f2d88559d8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc8a765a-5378-4e29-9159-300a6321261c",
        "cursor": {
          "ref": "5c139463-b3e1-41f7-9276-fe44b8c39719",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b38516f6-5716-43c7-90a1-fb8334769990"
        },
        "item": {
          "id": "cc8a765a-5378-4e29-9159-300a6321261c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "baa7b4cf-b6e1-4ed1-a520-7067d7b75b1f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "816dcac1-f8da-44aa-a865-59e72d91803f",
        "cursor": {
          "ref": "6f3842b1-e294-4ba3-ad2b-2d0eea1aba22",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "abe9ed53-87e0-4c33-8404-dacd8fac53ec"
        },
        "item": {
          "id": "816dcac1-f8da-44aa-a865-59e72d91803f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a144f012-32f3-475e-9e46-9a78450a39e9",
          "status": "OK",
          "code": 200,
          "responseTime": 240,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd6c214-0aeb-498b-bf6d-4b8eaa35f077",
        "cursor": {
          "ref": "b3c075ed-64c5-4285-a2fe-0127d5bd07c4",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "819521d5-85b5-48d1-bab4-ea1970323f35"
        },
        "item": {
          "id": "efd6c214-0aeb-498b-bf6d-4b8eaa35f077",
          "name": "credentials_verify"
        },
        "response": {
          "id": "db94cf95-9c71-4601-ad99-fbae62b47929",
          "status": "OK",
          "code": 200,
          "responseTime": 598,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "10aa9622-1d5b-42b2-8546-1681ef1cddab",
        "cursor": {
          "ref": "5332d2cf-de88-4a4f-a88f-6a150050e22c",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c9bf7036-1050-4c68-a628-3d25666c4f64"
        },
        "item": {
          "id": "10aa9622-1d5b-42b2-8546-1681ef1cddab",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c22047ec-d023-435e-942a-5aa2f0a69ddf",
          "status": "OK",
          "code": 200,
          "responseTime": 574,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "91fb5be0-63bf-4834-affd-9bc4db7dd330",
        "cursor": {
          "ref": "af5a73f5-922c-4b83-b09c-0d7142f76dcb",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4723cc41-14f8-4d7c-a015-a9cdde52d214"
        },
        "item": {
          "id": "91fb5be0-63bf-4834-affd-9bc4db7dd330",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "eb75038b-24ec-49e7-9db2-9115b4188624",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91fb5be0-63bf-4834-affd-9bc4db7dd330",
        "cursor": {
          "ref": "af5a73f5-922c-4b83-b09c-0d7142f76dcb",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4723cc41-14f8-4d7c-a015-a9cdde52d214"
        },
        "item": {
          "id": "91fb5be0-63bf-4834-affd-9bc4db7dd330",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "eb75038b-24ec-49e7-9db2-9115b4188624",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91fb5be0-63bf-4834-affd-9bc4db7dd330",
        "cursor": {
          "ref": "af5a73f5-922c-4b83-b09c-0d7142f76dcb",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4723cc41-14f8-4d7c-a015-a9cdde52d214"
        },
        "item": {
          "id": "91fb5be0-63bf-4834-affd-9bc4db7dd330",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "eb75038b-24ec-49e7-9db2-9115b4188624",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fb04441-79b6-4fe7-9f88-325fd4e58d86",
        "cursor": {
          "ref": "1cc1eea8-260c-4bf6-a307-d111bf807f19",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e82a82b4-1ffc-4456-930f-61955e658a64"
        },
        "item": {
          "id": "4fb04441-79b6-4fe7-9f88-325fd4e58d86",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "e4b6b7f9-d99d-4595-85ad-2463fbc0d0f8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c6ab04-f43c-479d-a372-b6ee516f988c",
        "cursor": {
          "ref": "b3b4dc44-8715-4ade-82e6-f9f5a452b553",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a38f73c8-64e2-4ba4-bf65-e2f43253f5ba"
        },
        "item": {
          "id": "44c6ab04-f43c-479d-a372-b6ee516f988c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7ae67aa3-85bb-4f13-9eda-18663af7b0ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "44c6ab04-f43c-479d-a372-b6ee516f988c",
        "cursor": {
          "ref": "b3b4dc44-8715-4ade-82e6-f9f5a452b553",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a38f73c8-64e2-4ba4-bf65-e2f43253f5ba"
        },
        "item": {
          "id": "44c6ab04-f43c-479d-a372-b6ee516f988c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7ae67aa3-85bb-4f13-9eda-18663af7b0ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "95554606-711e-4f50-b771-9ecfdc8a3220",
        "cursor": {
          "ref": "ea343d46-0090-4625-90fe-7a1b9a83ce3c",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d3dd0876-e69a-4cab-9e32-a0bee9933af2"
        },
        "item": {
          "id": "95554606-711e-4f50-b771-9ecfdc8a3220",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "2d32c7c3-c72d-4b81-a8de-1fe577256966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "34656424-44aa-43f5-87da-07f85f78a312",
        "cursor": {
          "ref": "e008f8ba-61e7-4bef-8e2b-e893d055cf14",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "2746fc65-4e77-4f08-b353-1a05d1af203e"
        },
        "item": {
          "id": "34656424-44aa-43f5-87da-07f85f78a312",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "56831bb3-dd10-4f05-a7fe-d41ae958743b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "34656424-44aa-43f5-87da-07f85f78a312",
        "cursor": {
          "ref": "e008f8ba-61e7-4bef-8e2b-e893d055cf14",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "2746fc65-4e77-4f08-b353-1a05d1af203e"
        },
        "item": {
          "id": "34656424-44aa-43f5-87da-07f85f78a312",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "56831bb3-dd10-4f05-a7fe-d41ae958743b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "4598b566-f00b-4eb5-915d-a88daecfe551",
        "cursor": {
          "ref": "c4694236-e5a4-4169-a6d9-726f413642ee",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "7587497c-04a1-4dda-ae2b-c746746e92c5"
        },
        "item": {
          "id": "4598b566-f00b-4eb5-915d-a88daecfe551",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "717317ca-478d-4d25-9d1d-c69d1b1f9683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}