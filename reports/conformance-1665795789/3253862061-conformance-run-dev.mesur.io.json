{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6a87978d-4b20-42fe-acd2-fd5d72565019",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9f39cd6f-e80d-4195-a5c9-af0f8a1b392a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e17ea374-a0ec-404a-bf8a-03f6787890d6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e8fab5dc-2300-4e4a-a381-9d626c182445"
                }
              }
            ]
          },
          {
            "id": "c864143c-79a2-4f53-9323-61207380abb0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6dea0f92-ece8-451f-9c0e-41091c8497a3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c92fdc5d-2cef-45ed-93f1-b54c161037a6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "953825b4-b79c-4b88-8cbe-e6b790437957",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c485a931-39e5-4cc6-bb73-3c54cd9fa7be",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ac63add0-0338-473d-adb2-733db304a7e8",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7113a226-3de7-4f40-b089-e1f3cc6095f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "480de518-9459-4b85-a6e6-61fffb266977"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d41187cc-df24-4be3-899d-cca9520d513b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "261e2387-8d08-4441-80e0-9d983c31f876"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fb651e88-c2f4-42e0-8c90-e1192fa577d0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dfe30986-8a0e-4970-975c-4b9652d9ff8c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4498a8c-e049-4747-b0b6-fdfdf0f4274d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0a22f206-d607-49ca-9cfa-bd7253101893"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "584bbaa1-e1fc-4bab-8737-8d78993aa286",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1a88bf1c-1b8f-4b49-aebf-fad47f49abee"
            }
          }
        ]
      },
      {
        "id": "7c5af1f1-f337-479a-8464-0ea1639ab3b5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "24a3c6ff-fdc7-4354-9f35-5dede6cc483f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "196a5ab6-6e7a-497d-b417-d1aef5478c45",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "868bec59-282c-4e30-9d7d-17304fd6bf4d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1d1b70-dca9-4608-9f0d-c435bda7213e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44bdfd02-7f2a-4123-9d4e-7bad76827c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09c44ff-211b-4940-b7a5-120acf3f2ec1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfba118f-97a5-4af3-b8e3-364f30947762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea8da2fe-99dc-4dd8-b5af-68563b4cee81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda1fc9e-01df-4941-85e1-17f2d74c6f0d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b2215d-5563-4106-a1c5-fd3d8d5d74fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8abf745-44b0-4cf3-9350-88e01b3b546d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d7b64d07-e8ac-4687-9360-6ec9251a1e4f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "50025d75-dd20-409a-a959-cd776a1b7d03",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "813766ef-d7a3-48f3-9cdf-bd47bb0d2a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "feb47aaf-3bfe-42cb-8a01-51da8217fc36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ac837b-1e35-4d5f-97a6-68fc1650b0b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7278a3d-992a-411b-a35f-74d36e7f9004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ab1e83-2637-4f92-b94b-0c960044a829",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3ba808-4500-4e87-b848-e50ddc5a48e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fdbbcff-84f5-4988-99b3-1c57ade90ea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c310b779-fbff-4772-822b-1ce40e08e1ce",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "1cf94523-145b-4a1f-95c3-4546c5bd3fc1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "72c29b91-a0ed-4d04-acd4-012de0a12ddd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a2d4e37a-63a4-4cdd-a8d7-67629771872a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4322c05-17ad-4286-9fab-3a260f026a88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a09dd555-716e-4dd0-b6ea-c3888efde7fb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85577f62-1f5b-4487-b224-d52a5af6a65b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "eee98643-4444-45c9-a105-6f41b6e975e6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae060ba5-9460-44ae-bcdd-45479cfcc310",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a45f7fcd-f8da-4ab6-aa70-12d260087a16"
            }
          }
        ]
      },
      {
        "id": "1495f5f4-ae78-4251-ac80-a0d3135132e8",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "aac551d9-64f1-4b0b-a2a8-75d522d0abd2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "288511f9-0b03-4434-9cae-9453738f362c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c788ac44-4b2e-4fa4-bef8-7a2c2f70e873",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54932612-71d0-46c1-ae3a-05523a3f3009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60450b35-095c-4d78-ba74-dc588ae3abec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198bdc8d-3cb5-4c17-b4e7-4332323ededf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18901d77-b593-4376-bf53-df31deefab48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bdf6f09-0881-459e-925e-53fd105536c3",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c1072ae-f314-4246-9564-2ee403f1fad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e7704a3-5e6b-4dd1-a6e2-7f8ab7795746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0878d2d-8449-43a5-a5a2-66827c79c4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18cde174-43ec-43c3-948e-084032fd7265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10baf57a-b638-4b18-8db8-093caa7c679a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb4ae2c-70ec-46f5-8597-7fddeb16742f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36552e44-eaed-4f86-a5ca-19e261746b30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a889fb55-3b87-4b8f-9a48-eb9df517e615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e42e164a-cf57-4da7-aa65-b8b5d9ce79d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040bfb29-0c71-4062-9fc1-a2091b78b1d6",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba0fbd0-8501-49f5-9cce-73c6d0dbe1d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a94bbdd-49af-45a5-8573-5bddf567e437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f537aca3-5174-4e68-96c1-6d8da3179707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c1331ab-35b1-4363-9181-06a9401b2b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85057ba0-1f1d-49aa-a07a-28ce8643513c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dafce059-fa9a-46e5-82bb-664f38293adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a6b9469-0c1c-4b84-81a0-32b158911e89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c4ea54-3920-45e4-bd3e-470e38818dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db81a4a8-ee31-4e72-949f-2591c5c99bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5f8484-a59e-4fa3-a70b-0a641e005a34",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9561f236-72bb-46ff-887a-a75f8e8d39b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccdee62b-332d-4006-b57b-36a34bd3e880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691d52da-8920-4ef2-907a-1841e7220847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9bc36c66-a3f5-4966-9141-e4417a2acca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f57f6d-ea17-4855-9dcd-3a0de2c46b1f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b31462-906e-44fe-93d6-0ed9bf32d5e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe1fa11-4c8b-4cfe-8bfd-b5c936750f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c7130c-7b02-4ed9-9f07-2e9055022cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73e67f74-b2aa-49eb-9033-603a0d9d7825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4601bc75-e1ba-4ec8-aea0-44276e997fbe",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eee7f26-c284-42b5-b1a1-6475bab9283f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6347856c-0f1d-4cad-b1cc-a0267b6dd8db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a75511a3-abe5-4204-8017-0b2af7a47c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20108ea7-a0b0-4ba0-9453-c2a5fb22681c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5bc06d-7909-435e-8bcc-6037b82cb799",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b0a5f9c-ca13-4e44-8e58-a69d14817f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd661022-97ca-4779-959d-86636770d5e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5ee88f-78f4-41ac-887e-b17e641baec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64b26a5b-c126-4ae4-9539-a50f3d0b9f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc65afa-d9c3-4410-bb0e-6ff08bacbbc1",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d400484-bf90-4367-8af9-80b9b6ae2c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01a69949-19a2-4bdf-a0af-b5f43ad2a997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7456d392-f240-4b68-b97f-844355790a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25921b4b-0661-44c4-a082-167e878e3b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b38bf9-24d4-4be7-9776-b55dce81d9cc",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "882ff868-50ee-4321-855b-ed813329cfc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9423ea6-c24f-4fae-a58b-ababa5b468da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62876677-9dc6-4075-8aed-ef95f9221223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc425120-68b8-47e3-bc62-38933a04405e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3f7b12-769a-46f3-83bd-18ed034ced57",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4bf7bc3-9ed2-4a7a-9f11-fc18d15710b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5695931-5dfa-4513-a604-37242a3c4785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94bd525c-7888-4048-b295-414c59e9e3eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ee26dc3-3591-4afb-8dbf-57e9171d8f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8019aebe-d902-4af1-8af6-8a33d13e58e9",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed7a6dd-fd9f-47b6-9348-050401049461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fceaf11b-ff25-41b6-8c63-07616cae18fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689f9baa-d730-41c8-9ccb-2ff1a396c5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b887afe-d292-42ed-8ec2-64b354a12e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f10360-9a55-4f16-b35b-04b7c52f9b65",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7cbea92-fff3-49ca-a83f-5606b445f047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cdee3b7-c426-436f-a4e0-eadaa9da37bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798b7cd0-30e8-44f7-99af-c82c7db11943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97ea3432-2761-4a2f-8373-bde50f304c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3588a8d-8795-4794-960f-f75133e35bfd",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0bdb401-d303-4e94-8143-45cf8fc0d6d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b836188d-501c-4b67-84e6-506584a4c80f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83bad967-73d0-4459-9474-ad2d854d154d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67242f91-d4e0-43f3-a2e3-e63289d8444c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65dd20aa-02a2-4fc5-8604-872fca408b9d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24ccbee-2bd3-44a6-bad3-6e8f5c40737f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "209af65c-b360-4494-8194-576952506a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a359d7ae-a4e5-40d7-b50e-3d968fba788c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d774ad89-e93d-4cf9-9fb0-7f1d1323b91c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6a4816-277f-4522-813b-4652e32e4805",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "505efe8a-f8f0-4eb2-a6df-656c6ac6efde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e765ce06-6779-44eb-b21e-8a2b6268ec4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f83bd3c-fef3-439c-8644-8d9a9e01c9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7748464-479d-4b02-ae2a-1df99d2d8591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6794271-7958-4c10-bef8-2646ce33d035",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61272870-675a-492e-a72b-ce5f102e0d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "167f69c5-191a-4822-9ffa-b6bf363ace35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98273ae0-aac7-404d-87cf-3524e5136ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "17336e6d-bdf4-4775-993b-491f323f12f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd5ec115-935f-45d6-bb33-4b39b812c2d9",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf66de6-198b-4e22-9c7a-94da0f99c92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca5ff57e-4acd-402f-a88f-fec8bc55d8c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624ee28c-cb55-46ab-9c84-b1f1e5faab77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae3cdbad-58a5-4019-b4cd-67a9417b0534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd5f570-d07f-422e-a1ce-8c0926c10af4",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb733ff0-188b-4ff0-93ca-c05dd80d0843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81e9e451-fee2-4fc1-8301-84a76c0af724"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e69e76-d8de-440c-8cbc-f7bafe4adba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca846efd-cbfc-4090-92cf-ca33af815751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea2bc70-9bae-44e0-b450-ea0826a72474",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e848cdd3-d53f-4144-9ae8-be0810a04c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22876bb0-8f8c-4a02-88e1-2f8f73fc6950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17315715-4d7c-43c7-845d-44ec4ebe6452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6af1b92-4881-4770-822a-a2248c9751dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf6ae83-8eb2-4555-9543-af5a785805ef",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ccd97a-1d4c-4c6a-8e17-7425aba54b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "496286dc-89c0-4d5f-aac8-148fa1372887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "140008a9-0c0e-404b-a838-c576e2ab5021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab3d2cdf-780f-490e-b74d-0e36ed0710d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "042b76fb-f3f1-4963-83de-f149f11d3137",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e87c8c9-d2bc-4423-88e6-f8317e49a851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb915ec5-4923-4a2a-bfad-a6b112a6a794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73c71ea-c11f-497d-ba8e-1bf74610c469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bc45df6a-fe16-4b01-bdb3-fe086402d641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8919e2fe-0d6c-4c2d-afd8-fc3994f5377d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b5d673-b7c6-4d84-b825-e1c4dcd4aedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a6eedf-03af-4b7b-b07a-91346d4bfbb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3000b538-0a26-4874-b778-b2cecaaef634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce68fb25-4fed-488b-8970-3b173c9ebfdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ce38a2-ce7d-456e-ade4-c8a428527391",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c765242b-5361-4b0e-a319-8affd9d1ac51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dde80ed2-7aaf-47e7-b97b-6a1fe6c6d275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172ecdf4-0050-4571-b5e9-fda894a8c528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "de87abad-f839-4b65-9282-c4a3d7be70e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0334f392-0054-4b41-8816-be4804ccc397",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156ad093-06fd-43af-8ab4-19dd3e06e848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a6c64d7-dfcc-4ad2-8b90-e8a460f75353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c35c5d8-430b-4d45-9c5d-15cb89a93978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "25cf3539-f49d-43c1-9f74-19ced16c97f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7d9681-a384-4416-aee7-21b0896ebd8b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "486eeca7-9b7f-4a47-9580-37c00be511a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ab380dc-4c39-489f-938a-db28426d9842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f50efc3-41b5-4e49-aa4f-ef2ba1ebf622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a952337-c023-4ef8-ab6a-15a3fe920a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1162a8-3c4a-4744-9a09-e97d8e028593",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60a3c72-e692-41ae-9832-bee3565d4092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd3a52d4-84dd-418f-9f2a-a84f523f93d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5614e67f-f525-41cc-9c54-f660ea39a96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2299f85-8285-45ec-91eb-67abcccc006c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31b8b0b-2180-4774-8112-a81bf1b5f63b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb7c4219-605e-4fa9-a3de-52bdb003b642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b30317-74ed-4941-8ddc-6e655b169ff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51dffd3-96a7-4e20-b9e8-a00b22832c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4930d17c-4f97-4817-bb94-270631021484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ccafeb-3124-4101-8604-e04a4bde4ef3",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e033f89e-44eb-4efc-a61a-13e13117f1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "297a6c74-c064-432b-ba0f-93ebc6def267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e5653d-a256-4dd5-8994-2e47e85fe775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "effd654e-3fd8-4d39-834e-e4e623818cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b37bc098-9253-42c4-b12c-d233b03e8df1",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d90472-ab47-4666-bba4-1ac8f4f92abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dacaf975-7d11-423b-a81d-d3dde41bd5e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da1f8f3-1cda-4b2d-9b1e-fad8dba335fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1936a24-7fe2-4fb9-9f69-b3d2840e101d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a64c050-1a43-4200-bd52-706eca7ee004",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c039058f-793b-4c8b-9cc7-fb0b29d75c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d21d28d-bafd-4147-afdb-1564cbd96a90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "942a0853-4c16-4250-8542-b7f77ebf2d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7df9e181-e86a-4164-a707-8ecbb41970a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b75b329-b38d-42ff-96e9-036d214d6168",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59086b13-35c3-4936-aa07-fd8535870d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf4f728e-3cdf-4bc5-936d-28c4c82fb581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb50971-4d97-4c6a-8e1e-009a2185a61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5034a2e-2f57-4b31-b483-911c49d4e55d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5620358-c4ce-499a-ae11-b055ad8fac76",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7d315d-dbde-4187-afa0-584f76fdb877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f072e340-08bd-4b1b-bfd8-bd754a7063ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da730144-3953-4cef-9a2d-81e235a9168f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "909f48af-ff72-4687-bcd3-03d34b18372b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc516bcd-47cb-486e-9533-83a757347785",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "781d89e3-0e69-4ef2-aa67-6dea919b4ef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4218c39d-be8f-4b97-8f86-0136f69da1c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d227b0e-3ad7-4e0e-a655-2d3bb61cd289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ce12204c-068c-46b6-87cd-5637a424ea1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10629d44-85e0-407c-a284-96f1d7491924",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de4fc45-0621-45ad-b476-77694bf04d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "42d73a54-6eab-48d7-959e-e07d3986d18f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644070a7-7ca4-49b9-ad58-756516fad002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7f8adb11-6033-4c6f-bfc2-443038772948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f848f3-3228-4355-82c3-d7013ad360fd",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e004b90-a998-48e2-8cfe-288d0f274f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "756ceafd-e92f-4cd7-84f8-06d0c6d9f48c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f9386a-03a1-4601-abe7-6af974863bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "14ba58a7-ccc8-4120-bae5-6b5ae4eef119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28413fd5-2e49-432e-8bed-2f8380adbc69",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "850924a5-fbaa-46c2-8836-606e6bdb539c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eef8f4c7-5e7d-4401-b98e-fd4ba8d045ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9bcebfd-fbb0-49c7-b373-9d3833b1633b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ccb711e-6170-4a17-8e63-3427bdfb181d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78446a6c-04c0-4425-b659-6e47682975c0",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c181bf8-374a-4895-89fc-094c798a59a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61581bb2-e2ad-402a-b548-bc390db48edf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e57c8e4e-d023-444e-b2f8-12fd2cb8b21c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1dd8fd4b-efea-4cb7-8189-ac107d880b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efa4a35-4c2a-4495-b04f-15b6d91eb274",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "153d5a47-3f75-4052-8031-348eae363293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02af251e-73ae-4300-b2a9-8b53f53fbcbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "787fbd18-819e-41a7-8fc2-23eccb8534f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8950066-5735-49ba-b6ea-031e0bf9a9e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55825010-b52a-42c7-b89a-b6b74e53f2cc",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39974db4-d4bf-49ac-b956-96222cb38c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5986571-2d55-41a5-8d2a-c7d3f2cbf5e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00384db-47de-4c56-90f4-a441a3d2e301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbd63eaf-8bec-4fd9-ab03-b03bd337421e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "510ddc0f-5d0c-4558-bb08-389a66b1afa6",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a3b4be-b71f-453e-8c23-1c649e7bd1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27490d27-b359-4ce6-ac86-83ba07a37557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ddc158-1ffe-4f70-a809-8a6bd3c87c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "9ddbc294-62a8-47b0-8ed9-9c677b7ad87f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "453075f8-1c9e-4ba9-8b22-275bd0b89de0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a74eea-8436-4c9d-bf24-8d52602b5a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bbf7718-b552-434d-baf0-fec08b627b03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c27599-aa51-43c7-807a-b3e444be7bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "918233e7-ee95-4d41-9906-ad6c2c0ad59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6977e4a-1a37-4a16-91b8-2732f882f390",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d136750b-39aa-4dfc-b866-13ff3f7d5d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ecae36b-3216-47a9-bb27-8ee6aaf66626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9e6dad-cfea-4698-98fa-c75ea197ad25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ba24041-7c37-4f01-ac70-4de99baa9338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ebf5271-973c-44b9-b486-dee10fa8d12d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "897548e6-8e5c-4e6c-aa99-5dbd76e8c4dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b358459c-9972-42f3-a1ec-4c08a382bc48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "775b33fe-38ae-4743-b973-d9b8b0287628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f67dcfb-bd3d-4888-87a8-89e8c7ca8c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8018f0-4020-44e8-bb78-dd3f754c57b5",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "159d43ca-ea38-4b9e-ab02-4c5da2a4f8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17878f1a-dad7-4b85-a561-a85b27f96822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c88446-6bdb-4a66-90cb-f41f321ee73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fb23e64-eed5-42c7-8d3c-5ad0798fb3e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1236826e-6690-488d-aa79-c8337e07e65b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22cd9e8-248e-4649-9f3a-d6e0904e435c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ff9a28e-e7fd-4699-a5b9-674049e403c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c52f8f58-5f75-4e2b-92bb-7bee6004e805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7157f308-9114-472b-956b-30d15561f963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ac6ffb-24a0-44cc-9d47-92cfeec0373e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ef9b78-a44d-48bb-a32c-5d05f2c7d032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b17d02d-40e5-4878-a1bf-f868d830be8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d0368f7-7d30-43b5-80eb-dfb9ec7ba2ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c75b22f-9f45-4f8c-ba80-b480279ae381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161af4ce-5cd5-4b72-95a6-17f36e6d27bf",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf6b1b4-c08f-4524-91a5-258827f55f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bad12d6d-9d7b-4a96-ab2f-44288573cde1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "878c7923-d4de-4d8b-82dc-46fa58f4065c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "239267e3-29ab-40b5-819f-c7d440537828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd168263-0aea-4832-a8f6-b4a65fbcef06",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fcc4d5a-e33b-43bd-81ab-530fa7f650f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5166a7e-20c9-4fa9-8f8e-f3da13346cb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732796c2-cfe7-423b-8865-e437d906e1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2d73e625-c68e-471f-9ce6-cb6b9a2a6940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d6a12f-2f53-4aeb-80ec-fb3400bd4781",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a98646b-83b2-4f3a-92ca-02ba73b9a86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b11f9050-f6df-4df8-b851-66b206351953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a20aaf65-f19c-4a77-9972-f084432d2fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6676f8f9-4413-47fc-ba23-39da1c32c258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc7f8b8-45f3-41fc-b783-5b90492151c7",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42031054-211c-43e9-97b5-a1893ca8efa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6bb20a3-735e-41d5-a287-5fd582747a6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b6d9c9e-aa77-4f57-8b56-051dc2c4650e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "109dbe0f-5609-43be-80b5-439661e4c0eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58619fdb-4438-44e7-b68c-dbf29854f599",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb8b4cb-fcc5-45a7-82de-2155c8b2936a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "847bbe70-a155-4b1f-b996-2e59e4677f30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7f3f89-b49f-4293-a12e-52dfbc839ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e499214-3a87-46ad-950d-595a07051990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd663b21-396e-45d6-a88a-b95e39cf8dc9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae021eeb-1aaa-4425-8c9e-9ab988835798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b9bbd91-1958-4833-99a4-5f3075f8aef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0934d99-d01e-4b52-a7d0-2efa732ebbad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6bc9941-a7fe-4608-a89b-dfbc796b21a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58127c56-f39b-4c07-bf0a-35fafe0473c8",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aef9b1f-3d08-4cc3-baf0-450b01bb117e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08314b6f-ec78-429b-bae1-afbdefa32e42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2e70e3-3ea4-441c-be2d-0cb3800dfb1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcb69506-da78-40a9-a1c4-83497f49b67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b08693c-69a3-4073-9954-8af6563387b9",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d137c8-93ae-4a1c-9942-7aea1109a6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a87e777d-0a7d-41aa-8b0d-91a906d9e497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151b8913-af22-4e5c-8313-71f664befc6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "954715a9-a7ba-4144-b663-50869ec9465a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e41843be-6b91-4f49-a175-b53f1a73c19f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c18333-925b-46d6-86bc-f9d06624648a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab8d97a6-1f4d-4bf0-9cdb-f097865a9e46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9193853-1455-423f-aaca-3c0bb8986999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d7c5735-1abe-476e-9035-d10478a96bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1905f88-e21e-4f08-b39d-2ba2c30fe9d6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8d40f8-2c6c-474f-a6c4-b187524087a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87ca035f-856c-4b67-9f46-52d078737b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d908673-4c96-45ee-a452-1905627392d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "defa44ce-6028-4808-9cc7-3177b6bb9fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "168d2b61-c4c1-4989-a26d-a2c0384170ad",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0669f432-5991-425f-9a75-136a302e6f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ae6ae6-aedf-473e-b37d-4b8f41fe9eed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1a7fca-2527-404f-83f2-22e0cda69767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed88ce7b-17e8-4f48-901a-ea6ffc844707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a7a835-da5d-42c7-8d75-c51baca3dec2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dddda023-4761-4188-b58d-97b804077d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7be1cc6b-6671-42d3-9519-56a74c5f9875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "512f33d8-768c-4bcc-b857-1f2542e90d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "be0f45c7-32fb-4021-b02a-219dfe1b8e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b013a7-44c2-48d0-b15b-17e37f29eff7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9bcf64-8867-4bc7-bb41-5aa07873f162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b7ced9e-eacd-41bc-8607-f45adfda91d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210d73f7-a3a9-45f8-b3db-66c9a37de1c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3906a0d5-9d12-48e1-bf5f-808599bf67cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de901bd5-dcaf-4970-95ce-190434e33222",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "502681ba-b114-4043-a80d-24a876db5788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dfcbe01-5dd1-4ecc-99e1-2b867750df4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e0ff16-7a46-47cd-b185-5fca5090b093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "59fdd65c-856e-40ab-b62c-b2a036ea9358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29e12ac-eeb8-45c4-a059-c114946dc636",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "affe06b6-db93-45ce-b5e1-67603689f37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a05f2bd-a674-4b30-8d0d-d9bdf144ac73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8098df9a-cb07-4050-9e86-ff8cd6a77e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3427ca59-8174-4e61-8aca-15c2e05ee2cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d582cb6c-4e64-4d5e-a25a-bc32be1769fe",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd1211c-0368-4bda-a685-d53bc4a47f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2749369-c219-46fd-9130-9b08bc3bc4ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b581c2-fa14-480d-9c7f-cfbb6964e2d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4504ff9-f58b-4389-9550-03875023b0ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345c6119-6446-485f-ba4b-ccc7c0a051c2",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b196dca1-9fb7-4a69-b0fb-e2d89bf91fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d348f34e-4284-48cc-a336-bcb43c6ac886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eea9b1c-4442-443f-8089-a605c28af03d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "946e70e2-d2a9-43b0-bd3d-c18628cdabd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d975cfa8-4588-4b42-9891-eaab514f1301",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8190847b-a1dd-4d6c-ba6f-33ba4b8099c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b319a15e-46ae-494d-8b7d-47bbdd04d194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e3e938-8955-4881-929e-9e908d6cb894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf8f8b99-8abd-43bd-bbe7-75dac01dd167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7ec1ba6-5044-45d8-9ad4-26a90004eadc",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "336949f3-1f43-49f2-89ea-394744d60687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a41ff678-427a-4ae3-8c11-83c2fc8b5337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b140a175-2ac4-41da-8e9d-b0167ce63de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "be342c21-265d-4ea1-baf2-308b48e75285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88eb89b-da84-4883-8d74-b51725fe94af",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0d1ccf-7e2e-43ab-8bbb-962584fa3e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b496927-1cf6-4a64-965c-6009aba2538b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58597cb-91a8-4086-b2ef-3a3db5dfb9c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "11590721-4ae1-4040-a970-5c64fcf0a441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "175b10a1-dfcb-4573-9fbe-0bba6f27eb38",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "716a106f-d364-4560-a492-0080d1e32a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcd676cc-f2de-484e-905a-4c00d1d2f7fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f1f64c-647b-4abe-bb66-ebaaeeb15526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d78ad629-f22c-485a-afb0-a8856295093e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a01551a6-c6db-4ba5-8bc7-c560ead13695",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a80c500c-2451-4fcd-b697-44a073f8c7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37443624-6568-46bb-85dc-60b84bb061fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793b96ef-c0bf-47dd-b20d-fe376d2bbc91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "687eb8f5-e269-4598-8dc3-6e21bd13d4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8dcd8c-245c-4fc0-a285-4ae8785af969",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a9afbe3-9663-4455-8271-a77fc6909dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57112a49-a63c-4dfa-8f32-a6ee7ff1568b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a8abbe4-a27b-4b67-a49b-cf29197ffaf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "98d9e6b0-5e65-4175-bb36-f7c8752756a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b37b5f4f-c453-406d-a210-8ce0dd2966f6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb42ee0f-9c60-44b3-874e-5cd4f22e3122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d299da71-c057-41f4-b636-b8004b71392d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c99707-13f5-471f-afb7-74bb39c32e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "50755d17-2203-46ef-a139-1e7947ca5014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb4b112-e4b9-40c5-bbb4-fad9e9faf282",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b94b59-6f0d-46d3-8586-eca735241e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6679132b-4792-4282-9a7f-c8843c3e71da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd3cd30a-af48-45c8-a567-f01e3b37f55d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "490d4586-8251-47a6-a05f-23e6bb792de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f779f532-fc9a-480c-a0ab-ba5bdb53c529",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c07b15-e04b-40ee-8c19-1299c8d1c2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92103d6a-94be-4ce6-8be9-3ca51671da0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5076e4f5-2d7a-4d2d-854c-2df7010c5bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cb2930b3-1ade-43ae-9c60-ab69e1a6d22c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ed24b7-afba-455e-a776-3dc6862532c1",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76fc7e01-b30e-47c7-af31-3e70e18cc2c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52d62a55-2e85-498b-97fa-25c156d3c7e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d9ce0d-5b56-4f44-9aae-82a2cf67f057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ae0c1f6-03ce-4195-b056-b48f295bd2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0191851b-de2a-46fa-904b-6b70b8e020b0",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a6dbf9-6371-4cf0-a479-94f102a4180e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e259efc3-934b-4ed7-8861-e9d5dc048d7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4ae76f-58c5-47a0-93d7-915ff7ed3c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fdebb4f-b9ff-4e0f-a1c5-176b66b7c7b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7852ab1c-0644-4ec5-856a-ae7cabea99ed",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca3c502-0169-4d2f-b342-14023d502638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b45630b-f6e5-4da1-a4b6-550d0b8f1f27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b39ab2-2b37-443b-b0c4-d46556f62d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f7b1c9e-7a73-446b-a4c9-d3c171252b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b369424e-dd69-467b-a0a4-640cea6f2ad3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d657d8a-6497-4585-8067-d579bc18a4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e029de3-218b-445d-a1b1-30275f7504cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0539e2c-e8eb-4d33-a4b2-92396d7c03d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ff4b43f-8321-4e60-b68f-32fc81166f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f68a92e-d694-430d-b235-b442df038dbe",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd2ad3ee-f0af-4bf8-82b1-90b23983f2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "298a89f5-b3f9-4d54-a748-7b1b13c04652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b1a272-24a9-4894-afff-5656192b1a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e687fd2f-2def-4444-94c3-bbebff73640f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33346ae-ec1c-4cce-9031-be912149ad4e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b331a0fe-a847-4500-ad76-f59b6d2af0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd065650-efbf-4286-8e1d-8da37455f68f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72f39cb-a1f7-4d89-8a68-ba1e22064e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "81729a8a-ba11-4cf0-bda4-cd1cf4e59ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f51dc22-e7a9-4ac6-b0db-a36aa582128f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55b1476-1b35-4b2a-955f-e3f064a43bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98a54b60-9812-401c-8b43-c7e3beec8810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812fff59-e18f-4b41-af09-b9a2b2f30739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c44a45a7-65c2-4605-a7a6-bbfc5b565c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396bafb4-bf3b-4d8c-87b0-8505ae899a07",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6c8a2f-a835-4149-aa28-5e04156fd784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff47a66f-9d6f-4f17-8778-eedeb0ddd991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b7958b-bd90-41fb-9323-92e74e0eebd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "057c4fbb-fd0b-4f90-bd4f-c752dee95c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08dfe226-7562-4085-8df3-728ab63ff43c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33dc69d3-6cac-4ea2-a4c8-bacc91eb0cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66a4e03c-3e87-44ff-9bf2-c296fd2881d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec7faf8-fc9f-4026-82b2-74eddd89d5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f862e25b-4b6e-40b8-aa21-e5b03841b9f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b6a8bc-7f63-4882-b13b-fac92fb621fc",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8048817-ec9a-4f1c-a524-b775d522ddfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c4ad8e3-9dc8-4195-9727-9c77777f2a36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acec1beb-27d3-430a-99df-9841f6da6af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cbb2c7a-b5f9-4860-8703-448490d293d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee69f5a4-dcd6-475e-9c68-054d585f79ff",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a995a32-a048-4466-a036-6531c54fece8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "057d8f7e-bb18-44e3-bafc-af1b4a790c07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "941ccf22-efd7-4c94-8264-45a5ef722624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2bdd83da-196b-4b64-adf7-23877ae28c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5e5475-687c-4aa7-b200-3c87f67076bb",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16bb3f6f-d168-4b77-a656-042518fecbd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "447fd78f-20fd-4220-b046-0995a3324422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca48cc3-665a-4f02-9901-73bfa947a9a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dce2b746-504d-441d-b9b9-dad7baefeb07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b32b9e4-846d-40e7-bf67-96ae9c5659c1",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b74df0-91b8-449b-8640-3bf3b28618cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c69c98-bb90-4720-bc0d-3ad1b9b91722"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1750089-6fa2-4eef-8a0a-ca294264c20d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5604be59-6fc8-498e-b860-ddcf2783fe95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d958af-09c9-4dda-99f8-aa9a96c8162e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3f8d39-76a8-463a-a4ed-d8e6e41e7d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b1c4188-78a3-4d0f-89c0-03fddd40a43e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cbb63f7-ae12-4daa-a081-ab46a2323ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fac3acc-9df8-43a0-b1f8-53e7cbe50548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef17dd2e-8d77-4882-8465-350bf435249e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d59b5b-c0ef-4c16-8eeb-b6aaae01534e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a528502-0427-468b-878d-267df05905e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753402a8-e1c0-4969-b5f9-c273180a6184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d10610a7-e9d2-413d-b30f-324996bb2ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf4cfaa-b491-4974-958b-a8ce505eac1b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "104722a9-b394-4b61-bfc4-39ff7a9d0fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eabaee7-3942-477a-a167-94ea2ca11156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7532ed-e8c6-4cde-b3a5-ae775722f4a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "79cd9afe-c76d-4307-aa3d-bf7479cd4160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05549a1f-a454-44bd-bab9-ee6b748ec5b7",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70343fed-6d3a-416e-bb52-ab12d8523373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b16966dd-5c3c-44e6-aba8-eabceb065b7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa43a8f1-7467-443a-ade2-259807116f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "da0821a3-73bf-4110-9986-88cdd5a1a627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e116b46-4959-429e-89ae-f5abcde0d61b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce81db4-9280-45c9-88fa-a374a80f856a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "acdd3446-d1f8-45b4-b52d-62033d6b17f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a240dc0-bd3d-485d-90be-536bef518a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3569f905-f6ee-4779-a747-3640ba7905c9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6b172ca9-286b-4d08-9fca-bbcbdcbc4e54",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fd64e3d8-2b38-4c79-b500-59559bfd1c23",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31680681-65d0-41a9-ba54-7d61dc0daca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "976283ea-6c4e-4cd7-833b-5943055e04e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "507a6268-4c3e-4eb3-9677-c642ad3f2f43",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "4a44d328-6af0-4d6c-9abe-82acc34b6983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7ee389-57bc-4323-aefa-91aa21208620",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b75ec8b-4609-492d-91a1-15a77bf9533d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc5302ac-5021-4bc4-ae13-d387942f645f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eefab82-9f03-4ade-a21a-0498d8bb936c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "9006f08f-016e-400e-904a-5a738fc5a5da"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd1765a7-ae77-4d17-ae5d-33d044d5864a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61f372fa-3e26-4aa3-b0fe-263f9d94b61e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f20290a-7129-4f0d-9de5-43388466d46e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74b3d979-aee6-4409-bc47-adb44d22c02f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4c1018d3-be37-4be0-bb6f-1c7f2b87ac3d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b826d31e-2de7-4c59-b260-9a2a2eb27f88"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2092f907-bf50-45e2-a88f-fdbffba4f49f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ff56bbad-8d58-4749-a33a-bab5f0ab3439"
                }
              }
            ]
          },
          {
            "id": "0719b666-bb63-455f-b7e4-01223e09c86a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3c4fa33a-575c-490c-a670-b33c36e2d97d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da706177-5bb3-47eb-b93c-b4a00e8f552e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8d25c80f-b4f9-47e8-a592-fff116c8eea3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74f41570-fc62-407d-838b-4f53f1f85876",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6f95d5d4-bbbf-4358-96ad-810322e167f8"
                    }
                  }
                ]
              },
              {
                "id": "6103da24-a038-405e-8665-791593e01360",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ceba4f1-3290-4fd1-bfa9-bdefd0c09f41",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9ef4cd34-0014-496b-8c35-0d8a5af69200"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc5909a1-2baa-4870-9333-af39b0d93d95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "703ca3e7-12eb-48b3-b3de-fc7c5551d8af"
                    }
                  }
                ]
              },
              {
                "id": "484ce4bb-7345-455d-8fb6-5cf8ba0b75a7",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a91703f3-8c3f-4074-862c-696d0683bd06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6ae03b32-891c-44ff-84de-56cef27c43b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5572ddc3-0bf8-4bda-b9e5-44be9ef42999",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e125467f-9d85-4ddb-a4d2-fe71106fba04"
                    }
                  }
                ]
              },
              {
                "id": "37a90e03-b17a-4340-a5d6-319c6db97e14",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f6216c1-75eb-41b1-96d0-27b73735c4f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9e55bce3-3588-4347-8bda-b1cce65544a8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c384d32-1050-421a-b4a4-2c51dbee1a2c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f1ac1f5d-059a-4531-bfd8-dd24ae2e41aa"
                    }
                  }
                ]
              },
              {
                "id": "6c73534d-8112-4bd2-816b-182a86b3905f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "73abed34-5159-4088-b6de-5aee81636efd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f488b6f4-aee0-496a-98a6-4b46e2eb0d42"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eab874b0-54cf-4c01-94c0-6c097fca9b72",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "41d2a07a-4e22-411d-bc4b-9e606d897665"
                    }
                  }
                ]
              },
              {
                "id": "8b493061-4aef-419c-9997-2225d3810723",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d110cca7-f7b9-4f4e-8c18-7384fb7abf36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da348657-cbdb-48a2-a858-d24c96aa229d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df448558-8893-4a87-bb13-08ed9bfdf7b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0418393a-1a02-4289-8c4c-8a9bdc170b13"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "171644dd-b5e7-41e6-9b12-f3843fec20cf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d2b06af2-ee6c-4614-bef7-82f7192de42e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2c5053d-f028-4228-8a92-668db4dac655",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5ec69e8c-8af1-43f1-8f91-64b3509563cd"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d87c9fd-e588-4403-b957-22b5b5bdd008",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f6e4a5d1-58be-4d96-9a09-4ddfbe003362"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "174bb9bd-ea34-4a39-aadb-6e1f3a9fc317",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "034e5393-825f-40ab-a487-323d6948a936"
            }
          }
        ]
      },
      {
        "id": "116e9ada-f8d4-4dcf-a8a6-60129f672eda",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4aadefb5-d282-4f2a-898e-6db1793f0855",
            "name": "Negative Testing",
            "item": [
              {
                "id": "747d7088-9485-4524-8c18-207ee79f2dad",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8cacee9d-45fd-425d-a8ce-7b875c1b6ff8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b00366fe-d973-47a3-9f4f-203fce8b7d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2cecf60-45ce-4870-8245-8a93bbe4ebfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28b04a8-9ef9-47cd-985a-eb3e8c7c422f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "68d9074f-ed9e-4db8-a046-fb16ed0f50e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09ad11a-abf8-4b4c-bcfa-398c8aa455ae",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0e0142-2698-43a4-bba6-032f036d3ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f22913dd-2bf3-458b-b3e0-1566b6816342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9a4706-035c-42a7-938c-099142e7c913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9027fc17-fc69-45bd-b079-a9949d41361b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e073561-0a56-4586-ab39-b98a3a06eaf3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "760e3a7e-b8b5-42e8-a1ef-2693bb995e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27b3b67c-6d72-4b21-9abb-d82673208074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754004e2-10cd-4716-bdfc-8c2bc38d0fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61632c20-1480-4fc3-9bac-1e7a23261677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01daeb0c-1b0c-4c8e-9ba4-c1217d7479a2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f182206-f7b6-4dcb-a0e5-1af8cf6fbad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7678b6fc-9f33-4344-89a9-f09c94ebf085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1870e7c4-df46-4b78-8380-b59136566bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8ac37d9-af98-433d-a4fa-e9c7f89f779b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f4b996d-2460-46af-b270-857f1f92174b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d712c01-bf67-4d3a-9582-6bf435c4c188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6283b3e-b258-4616-9d55-0052575c4d5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e832f7a3-925d-42c9-b01f-e24270429ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "21152a41-e584-4fd1-9114-9c949faf8144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281919f4-653d-41d4-ab59-50dca6af5d98",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a02bce5d-26c5-417d-95bf-dfb38daa0cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f31649a8-149d-4bab-a4ba-bba324b2d47d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720f8ce7-a2cb-448a-8ba1-c88c0f3d40ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e82ead21-c2f0-4696-85e3-1617bf02dc86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b964c918-9c51-4d10-bbe5-d52c6634b84e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fcda871-00d1-4e04-b96c-9906d35f1042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9979ce41-b6fb-4d5d-b2d7-8de4c8b5cc33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3741116c-3ceb-40e5-921b-96cf9da4d3e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9efaac64-a15a-4c8c-b5fb-5e69dcc1004d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e5d495-b28c-4a77-8de7-becc34cdf3d2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c28f6ae-fced-407e-a213-04fa4071f95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb9d0be-0aa1-4a28-9c57-2ce6e0e99352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e9b68b-a517-4c42-bcd1-54112cf532cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c56a1cb4-52d6-420a-b7e3-f326f0620c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adbf5345-c48f-4c02-bcf3-caeeed1371ae",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c23981-6431-41ec-b92a-163dd713b8f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78d8f9fa-2d4f-41d7-b718-0d7340ee2449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767baece-2c31-4586-8e4e-8185d06102b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b834dc11-52a2-4c31-b3b9-b2fa7905e4e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be6346a3-f709-42bd-899f-99d8201930cf",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8412d51-cf8a-4696-ae9b-436a1d4b679b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9fdf119-3d63-47c2-be6c-979b6af699bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6958029-67d2-45fe-8753-f4ef92ee7fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6afbf80-c179-4967-85f7-608ee1f5ecfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a4feb5f-b3b3-4604-8b66-f93cdef80b3a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c8f74e-ff37-4e02-b9f8-33839392fb6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492a3eee-953c-4dee-bbe5-5c1a6246666d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc4ffd4-b987-40a4-b8e3-5bf9bd3fec77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6a95fdff-b777-4f93-b355-395e764a15a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "503a2768-2a11-4662-9f6a-1f7284f9bf71",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba48a6b-414f-4bcc-a28b-757a58e7cdcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10b3d779-3e88-427a-b7f0-fcffa21a0432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4924ba2-95ba-4919-b965-1f84c156def0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7e5a977c-3781-4c98-93f8-1862cfd2af4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23816f30-b6dd-4bfe-a89e-e12ec18db17e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b7d813b-e5ac-4b1b-8e0c-f4f02e325d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37534fee-6ddf-4e61-89bf-27ff52af0afd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e94b8e-73f3-444b-88e4-1343c007646f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b39c0bc-4394-44de-9418-48c898b41b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b2154cf-207c-483f-8f3f-a1f336293fef",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d60663-ac82-46e4-a896-1ae534670081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "968cfe2c-46ac-4b61-b247-b261e9f90c84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d74ebc7-5f41-43bf-bbea-0991322a0fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "10f80237-5804-49c3-9272-63f9ed1f91ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d54705-2e71-4c96-b8ed-1e27a0d8c42a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe768243-86bf-4521-80b7-e525b7fa8689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f532f08-78f9-4a7e-b28d-4abc887df146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60c20a9-147a-42e6-9b56-3cd643174b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac13ad12-04eb-4a04-a665-2315cfae39de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b14c102a-048d-459e-9d0a-96bc0c782fd9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a6a7d5-e242-4e6b-bd5b-b37b7006c1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e43db0-0e50-460f-bd27-d38ff6c06a29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76257ce8-e436-4c2a-8322-b5530bad15da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1bd7d91-7568-4ff0-98c8-3e421acd1b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ff36bd-3719-40d8-9c7a-11aa5c352083",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5cd9df3-27ed-4421-a573-777bfc385c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b065d4f3-af27-4ce4-8cf7-660aeb75cf54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead350f9-7a0a-4f7a-ad77-0d4b5ed9a1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6adf209f-624e-48c5-a7d4-578f53aab95c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb23f5c-6c56-40c4-8c53-0b24ea154359",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73445c04-6261-45d9-9d8b-1a21c8d53454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd86b906-6a7d-421f-818a-7ae08925cdf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f9a876-bfe1-42d0-92ef-0bba446e1e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e47543d-230a-418c-ba1c-18caa248bcc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f78668ca-fa2f-4661-807f-d96b8232752e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f22dd9-5506-4088-bbb1-adf22e433fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b631a2d6-0e84-4aa1-9ee8-3f9fc110b67e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4af266-123b-4e3c-9887-f52c8800993c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4074e38-c941-4828-8dd3-cfea622ea721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6116b6-331c-418d-85f0-86a0f24da08c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ccead09-b272-4f48-8b24-b5846cc687ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97a6bf46-2498-4be4-99de-252a4f143fc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b1dee8-b7fd-43c0-91fb-9e8bc9783f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1819b530-f8f3-4f66-89f8-b379902f0d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671afe4f-e96a-4beb-b11e-79d33ea9fedd",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca65ee6-a491-44b1-9341-1a433394a509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04888c7c-6081-4f25-b427-fb14befb8656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f85b94dc-2c08-4a9c-85da-de3c80080ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "754a1615-bdfa-4235-9ff6-1060aec1a864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310d8bc6-eda3-4e32-8139-617eceb7a228",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "440eb528-055c-4f1c-8ddf-0b1187f59fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ff82298-6de9-4322-b0ce-3dbd9df02fd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c48c31-e6e9-4dac-8a02-46227db2727c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85dfe10b-8896-4ff5-8e5a-d42f77adff35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db1349c-89a2-46e9-a9ba-e228df3fcb3a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c29a56e1-6aea-481c-8b63-ac31a2e99bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dca02f0f-7b7c-4d59-91b6-7e71adbe2f79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ffbf82-b740-4ec0-a138-268b2e4cc36f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2419cd92-4a1d-4f8b-b153-4cbc11392c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5a1da7-92a5-4ea2-9e6e-ada90f71a275",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f878c5c7-d957-48f1-b05e-9db0151e1bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "042b1157-98a7-4b86-9965-773a27135399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5ceac6-f609-44f5-a8fd-17b29546a7fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "baf11daf-bae6-4977-b82b-07016b3495d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de57a396-5a59-4baf-bb0c-3c810ed203d2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2317e770-c3ca-4c54-914c-0851611a2cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cba18d36-7fec-48f9-91a0-8aad70bdd08e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca89a52-c870-450e-a82a-0af2f3138457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4f28342-b8bf-4919-975f-a176dba0b129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d227f7b3-890a-43b1-be3f-2a80de5d82aa",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c84da2-5ea7-48d7-8aa7-7db72d4d1c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16d02ed9-2435-4f29-aa04-95698fbdcea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05b90df-2468-41f2-9a7e-217ea192c328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b06f8e02-cf05-47e9-bc61-04fcb3685a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71fc155-97cd-4aa9-98e0-5f587a454c02",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34578a0f-d370-4864-be8d-3c1c1155d28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1834dba2-2da4-419e-b979-dd0e396759bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af5e931-2be6-4753-81ba-d84928302d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0e82d52-62cc-4d6c-9ae9-7caa927d9953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3641ba-24d2-4993-9fc0-605f40f6df50",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c8b54b-54bd-4a4e-aeea-4dedf4f24d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a6989a-d34c-457b-b73f-accf2d48cfce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b14576-0b0c-4ce0-a339-35871f19921a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b2cad2b-5ceb-4229-9c22-d10bbbb5030b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37465a7f-09ba-4055-84d4-3c8f7d5e7ffc",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73fa5dbd-b654-40e3-8062-fbb1ba0c1a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faef3a38-6b06-4f08-a818-83cf7365325d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d395771f-c5b1-4319-bbc3-2dabd959e108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6295982-f749-48d1-95e7-266d67fe7a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed298e01-e719-469b-9b1d-ef2974ca2520",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c9be0a-8f45-4010-9008-821e29cf9706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b644b3c3-1903-4074-aa92-3d24fd231765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5dab33e-9032-42dd-8735-b45483a12e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1eef43f9-a5c3-4660-8c12-4aa2e37db89b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8939efd-6c4d-42ad-9b6d-ab8e1460d62b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1230d68c-328e-44f0-8bb9-93783cc64dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e36dd19e-fefa-4a8d-8c8f-0ebf65398172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71009ba-b0cc-4c05-a8fa-2c6e669cdf5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "489f3f39-f872-4c1d-a392-756014abad68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb992cf-e9a8-45a1-b33d-a6973473dc24",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88c26f2-45ef-45ef-8bb3-68ffb1a2c728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e14254ae-ac91-46a1-b27f-c5d1ec52d677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a610820e-ac02-4934-b4b3-65e4c3f2ef8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d4b91f-d57e-4179-92ee-565b2548cb19"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "22a5fe94-183b-451f-a689-72fb7da62112",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "48d1b911-a541-418a-8aa0-ca8e1a96e35b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d503c25-a532-40b0-b631-9c713ec6b054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89b12d12-7fef-408e-b28a-b553c1f86f71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70abf7a2-6ecc-4b5f-b73b-3972131a7397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5ad9db1-3c91-4542-b13e-7990505c417b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547371a8-153b-43ae-976b-a968e4ce6345",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f3ec3f-6609-4216-b393-3b5a3ae7bdbf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "1bcee047-61f5-45ea-bccc-0fcf1acffdc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f714b1-8131-41bc-a67a-5c4f21304724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d158a83-1dc3-4d17-bcaf-a99b444910ec"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f464f6ce-05e7-424e-a4d8-956806018571",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8433a2eb-84d1-44b1-a5a9-b700a4557584"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "70ea4460-faed-4490-8ef1-329449d3ef9d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26027720-c1f3-4892-8d15-81ccb2bf06d2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f823c56-2e47-42d5-b83e-298400273dc1",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e69d8ff6-d168-4c95-9416-a3a1efb1bdc2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cdceba60-9ad1-47e8-8099-877cca9ade71",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8f7c90b8-7b16-4255-9f37-e48e85392373"
            }
          }
        ]
      },
      {
        "id": "12767074-bc29-46c2-a8d3-c29cf88a93ec",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a923ca9f-ccda-4126-9e8f-54b16bf0b3fc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8239e722-844c-4883-924b-9e8a7c10272a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d5f5a8a2-9a41-4aae-be79-ecf7f0c92f9c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "033b2d83-42c7-402e-9699-3f6398b6fdf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bdfd7a9-d434-4da3-a91b-a7345283d68b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0d6911-88cd-4e93-8631-56a90f2fc269",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ee0c6c-0a1c-4646-98a4-eee5565285b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a221ec77-d581-42d8-9b3d-07a12eac4009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "745ba34c-9ab2-47a7-aa9c-25b42b019da4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f79e527-018d-4dd1-bd5f-dd9eaca8fd94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "978ed376-49e0-458c-a3c3-9f32935e60e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56cdc22-afb6-4348-8813-3a789e0b268a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b52740-049b-4e2e-8d6e-7d258fcfbef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "604dcab0-2104-4089-b627-727837ea6c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1681327e-cb83-41ee-9623-50214dc9aeac",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f6f7d7-ada3-452f-ac80-c6f6ae6c6fff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c798d08-b73b-4205-8876-d76208491337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa5fb6a-3f58-4836-b957-6b86e4e6d50f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca7d315-dc46-4f4f-9d39-0a7772d3b564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2cfcf2d-5cb6-4e94-8a51-1306c21109eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb10f52-f0ec-4b15-ba99-d8b843e6de7e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768c6e6c-d64e-4a85-b147-17781e5feeb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0052461-11c2-47cf-ac87-64928d9bd960"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd6134f-bc72-4924-b4f1-77ff8ead22f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "127fdd8b-1b20-473c-9a22-737cac5824b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689fe69d-8819-46c2-bf95-219de2a8f939",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a9bb3c-1ab3-47ba-9cd5-bcaedaa37344",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89f20fd3-2228-4925-9967-73ace32fc024"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3931697d-2c85-4b4f-a365-dd922e4ffa1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ac9b81-7ff0-4dbe-8f51-49765a232eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9167121-54fb-4b33-a883-30089f31c591",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119acc2b-1df5-4c29-84e9-0688af86c286",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37ffefd0-922e-48ba-8b75-728f8f8a08e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4d872b-ba43-46f2-aed6-6543b62022e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41f16ed6-9ad9-49ca-93dc-474c746f7b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b2ab17-f36f-42f5-a7ec-fd77092f717e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc848a9-5251-49eb-9b78-e1ec806181e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62297c0b-9300-4426-9462-c2d19bb2fce8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe3b01e-a473-4014-8836-be4b6aad6cc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97af62ab-d9d5-4523-afcc-765bed6ef5aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4368abc1-1a13-4bf4-95fb-85b56f2c5d79",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb4a9bd-4771-4d3b-bf51-716596976f92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a0ed160-8a2f-427e-84b7-f63a0f4e74cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c542c6f-0d7c-49af-8af3-9b0cd3d1bfba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5d5fbfc-e20d-4994-b5a9-305222accf33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f93bb0e9-89d6-40a1-b160-d5c25c5de81b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1b31cf-d545-454b-9cf8-bf5285c5ecc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7cb58f6-2713-4369-aa4b-89e7e86865f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "187c95a4-752a-4ff3-a19f-6fdf138bf060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cfd294f-9238-4cb7-9fe2-d87d2b4e70ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c64277a8-80cd-4073-a07a-b7d729b744c0",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04874f2-e538-469d-a75d-7993f77b78bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50068ee1-f530-4ea0-8f13-0457d6244636"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b8223c-14ec-4d6f-8bea-55c1a083afa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa472a8b-221b-4281-a56d-a413800a2d6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2719d7d1-cd26-4542-896a-09f1929126eb",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2882707-f39f-4bca-acfd-f7f81998961f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9884a103-0880-41b9-b032-f6b1700ae645"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e68504-d1ce-48cd-a500-8a6d6b00ebe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df23d826-bcdf-4651-b560-57e47529ace0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "614f70db-ec2e-4c73-bfb6-2d18878023ce",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27003d2f-2ff1-4218-a124-2599e3e100f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40bf71a7-ed88-41b1-a5b8-396f53fe4937"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f0b920-3b17-49c4-a4ab-d28042e92251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ea03fe0-7284-49f1-ab8a-aec87d720e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b90bdcb-0a6d-48fb-8385-316a9b22047b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a980154-9882-487e-84e3-e756b1583de6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbaab501-88d9-44b8-a5b4-b4319170965b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28e2d82-1215-414e-8473-d9d12f8202e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f23ec498-3f7a-477c-bdee-c3ccbb06c9a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ea586d-1fc8-4262-b8de-3525ec486705",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b063747-570a-4a24-9fc8-2f33509ea0b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f11277bf-a72e-4ee7-a6b4-4c4d6c29b122"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57cd6afc-b13c-4eb8-9251-9c2b620d755a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a64b8a3-fa7c-4150-a3d0-465646c10b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9bed90b-2569-431a-8c98-5a12b9e689cf",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f89632-ae3e-4860-a3b6-dfe21a0a80f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7503b9e4-fbfa-4cf4-ae00-de124812d654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c218eabd-b7d1-4fbd-969b-6bc234a469db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6df2e3c3-c3ed-4621-b8c8-c7636cac7f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1373d15-c6ee-47f7-b9d4-8e14b187cda8",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b14dcb-1fe4-4103-b623-ae7d59680d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cdc2dee-1fea-4351-929a-82d6479033ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d35b80c-2121-4137-b46f-9a957376955f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7394aad3-af18-4d8a-a8fc-17552a3c3297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e9e2eab-2f32-4c3e-842a-ee62d1131c1b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdddc7ee-0803-4a68-b2c1-deb55852edc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b6ead36-d862-43dc-8ce9-84762439feaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cebb9db2-b7fe-455b-a38a-528e85c17254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1876af1d-9290-4f1d-aefd-f41f25f5f74e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e520eb-90e4-47d4-980f-4c7fbcdcb79c",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea0b4e7-671d-4685-aee2-06725db1cd33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bac4447-f41a-4892-8541-8b0b907f80a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9448aa-1a72-4745-96f9-ee8915a55067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0395b1d5-324a-49bc-abbc-374e11c2b921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16cf830d-e03e-428c-aef4-823e1db489b0",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935e250e-1611-4284-aca3-1e5d528415af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec055f68-9087-470a-8897-affd2c7dae20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa821fe-bffb-4305-822a-ff42c4695cb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5e8d699-0424-40c4-8caf-01e33400440a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da398f0-bac0-488c-85ad-786adcb60bfe",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf681c2-deed-4f85-ab32-21c7367f38a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41841d7e-cebb-4148-b765-2c9edc4055b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93dcef52-0ff7-42f0-ad66-b7d737980889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1d9648b-4d2a-4a7a-ae55-9927f4d582b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a5346c-b5af-4e75-b2c5-5589d40cda81",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc740d0-8396-48c2-b8c2-d48f89415c2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a39d24ed-c373-45ea-9ca8-ef222e3e208e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d112110d-af2d-4909-b0f0-a14fbe799005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c5a3d21-2b6f-4411-95f4-429b3dcb0505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be89c32-879b-42f3-8ead-0c0a50de3b3f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35222c1-978b-46ea-be78-6cc3a9e94897",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d59a372-3bc3-4940-8b5b-cfa2a21d1e13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef1a68ae-4297-432b-8464-b27cd2afc1ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89a8e7d8-c15a-49a4-9422-1333d8925d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a064bd-24f0-4c33-85ee-99758afa3ab7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af4da46-bacf-497f-9612-67ff7e4c0d0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3907f11-29a3-47aa-9110-a8b4f2a3dfa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "798567bd-96a2-4af7-bf4f-43a5dd2bd731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "864ff8fb-1ef7-4b42-83e2-5ba11daf315b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7506fa6-f914-4fe8-9037-43ce4b6318e2",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348833de-b831-48d7-bfd6-6496786587fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f55ba08-c395-432d-9024-ff9c8048db11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "173a6dbc-1c36-40c7-9bc9-23d7b9cdb5e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d198367-2bff-4497-b758-f4f359f0c05d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b98094b-c33f-43b6-896c-c9447c586a11",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc7c7f93-44ba-4204-a0eb-17ca1635af66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c6cf02-9e28-4c2b-bbf6-678b6cd60b27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "338d0f6f-1e61-47a5-885e-33935566da88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6de429c-8c6b-4634-9a21-b37324389e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824bcd20-acf8-4336-a55c-d5fbbcadb931",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e411b13-45e6-415f-8623-e0c176ee089a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56105178-e441-48b7-ac7b-b00c594f7c5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51593bcd-868f-428d-bf58-20680c521724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0100a4c1-15ca-4863-8493-e672f6030379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636fdd58-609f-4cc0-a16e-0c7c05d78b77",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9617df9e-58c3-427e-bb12-3a80f4153db7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e3ef9f4-9546-4a84-8be9-f705dfa77114"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8503ed-0f7f-4dcd-8b99-e861654432ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c7ab9b-0727-4293-940f-8a9e762ab49c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c39b6f5-acc8-492a-bd2d-cc6d2ed74b3c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f848b3f0-1ae2-4721-8e1d-ecca50399a9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74b0514c-05e5-485a-b34e-658b532a2c27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14343586-5c26-4b7d-8c59-2473319fb967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d223352c-e783-43e6-ab8a-2cb17e9a3035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b65b3a-3d8d-4b69-b4ab-73fdc59d08a7",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18eb84a6-dc62-4bb2-bf3a-3bccaf83fbe6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33f7598f-a64f-4fdb-87a4-76266daed95a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "383d175e-e94a-4f37-bf2a-1de692ba3775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a4090c-4737-4e2e-94c7-3777af6df479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c930a313-3259-4de4-b072-4743b9e37de9",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc7ba17-8073-465f-aaae-b648be6db393",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9acc4be-a51b-457f-92ae-82a6e0d8902a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1411f7e-6e33-4254-b772-e87b94a4e2ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8e8675b-08ef-4dca-a3e4-82fba87f318e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1214e87e-ffb9-4aea-b554-2d8384b69660",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "044f6bc0-9b2e-431c-a928-601008f28c36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c9c05cd-7dbd-4b2f-8942-16a8b39fb975"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de05072-a376-4a4e-b67f-3f71548e3d84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09262113-9d6c-4434-aef8-9d9d3a0229e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328e2054-6d69-43bf-a9e9-65cfa757a62c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4530d2-9eb9-4ca5-b9a1-c252785c0625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b0d9b75-4dc1-4172-85c4-be5ec23bd068"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b93a04-69de-4165-b32a-d385e8d683fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e164b23e-a726-4be4-ae77-61233063e906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cdeec23-62cd-4b92-afaa-b2b67de7464f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3cb776-4e36-48d3-96ea-da3511438a64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8bef9f9-0b48-4698-81e3-354a204482d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58cb470b-8eb0-420b-9c4b-a30ac190036a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b0aaf1d-6017-4e3c-b15d-7a6e9624375f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029c31a1-470f-444d-b370-f02705e4a689",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e58e34-19a1-4aca-b4a5-be9dc1683d41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "968d1c3c-8a7c-4dba-832c-d2ae1ac72949"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7f689a-fd93-47a4-90f5-801b49207918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f581ca0-57b2-4c7c-9521-6d96ffda6554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "130d0f36-b0d9-4ab8-ba41-9a54acd5a4b8",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a43d0e-ed4a-4353-9455-4344d4c39c2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ad51fd1-0670-45da-a131-2e8df786da5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "653de610-6a40-4c9f-b9a9-65a2062fddfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fc7baf9-d855-414e-9337-96266b9206ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb73c0c-f80e-42ea-aa11-54d17de4d8b2",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc1515d-5d41-4af0-b075-ce21e706788c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdfc1347-2e8c-4414-b08e-746a6bdfe872"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d380f2-8f39-414a-b5d9-bf966b86a1dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1f6d8eb-7f95-49fb-b8cf-6008b68aece2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd9cb55-32e5-4c5a-93a1-77550b858464",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d6185a-6f16-408c-bb09-aba0280d2d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c6efab8-03c7-4125-af5b-0be947186ed7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e4bd17-f0f3-4ce8-89fb-75ef7f44171c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d458c9-4433-4bf6-9a56-a220ddbc56eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625ccb18-f28c-4760-b4e5-089998d5143d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37991ca1-ccf3-40b2-b2fa-78fcc67b76d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dff52fe-e553-4bb3-8ecd-27421ccf1f02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d6c0ec-c884-4d9c-acd2-563134f32c27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b45f9d1-2304-46ac-a80c-1207801aa88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7042b97a-2337-4d53-863c-7c986cd6af85",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed1b38a-fcf5-4f15-9297-f6a102a3a205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8616c442-cf23-4b71-8373-ceafe479ccd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6de5de-149b-4b07-99c3-29e42c125d38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8990734-cafb-4f2c-8a26-8f25d6f2e4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4672d8df-d963-4527-9f4d-79a09a0ad35a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a0bfc0d-9e5c-4823-a922-75bf0cb10659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40f80033-d480-449e-a085-408a0abdcd2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e9d8e2-3a50-4cf5-bfd9-484958bcd603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d57bb48-c977-4dd5-b816-2e5e5b164a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f24d2e0-4906-4212-b0b7-d0902ae3745a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b321fccb-b22c-454f-a5d7-906f2d648778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47d891d7-5210-45b1-8a1b-9b66eb02ef8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa66765c-4066-4597-a4e8-8f1ee2a326a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d291254-d728-4024-b8ea-352689aa9e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e34d3bd-904c-4559-8336-1142e8231ccd",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4c2551-ba5b-4cee-8235-19497a7dc940",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3567cc78-5757-43d6-bac2-b85d2f3ce3a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d17989-e9fe-4454-8ae3-a0b5ebbae9e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24b19d6f-c6c8-489f-a04d-065213a75735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382a1666-ce70-42cd-aab1-6cf6e6153bb2",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80302278-9fc1-4ff4-b65b-cbf5af0aa2e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ffedd63-621a-4e7c-b5f0-5c1f0c093812"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6314d6-b677-47fd-ba87-547e050e6582",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d98e70e-378d-44c7-b605-79b86db2f599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24d5698-f879-402f-81c3-b839f2aa1243",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89fa8c39-146c-4d63-ab1f-0ff9bf8398c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce11fc8f-01c4-496e-89e2-eab5f54be05b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44610d8-fab9-438c-a08e-c24b1316b0c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c89290-deac-43d6-bb32-2eb4f4c1ce09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab310672-21dc-4b09-8efc-7c36487beaec",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d603361-2a62-46a5-9ddd-b706360640e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "957c8a8f-5c45-4460-83c8-86b43375b56e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c54218a-572b-4692-9903-1950e20afe0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c762188-af17-4f7a-ae7d-ffac5bcee0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e64c580-c41e-4eb6-8262-c1755878fd26",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d78adc7-b4fe-4bff-9970-a959e515ae26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13f0e493-8958-4502-81bf-1cc79da18ce1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee90f2c-090e-4879-b677-0cbdf1d4c66e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa498321-e9da-4e3a-9ae8-fac27164cec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c4b97e-4add-4d6a-b66e-7a1b6f97e14d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376011f2-bacd-4d44-9abe-5c2686636c8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be59e795-604f-41ab-8dac-d87ba52fcfab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e0d61e-f4d6-4b39-b126-969ee8f2aa8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d6fa1d5-d37f-425b-b2eb-480c2e0b81a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8cc01b-332a-4f55-b91f-3b6c37650dde",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803e4d13-db03-4c68-bada-5bcb4ad68175",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "300da3a8-1599-4da4-886e-432929f53fb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b79fed5-2dcc-4fdc-98af-4ed3eb5cd1de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ec76a28-2392-44c3-ad08-303e47600fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8fd20a-a202-4dd2-80db-11f1e80cef96",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c5e3d93-85c6-44cb-89f0-623fd1ab023b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f1f4d4f-149a-41b8-8501-9b7c90416b39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b43941-4e94-4aff-b6b2-f3a0f843f3a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cf14677-6b3c-42a9-8b04-42c18bbd701b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "562c1a8e-91c0-4e0b-95b5-c47e2d09f044",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ff4a32-9fbf-4e08-883f-e56b94809801",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f9cc5f7-c703-40b2-821e-f5608b8b13ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "707a99e7-e74a-424b-86a8-119d0a5f07b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f778c6e-281f-4fa7-ace9-016c7fb537ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989c1dae-606f-45d3-b8a8-a6d650c06853",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f07ee4-703a-4a92-ba8a-5d01158b1115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569d377e-d250-4c5f-9754-57e68c3211d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32017961-2c9e-4b76-8ca8-0a47f7034603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "795ad876-52a7-4ab3-b300-6991339701f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65ab90b-4137-4a57-a0e3-b662d288c8c5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa598b9a-318b-4e11-a1d7-95ca9f01ecc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1b7b2f5-ad33-41a9-a257-bde3c9447202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a7d049-b2b8-4b19-bee5-854cf89a518e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31905c14-0e4a-4b60-b512-45ad3d046a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec15edd-252a-4531-9f77-f95ffca5ba1b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b79dd645-1ef1-4424-96dd-9781f88f33cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd041c1a-266d-4474-be24-7fa8cac508e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6fe4e2-ee77-4843-abb3-e1415d9d1914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67e3248f-be26-4db4-afd2-b182dc0c22c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72635a68-ef07-4ea1-8d44-717b1a5d4e4b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a878c5-3894-4d99-b26a-06e0ad344666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0db7e736-92d2-4fed-a1b9-116fbc40890b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efe2159-f0d7-4dee-a795-925dc5387c60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65acae57-1795-4c13-b61a-1539f0887bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9ae84a-cfca-4450-9711-16db9b88f231",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f55cdf-e58c-4f56-9121-ca43e063b64f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40613bc7-eb6e-427c-b13e-c0cf85bd73e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6c0c68-35c0-4f6f-ab59-b59ee83332f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76cec647-e8c2-4d39-92ac-d2c1341b1c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf90fda-95be-40e8-aa15-57c60a53f413",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718aad96-9560-4810-a230-44b07ec3a11c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0aa85c3-ee09-4dd9-b129-3030ade3c4d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b01bd071-a8f1-4409-80c3-1bcc3f8734db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67b41874-db76-4a6a-a677-64e1c1c37cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4c32f8-03d3-4d42-a449-b00704808f76",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "270ff4d2-b840-4aa3-8537-49540c5a104f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4f67789-ab06-4bf5-a6ed-35a8dad3793b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "605a4c82-0e49-4b5e-9a65-4341add55cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ddccff-3769-4ce8-83ff-974169268ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c2021b-72af-44b6-a620-ed4d7aad29bd",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320c0628-9cd7-4534-86a0-4a8fb385f97e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d44b7a10-d032-44bc-b8e0-583344edc320"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "921d8d42-f8ba-465d-b185-785859217648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "832ac05c-1993-4f3c-b9ed-43b34195ae40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30074b7f-611b-42a4-b0b9-4fc00dd7a015",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8659e5dc-c221-4140-bc31-29e7e0085a4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd04d2b-383e-4cf6-a848-f363adc6a8dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da4b55a-7719-4ead-b34d-9df7b9974ee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29941441-d556-4571-a216-236f00a7f15c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c44e4a-e183-47b8-974d-e3e610b23cfe",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f60e436-f041-4ddd-a09d-9f8c3dab087d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05e3e830-b71c-42bd-b5c1-7f8430544fca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d70375-5c6a-4abc-acd7-3fc68245d679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "373f3377-32a9-4dc2-b232-7860949510bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9edf928-7cea-4ad9-95f7-9871db410080",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86df1b3a-b5da-4356-aa4f-8eff4ec20d69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ea1c79c-1091-4c51-96c3-e6b826221170"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b76d9f-2ea0-47ed-9c46-91b8ffae6ca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86968c7a-bfa3-4d7a-a9af-88e8d1dba7a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98249dd-d457-49b5-a2ff-68738650db51",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d178c1-bfe0-4166-a702-33b9adc987fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4209caf1-3b13-4686-9094-8c604b46f890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "094563ab-b338-4fae-bfb5-73482530eecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c54d0789-905e-4819-aa8e-ee8072fbec77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bbca712-acb1-4c9e-bff2-1765a54ad00e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f2d594-cd92-4fd6-87f2-87606e8e25a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fbce990-37a1-4e44-a674-f460751ac17b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bdb550b-a6af-4e07-a6e7-22f958b505df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8270bf85-39b3-4e1d-be18-bf4a45c3e623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bef0282-3579-4bf0-a817-2dd648862f4e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a9481e1-62e7-4423-bf76-ba07f824cfa7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b791d62-a56a-4b99-98bb-d9ec9066481b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "709d37b8-5d5f-41d2-887f-ebf0018a4499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc8f7d33-5ad2-424a-928d-9f8fa9680cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de847d47-dcc6-4c27-ac3a-61946476e718",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490a2a10-bd30-4eca-befa-9d01f360e986",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dc7234b-c291-4586-98e0-2873d697ad1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01835b83-85ac-408f-acfe-2aa89c8e74af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e57f285a-68e6-4f91-9f51-d7caaf513455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194250a3-6972-4f00-bb2f-8a82afeca2e4",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f249c9-9c79-47ad-82e9-4bc804dd333e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "705f8017-329d-474d-8c50-1dc468e0fce7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef456e9-bef1-46c7-b27c-653fbf58985c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07ca9318-63df-487b-9374-04ed0a12c3cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d35c5d-f582-4fd1-bcff-5d27b1472e1a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6181eea7-b0c2-43f7-83ce-b15959d6d31f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea9cabd6-51b3-4fa3-a08b-292a004d2c21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e50fb99-0c15-43cc-a446-f6537189945d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "595a7ea3-dd7f-43af-bc8c-70f47707f643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9f9465-0d42-48b9-a1bb-b0ccdc4305ea",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ec4b1c-6e5a-408c-aa2a-00b487bdda74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2ba467b-cc86-4760-a1a6-719195a02d4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e63f2e-bc52-4aa3-a23f-04e9f62e7e43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80a9b129-2458-4d2f-83e2-769f12763a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "105aa6fa-086d-4e01-87f5-5eb1702f824a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34db6522-8439-4549-96d0-c6da1828fa7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c009348-efb6-4462-8dec-799ffe04c12d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29aff6a-2ffa-4f37-9df7-438cd1dc9f32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "144e66fa-87c0-4427-8dcc-1437ff288cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bbaf79d-2920-4067-8907-d5c0bb6a10e4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f9adef2-aa1f-4d12-82e4-d911a9675d22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29bf3f06-82d7-40b0-8290-cb8cf9f20353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b29890fb-d490-47a9-b76e-94d2f6e14c57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b68d3791-2d52-4329-80ec-3cafd295930e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1831cbad-8118-428c-90d0-2070baeb9f3a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4164e973-fdbb-4545-ac6a-f8455ff034cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9217161f-182f-4775-87e4-58964143e38b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf0e720-cad2-49ae-bf14-0a130f5e0038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c330f07c-5c30-4d4e-9cc4-6a6257107250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "395a6dc0-ea2c-47ae-87cd-c89b0850a67b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e9bf90-f62e-4033-99df-0188f88c6e7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25f7bc5d-e592-46eb-bde3-fb1f49b715c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e57b1852-35ff-40ae-b993-6be8a47a2b2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fcf54fe-54aa-4844-9e0f-2f9535dc5b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93fe0553-47e2-4033-ab08-abe6191d4a63",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a3d4a8-5ff5-48e5-87a7-f640525cb896",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f85022e-c53f-4ece-b528-8515550f5ef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5979d14-4632-4c29-8931-ec15bfdc9b51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "558da176-0c8a-46a9-a056-a8bc495debf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da32f0e9-616d-45fa-93a0-111643b6d02a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edbeed6a-5c95-46cd-9931-fbaa87d354e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71c5c81e-8398-41c4-b0f6-b8896a0369c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a004fbf-8103-4dfb-87d9-433e5f0f1fe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87fa31f4-eb7c-4f3a-9b6c-5ffc36b5ed48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c59749ef-1037-4cee-bd93-643c56e9cf53",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b291e775-8c1e-43a3-a007-eb9461bb720c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "596bd6fa-e43a-426c-ac0e-d4ba1d720318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31e8d18-5f89-4777-a30c-926c227ca8e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4684321f-fd2b-4dbd-88fe-189207701b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed77fd0-1bb5-4af0-b385-21f86cca57cd",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a02c3e9-3db5-4dec-ad05-2fd8e576cad0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3af76b59-452a-43d9-b4f4-8be98b307c04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5445ac85-e9ca-46c3-a8d5-77f0eddb6cd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "075e6dce-ac56-4158-97a2-81937ad9884a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22a17907-9662-4680-82c9-618b8acc3fd2",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d46fb31-1d50-4f21-98d7-fdda86018e02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae6ff8f8-de68-4dbd-8cbc-7f2e9220638c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df0464c8-d284-423c-b085-7cfc385a47f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9d530d5-82b6-4e24-9742-dac997e71af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1827b456-74fa-401d-8086-36dfef006a1c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de5061e6-3cc7-4b9e-8238-ff1180dbdbcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25ddc093-58f6-4758-a6ab-c891fca258f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4474beb8-2b3c-45c3-a968-ef1481d0d2c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12654135-d174-4742-994f-74c56177d223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b73399-8cee-46f1-b1ed-e23dd36294d1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87e3247-06f2-4a05-aea7-036e68c2143f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ed7ae45-f57a-455d-961b-b24ff2fb9fcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e473f913-81dd-4271-8cee-f9f11dfc92c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71c3c9e6-a804-45dd-aae5-655114bcb062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a7b673-ab6a-4977-9de8-0b59b2673119",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8270f294-9ae9-463e-aa87-c75877d28d97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4b2ff76-9747-4fc7-9043-4cee6d6be3d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b87817-6bf9-483a-ac64-b7d9fc504475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06987c11-6094-48e9-80d6-688b22ee34ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2299029-18b8-4a09-a6ee-ad09164b6b2e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892b872c-4798-4605-9aec-effd73fcfea1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7020eb05-1c20-4e2b-8840-2b9fc4227c6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "359bc8a4-b45c-4489-98a8-4e71e046a727",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b322c44-9b1e-4346-a44d-8145b0e7e82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dea8296-4415-47cf-a484-86c0f20f17bf",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f5457cc-ee56-41fd-8180-29dac99dee63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6f6138c-68b8-4340-bedb-293d2598985f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d386bf7b-fc89-4221-8dc6-981992937d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de91793a-8915-4332-bfda-b5dfd85651f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c27fbb-e5e5-463b-9147-c04d718dda8f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "881d0dab-33f9-450f-aba5-ea456eabda2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e58ffc80-f434-47fd-a4c7-c95d65391b95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "209c2194-794d-4299-931c-1e29769deeec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e11ee4-dd0a-491e-9614-ee2194eedf21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9a4f1e-8f02-4f22-acce-42559b9ff4ed",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d0af80-b192-4458-9243-5c082d7da06c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00037762-dfa3-48e6-9748-d282429f50e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "665b58b1-26c2-4c81-b8f8-87826f0cbbac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a08f686-46c7-46f8-8b09-f40f446d38cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57967052-7745-4792-978b-540db5b65759",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "034fbc4c-1fb2-416f-86c1-8c7b544d1883",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c28a04b6-b64f-4120-b96f-36d46db128f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "393dc0ad-9e07-4fb4-82d3-b8770f26497f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4231b24-9edf-4775-a61c-087f45559f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3877da50-9829-4205-9606-90e38eb498bd",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6726d914-ae1d-4483-bb43-bcf010d9ce2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9eed0e7-bc06-4dd3-995f-7101a6309e20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95746047-459e-46d0-a5ca-edffff12f9f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aab8e176-0134-416d-9799-7a478d221151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a742c6e8-2142-481f-b248-f76416ad9d56",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb92a16-fe35-442c-a737-432f78e46160",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bd0593d-f4ce-444d-899d-d0b0cddfba35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6bb794-f468-44c7-893b-2ef9161653f6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdd20478-b75e-4d2f-a105-182557bb8b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0204b61d-2290-4ac0-a44f-951e945f438b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166b6730-7e11-4f48-954e-b7b7a2b6033c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c7e9c06-2c3d-4f0c-8e6e-117114b18999"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2357d8-4ff1-43f4-9c8e-c2046e2dbe42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c21c9f-bd18-4cc9-9a95-ffbb4c5a1c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e31473-5499-4315-a324-1fd3bbf45fec",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549183ba-4bcd-4a00-8088-6a97c4b8ec38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0eb321f3-d547-4498-a926-89cfb2f53d39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab6ebefb-78fd-4eb5-b469-8f46d254ec60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "253f6aeb-cb9b-40a1-9216-74af52fc95a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516b0603-70aa-431e-8227-c6162aaeb194",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346e00ce-640f-4102-ad3e-e01337eb56b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66d6094b-5b61-4aee-a45c-6be58285762f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6ce7f6-dfe4-4222-9996-f527d11a3ebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e37dc2a-2c71-4d35-8c3b-e87ac350aa53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01a6b83-0300-47b2-a228-63a0febf8cb9",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c68addb-03ad-4a00-8ba4-05888fea970a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d10b3c76-ffef-4f3b-a541-ed75c61283c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f98ea80-c2d0-49fd-a604-267c83be2bfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99c35425-7b73-4d4a-be0f-f9ee9ffa8de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c4a5e5-1a15-41f2-9eb5-227b5af1ae4c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f494f602-70d5-4435-9fa5-d8ea5990c18b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cb87894-3560-495e-94d2-6bc58a553229"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e83b3f0-29b2-43bd-afbc-9b04d2b3eb8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f965ddfe-4c05-4335-aedc-951ae2b64760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38de35a4-77af-4df6-bded-6d8dde261296",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e48f5e3-0f59-4d4d-aa5c-603eded5cc0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e13a530d-25e8-4cda-bf76-b97bd38aa913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c43bafd6-4afe-45f0-9c39-ee311e1c0fa9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e5f5d28-9f85-4147-977d-ba5990e573e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11deccc-cf71-42b1-a20c-d5edd3296aa1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccaacdc8-c563-45d1-abde-582776ea594a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bed6326e-e4a1-4f2f-b9cf-02870f61195e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ebba20-bfb4-4aeb-b0a7-3a13f5925fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbc0cc7e-b421-4bb7-88f7-91d805566317"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88c39b1b-15a7-45b6-b28c-429b2feae530",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92202d01-e21a-47f9-b179-3cf472694c2a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2150c1b5-75d9-4806-bb15-0d086b8cba9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d984261a-e592-4dde-99b9-45dfc2fc2b2b"
                    }
                  }
                ]
              },
              {
                "id": "e6d649f2-b35f-45fb-bdc0-62a0f3a6c537",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4d36436d-72cc-4f38-9153-00571988f3bc",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71913e19-1511-472f-96b1-f1742aa773f5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "428a2f31-766f-490b-aa19-bbe857e95694"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "621ce039-3db0-4d52-800e-68c0f75c05d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5d64336-c838-4846-9b65-7e2b503e2ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69770eab-48f2-4c6b-b12c-b933129956d0",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3614e0-de90-4ecb-bb4d-dc40ba87d79b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "df24a45c-8f12-4aa5-a5fb-de760986fb0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a0ff11-9ada-4fb5-83a9-e948ff652619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb905851-d46a-4038-b022-b6a052dc26f6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30b72cbe-54ac-47ae-8a40-35cb8e729d73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11b13880-b49b-4c4e-a343-8dd08a142e5e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e85a59e-a347-42fa-9ada-3ff2ca761e9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78dc93b7-c636-4a12-83d0-834e2d3dc778"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "8c2400cf-1df5-482e-a7d7-0cfeb5b28a0b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "651d92b7-0fb2-4ca6-94b8-d1e6a358c3c9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e40b993c-c988-4309-9d74-90c992206327",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb2f878e-bac6-45cc-80d1-35b8981bf7eb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9849c51f-b430-4457-a1fe-ef533119dc58",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba74a85c-c8a3-4c79-964b-6a9ee429f390"
                    }
                  }
                ]
              },
              {
                "id": "86bc057f-f8ab-4521-86c6-2ccb3c882fbc",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a43214f-33a2-4360-b6f9-ea8479225dd1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4abdd66a-baef-44fb-a4e5-e27f5a560207"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "72283ded-3845-4936-854d-12bbdb472970",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f65cab78-a37c-4d8c-a1cf-c42003fc7c1d"
                    }
                  }
                ]
              },
              {
                "id": "d75731c1-d730-4f7b-8a29-7b764fc71c2a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c371110b-150c-4795-87cc-742a312f777c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "907c5454-cc5e-445e-801a-2890c8145924"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05e1dd0a-0598-4c76-b39b-8b92edeebeb7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e0e95b8-9845-4a32-97e0-4b849821a884"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b3d27ed0-c6ca-4424-997c-f4ee51862991",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "39fcbd80-c87f-4080-aa6b-cdea217bc024"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce2f9122-6d44-466e-8246-4c08df237270",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "68c9f88c-ca47-4ab8-85a9-6f66b5581385"
            }
          }
        ]
      },
      {
        "id": "7d80b37a-1399-45b8-8369-a72b74e2f3cf",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "866245d1-f0db-4052-81e3-d825789d7556",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9f573ea0-884f-46cb-8850-a5f47d4241a6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0e98425c-5054-4516-a98e-066409e4172f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36dde07e-c86e-4688-aa9f-5563de8bab0e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b03eb812-51ff-4c9a-bbaa-7931d6767d6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8d99e9-173f-453b-ac12-08c57f5683ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd5292e8-c9bf-47b9-b852-18a3ae5bc36b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa1b6a6-7ead-4617-977a-3fa0ee70e4cd",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e16031-413e-46b8-801c-ddf746cc5a00",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bec13e6d-8fb7-4cc4-9f07-c2cad20ca138"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32650e94-cdb8-4da0-8ea8-903b6bfaaf47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22d0417d-fc3d-4744-bd2c-ac3bd2a859be"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "664846bf-3b01-480c-96ce-a35704173a73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77128e4d-60b2-48e5-97f1-5a8e08989d45"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a40bbb1-08fe-426f-be77-a6e30d2a76b5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c9b3df5-d65f-44b2-bc0d-5737acabd172"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67e64a40-2ddd-4b10-a79b-32b3d63a7ccc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e1b3ff04-86b4-45bc-90b6-bd2acc098382"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa791217-360d-414a-8a92-0ee4e42a0031",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9f61b29f-17b4-4cf3-9a2d-2f40c76cfeff"
            }
          }
        ]
      },
      {
        "id": "2a412b17-60cd-4ff6-ba6d-a62807a348e2",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c29abb9e-c5d1-4997-a356-f94ddc8cba3b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "649d61a1-d996-44e7-955c-4c8a4f00d66b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "979329af-d41a-400e-88e0-a756c278a0f9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2072918-8a65-4ed2-aee8-abb6ba75ab8e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1df7c294-b17b-4acd-81c1-916ec6706db5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d18224f-a096-470f-8f25-33718265c46f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "407cb068-8051-478c-ad77-0376ce807fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7422997-6aa4-4c95-9955-0f060d0e8a7b",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e27123b-9704-4497-b275-5d04b9e9bbea",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a3c1d5a8-be57-45e5-afe2-9b0503eb9a4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c418fb5-0931-42c6-b00a-550ad83e8a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77c3b2bf-a529-43f0-8947-e677d1407fa7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "732efa23-bbed-46f3-8e45-745f1b0690ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97db2597-aa00-4c59-8495-21c0dd10651d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a92fd5cb-7186-4d85-9f8d-ba5523bdc558",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "252f9d15-7cb0-495e-a05f-66067ec21679"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "47428ba9-bfba-4d04-8baa-5b35d8dca701",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a35dc8e9-5e65-4e8b-845b-080bea9198d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "28bd40fe-f45a-471c-82f4-ff7bb689f9c6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "563ad86d-bc8c-44e4-a696-821fae59fbc7"
            }
          }
        ]
      },
      {
        "id": "30b3538a-e005-4c81-9cae-7c7bd91862b3",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6fea62d1-da48-41a1-b585-4a4d1453f277",
            "name": "Negative Testing",
            "item": [
              {
                "id": "88dac81c-bfaf-4cfc-aef3-9ed6523a68e5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f664811a-5aaf-4826-8136-907e7eae62fd",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9f7644-c248-4c63-a4fd-713f373fcf5e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1e1284a9-f175-440d-8496-7d5201f1028c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa1ac97-df56-4ae9-ac53-0af904a42e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f820407-2eb9-445d-a51c-98de07bebd33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983016a6-60a5-4349-9095-bf49d8bdc292",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac3d6df2-f72a-4b3a-be6b-39d06c576948",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "43d4fffa-3c82-4fe2-b452-816862c0375d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13702ad7-8b18-44ee-9389-e24c20350a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c035440-8ee0-4f35-a7ca-8914b4c7292a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5c0a8dbf-10de-4376-9388-e3af2755362b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d88b582-a364-4d3d-958d-bd99f371e155"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0fb0e21a-c933-426b-915e-1eda1136c95e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e86452e-9dc6-45bd-b758-2232ca833b38"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c74ba2f-bbf2-4cdf-b9fd-fb56d3fc198d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "24dfa093-bd97-4d72-884e-4d1edb668a70"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e242f140-d7e8-4b95-9ee9-5b61c61e030b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4a690c5c-1932-4d5f-9a71-5f2b868daf22"
            }
          }
        ]
      },
      {
        "id": "522189ba-7f22-4d43-b79f-7c26e774e263",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "611f9d99-a167-44f4-ab5c-cc2dc02c63c3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb424821-3088-4464-a816-15b5979f535f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "dd92a59b-c1b9-4fa0-af24-d64c988b84d1",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cfce7c27-8a27-46e9-a235-0dc6114c6a9a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "da6f7273-4279-4e82-a5a8-2f9beece5100",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 243.78076923076907,
      "responseMin": 14,
      "responseMax": 3234,
      "responseSd": 460.1779192035244,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1665795484713,
      "completed": 1665795558990
    },
    "executions": [
      {
        "id": "9f39cd6f-e80d-4195-a5c9-af0f8a1b392a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "93e14f93-6573-4c94-9ccb-f42463e2968a",
          "httpRequestId": "92377e0c-9469-42a8-b7e3-aaae11b2e4f1"
        },
        "item": {
          "id": "9f39cd6f-e80d-4195-a5c9-af0f8a1b392a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a785f09d-c534-49cb-8a5c-119880d32142",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 0
        }
      },
      {
        "id": "c864143c-79a2-4f53-9323-61207380abb0",
        "cursor": {
          "ref": "bb7fcd8a-3431-470e-96ca-8b4772544724",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b7793b51-4429-4cb7-ad16-d94d80d1c658"
        },
        "item": {
          "id": "c864143c-79a2-4f53-9323-61207380abb0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "fbd77103-5e50-48f6-9608-405d2fcd65f0",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "ac63add0-0338-473d-adb2-733db304a7e8",
        "cursor": {
          "ref": "ff641617-56d6-48db-8ad0-54b0c4dfca3e",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0e940d05-1d02-4422-82b1-c7edd86d4839"
        },
        "item": {
          "id": "ac63add0-0338-473d-adb2-733db304a7e8",
          "name": "did_json"
        },
        "response": {
          "id": "e5fab8d8-5333-4cda-8e6c-49e85b17faf6",
          "status": "OK",
          "code": 200,
          "responseTime": 3234,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "868bec59-282c-4e30-9d7d-17304fd6bf4d",
        "cursor": {
          "ref": "43b3eae7-89f0-4356-b2c0-eb7239050ef6",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4dfbdd9a-ea5e-4150-abed-f56e774fce3b"
        },
        "item": {
          "id": "868bec59-282c-4e30-9d7d-17304fd6bf4d",
          "name": "did:invalid"
        },
        "response": {
          "id": "3bf7d60b-bbfd-4d18-930c-8ee88bf1ee81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "868bec59-282c-4e30-9d7d-17304fd6bf4d",
        "cursor": {
          "ref": "43b3eae7-89f0-4356-b2c0-eb7239050ef6",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4dfbdd9a-ea5e-4150-abed-f56e774fce3b"
        },
        "item": {
          "id": "868bec59-282c-4e30-9d7d-17304fd6bf4d",
          "name": "did:invalid"
        },
        "response": {
          "id": "3bf7d60b-bbfd-4d18-930c-8ee88bf1ee81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09c44ff-211b-4940-b7a5-120acf3f2ec1",
        "cursor": {
          "ref": "9fade292-2200-406a-afbc-12b4e4a0594c",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fba425cc-ee8b-4f7a-96ae-94ca9c856881"
        },
        "item": {
          "id": "a09c44ff-211b-4940-b7a5-120acf3f2ec1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e478b612-1a32-4637-b853-cc25d83f8ccb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 411,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda1fc9e-01df-4941-85e1-17f2d74c6f0d",
        "cursor": {
          "ref": "dcac1694-223a-48b2-bd0a-7c0f359a3652",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c62a741a-a588-41bc-b325-2defb1cd526d"
        },
        "item": {
          "id": "eda1fc9e-01df-4941-85e1-17f2d74c6f0d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c6ff48f9-1d83-464b-b7a5-1bee05b8af8d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 51,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50025d75-dd20-409a-a959-cd776a1b7d03",
        "cursor": {
          "ref": "251ce855-e420-40e0-bd22-1939975c1338",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cc55bdfc-5fdb-4d09-9ac9-c71bb4f96396"
        },
        "item": {
          "id": "50025d75-dd20-409a-a959-cd776a1b7d03",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "06767ff0-1604-47f9-b581-db1e21124ff7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ab1e83-2637-4f92-b94b-0c960044a829",
        "cursor": {
          "ref": "b21fbf8d-1bd2-4a6e-8cc1-203aeb0e3aa3",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "71700449-8dbc-4244-a323-0d4fb774fb9c"
        },
        "item": {
          "id": "a5ab1e83-2637-4f92-b94b-0c960044a829",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6ca8a5af-97bc-49a0-b665-c019bca039a5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 53,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ab1e83-2637-4f92-b94b-0c960044a829",
        "cursor": {
          "ref": "b21fbf8d-1bd2-4a6e-8cc1-203aeb0e3aa3",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "71700449-8dbc-4244-a323-0d4fb774fb9c"
        },
        "item": {
          "id": "a5ab1e83-2637-4f92-b94b-0c960044a829",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6ca8a5af-97bc-49a0-b665-c019bca039a5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 53,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d4e37a-63a4-4cdd-a8d7-67629771872a",
        "cursor": {
          "ref": "a332e07a-55e0-4a96-ad85-daa9e4e27c95",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "198f7efa-10e1-4263-866b-614df696429f"
        },
        "item": {
          "id": "a2d4e37a-63a4-4cdd-a8d7-67629771872a",
          "name": "identifiers"
        },
        "response": {
          "id": "f063dc6e-5216-4b29-a81e-4bb1912bffbf",
          "status": "OK",
          "code": 200,
          "responseTime": 286,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c788ac44-4b2e-4fa4-bef8-7a2c2f70e873",
        "cursor": {
          "ref": "43603f04-9da3-47f6-838f-85ab3be78287",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e26bed69-d3b7-4746-bc04-c306ba5d5544"
        },
        "item": {
          "id": "c788ac44-4b2e-4fa4-bef8-7a2c2f70e873",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2f0778c5-b864-4860-b24e-53125b0a582d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c788ac44-4b2e-4fa4-bef8-7a2c2f70e873",
        "cursor": {
          "ref": "43603f04-9da3-47f6-838f-85ab3be78287",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e26bed69-d3b7-4746-bc04-c306ba5d5544"
        },
        "item": {
          "id": "c788ac44-4b2e-4fa4-bef8-7a2c2f70e873",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2f0778c5-b864-4860-b24e-53125b0a582d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bdf6f09-0881-459e-925e-53fd105536c3",
        "cursor": {
          "ref": "dbf8dca6-bab5-4aae-987d-9610f246ab2c",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1b80abb8-0cce-4d0a-8980-ad9be0f77f6f"
        },
        "item": {
          "id": "2bdf6f09-0881-459e-925e-53fd105536c3",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c08db8dd-afd0-40c7-bfd9-0b9dacf9fdcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10baf57a-b638-4b18-8db8-093caa7c679a",
        "cursor": {
          "ref": "db72ef7f-8031-4837-af0d-a91dfad44e86",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ee6388d0-7e28-42f8-a65b-a8f8902b7598"
        },
        "item": {
          "id": "10baf57a-b638-4b18-8db8-093caa7c679a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "64019bfc-e2cc-4049-8e78-22bb6fab4b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040bfb29-0c71-4062-9fc1-a2091b78b1d6",
        "cursor": {
          "ref": "012d39fd-235d-4bcd-9040-e861d1bb9046",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e607121e-c7a0-42a2-97d4-7dbbc1280470"
        },
        "item": {
          "id": "040bfb29-0c71-4062-9fc1-a2091b78b1d6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a1428c98-74e7-488b-8b5c-cf0de54c420e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85057ba0-1f1d-49aa-a07a-28ce8643513c",
        "cursor": {
          "ref": "6f4eead8-6c75-4606-8a46-04731639da57",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1df5a573-9679-4bc9-9e67-2df818a0dde3"
        },
        "item": {
          "id": "85057ba0-1f1d-49aa-a07a-28ce8643513c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ec0c1b38-282f-4141-84ea-02fef437c743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c5f8484-a59e-4fa3-a70b-0a641e005a34",
        "cursor": {
          "ref": "cb984d65-e9a0-4ca4-8528-2a86074320b8",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "bec58b42-db53-4a51-9986-5ca7045118f5"
        },
        "item": {
          "id": "7c5f8484-a59e-4fa3-a70b-0a641e005a34",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0dc71502-0d90-4514-bcd8-97d0aa1e723c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69f57f6d-ea17-4855-9dcd-3a0de2c46b1f",
        "cursor": {
          "ref": "f50dc289-7ad6-4ff9-b319-6071fd2c8da1",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "63ef52a0-6764-426a-b437-7f30828b6f51"
        },
        "item": {
          "id": "69f57f6d-ea17-4855-9dcd-3a0de2c46b1f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "1f5d7460-75d8-400b-b57f-b67b62df0e9e",
          "status": "Created",
          "code": 201,
          "responseTime": 1049,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "4601bc75-e1ba-4ec8-aea0-44276e997fbe",
        "cursor": {
          "ref": "3f0762da-dce5-48de-867d-acc5c49df161",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3885ea58-e1a7-4e95-b720-7136503fdeec"
        },
        "item": {
          "id": "4601bc75-e1ba-4ec8-aea0-44276e997fbe",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a66eb6d4-0ae3-4286-87ab-23bf84b84edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be5bc06d-7909-435e-8bcc-6037b82cb799",
        "cursor": {
          "ref": "278592cb-48c4-4701-8c96-87d131e2ffa2",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5fa77230-88f6-4b78-a846-76cd4b32ff73"
        },
        "item": {
          "id": "be5bc06d-7909-435e-8bcc-6037b82cb799",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "bc146015-446b-4ecf-9d38-b7e61c30120d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc65afa-d9c3-4410-bb0e-6ff08bacbbc1",
        "cursor": {
          "ref": "f02c13d4-0378-49b8-9140-2fe998c88a41",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b2ab058f-6ff7-41ea-962d-83f6fe837674"
        },
        "item": {
          "id": "7bc65afa-d9c3-4410-bb0e-6ff08bacbbc1",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "09c7afd5-a412-4cb0-9adf-4dd9f04efb31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b38bf9-24d4-4be7-9776-b55dce81d9cc",
        "cursor": {
          "ref": "633a3127-9509-42c8-b4a9-013e9bfbf34a",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5ca458a7-c849-4b54-8584-4944fccfabc2"
        },
        "item": {
          "id": "25b38bf9-24d4-4be7-9776-b55dce81d9cc",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "7572e6aa-6a4f-4179-93fc-55c08e150df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d3f7b12-769a-46f3-83bd-18ed034ced57",
        "cursor": {
          "ref": "0410d0ca-4a78-47f7-a897-77a0db80a38d",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a481d459-2f1d-4127-b939-d890c1e35ede"
        },
        "item": {
          "id": "6d3f7b12-769a-46f3-83bd-18ed034ced57",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "deaf602f-e75a-4e9a-baa7-7d5fcc6e6209",
          "status": "Created",
          "code": 201,
          "responseTime": 1332,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "8019aebe-d902-4af1-8af6-8a33d13e58e9",
        "cursor": {
          "ref": "0abe0446-f3b0-4648-8590-1e878f9ed59f",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "032ac9a0-8512-4a68-8098-36d800eefa08"
        },
        "item": {
          "id": "8019aebe-d902-4af1-8af6-8a33d13e58e9",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "994f9d50-afe3-49d3-afca-c1a34cff3b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f10360-9a55-4f16-b35b-04b7c52f9b65",
        "cursor": {
          "ref": "7510c7cf-d007-4140-8988-30938a5c8b94",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b42b2f6d-6ebe-43c6-b22c-4f1866438e3f"
        },
        "item": {
          "id": "34f10360-9a55-4f16-b35b-04b7c52f9b65",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2922cdef-5105-4fba-b4ba-b62da804806e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3588a8d-8795-4794-960f-f75133e35bfd",
        "cursor": {
          "ref": "50af20c7-8283-4ce8-be75-1c01e375da7a",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5f5dfc7d-be52-499b-a488-48498c020299"
        },
        "item": {
          "id": "e3588a8d-8795-4794-960f-f75133e35bfd",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "fc27fb82-be78-4b0b-a660-7cd9bff90576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65dd20aa-02a2-4fc5-8604-872fca408b9d",
        "cursor": {
          "ref": "e6dc9e0e-4cbd-4d47-ac03-33dd2b6c2c92",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "875abee6-2818-4165-9b1c-5ea823151492"
        },
        "item": {
          "id": "65dd20aa-02a2-4fc5-8604-872fca408b9d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "0bda1736-292d-407b-87e2-71746bda2e52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6a4816-277f-4522-813b-4652e32e4805",
        "cursor": {
          "ref": "083007dd-11a8-4782-8813-b164b915b9c6",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "011e13af-d91c-433d-bdeb-2aceab7e6052"
        },
        "item": {
          "id": "7b6a4816-277f-4522-813b-4652e32e4805",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a4a255bb-17c4-41d9-aabe-f6489041f1c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6794271-7958-4c10-bef8-2646ce33d035",
        "cursor": {
          "ref": "3fb3787d-a54d-49af-9e28-1bd337d2f039",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d49804da-34a2-43dd-843a-fb7d15551e20"
        },
        "item": {
          "id": "c6794271-7958-4c10-bef8-2646ce33d035",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2c0e98a7-6fd5-4db9-b4a4-da5f121256e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 485,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd5ec115-935f-45d6-bb33-4b39b812c2d9",
        "cursor": {
          "ref": "a9642883-3b6e-462e-a177-958e1bb44e66",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "26724fe9-45df-4f47-b0a7-054921ce1c55"
        },
        "item": {
          "id": "dd5ec115-935f-45d6-bb33-4b39b812c2d9",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "17c1d957-d1f4-4dca-92cb-f01a71239d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd5f570-d07f-422e-a1ce-8c0926c10af4",
        "cursor": {
          "ref": "c23f048a-d161-44c9-aa98-0293e591e38d",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a7953246-9ecf-4f66-9489-424b017ddcad"
        },
        "item": {
          "id": "7fd5f570-d07f-422e-a1ce-8c0926c10af4",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "fe45c108-875f-44da-8059-3bdffcf6c0b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea2bc70-9bae-44e0-b450-ea0826a72474",
        "cursor": {
          "ref": "f2f477e4-5018-4b60-ad4a-0ebb710a1ecf",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a4b53bcc-2045-4cc8-859a-5373296e9ae4"
        },
        "item": {
          "id": "bea2bc70-9bae-44e0-b450-ea0826a72474",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "49f2ec53-3c9d-4051-b055-270abde82bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf6ae83-8eb2-4555-9543-af5a785805ef",
        "cursor": {
          "ref": "0117face-fec2-470b-adc3-32505977afa0",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0e09d5a2-a0da-4710-95bf-939ee29179de"
        },
        "item": {
          "id": "ccf6ae83-8eb2-4555-9543-af5a785805ef",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "eadbd6ba-0821-4643-ad43-4df19d9e8723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "042b76fb-f3f1-4963-83de-f149f11d3137",
        "cursor": {
          "ref": "3edb3e04-236d-4d7c-bd11-c8e29b10fe37",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "575bb51b-fc01-4968-84e9-4756f59b1a15"
        },
        "item": {
          "id": "042b76fb-f3f1-4963-83de-f149f11d3137",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f2235fc1-d00c-4fba-b103-ba3616fcc34b",
          "status": "Created",
          "code": 201,
          "responseTime": 1686,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "8919e2fe-0d6c-4c2d-afd8-fc3994f5377d",
        "cursor": {
          "ref": "242ae506-996e-46cc-ba52-0417baf38b06",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "cbdf1268-b352-4fab-932a-2d4f2f21c1de"
        },
        "item": {
          "id": "8919e2fe-0d6c-4c2d-afd8-fc3994f5377d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bd5d3840-cb19-4530-8761-b7a588232ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ce38a2-ce7d-456e-ade4-c8a428527391",
        "cursor": {
          "ref": "05171e10-d9cb-4464-b25c-3bcf3b6d8c54",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "01b38d37-03b1-40eb-bbfc-6c234768cea5"
        },
        "item": {
          "id": "28ce38a2-ce7d-456e-ade4-c8a428527391",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "78bb5ae4-0deb-474e-b84f-3f8486fbbe13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0334f392-0054-4b41-8816-be4804ccc397",
        "cursor": {
          "ref": "39655042-0f7b-47f7-95f6-f5234f20ac64",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8eae77f7-97ac-4989-809d-804440bcdd2d"
        },
        "item": {
          "id": "0334f392-0054-4b41-8816-be4804ccc397",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "66d476b0-a77c-45ac-a6f0-675cd02f101e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d7d9681-a384-4416-aee7-21b0896ebd8b",
        "cursor": {
          "ref": "e06bff8a-66d9-463b-813c-9d548df9cc2d",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "51f017a6-3f9c-4482-af17-42cf701ac15d"
        },
        "item": {
          "id": "4d7d9681-a384-4416-aee7-21b0896ebd8b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f5dc915c-cf82-4930-8a48-ae45f46b63d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b1162a8-3c4a-4744-9a09-e97d8e028593",
        "cursor": {
          "ref": "f2f87475-e8e3-4351-bbbb-d3a3462ec1a4",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a0bd06b8-268e-473f-8664-a93568a06d54"
        },
        "item": {
          "id": "7b1162a8-3c4a-4744-9a09-e97d8e028593",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "85445e82-54c8-48ce-82b6-3cb02d50d170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31b8b0b-2180-4774-8112-a81bf1b5f63b",
        "cursor": {
          "ref": "fc30f3dc-ebe8-4012-b2b3-3ba3bf4a80de",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f27f74c8-ec3c-4acc-aa67-e94287a9b447"
        },
        "item": {
          "id": "c31b8b0b-2180-4774-8112-a81bf1b5f63b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6f2064ca-abd1-4a6e-9227-706e494be4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ccafeb-3124-4101-8604-e04a4bde4ef3",
        "cursor": {
          "ref": "6d388cf2-72ef-47ea-bdc6-9185fdb3660f",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b0d28bc9-28b6-4995-8440-bfd4e61dceae"
        },
        "item": {
          "id": "d8ccafeb-3124-4101-8604-e04a4bde4ef3",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "452974bc-0b2e-4784-a323-0f6a81a39f12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b37bc098-9253-42c4-b12c-d233b03e8df1",
        "cursor": {
          "ref": "ec239194-af77-45f9-895b-1d9c23072250",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e591cfa1-5a65-490b-bf4b-6ed33772e13e"
        },
        "item": {
          "id": "b37bc098-9253-42c4-b12c-d233b03e8df1",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "eae9f379-39ff-433d-a0e8-2a7cff0fa4b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 310,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a64c050-1a43-4200-bd52-706eca7ee004",
        "cursor": {
          "ref": "a4eb9b1c-1110-4152-9e2b-3a6f3d9144f8",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3b8166cb-5d7b-48cc-9643-090d379cb0e4"
        },
        "item": {
          "id": "6a64c050-1a43-4200-bd52-706eca7ee004",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "fab94be7-0721-4a05-839d-d578ce361180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b75b329-b38d-42ff-96e9-036d214d6168",
        "cursor": {
          "ref": "3fe8cdd2-afc5-495c-b7f5-644c3f4fac98",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4773f1f3-93bb-4b8f-9e10-252d0c50e18d"
        },
        "item": {
          "id": "8b75b329-b38d-42ff-96e9-036d214d6168",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0c3c1d4b-91cc-40c7-9e2d-aaa0afabad94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5620358-c4ce-499a-ae11-b055ad8fac76",
        "cursor": {
          "ref": "47b0dd90-737f-44a4-a551-f19ca624d601",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ba0b2e60-d588-4d0a-8b64-3ff10b5117c4"
        },
        "item": {
          "id": "b5620358-c4ce-499a-ae11-b055ad8fac76",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f6abd9c8-e001-47da-9d52-07cc9a866554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc516bcd-47cb-486e-9533-83a757347785",
        "cursor": {
          "ref": "0b48d27e-a025-46ad-ba42-fafc23863516",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5f0b9446-be79-4f01-8255-07d8f495249f"
        },
        "item": {
          "id": "dc516bcd-47cb-486e-9533-83a757347785",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "77db1320-94ef-49b0-82e3-1fa2a4bf65bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10629d44-85e0-407c-a284-96f1d7491924",
        "cursor": {
          "ref": "0a073556-a851-4014-b16f-ee447f1792c7",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b77aef1f-0fe2-401b-bb49-4648f5a5b99d"
        },
        "item": {
          "id": "10629d44-85e0-407c-a284-96f1d7491924",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "bf7329ba-6da6-4891-b10f-8f39379e6d9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 610,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "42f848f3-3228-4355-82c3-d7013ad360fd",
        "cursor": {
          "ref": "a864ea37-7aa4-42f3-8419-148e1a363909",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "629e7b17-9200-4d96-ac9b-09ac03d7b697"
        },
        "item": {
          "id": "42f848f3-3228-4355-82c3-d7013ad360fd",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "18709ae9-7ade-4dae-b288-b97fc601ec7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28413fd5-2e49-432e-8bed-2f8380adbc69",
        "cursor": {
          "ref": "a12c904f-2c48-406c-841a-11ff905236ed",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "57692b84-77ab-4410-9a08-e141bfb02fd4"
        },
        "item": {
          "id": "28413fd5-2e49-432e-8bed-2f8380adbc69",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8f5edb0a-2f26-45b9-a166-6e1891e82d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78446a6c-04c0-4425-b659-6e47682975c0",
        "cursor": {
          "ref": "1f26e863-4cd6-4e3c-bdba-b770a5162175",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f2c2135a-dfe3-42c8-9aae-beadcba7c3de"
        },
        "item": {
          "id": "78446a6c-04c0-4425-b659-6e47682975c0",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "408345c9-faf2-4089-93b2-23b697f771a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9efa4a35-4c2a-4495-b04f-15b6d91eb274",
        "cursor": {
          "ref": "87640615-9c5c-440a-8e6c-9d83cfd190da",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ec934833-acd0-475f-8f2a-e7ac8ff5e36d"
        },
        "item": {
          "id": "9efa4a35-4c2a-4495-b04f-15b6d91eb274",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "106fee66-3782-4f6c-ab81-9b5555bcb62d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55825010-b52a-42c7-b89a-b6b74e53f2cc",
        "cursor": {
          "ref": "0ca6ee8f-93cf-409b-95d3-39b68e00b9fa",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7f707d58-427a-4682-adef-574941f6b6cf"
        },
        "item": {
          "id": "55825010-b52a-42c7-b89a-b6b74e53f2cc",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "0847da12-569f-446a-9273-fd9b63040ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "510ddc0f-5d0c-4558-bb08-389a66b1afa6",
        "cursor": {
          "ref": "a4d31758-050f-478f-a8c5-99f6f3ffd2f6",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "788509ed-20b4-443b-b04a-39e3f2ed67b4"
        },
        "item": {
          "id": "510ddc0f-5d0c-4558-bb08-389a66b1afa6",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "07b46ed3-f81a-4923-9576-aa02100cec38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "453075f8-1c9e-4ba9-8b22-275bd0b89de0",
        "cursor": {
          "ref": "ad65c4fe-32ab-45d1-94d1-9545eb12249c",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "db4a41e0-afba-4df7-9473-db3a674211b2"
        },
        "item": {
          "id": "453075f8-1c9e-4ba9-8b22-275bd0b89de0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d735625d-a925-4fec-87bc-edf4d15c6a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 622,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "e6977e4a-1a37-4a16-91b8-2732f882f390",
        "cursor": {
          "ref": "da7f58ee-43c8-47f7-8d32-6dc1a7bca021",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6c800bcb-ca10-4fbe-af73-08385ff2a5d1"
        },
        "item": {
          "id": "e6977e4a-1a37-4a16-91b8-2732f882f390",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "76558654-eabd-473b-9816-af1c9321f72b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ebf5271-973c-44b9-b486-dee10fa8d12d",
        "cursor": {
          "ref": "a3604909-5057-4988-8f6e-be6836b26641",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "26d10162-7e2f-487c-928d-851d4919994a"
        },
        "item": {
          "id": "4ebf5271-973c-44b9-b486-dee10fa8d12d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e337bfbe-5ac0-4f68-b632-2a19ba4fa35d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8018f0-4020-44e8-bb78-dd3f754c57b5",
        "cursor": {
          "ref": "324429ca-a82e-43fc-aba0-72110776b07e",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2301f972-fdc0-47f4-9eec-27420b6c97a5"
        },
        "item": {
          "id": "fd8018f0-4020-44e8-bb78-dd3f754c57b5",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "abc6a6ba-d3a9-43da-8dfe-8f8cc14a68ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1236826e-6690-488d-aa79-c8337e07e65b",
        "cursor": {
          "ref": "db88c473-b3b7-4eb0-aa1a-b282956df8d1",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8ab8de5a-9425-4707-ac50-2b01f97bb62b"
        },
        "item": {
          "id": "1236826e-6690-488d-aa79-c8337e07e65b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "58b4141d-c2d1-453c-93a0-a7d65fcf0904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0ac6ffb-24a0-44cc-9d47-92cfeec0373e",
        "cursor": {
          "ref": "98322966-0780-40f0-9f4b-58276424a07d",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3c459723-5f9c-4c52-8e74-a2d8c35277bf"
        },
        "item": {
          "id": "f0ac6ffb-24a0-44cc-9d47-92cfeec0373e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "501864d0-33d4-48f8-82c0-0e655f976b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161af4ce-5cd5-4b72-95a6-17f36e6d27bf",
        "cursor": {
          "ref": "7dc300e4-c462-475c-bf5b-05cd7fec328c",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f5fbceb4-834b-4307-bb9b-20d0f46f5e1d"
        },
        "item": {
          "id": "161af4ce-5cd5-4b72-95a6-17f36e6d27bf",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d9f8dcb0-09af-4a13-994b-f469272fba77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd168263-0aea-4832-a8f6-b4a65fbcef06",
        "cursor": {
          "ref": "1818bf01-d959-41c2-8e0c-28288bd81830",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6742ed5a-7333-4805-b6f2-8e370d0939b6"
        },
        "item": {
          "id": "dd168263-0aea-4832-a8f6-b4a65fbcef06",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7e608cbf-7023-4795-a8ea-85b64fb6a138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48d6a12f-2f53-4aeb-80ec-fb3400bd4781",
        "cursor": {
          "ref": "c188c138-a411-4aff-9e1d-c80489ee5dd2",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5fecba45-a195-4f80-bbb7-e1e5dbc5337d"
        },
        "item": {
          "id": "48d6a12f-2f53-4aeb-80ec-fb3400bd4781",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3325b872-ea3b-4b42-ae75-0f5efc1ac43c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc7f8b8-45f3-41fc-b783-5b90492151c7",
        "cursor": {
          "ref": "ead1ff62-8f77-4ebc-acdf-2594781d8964",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "70b8b4a0-43ff-4b19-bf5f-4a53366a2153"
        },
        "item": {
          "id": "7fc7f8b8-45f3-41fc-b783-5b90492151c7",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2133b689-c58e-45e0-baad-34a94743861d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58619fdb-4438-44e7-b68c-dbf29854f599",
        "cursor": {
          "ref": "250c1b62-173e-411b-88e2-296c1281bb32",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7cbaeb28-86f3-4d89-8370-1a3a1c26e890"
        },
        "item": {
          "id": "58619fdb-4438-44e7-b68c-dbf29854f599",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f259e832-755d-4248-b039-6138fef3c9a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd663b21-396e-45d6-a88a-b95e39cf8dc9",
        "cursor": {
          "ref": "a5ae292d-da73-4343-b3aa-03f8a8fc729a",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "45d93ee0-ee52-49a0-8bcd-be51c63b382e"
        },
        "item": {
          "id": "dd663b21-396e-45d6-a88a-b95e39cf8dc9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "e149c73c-ac98-4b02-9ab0-9097750b826a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58127c56-f39b-4c07-bf0a-35fafe0473c8",
        "cursor": {
          "ref": "8d1b939d-318a-4c06-b879-26b9591cf076",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4a6ae925-dae9-4afc-8f50-24e9ba8e093a"
        },
        "item": {
          "id": "58127c56-f39b-4c07-bf0a-35fafe0473c8",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "808c6e68-e41d-40d2-a1a3-dada77be0007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b08693c-69a3-4073-9954-8af6563387b9",
        "cursor": {
          "ref": "7ae52646-926f-4dca-8805-0289985c131b",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8cfb4242-1d1b-45d4-a6fa-7d2e85755f16"
        },
        "item": {
          "id": "7b08693c-69a3-4073-9954-8af6563387b9",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b7bb968c-16ee-4c99-8af0-8df14cdfcc2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e41843be-6b91-4f49-a175-b53f1a73c19f",
        "cursor": {
          "ref": "f3b3e358-5c37-48f1-8a4d-a93949c836fa",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "07cba315-eddd-461d-999d-44a993784ee5"
        },
        "item": {
          "id": "e41843be-6b91-4f49-a175-b53f1a73c19f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9120e859-9be0-4072-9013-496a3051a522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1905f88-e21e-4f08-b39d-2ba2c30fe9d6",
        "cursor": {
          "ref": "3c16fabb-2903-404c-a0d2-cc6f9ecc442b",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "cefb3f74-797c-464d-a124-50be8b8ecb29"
        },
        "item": {
          "id": "f1905f88-e21e-4f08-b39d-2ba2c30fe9d6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "33635394-34e3-494e-8898-885448356015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "168d2b61-c4c1-4989-a26d-a2c0384170ad",
        "cursor": {
          "ref": "4bc00bea-4e4f-41d0-ac32-b85e07dc1e32",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "14ce2b45-82da-45cc-b951-1bcfbb3a1f77"
        },
        "item": {
          "id": "168d2b61-c4c1-4989-a26d-a2c0384170ad",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b456629b-c662-46c1-bf08-128123588d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a7a835-da5d-42c7-8d75-c51baca3dec2",
        "cursor": {
          "ref": "150b1cea-505e-48b9-bec9-8efa1ae8ac6d",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "65c9620a-224d-4aa2-b15c-78f5b44535cf"
        },
        "item": {
          "id": "34a7a835-da5d-42c7-8d75-c51baca3dec2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "981e90b3-b645-438a-b109-c21cec70b6d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b013a7-44c2-48d0-b15b-17e37f29eff7",
        "cursor": {
          "ref": "4ad832ed-af60-4760-ba78-2c862137298e",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5e30f16a-4ee2-432c-acd3-6d7b3eb58e5c"
        },
        "item": {
          "id": "43b013a7-44c2-48d0-b15b-17e37f29eff7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "386af2f0-a5b4-4033-9d07-c8bffdcede4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de901bd5-dcaf-4970-95ce-190434e33222",
        "cursor": {
          "ref": "5d061da3-0fd0-445f-aa8f-7f19af348f28",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a7426eb4-e22b-4127-8b18-e32ebc0d9f34"
        },
        "item": {
          "id": "de901bd5-dcaf-4970-95ce-190434e33222",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "880756b4-7de5-4e52-9eac-7cf7396a2043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b29e12ac-eeb8-45c4-a059-c114946dc636",
        "cursor": {
          "ref": "3fe2d125-30e2-4059-83ff-7ba09faf8d78",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d1738c3e-91fc-4d30-97ea-c7dfd6967336"
        },
        "item": {
          "id": "b29e12ac-eeb8-45c4-a059-c114946dc636",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1ddc422f-9ca5-429e-b69b-deaa580a249d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d582cb6c-4e64-4d5e-a25a-bc32be1769fe",
        "cursor": {
          "ref": "d6a2ef74-9d2c-43a6-9828-1f0346e3e757",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "190c1c28-c32f-4d5c-af86-fb387a4dad25"
        },
        "item": {
          "id": "d582cb6c-4e64-4d5e-a25a-bc32be1769fe",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ca66f617-32a4-4016-8177-abdd6e066303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345c6119-6446-485f-ba4b-ccc7c0a051c2",
        "cursor": {
          "ref": "cefe6f30-2848-4953-9dd0-169b34a5aaec",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9d532405-f987-4a17-b00c-826f18a0a441"
        },
        "item": {
          "id": "345c6119-6446-485f-ba4b-ccc7c0a051c2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "96a01f8a-19d6-4bef-81bd-1b88c2946366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d975cfa8-4588-4b42-9891-eaab514f1301",
        "cursor": {
          "ref": "b0f9d7cc-9276-42e6-bd06-89c9161991d8",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5ee90f8b-e3e3-4303-881d-d0dfa6f90040"
        },
        "item": {
          "id": "d975cfa8-4588-4b42-9891-eaab514f1301",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "fddaf9e6-4173-47f8-b3b0-bd4a7a616b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7ec1ba6-5044-45d8-9ad4-26a90004eadc",
        "cursor": {
          "ref": "514a483f-0ab1-4083-95c1-e7ffa87030da",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9efdc96d-6ce1-477f-82c6-2b60221de23e"
        },
        "item": {
          "id": "a7ec1ba6-5044-45d8-9ad4-26a90004eadc",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "681ccbca-f4a1-48aa-bbde-a2ed52ac7bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88eb89b-da84-4883-8d74-b51725fe94af",
        "cursor": {
          "ref": "43d9542b-7bef-4e54-8fcd-d1f30898912b",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2fdc0e22-cd7e-45ec-81f1-901866164b70"
        },
        "item": {
          "id": "e88eb89b-da84-4883-8d74-b51725fe94af",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f18f74bc-dbc5-4123-be17-5ff6902a664f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175b10a1-dfcb-4573-9fbe-0bba6f27eb38",
        "cursor": {
          "ref": "031bac25-39ed-4d35-8103-97c11ad479d5",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2c318efb-ad29-4ce9-9208-49d8a75cf8cb"
        },
        "item": {
          "id": "175b10a1-dfcb-4573-9fbe-0bba6f27eb38",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ff5fe98b-83ba-4033-9030-73a34752446e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a01551a6-c6db-4ba5-8bc7-c560ead13695",
        "cursor": {
          "ref": "5c4d525c-733c-42e6-8247-054c62b2751f",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3a5a12a4-1d63-4052-8417-359c6be00be1"
        },
        "item": {
          "id": "a01551a6-c6db-4ba5-8bc7-c560ead13695",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "bc8ccd4c-38e6-4267-9128-3328d1835ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8dcd8c-245c-4fc0-a285-4ae8785af969",
        "cursor": {
          "ref": "44414bc3-6fc0-4d9c-b3ca-339b5c4ae1fb",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8eb4b554-f968-4429-894a-76d2aff8c868"
        },
        "item": {
          "id": "4b8dcd8c-245c-4fc0-a285-4ae8785af969",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2b020d84-68b7-47c8-8df0-5c4a706a5816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b37b5f4f-c453-406d-a210-8ce0dd2966f6",
        "cursor": {
          "ref": "5713984a-345c-4cde-84ab-cd767c559338",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3c78fe7a-9d5a-4af7-b433-43c0cb456ae1"
        },
        "item": {
          "id": "b37b5f4f-c453-406d-a210-8ce0dd2966f6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "76c9e94d-6382-43fc-89a8-a10511990b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb4b112-e4b9-40c5-bbb4-fad9e9faf282",
        "cursor": {
          "ref": "97cde995-7665-4c95-be64-df3928acb989",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5d869e45-e5db-4273-a321-5ea9a4c62f15"
        },
        "item": {
          "id": "9bb4b112-e4b9-40c5-bbb4-fad9e9faf282",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "69428b3a-46ab-4056-b189-06375f9a6541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f779f532-fc9a-480c-a0ab-ba5bdb53c529",
        "cursor": {
          "ref": "b155cab4-3f24-4c0b-a67b-dba8ac12f6c4",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d165dfa2-1870-440f-8cf0-f110761db1a2"
        },
        "item": {
          "id": "f779f532-fc9a-480c-a0ab-ba5bdb53c529",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2ad7dd36-4bde-43f5-a0fd-e1bf1965d97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1286,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ed24b7-afba-455e-a776-3dc6862532c1",
        "cursor": {
          "ref": "19f354b2-3351-4d85-b1ca-aa7e580bee7b",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "4a7fbb73-206e-4594-a303-4d7a9386673f"
        },
        "item": {
          "id": "c5ed24b7-afba-455e-a776-3dc6862532c1",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "58e899dc-9850-4cfc-b278-533953bb2969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0191851b-de2a-46fa-904b-6b70b8e020b0",
        "cursor": {
          "ref": "a2e46b7d-0cc5-4481-a049-dd3c9c953eac",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7291436e-7e90-4706-bd63-37a24db8b4a4"
        },
        "item": {
          "id": "0191851b-de2a-46fa-904b-6b70b8e020b0",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d855b025-a3ce-4250-bf6f-238f865bd8e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7852ab1c-0644-4ec5-856a-ae7cabea99ed",
        "cursor": {
          "ref": "dc3b1a21-546b-477a-809d-4b6ca3521218",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "30e45a31-2c2f-4f0a-979d-fbde40f376ed"
        },
        "item": {
          "id": "7852ab1c-0644-4ec5-856a-ae7cabea99ed",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "35dd9621-d384-4a27-9835-ffb764a08d5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b369424e-dd69-467b-a0a4-640cea6f2ad3",
        "cursor": {
          "ref": "6e53e90b-252d-468c-946b-fff0f9b10cdf",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9814877f-50ef-44f1-92b4-90fcadf80621"
        },
        "item": {
          "id": "b369424e-dd69-467b-a0a4-640cea6f2ad3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "fbbc5d5e-f83a-401c-859e-39a58d474855",
          "status": "Created",
          "code": 201,
          "responseTime": 1444,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "6f68a92e-d694-430d-b235-b442df038dbe",
        "cursor": {
          "ref": "8f13b286-2cae-474f-b027-d0dbdfce4833",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c54f6af9-da09-4e20-a1ce-a1741091b682"
        },
        "item": {
          "id": "6f68a92e-d694-430d-b235-b442df038dbe",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "2335c36d-9493-42b9-b061-cc20cb15b293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33346ae-ec1c-4cce-9031-be912149ad4e",
        "cursor": {
          "ref": "5cde374c-c1a1-4db4-9128-56734ae00ca5",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "500b93e3-f435-4ff9-8eeb-76ccc1d969a6"
        },
        "item": {
          "id": "b33346ae-ec1c-4cce-9031-be912149ad4e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b88e755a-de26-46f4-b3a9-b4d7c1c8ecce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f51dc22-e7a9-4ac6-b0db-a36aa582128f",
        "cursor": {
          "ref": "fe97e134-6fea-4a22-bb64-1d760a9dda5a",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e14f8e02-a6a5-47ef-9eb5-a0a0eb6ad73c"
        },
        "item": {
          "id": "5f51dc22-e7a9-4ac6-b0db-a36aa582128f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f781172d-974a-4805-9daa-6a24f8292be9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "396bafb4-bf3b-4d8c-87b0-8505ae899a07",
        "cursor": {
          "ref": "fb5ea54a-078c-40e3-9206-69db13af889d",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "24c79a51-a110-4081-b2b0-7e3861b47762"
        },
        "item": {
          "id": "396bafb4-bf3b-4d8c-87b0-8505ae899a07",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7d06fbdd-a9b4-4e78-a0af-c49d0b4389ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08dfe226-7562-4085-8df3-728ab63ff43c",
        "cursor": {
          "ref": "33a376df-22b1-420e-b452-ed7a794d453b",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8281885d-e837-490b-b0b3-457b72d74d9d"
        },
        "item": {
          "id": "08dfe226-7562-4085-8df3-728ab63ff43c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "deed8504-9c66-45ad-9833-b1cd385e9e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b6a8bc-7f63-4882-b13b-fac92fb621fc",
        "cursor": {
          "ref": "f38a95c5-88dd-4412-8fef-596b705546a5",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "44644d41-a9d2-40f7-a5c8-a959ace555bc"
        },
        "item": {
          "id": "a6b6a8bc-7f63-4882-b13b-fac92fb621fc",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4144867b-fb7f-455a-9e72-1e895bd4d68c",
          "status": "Created",
          "code": 201,
          "responseTime": 2523,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "ee69f5a4-dcd6-475e-9c68-054d585f79ff",
        "cursor": {
          "ref": "afe5c278-e262-4e36-bca9-4781bcb57e44",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "49f5e881-7022-4634-882f-a47fe68a64b4"
        },
        "item": {
          "id": "ee69f5a4-dcd6-475e-9c68-054d585f79ff",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b14e5897-a517-4474-aa75-805bdf44a7d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5e5475-687c-4aa7-b200-3c87f67076bb",
        "cursor": {
          "ref": "5d1e2ecd-9eb3-40c1-9020-55d5c0e9d1ea",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f55fc005-4111-437e-81dc-dee359e0bb59"
        },
        "item": {
          "id": "8b5e5475-687c-4aa7-b200-3c87f67076bb",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a556349f-1caa-4111-9fed-992ad77deaf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b32b9e4-846d-40e7-bf67-96ae9c5659c1",
        "cursor": {
          "ref": "87cdbdc5-a2c6-4c79-8cbe-038d1105f9f2",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7ffaebc0-d993-4987-9ea3-9194f440ca39"
        },
        "item": {
          "id": "4b32b9e4-846d-40e7-bf67-96ae9c5659c1",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ba0a0c35-5832-4c9b-a5dc-eba7fbf54883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d958af-09c9-4dda-99f8-aa9a96c8162e",
        "cursor": {
          "ref": "26361dba-9983-4fd5-9adc-641ba030e27b",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8ad2957e-0c0d-4983-a2b2-226b5a96fc40"
        },
        "item": {
          "id": "73d958af-09c9-4dda-99f8-aa9a96c8162e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "94b27ee0-3f65-477b-81af-5c40f03e0b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef17dd2e-8d77-4882-8465-350bf435249e",
        "cursor": {
          "ref": "536d88dc-e861-407c-9103-04bc77c9fa0b",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9773ae39-cd9c-450f-879c-fb6af8f53cc6"
        },
        "item": {
          "id": "ef17dd2e-8d77-4882-8465-350bf435249e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "508cb0f5-4ed9-4417-ae2f-51e30027f0d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf4cfaa-b491-4974-958b-a8ce505eac1b",
        "cursor": {
          "ref": "f22244bc-8348-4c93-bdd1-241b1e8c7e52",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c852383f-b003-4027-85b7-198f1bb4874f"
        },
        "item": {
          "id": "dbf4cfaa-b491-4974-958b-a8ce505eac1b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bc57d3a3-bc7f-4b71-b748-d71def7b98e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05549a1f-a454-44bd-bab9-ee6b748ec5b7",
        "cursor": {
          "ref": "ae7168f1-9d53-437e-bada-04a44caad7b1",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2fb79568-e85d-41a5-b67b-bc75899a3f4a"
        },
        "item": {
          "id": "05549a1f-a454-44bd-bab9-ee6b748ec5b7",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4fd55751-d736-4930-9a89-45ed4c3f3226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e116b46-4959-429e-89ae-f5abcde0d61b",
        "cursor": {
          "ref": "ea330786-bda6-472a-87c7-719097cb9ab2",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ec9be308-917d-4f98-9bce-71e58a39fb07"
        },
        "item": {
          "id": "5e116b46-4959-429e-89ae-f5abcde0d61b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "73392d2b-9e3b-4116-ac27-4088ba5bca32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd64e3d8-2b38-4c79-b500-59559bfd1c23",
        "cursor": {
          "ref": "daaa56e2-464e-49de-b6a6-db042201b36e",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b3133432-6a13-46cb-94ad-09d781f7da6b"
        },
        "item": {
          "id": "fd64e3d8-2b38-4c79-b500-59559bfd1c23",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ef798cb6-17fe-42b4-be95-19befd966d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "5c7ee389-57bc-4323-aefa-91aa21208620",
        "cursor": {
          "ref": "1ba15596-264e-46db-810d-affedf705104",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "30f9dc8c-830e-4d59-ba91-b05692b5caa5"
        },
        "item": {
          "id": "5c7ee389-57bc-4323-aefa-91aa21208620",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "1d23bab8-83ea-408c-9a28-407bef40ebeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "3c4fa33a-575c-490c-a670-b33c36e2d97d",
        "cursor": {
          "ref": "9ed558bd-14fb-4f84-bff6-50c0bd138453",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ab0f4cca-720e-4aba-8230-c856e51b5c72"
        },
        "item": {
          "id": "3c4fa33a-575c-490c-a670-b33c36e2d97d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e563f8a4-6590-44f4-9f69-8bc472ae05ba",
          "status": "Created",
          "code": 201,
          "responseTime": 721,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "6103da24-a038-405e-8665-791593e01360",
        "cursor": {
          "ref": "29fba453-0f47-4249-ab9c-bcf3defe5655",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "db67210a-5083-4b24-90a2-ec0a23bc126d"
        },
        "item": {
          "id": "6103da24-a038-405e-8665-791593e01360",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "8300ad34-c305-489c-be69-1adff30c63cf",
          "status": "Created",
          "code": 201,
          "responseTime": 456,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "484ce4bb-7345-455d-8fb6-5cf8ba0b75a7",
        "cursor": {
          "ref": "dec9025e-c52d-4c9d-8790-bf61f0e10ea5",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "0ffa38ea-5027-4478-b904-cc774fbc88ad"
        },
        "item": {
          "id": "484ce4bb-7345-455d-8fb6-5cf8ba0b75a7",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8598137c-18bf-4193-85bd-6122e5ec2206",
          "status": "Created",
          "code": 201,
          "responseTime": 689,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a90e03-b17a-4340-a5d6-319c6db97e14",
        "cursor": {
          "ref": "b3537d2a-5c45-426e-ae4d-f51e6d45cb44",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "6f4a5d4e-8873-41fd-b5da-129fb9f92b62"
        },
        "item": {
          "id": "37a90e03-b17a-4340-a5d6-319c6db97e14",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e50319b1-4a94-49bf-88f9-c1d2202b5857",
          "status": "Created",
          "code": 201,
          "responseTime": 397,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c73534d-8112-4bd2-816b-182a86b3905f",
        "cursor": {
          "ref": "3d271a09-659d-44af-9247-159ee708b12b",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "d94a1f28-e141-47b6-8578-4c5b9da39d0b"
        },
        "item": {
          "id": "6c73534d-8112-4bd2-816b-182a86b3905f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "29945d1d-f39c-4368-a56e-c7d05a11da74",
          "status": "Created",
          "code": 201,
          "responseTime": 403,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b493061-4aef-419c-9997-2225d3810723",
        "cursor": {
          "ref": "1db78a9a-4eb0-4353-9eb7-680d32677738",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3f5abd3c-a765-48b8-ab18-cc12e35f0681"
        },
        "item": {
          "id": "8b493061-4aef-419c-9997-2225d3810723",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d428bf19-be31-4475-bca6-8ffb32f52fba",
          "status": "Created",
          "code": 201,
          "responseTime": 460,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cacee9d-45fd-425d-a8ce-7b875c1b6ff8",
        "cursor": {
          "ref": "d6b5c51a-ca4e-4ffd-b9d7-18396e4ef674",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5d77b00f-8aa0-469d-8555-45931a65ae2d"
        },
        "item": {
          "id": "8cacee9d-45fd-425d-a8ce-7b875c1b6ff8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8f7656bc-b036-4ab4-bf1b-2720c5fe236d",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "8cacee9d-45fd-425d-a8ce-7b875c1b6ff8",
        "cursor": {
          "ref": "d6b5c51a-ca4e-4ffd-b9d7-18396e4ef674",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5d77b00f-8aa0-469d-8555-45931a65ae2d"
        },
        "item": {
          "id": "8cacee9d-45fd-425d-a8ce-7b875c1b6ff8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8f7656bc-b036-4ab4-bf1b-2720c5fe236d",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "d09ad11a-abf8-4b4c-bcfa-398c8aa455ae",
        "cursor": {
          "ref": "52e029a0-91dc-4785-8181-8711ccbf64c7",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "99d6b704-1d32-4be1-8230-b61c0f9f3fa1"
        },
        "item": {
          "id": "d09ad11a-abf8-4b4c-bcfa-398c8aa455ae",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e9b0ecae-0544-4f3c-8c65-93d78150fe58",
          "status": "OK",
          "code": 200,
          "responseTime": 355,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "7e073561-0a56-4586-ab39-b98a3a06eaf3",
        "cursor": {
          "ref": "dc890644-6197-4862-975e-c3f11855f9c4",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9e1d4e22-497d-450d-b051-ecdecbc40a7a"
        },
        "item": {
          "id": "7e073561-0a56-4586-ab39-b98a3a06eaf3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a4f8f2a1-5e64-4c67-86c1-7459ea86f423",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "01daeb0c-1b0c-4c8e-9ba4-c1217d7479a2",
        "cursor": {
          "ref": "81ce05e4-9d9d-4d44-8eee-0e6260ad0cc6",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "cf2b4dbf-655a-4bcc-afa5-81ae4d690327"
        },
        "item": {
          "id": "01daeb0c-1b0c-4c8e-9ba4-c1217d7479a2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b5c22b3c-1406-4ca2-b55e-80ec53b48605",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "2f4b996d-2460-46af-b270-857f1f92174b",
        "cursor": {
          "ref": "db0ec1fe-48a4-48df-95ae-8414354bc108",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "318a4385-1f42-4647-898d-92346d3dd05c"
        },
        "item": {
          "id": "2f4b996d-2460-46af-b270-857f1f92174b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a47341e7-6c57-43d7-a672-87eb5873fc78",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "281919f4-653d-41d4-ab59-50dca6af5d98",
        "cursor": {
          "ref": "ef48a0ec-17f0-4610-9dc5-14aed5fcfd6d",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "cc4d3110-35b2-4be1-a456-5646382b3024"
        },
        "item": {
          "id": "281919f4-653d-41d4-ab59-50dca6af5d98",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "eeed778e-bf1c-4572-a5b2-3943348e2d7b",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "b964c918-9c51-4d10-bbe5-d52c6634b84e",
        "cursor": {
          "ref": "c66bb522-03a0-478b-98a7-f0a891dbbbb2",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "860938fe-ca1e-4818-a1d8-494181e55a63"
        },
        "item": {
          "id": "b964c918-9c51-4d10-bbe5-d52c6634b84e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "86da98cf-f0fb-4c64-990c-7dda1f9ad271",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "c4e5d495-b28c-4a77-8de7-becc34cdf3d2",
        "cursor": {
          "ref": "4fdc478c-c792-439f-afa3-1ba7b7ca5667",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "cc9be57a-55db-4011-901f-e7b3dc436832"
        },
        "item": {
          "id": "c4e5d495-b28c-4a77-8de7-becc34cdf3d2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "935aca4f-446c-4983-99f3-883c9c012182",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "adbf5345-c48f-4c02-bcf3-caeeed1371ae",
        "cursor": {
          "ref": "7be85369-48dc-4231-89c0-70b986f9b04f",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2995d067-717d-4c4c-bac9-362b99131b7c"
        },
        "item": {
          "id": "adbf5345-c48f-4c02-bcf3-caeeed1371ae",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8feb0f61-1edb-4f22-91a5-491fdc87cd67",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "be6346a3-f709-42bd-899f-99d8201930cf",
        "cursor": {
          "ref": "41a99c79-6256-48a0-aa7c-52b3bf3da7fe",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0c099526-e9b8-4cbd-b11e-9d09b056fef6"
        },
        "item": {
          "id": "be6346a3-f709-42bd-899f-99d8201930cf",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "25fb0587-c150-464e-b816-75406073793e",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "7a4feb5f-b3b3-4604-8b66-f93cdef80b3a",
        "cursor": {
          "ref": "53949b72-1ac0-403d-8597-55c2bbfb45cc",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0758542d-f23d-4a1f-aac9-dc5347f10345"
        },
        "item": {
          "id": "7a4feb5f-b3b3-4604-8b66-f93cdef80b3a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9c2c7334-57f5-4bde-b09b-c20c26613cf8",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "503a2768-2a11-4662-9f6a-1f7284f9bf71",
        "cursor": {
          "ref": "62dba6b0-ea4d-4594-8022-d0801cd0cbfd",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c68e6f0d-48de-402e-90d4-0560b169df29"
        },
        "item": {
          "id": "503a2768-2a11-4662-9f6a-1f7284f9bf71",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "55677aa6-67ad-4763-af61-d3b71a4c2fab",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "23816f30-b6dd-4bfe-a89e-e12ec18db17e",
        "cursor": {
          "ref": "0d3922b4-af63-4cc4-84e5-06d717a5e8b5",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a50cf965-3af6-4f70-95c6-487dc2140d64"
        },
        "item": {
          "id": "23816f30-b6dd-4bfe-a89e-e12ec18db17e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "49501d71-c9f6-4c93-9d8c-cec8635b9109",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "1b2154cf-207c-483f-8f3f-a1f336293fef",
        "cursor": {
          "ref": "243c63a3-5016-4123-b020-e6db4ed1f048",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d632c9ad-b08b-49a6-b420-0f6acd7c367b"
        },
        "item": {
          "id": "1b2154cf-207c-483f-8f3f-a1f336293fef",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "fbb2e0ce-ec8e-4064-885f-e22a45b7c983",
          "status": "OK",
          "code": 200,
          "responseTime": 234,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "b9d54705-2e71-4c96-b8ed-1e27a0d8c42a",
        "cursor": {
          "ref": "706d4e5d-793a-42c5-b811-36ee79f6ba9b",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9c3a5fe5-5826-4f8a-a2af-76e5810a9e1a"
        },
        "item": {
          "id": "b9d54705-2e71-4c96-b8ed-1e27a0d8c42a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3c180197-a561-41eb-857a-e107e015683c",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "b14c102a-048d-459e-9d0a-96bc0c782fd9",
        "cursor": {
          "ref": "b132c0f8-9f0a-4c82-8236-6677782e360e",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "40da7ad9-f71d-4965-a137-45ac96cbc284"
        },
        "item": {
          "id": "b14c102a-048d-459e-9d0a-96bc0c782fd9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9750e580-192b-4680-a245-b2339c257077",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "80ff36bd-3719-40d8-9c7a-11aa5c352083",
        "cursor": {
          "ref": "d89d4419-ee9c-4e4c-8c21-6c8002d8715a",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4bfea8ec-83a3-4ed0-a3fb-f641e0a48371"
        },
        "item": {
          "id": "80ff36bd-3719-40d8-9c7a-11aa5c352083",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fd85a9aa-fd2b-46a2-88c2-90a2b4391047",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "ddb23f5c-6c56-40c4-8c53-0b24ea154359",
        "cursor": {
          "ref": "97f911e9-d3ee-48ff-876b-6db61ec16e05",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "163657ce-d2db-46b1-b70c-638a6559c3a1"
        },
        "item": {
          "id": "ddb23f5c-6c56-40c4-8c53-0b24ea154359",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3c2d5e81-edf3-40d5-8024-ccd3a2adb27d",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "f78668ca-fa2f-4661-807f-d96b8232752e",
        "cursor": {
          "ref": "1c31bfe7-a72d-440b-87fd-68b4e259e9cb",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f47d25cc-8fa4-4070-8c89-5009aafff778"
        },
        "item": {
          "id": "f78668ca-fa2f-4661-807f-d96b8232752e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "74571738-f53c-4814-9ac4-5d30e50b74ce",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "0d6116b6-331c-418d-85f0-86a0f24da08c",
        "cursor": {
          "ref": "3b90b069-55da-41e5-8c78-31ea77afcfc3",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0ed6fb13-fffb-4bb5-b1d4-1828a72cc6f5"
        },
        "item": {
          "id": "0d6116b6-331c-418d-85f0-86a0f24da08c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "119434ce-8d40-4baa-8638-85d447b92f5a",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "671afe4f-e96a-4beb-b11e-79d33ea9fedd",
        "cursor": {
          "ref": "40be694a-bffa-46df-9781-e6eb461fe74a",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6382a665-b7d2-4840-a324-dc2de6587279"
        },
        "item": {
          "id": "671afe4f-e96a-4beb-b11e-79d33ea9fedd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3d42d178-f650-4853-ab6c-0d4ee7dd28d6",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "310d8bc6-eda3-4e32-8139-617eceb7a228",
        "cursor": {
          "ref": "a1b775ee-b843-4df0-8336-e01cd65d7225",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2de270f5-dce9-44fc-8520-2f5a13d79d24"
        },
        "item": {
          "id": "310d8bc6-eda3-4e32-8139-617eceb7a228",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "aeac7d77-ec80-4450-b15d-6d3f62c482b6",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "7db1349c-89a2-46e9-a9ba-e228df3fcb3a",
        "cursor": {
          "ref": "bce1b7f0-1bb9-4be7-a25c-bd428747d7ed",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5aa5c031-f88f-414f-bacd-0f5ee2db99d1"
        },
        "item": {
          "id": "7db1349c-89a2-46e9-a9ba-e228df3fcb3a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "300ad306-13fa-4edc-a4b6-db48ad0aec5d",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "6f5a1da7-92a5-4ea2-9e6e-ada90f71a275",
        "cursor": {
          "ref": "138f673f-47a0-42e3-aec3-fee670e78742",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "14eb5c46-a66d-47af-bcac-8e6c940396b4"
        },
        "item": {
          "id": "6f5a1da7-92a5-4ea2-9e6e-ada90f71a275",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7a25f211-14df-4d66-9cd7-ffe8984db1fb",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "de57a396-5a59-4baf-bb0c-3c810ed203d2",
        "cursor": {
          "ref": "89a3ec53-cc5f-40ff-86ca-d8855884fcd5",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1a6eb34f-93f0-46f0-9ef8-72b020b43e55"
        },
        "item": {
          "id": "de57a396-5a59-4baf-bb0c-3c810ed203d2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "eae02b84-732a-4465-8378-12ba69a273b5",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "d227f7b3-890a-43b1-be3f-2a80de5d82aa",
        "cursor": {
          "ref": "8a98aef5-8f41-4dc2-b3ea-1d77643debd2",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "97ac20d3-76ab-4bab-b776-e66a8d24e6bd"
        },
        "item": {
          "id": "d227f7b3-890a-43b1-be3f-2a80de5d82aa",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "de349879-a93c-42b5-b21f-7c3978664849",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "d71fc155-97cd-4aa9-98e0-5f587a454c02",
        "cursor": {
          "ref": "c62add37-ee22-4858-9b9c-b02cfcf6eaa4",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d264a1e0-62f0-4839-a084-cc167f5ba970"
        },
        "item": {
          "id": "d71fc155-97cd-4aa9-98e0-5f587a454c02",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d8e8e2bb-c422-4ed5-9240-8ca8151648e4",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "9b3641ba-24d2-4993-9fc0-605f40f6df50",
        "cursor": {
          "ref": "e365b8e2-5310-41a4-b94c-9d14d5302cbf",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "dd61d997-1315-40c2-902a-501498bfaff0"
        },
        "item": {
          "id": "9b3641ba-24d2-4993-9fc0-605f40f6df50",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ed881e7b-decc-4ca9-a92e-33b200643eb6",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "37465a7f-09ba-4055-84d4-3c8f7d5e7ffc",
        "cursor": {
          "ref": "8367aad6-b6b9-4270-9982-75ff6f79deb3",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "118f2d5e-d26f-486a-aec0-121d7415f2ac"
        },
        "item": {
          "id": "37465a7f-09ba-4055-84d4-3c8f7d5e7ffc",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "445c6785-e1f5-4b44-962c-31a3ac299b13",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "ed298e01-e719-469b-9b1d-ef2974ca2520",
        "cursor": {
          "ref": "a01484dd-3bd8-4a25-b65e-69f298bfa52e",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1dcff5d2-5766-40f7-b698-b1d6093843b6"
        },
        "item": {
          "id": "ed298e01-e719-469b-9b1d-ef2974ca2520",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "aa3fb011-6041-48bb-9aea-c7b0e3f149b6",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "a8939efd-6c4d-42ad-9b6d-ab8e1460d62b",
        "cursor": {
          "ref": "473b3de3-a9bb-4436-b81a-06d52401bd8a",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3e388df9-1ad6-4d06-b675-d5e88d51f4e9"
        },
        "item": {
          "id": "a8939efd-6c4d-42ad-9b6d-ab8e1460d62b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4056e344-3a88-47f0-97c2-3d1327fe7702",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "efb992cf-e9a8-45a1-b33d-a6973473dc24",
        "cursor": {
          "ref": "1e2c8f97-2ff6-4e2b-a04e-9d67cab265fe",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "aff2c63c-bed4-4df3-970f-ca956b35da36"
        },
        "item": {
          "id": "efb992cf-e9a8-45a1-b33d-a6973473dc24",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4aaee4e8-e192-4592-b20f-1d5eeb07c977",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "48d1b911-a541-418a-8aa0-ca8e1a96e35b",
        "cursor": {
          "ref": "bf3e7af2-5195-4041-b284-7c677b9a4fe4",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "7ca992bb-b128-423a-be63-d09068a3cbe1"
        },
        "item": {
          "id": "48d1b911-a541-418a-8aa0-ca8e1a96e35b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "297172c2-2bdb-446c-936a-cc1a711f037f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "547371a8-153b-43ae-976b-a968e4ce6345",
        "cursor": {
          "ref": "2a3a368c-7e23-4ec2-8fe1-883dbe33c367",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b75f5b7a-41b4-4ba8-b245-2b273562cf5c"
        },
        "item": {
          "id": "547371a8-153b-43ae-976b-a968e4ce6345",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "9d2b0048-2c17-4522-a3d2-43f4ac31359b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 55,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f5a8a2-9a41-4aae-be79-ecf7f0c92f9c",
        "cursor": {
          "ref": "d552554a-f488-43df-9194-fdb54a728133",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e7b5270c-b2b0-402f-a3d9-1d9131d1536f"
        },
        "item": {
          "id": "d5f5a8a2-9a41-4aae-be79-ecf7f0c92f9c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "99807e10-aec6-4bb5-a544-202c7634b044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f5a8a2-9a41-4aae-be79-ecf7f0c92f9c",
        "cursor": {
          "ref": "d552554a-f488-43df-9194-fdb54a728133",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e7b5270c-b2b0-402f-a3d9-1d9131d1536f"
        },
        "item": {
          "id": "d5f5a8a2-9a41-4aae-be79-ecf7f0c92f9c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "99807e10-aec6-4bb5-a544-202c7634b044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0d6911-88cd-4e93-8631-56a90f2fc269",
        "cursor": {
          "ref": "a657cde0-8491-4ed0-bb72-3c0892c58b95",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6e32d161-2ed8-43e2-b0e9-8ce2dbfba167"
        },
        "item": {
          "id": "9d0d6911-88cd-4e93-8631-56a90f2fc269",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b3c3aeda-163f-457d-8373-d9e9da4e58a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "745ba34c-9ab2-47a7-aa9c-25b42b019da4",
        "cursor": {
          "ref": "6b8b583a-9e5f-4c17-a941-721032a44e4b",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "79bddd79-d80a-4cdf-9a0a-3921767495e2"
        },
        "item": {
          "id": "745ba34c-9ab2-47a7-aa9c-25b42b019da4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "085d74fa-4bf6-4212-b0e9-81c0cf876d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56cdc22-afb6-4348-8813-3a789e0b268a",
        "cursor": {
          "ref": "b8f484ba-2e4f-4c88-a613-1ca44c874d94",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b881680d-838e-4071-ad48-45d6111db103"
        },
        "item": {
          "id": "b56cdc22-afb6-4348-8813-3a789e0b268a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b678857b-c4cc-402d-b773-29fd04b003a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1681327e-cb83-41ee-9623-50214dc9aeac",
        "cursor": {
          "ref": "6e8edda5-c586-4434-b6dc-07fc701c7a46",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6e434dd1-f1ef-46cb-be89-aa24ce29822b"
        },
        "item": {
          "id": "1681327e-cb83-41ee-9623-50214dc9aeac",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "910b6c62-62e4-45f6-8823-58d40902cd51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa5fb6a-3f58-4836-b957-6b86e4e6d50f",
        "cursor": {
          "ref": "a0783616-8c10-4427-94eb-81325e461ca6",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4bca244e-1e3d-47d6-bd3b-c0b3e187f38f"
        },
        "item": {
          "id": "eaa5fb6a-3f58-4836-b957-6b86e4e6d50f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f0673449-76a3-47da-8ff7-b965ac7ac72d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb10f52-f0ec-4b15-ba99-d8b843e6de7e",
        "cursor": {
          "ref": "48891b6e-8736-40ad-bad3-107ec1163dff",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f9c79068-498d-42be-875c-8a457a18dd00"
        },
        "item": {
          "id": "deb10f52-f0ec-4b15-ba99-d8b843e6de7e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7bc712c1-cdbb-4ca8-963a-a13dd60abb24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1243,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689fe69d-8819-46c2-bf95-219de2a8f939",
        "cursor": {
          "ref": "9e294bbf-e15e-446d-a779-28a25b51a88d",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0cb6a466-f559-4372-8f5e-a449c5e5c855"
        },
        "item": {
          "id": "689fe69d-8819-46c2-bf95-219de2a8f939",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "c2c3b8e6-57db-4d71-b93b-3d0cc23a7508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9167121-54fb-4b33-a883-30089f31c591",
        "cursor": {
          "ref": "65185e88-9ea8-4af9-b2cc-c28e2920d14f",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0296c064-7518-41a5-834a-742dc9b46527"
        },
        "item": {
          "id": "c9167121-54fb-4b33-a883-30089f31c591",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "80640f3f-b6a2-40b6-9f2a-ed0194080cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b2ab17-f36f-42f5-a7ec-fd77092f717e",
        "cursor": {
          "ref": "7c55c121-553f-43f9-886b-a63cad1c7f2d",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "245c6e61-01fd-4244-9704-774aad02b535"
        },
        "item": {
          "id": "25b2ab17-f36f-42f5-a7ec-fd77092f717e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9c7fbef6-6c8c-4ced-993e-4c8434f9efda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4368abc1-1a13-4bf4-95fb-85b56f2c5d79",
        "cursor": {
          "ref": "d14feab7-e751-468f-ac5e-636c339aa77f",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "bf4e70a8-b612-4031-a82a-8bae57f64fd2"
        },
        "item": {
          "id": "4368abc1-1a13-4bf4-95fb-85b56f2c5d79",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "64b9a08c-5436-4b71-bb98-448c2f35f89e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f93bb0e9-89d6-40a1-b160-d5c25c5de81b",
        "cursor": {
          "ref": "7918da2f-4bb6-4e6e-aa58-7aa6ea62fade",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "8d3cfa03-770a-41c2-9667-7b0f202002c1"
        },
        "item": {
          "id": "f93bb0e9-89d6-40a1-b160-d5c25c5de81b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "75ee8858-1d57-44aa-b35c-0f2131f14962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c64277a8-80cd-4073-a07a-b7d729b744c0",
        "cursor": {
          "ref": "15c195ef-8a74-4a99-a9ce-7a76f7a81ac0",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "12a13301-5475-4361-8ea5-4363ec8e9921"
        },
        "item": {
          "id": "c64277a8-80cd-4073-a07a-b7d729b744c0",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "141c7ae5-9a81-494b-bfa8-6abce67b13c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2719d7d1-cd26-4542-896a-09f1929126eb",
        "cursor": {
          "ref": "d2c1e83d-f0d6-412b-b0cb-2e41de940b68",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7430bcf0-9a37-4e09-acac-dd0f39943fa2"
        },
        "item": {
          "id": "2719d7d1-cd26-4542-896a-09f1929126eb",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f9c3dd3d-37e1-4ca2-85d6-d548c83ee5a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "614f70db-ec2e-4c73-bfb6-2d18878023ce",
        "cursor": {
          "ref": "2cb53cfd-9c78-42db-b87e-d71607577e06",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f5fcb225-1ba1-41fa-9f24-fa94ccf93e7e"
        },
        "item": {
          "id": "614f70db-ec2e-4c73-bfb6-2d18878023ce",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "777d96dd-9340-4114-9a8f-f897a6102d6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 574,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b90bdcb-0a6d-48fb-8385-316a9b22047b",
        "cursor": {
          "ref": "59f243cf-7f81-4468-96c1-57f1da70186c",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7364cda0-5035-46e3-90aa-62fdd183c385"
        },
        "item": {
          "id": "0b90bdcb-0a6d-48fb-8385-316a9b22047b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "20a055bf-4b6d-4eeb-98e4-31fbea29385b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ea586d-1fc8-4262-b8de-3525ec486705",
        "cursor": {
          "ref": "10ee96a9-bd0a-47f9-bc4c-c81d92ac5fd6",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3c87d7f5-35a7-4a95-8af1-fdf2867c528f"
        },
        "item": {
          "id": "47ea586d-1fc8-4262-b8de-3525ec486705",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "4568511f-a884-4a84-8d58-250f7b0646ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9bed90b-2569-431a-8c98-5a12b9e689cf",
        "cursor": {
          "ref": "4e5dd23f-30be-4373-92a1-68f2ffc38bff",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a52e1162-fb36-4640-90ce-1fce4ab0fbe2"
        },
        "item": {
          "id": "c9bed90b-2569-431a-8c98-5a12b9e689cf",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "fe508bac-2643-41a2-ac6c-6a44c5c8557b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 495,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1373d15-c6ee-47f7-b9d4-8e14b187cda8",
        "cursor": {
          "ref": "e810a8a8-0baf-4b32-aaf1-9a25c6bef54a",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d87ebde8-b44b-4983-8dc2-40a917fd3c99"
        },
        "item": {
          "id": "f1373d15-c6ee-47f7-b9d4-8e14b187cda8",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b0db3f81-9131-4a88-916f-f13af5292ed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 392,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e9e2eab-2f32-4c3e-842a-ee62d1131c1b",
        "cursor": {
          "ref": "20991fc7-0f21-49c5-b582-41f6df680fa9",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5d85e7b9-1297-4818-a269-c7282ee8a7b5"
        },
        "item": {
          "id": "0e9e2eab-2f32-4c3e-842a-ee62d1131c1b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e4bcca78-70dc-4fcc-b969-2dbe9a5c0c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 309,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e520eb-90e4-47d4-980f-4c7fbcdcb79c",
        "cursor": {
          "ref": "20dc6034-64d7-44c5-8c27-495a153d1d71",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ae1ad467-7042-45be-a697-938b451e25c4"
        },
        "item": {
          "id": "02e520eb-90e4-47d4-980f-4c7fbcdcb79c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f51193c6-48fc-453e-9f9e-3ce7e6186d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 442,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16cf830d-e03e-428c-aef4-823e1db489b0",
        "cursor": {
          "ref": "3a15c4a1-cf3a-409b-acc6-306c704d375b",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7b2ff5bc-583b-4180-8c60-75db50bf491a"
        },
        "item": {
          "id": "16cf830d-e03e-428c-aef4-823e1db489b0",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ab58a686-ff50-4504-87c4-1b18473b8e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 343,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da398f0-bac0-488c-85ad-786adcb60bfe",
        "cursor": {
          "ref": "ebcc1032-7209-449b-8170-429d0645f238",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3f9e2178-555a-4ac5-a48a-d3bab00ef7fd"
        },
        "item": {
          "id": "9da398f0-bac0-488c-85ad-786adcb60bfe",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3bfde85d-0cdc-416c-bc96-c836f41a9220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1214,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a5346c-b5af-4e75-b2c5-5589d40cda81",
        "cursor": {
          "ref": "734bbe59-79ba-45ef-9a34-54813d5c0957",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0d40c13d-a3ea-4910-a923-2e0b7e5cf7af"
        },
        "item": {
          "id": "f2a5346c-b5af-4e75-b2c5-5589d40cda81",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "faf0e441-61bd-4e7e-a054-c0da360c78d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be89c32-879b-42f3-8ead-0c0a50de3b3f",
        "cursor": {
          "ref": "7428c7cc-77e7-490c-86ce-20c67906fd50",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4abbdf55-8391-4a66-9bd9-f4c562b1e483"
        },
        "item": {
          "id": "8be89c32-879b-42f3-8ead-0c0a50de3b3f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "6712a3cd-8c34-4f02-bcda-80fdcd0ff876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a064bd-24f0-4c33-85ee-99758afa3ab7",
        "cursor": {
          "ref": "81c43c91-4eab-4d29-a5a8-e9c4d56f3988",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4cf7e819-6560-42a6-8aef-31b89fed8720"
        },
        "item": {
          "id": "31a064bd-24f0-4c33-85ee-99758afa3ab7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f83d7439-43c3-4012-809f-a7e836b058d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 564,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7506fa6-f914-4fe8-9037-43ce4b6318e2",
        "cursor": {
          "ref": "6fdcbad3-bbd8-450f-a2b8-f8dfa75deabf",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "37310182-be2b-4d0c-a9b5-2e628ab17fdf"
        },
        "item": {
          "id": "a7506fa6-f914-4fe8-9037-43ce4b6318e2",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1d22f94b-acb3-4b07-9c43-81a0e5b83e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b98094b-c33f-43b6-896c-c9447c586a11",
        "cursor": {
          "ref": "e8ecd2b7-88c6-40eb-8a27-8e0364bb8b7c",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "66f4e955-b4ff-4a31-8528-732964ad7e7c"
        },
        "item": {
          "id": "6b98094b-c33f-43b6-896c-c9447c586a11",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "937f28d5-79ae-4f09-9803-763b52bfdfe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824bcd20-acf8-4336-a55c-d5fbbcadb931",
        "cursor": {
          "ref": "3ab282ad-5be2-4c72-b463-7a355ca5110a",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0f548500-1a00-44b1-bb72-596c8f8a072c"
        },
        "item": {
          "id": "824bcd20-acf8-4336-a55c-d5fbbcadb931",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bbe0fb00-43f8-416c-8643-a69021e88f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636fdd58-609f-4cc0-a16e-0c7c05d78b77",
        "cursor": {
          "ref": "6dc5ce68-3934-4190-abc4-721f27985970",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2b4be537-cd24-4d64-9717-8bdff3be025e"
        },
        "item": {
          "id": "636fdd58-609f-4cc0-a16e-0c7c05d78b77",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "80ca7596-0d4f-4bb2-aac4-ca0363f72895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 282,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c39b6f5-acc8-492a-bd2d-cc6d2ed74b3c",
        "cursor": {
          "ref": "55c2dee6-119b-4c9e-a62e-613437d2e1e7",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b24c6fc2-18e9-44d1-91d5-bc834bc12a5a"
        },
        "item": {
          "id": "4c39b6f5-acc8-492a-bd2d-cc6d2ed74b3c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "bb905bc9-38c9-47e4-be1d-be8d5ac52b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b65b3a-3d8d-4b69-b4ab-73fdc59d08a7",
        "cursor": {
          "ref": "856d26ee-682c-4d2d-b89c-70f4130dc769",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6e0c19f8-8050-4f93-91bf-c3c0b16a4c60"
        },
        "item": {
          "id": "c7b65b3a-3d8d-4b69-b4ab-73fdc59d08a7",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "40c94f19-d1ee-40f8-b04d-04e4c7ea3476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c930a313-3259-4de4-b072-4743b9e37de9",
        "cursor": {
          "ref": "a7ee95e8-e28f-4c0d-8f18-91f361296521",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d474f1a7-00ed-49ee-b240-44a2890ec298"
        },
        "item": {
          "id": "c930a313-3259-4de4-b072-4743b9e37de9",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5b16c077-75a2-49a7-ac17-8faadf284d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1123,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1214e87e-ffb9-4aea-b554-2d8384b69660",
        "cursor": {
          "ref": "70bd37cf-fe9f-4e17-8ecb-9e429bbd77df",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "bd5e59c5-5a4b-4b15-b13c-bc6df3961f28"
        },
        "item": {
          "id": "1214e87e-ffb9-4aea-b554-2d8384b69660",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "08513753-11c1-48da-8810-16bc3f8b2956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328e2054-6d69-43bf-a9e9-65cfa757a62c",
        "cursor": {
          "ref": "6ae4fcc7-94c3-4f4c-95a5-6adcdb47fe0e",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "75ce0fff-76bd-4cb7-9dd3-2616e7399894"
        },
        "item": {
          "id": "328e2054-6d69-43bf-a9e9-65cfa757a62c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "45b800d3-049c-490c-8e8f-c61558cfdbf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2159,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cdeec23-62cd-4b92-afaa-b2b67de7464f",
        "cursor": {
          "ref": "3e6f56d0-0012-4415-a2ec-a2e9bf80a66d",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "6c8912c6-6c58-427c-a35e-bd61fe4e5252"
        },
        "item": {
          "id": "3cdeec23-62cd-4b92-afaa-b2b67de7464f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "66e46ef7-a8b2-43d5-8100-78e652503094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1322,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029c31a1-470f-444d-b370-f02705e4a689",
        "cursor": {
          "ref": "3387612c-3db3-4b7f-9775-233a9fd1ee76",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b890f2d2-2dfe-4444-a11f-f38f59de2cd9"
        },
        "item": {
          "id": "029c31a1-470f-444d-b370-f02705e4a689",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "668d8077-8569-4bae-bc77-24728b45eff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1699,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "130d0f36-b0d9-4ab8-ba41-9a54acd5a4b8",
        "cursor": {
          "ref": "95784f87-7c5c-4b18-8747-ad53a35bca74",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "08bc52bf-0ac7-44c7-85e2-4770706af858"
        },
        "item": {
          "id": "130d0f36-b0d9-4ab8-ba41-9a54acd5a4b8",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "85f253dc-7bda-43a3-be7e-cce8bab0caf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 462,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb73c0c-f80e-42ea-aa11-54d17de4d8b2",
        "cursor": {
          "ref": "4ce22ae2-8d5f-41ba-ba34-3bfc99cae7eb",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ad6d3078-7c53-46bf-8683-ff24bc3e872d"
        },
        "item": {
          "id": "5eb73c0c-f80e-42ea-aa11-54d17de4d8b2",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1022d7e7-3351-4135-9f6e-7dcf4a03b802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 496,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd9cb55-32e5-4c5a-93a1-77550b858464",
        "cursor": {
          "ref": "f54b2ef3-8840-4303-85d1-ebe2587b5ae5",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3aae0835-4913-445d-b930-b6ebbff0b21f"
        },
        "item": {
          "id": "3fd9cb55-32e5-4c5a-93a1-77550b858464",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "714c4e99-8536-4898-877e-c51f7cc245f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 399,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625ccb18-f28c-4760-b4e5-089998d5143d",
        "cursor": {
          "ref": "138987da-0f35-44ad-9ede-66eda519d4ea",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d3af9947-0055-477e-a02d-880efa6156eb"
        },
        "item": {
          "id": "625ccb18-f28c-4760-b4e5-089998d5143d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0287b17b-734d-4b1b-9f08-57652b80c6db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7042b97a-2337-4d53-863c-7c986cd6af85",
        "cursor": {
          "ref": "04725f93-16f2-4836-93b4-350f584d857f",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b28a0aa4-53c1-4267-afa4-ddd466716fc1"
        },
        "item": {
          "id": "7042b97a-2337-4d53-863c-7c986cd6af85",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "377dcfd5-a877-46d5-ac67-e8451fc73ca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 351,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4672d8df-d963-4527-9f4d-79a09a0ad35a",
        "cursor": {
          "ref": "e2527642-4222-4208-9fb5-335d9b51a0d0",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f312722b-c85c-48e7-9d2b-c0bcaf63aa63"
        },
        "item": {
          "id": "4672d8df-d963-4527-9f4d-79a09a0ad35a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "7f1a2b43-59f9-4b96-9b1f-92ddd4c395d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f24d2e0-4906-4212-b0b7-d0902ae3745a",
        "cursor": {
          "ref": "cf67f137-ff8a-4ddb-8b7a-e46994b0546b",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "97bb4f7d-0c94-4838-a30a-2e4bf0aacc33"
        },
        "item": {
          "id": "9f24d2e0-4906-4212-b0b7-d0902ae3745a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "092711de-3a33-4b84-b245-deccded43d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 390,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e34d3bd-904c-4559-8336-1142e8231ccd",
        "cursor": {
          "ref": "fafe167a-4139-4b66-ab92-51b00e295033",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "455094d0-ea23-4b75-9804-3bc722808d5b"
        },
        "item": {
          "id": "7e34d3bd-904c-4559-8336-1142e8231ccd",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e3fb9795-939a-4241-9c4e-12d13589d7c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 355,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382a1666-ce70-42cd-aab1-6cf6e6153bb2",
        "cursor": {
          "ref": "50d2d02b-70ee-4b31-abc6-14bf9f863623",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8bda5a1a-2b57-4417-9d93-88e73bed7854"
        },
        "item": {
          "id": "382a1666-ce70-42cd-aab1-6cf6e6153bb2",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6c2c06ed-d55c-417e-862e-796920d2315c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 362,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24d5698-f879-402f-81c3-b839f2aa1243",
        "cursor": {
          "ref": "c033062a-0efb-43fb-b715-9f83ad272d6d",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "418f94a2-fee6-40ea-be8f-5869695e9c63"
        },
        "item": {
          "id": "f24d5698-f879-402f-81c3-b839f2aa1243",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b6d77c43-b63d-49fc-85f9-f8af68c0b388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 284,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab310672-21dc-4b09-8efc-7c36487beaec",
        "cursor": {
          "ref": "641bdb66-0754-4062-a82b-0134ae3950ed",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6f76a9f4-5aba-4749-9f22-6d7f8196b1b5"
        },
        "item": {
          "id": "ab310672-21dc-4b09-8efc-7c36487beaec",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a2ad673d-3604-474c-a14b-d376d3638e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 361,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e64c580-c41e-4eb6-8262-c1755878fd26",
        "cursor": {
          "ref": "c3d0853f-5461-4fd5-91c1-f309f32256d1",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9876ae05-c81d-4339-a39a-5c71b36f64dd"
        },
        "item": {
          "id": "2e64c580-c41e-4eb6-8262-c1755878fd26",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "6e0fc658-130d-4d69-8b3e-0ed0cd0d738a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 459,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70c4b97e-4add-4d6a-b66e-7a1b6f97e14d",
        "cursor": {
          "ref": "b0d453ce-2c51-4681-aa60-ad613e302e1a",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f9dcbc16-3574-47e2-ae89-ed62e117d759"
        },
        "item": {
          "id": "70c4b97e-4add-4d6a-b66e-7a1b6f97e14d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "80dcb0a8-e984-4460-8fb7-4196e43458f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 619,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8cc01b-332a-4f55-b91f-3b6c37650dde",
        "cursor": {
          "ref": "e9c0a806-4740-411e-8b7e-93cb1b8af6c5",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e97ad0b6-5091-4027-bab1-86afb8b0224f"
        },
        "item": {
          "id": "9e8cc01b-332a-4f55-b91f-3b6c37650dde",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b70aa203-09d9-49f2-a143-16ad3384eeb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2210,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8fd20a-a202-4dd2-80db-11f1e80cef96",
        "cursor": {
          "ref": "90b36805-b47c-4e60-a1d6-b0535b4c4095",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4e040076-a5bc-4d74-bb60-0ec4a4e91fb7"
        },
        "item": {
          "id": "7c8fd20a-a202-4dd2-80db-11f1e80cef96",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "be7c7644-8aea-461f-bae4-9f2fbd692a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1171,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "562c1a8e-91c0-4e0b-95b5-c47e2d09f044",
        "cursor": {
          "ref": "d06e709a-c6d4-43d1-bb13-316daa14c8e3",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "914df8b1-e2d5-42f1-ad18-d13298f5336d"
        },
        "item": {
          "id": "562c1a8e-91c0-4e0b-95b5-c47e2d09f044",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "fd4a39b1-8eb1-4dac-8898-680054365b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989c1dae-606f-45d3-b8a8-a6d650c06853",
        "cursor": {
          "ref": "4d7dc78c-50f1-413a-9bc7-09522b86a7d7",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "29df617b-ac6c-4d03-b87f-2bd5a121e714"
        },
        "item": {
          "id": "989c1dae-606f-45d3-b8a8-a6d650c06853",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0c8aded1-196b-45eb-b8c0-85afebcc692a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65ab90b-4137-4a57-a0e3-b662d288c8c5",
        "cursor": {
          "ref": "2c2627af-89e4-4c3f-8573-e472488d5dcd",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8dce999c-9347-4660-8604-a398e341c198"
        },
        "item": {
          "id": "d65ab90b-4137-4a57-a0e3-b662d288c8c5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0eb1eb3e-e824-4dbd-ac34-52d7e78469b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec15edd-252a-4531-9f77-f95ffca5ba1b",
        "cursor": {
          "ref": "9d6335c4-c39e-4dd7-89a3-be857914473f",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f127092b-90f7-42df-9a11-8b2501d908d8"
        },
        "item": {
          "id": "9ec15edd-252a-4531-9f77-f95ffca5ba1b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "18bbfd86-6109-4f44-b0ad-232507f2934a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72635a68-ef07-4ea1-8d44-717b1a5d4e4b",
        "cursor": {
          "ref": "26592a1b-7c1b-4593-b814-baf3e7933917",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "24beeaf0-0ac0-43aa-a1cb-d5e8be2aee5c"
        },
        "item": {
          "id": "72635a68-ef07-4ea1-8d44-717b1a5d4e4b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2e08da63-274d-4fda-a8a1-c5ba2906470c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2830,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9ae84a-cfca-4450-9711-16db9b88f231",
        "cursor": {
          "ref": "a547bf95-2594-42e3-8589-1d40f1af4cf1",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "1e731dd4-f8a6-4334-ba91-5e69f0ffb358"
        },
        "item": {
          "id": "6e9ae84a-cfca-4450-9711-16db9b88f231",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "09ad631a-0d8a-426d-9ee3-e7863eda6e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf90fda-95be-40e8-aa15-57c60a53f413",
        "cursor": {
          "ref": "6e202d7e-5b2d-47ca-9cbb-b5a5dd947248",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "fa8140c6-9ed0-4301-9bfc-a4fbd8a51168"
        },
        "item": {
          "id": "ebf90fda-95be-40e8-aa15-57c60a53f413",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "22cc5040-f243-4145-bfe0-60d8261347f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb4c32f8-03d3-4d42-a449-b00704808f76",
        "cursor": {
          "ref": "3d68c6d3-01c1-449f-9473-521c04f73e4b",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "17e074a2-c9b0-42f0-b1ee-1c6d65c62ab5"
        },
        "item": {
          "id": "bb4c32f8-03d3-4d42-a449-b00704808f76",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e0607a21-8a73-4c37-9870-436819c8a9ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83c2021b-72af-44b6-a620-ed4d7aad29bd",
        "cursor": {
          "ref": "2d173e92-b9ed-415f-bcc5-b12b93d418a6",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "93158465-a4e1-4932-9a6b-a317ccdde4c4"
        },
        "item": {
          "id": "83c2021b-72af-44b6-a620-ed4d7aad29bd",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "23437298-378a-4f53-8129-e0a618fc544b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30074b7f-611b-42a4-b0b9-4fc00dd7a015",
        "cursor": {
          "ref": "f9ebb822-a899-4b89-b1df-5a31145001a4",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "58274a8e-9f9b-44a5-bea8-69099b2fb80f"
        },
        "item": {
          "id": "30074b7f-611b-42a4-b0b9-4fc00dd7a015",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "566e6dc3-e1d6-411c-a2da-a537bf3d9d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c44e4a-e183-47b8-974d-e3e610b23cfe",
        "cursor": {
          "ref": "e944b25a-9ebb-4114-ad4d-f17b59a6eed5",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "828045dc-a021-4437-aecb-c2cd233f796a"
        },
        "item": {
          "id": "c9c44e4a-e183-47b8-974d-e3e610b23cfe",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1bea87ec-d189-4fed-ba38-d771b095be59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9edf928-7cea-4ad9-95f7-9871db410080",
        "cursor": {
          "ref": "fd8c13b7-b697-4867-9bbb-648124f07690",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2d2ed23e-176d-44a1-9fde-c13a44c4af8a"
        },
        "item": {
          "id": "e9edf928-7cea-4ad9-95f7-9871db410080",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "bfac7cfe-5af7-49f7-bdef-031e0a8a10d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d98249dd-d457-49b5-a2ff-68738650db51",
        "cursor": {
          "ref": "6ef8106a-c7c4-43d5-b00e-64a789a1c93f",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c85d99e9-a330-4046-a408-d983d8766109"
        },
        "item": {
          "id": "d98249dd-d457-49b5-a2ff-68738650db51",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4f90af93-89aa-48c9-b519-b4a0a5e25824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bbca712-acb1-4c9e-bff2-1765a54ad00e",
        "cursor": {
          "ref": "8cfbb3f4-a61b-43c9-adc5-73c9a12837af",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4356a1a3-7f00-415b-84ad-69b6768fde61"
        },
        "item": {
          "id": "1bbca712-acb1-4c9e-bff2-1765a54ad00e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "8229661a-54b6-42bd-ae08-5ae0f398e75b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bef0282-3579-4bf0-a817-2dd648862f4e",
        "cursor": {
          "ref": "11263dae-a8ae-41fd-983c-08a53faf4f6c",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "58a52f44-bef4-4059-bac5-c0119ec357e5"
        },
        "item": {
          "id": "6bef0282-3579-4bf0-a817-2dd648862f4e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c84b8298-9c02-4c77-b181-7b1cd96099a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de847d47-dcc6-4c27-ac3a-61946476e718",
        "cursor": {
          "ref": "e7e498b6-9a1a-4d3c-a58a-8190a66adcfd",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b44d7dba-888a-4515-9c80-89dd884028cf"
        },
        "item": {
          "id": "de847d47-dcc6-4c27-ac3a-61946476e718",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "12612456-8c80-43b0-be90-8be097bacc24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "194250a3-6972-4f00-bb2f-8a82afeca2e4",
        "cursor": {
          "ref": "28e0154b-3757-4e4b-aa60-281d60643a2a",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "52da4d19-1b39-4120-a47e-9f0e7853e62c"
        },
        "item": {
          "id": "194250a3-6972-4f00-bb2f-8a82afeca2e4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b962503c-6cb4-4044-bce6-00ad83d0ee37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d35c5d-f582-4fd1-bcff-5d27b1472e1a",
        "cursor": {
          "ref": "dc3eb60a-81fd-4817-8cb9-157a0d0b97bb",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e09f6b23-46de-44db-9877-e4378189b090"
        },
        "item": {
          "id": "78d35c5d-f582-4fd1-bcff-5d27b1472e1a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "176e8b88-5b06-44aa-8825-810f740f5ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9f9465-0d42-48b9-a1bb-b0ccdc4305ea",
        "cursor": {
          "ref": "0935ec5b-a1a4-453c-93ff-cdce3000f4b1",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "815b7b83-542d-410c-826a-89d9b8546f26"
        },
        "item": {
          "id": "ba9f9465-0d42-48b9-a1bb-b0ccdc4305ea",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a42e2e02-69b6-4824-b41e-dc46b9e81fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "105aa6fa-086d-4e01-87f5-5eb1702f824a",
        "cursor": {
          "ref": "81e3bc45-6685-46b9-966b-e8de8fa665a0",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f769a786-38ff-44e2-b81c-8472c624576e"
        },
        "item": {
          "id": "105aa6fa-086d-4e01-87f5-5eb1702f824a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e1fe0f56-db15-4d83-985e-6bac53b3efcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bbaf79d-2920-4067-8907-d5c0bb6a10e4",
        "cursor": {
          "ref": "1ec3f19c-7cb3-42e0-85ef-c00c2facc5d7",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a4a29c8e-10d5-424e-8141-24c1a2972f1f"
        },
        "item": {
          "id": "6bbaf79d-2920-4067-8907-d5c0bb6a10e4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "df8a75e1-f4cb-479c-9dd9-9b72f88b7cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1831cbad-8118-428c-90d0-2070baeb9f3a",
        "cursor": {
          "ref": "4f48abfa-656b-42e0-9c2e-afa89c27ec15",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "652aca69-0e20-4833-9cff-032970be22f3"
        },
        "item": {
          "id": "1831cbad-8118-428c-90d0-2070baeb9f3a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "fdf4869b-7035-4e64-a2be-f9d5e86b2b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "395a6dc0-ea2c-47ae-87cd-c89b0850a67b",
        "cursor": {
          "ref": "5aedd097-5c49-4d78-9b6f-effc7af83699",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "28a28a70-0f92-4019-b7fb-0e7ab0d17f0c"
        },
        "item": {
          "id": "395a6dc0-ea2c-47ae-87cd-c89b0850a67b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9eb61354-c27e-4ddf-a8d4-79ca0854b18e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93fe0553-47e2-4033-ab08-abe6191d4a63",
        "cursor": {
          "ref": "f23bad35-37ab-4bad-92ad-a0a416566437",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b98b52f5-1ecb-43e6-b0cf-adde172bd757"
        },
        "item": {
          "id": "93fe0553-47e2-4033-ab08-abe6191d4a63",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a0d93790-050f-4a05-9d62-209fdc58998b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da32f0e9-616d-45fa-93a0-111643b6d02a",
        "cursor": {
          "ref": "2fb6ab1c-562a-4400-9d46-d044dd6b7628",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "321ed00d-bd5b-4b23-9032-55ce282dd67a"
        },
        "item": {
          "id": "da32f0e9-616d-45fa-93a0-111643b6d02a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "bbd6b65c-85cf-4966-91c9-61f90f2380d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c59749ef-1037-4cee-bd93-643c56e9cf53",
        "cursor": {
          "ref": "41610eaa-2a4a-446e-932e-089b83b0bd65",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6804ba69-ac4d-4c8a-8fb0-c98e723e3c04"
        },
        "item": {
          "id": "c59749ef-1037-4cee-bd93-643c56e9cf53",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "7a226a9b-08bb-4159-88c7-afc2e0821941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed77fd0-1bb5-4af0-b385-21f86cca57cd",
        "cursor": {
          "ref": "3f3846b6-6f3c-4d95-99d5-38816c78c106",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b8754512-589d-45ee-abec-9a06a5f1f66f"
        },
        "item": {
          "id": "5ed77fd0-1bb5-4af0-b385-21f86cca57cd",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ccb26457-ef36-44d9-86b6-43247b020022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22a17907-9662-4680-82c9-618b8acc3fd2",
        "cursor": {
          "ref": "39ee3682-5b1a-404d-9e5a-80d8ae7fbb98",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "cd5d1cc9-101d-43f4-bf32-961c7a5a4302"
        },
        "item": {
          "id": "22a17907-9662-4680-82c9-618b8acc3fd2",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5b7c33a5-4733-4b19-992b-87a5d09b6acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1827b456-74fa-401d-8086-36dfef006a1c",
        "cursor": {
          "ref": "3d019853-602a-4406-92bb-66c08e3d02a0",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "de5655be-e2eb-4802-8e2f-1d7ef0187400"
        },
        "item": {
          "id": "1827b456-74fa-401d-8086-36dfef006a1c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c0d11f66-14da-4888-b369-6d6767e79b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b73399-8cee-46f1-b1ed-e23dd36294d1",
        "cursor": {
          "ref": "ce0ce5a0-dd3c-44d1-8f7a-c552554aff12",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6967b2d5-9d25-4145-8295-7e8048f85e1f"
        },
        "item": {
          "id": "82b73399-8cee-46f1-b1ed-e23dd36294d1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "71deecdf-69b5-467a-9558-ca4b25383275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a7b673-ab6a-4977-9de8-0b59b2673119",
        "cursor": {
          "ref": "ddb67eab-9ee6-449f-8e6b-0776a06a7733",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6e3a6205-c677-46ed-bf5c-59a8b7463518"
        },
        "item": {
          "id": "93a7b673-ab6a-4977-9de8-0b59b2673119",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "5388022c-5e23-4401-9ccd-4aa82afa276b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2299029-18b8-4a09-a6ee-ad09164b6b2e",
        "cursor": {
          "ref": "ea37fbcc-3ddb-4602-8530-2fd3230a4acd",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "674c582b-ee32-435e-b132-74f5252ee59c"
        },
        "item": {
          "id": "a2299029-18b8-4a09-a6ee-ad09164b6b2e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "320b5418-8e0a-413b-b7d6-53751e94b9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dea8296-4415-47cf-a484-86c0f20f17bf",
        "cursor": {
          "ref": "18114d26-0d27-49ae-8316-3dd02104ea64",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d539ad8a-a047-47fe-9602-87a25e6b8185"
        },
        "item": {
          "id": "3dea8296-4415-47cf-a484-86c0f20f17bf",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5d176321-a9f1-4027-8b21-3cec4664f01a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c27fbb-e5e5-463b-9147-c04d718dda8f",
        "cursor": {
          "ref": "d59bd602-e7d4-4cb4-ab2c-6e102e332f32",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "bd207023-78eb-47e2-a0db-ba01beff22d8"
        },
        "item": {
          "id": "c5c27fbb-e5e5-463b-9147-c04d718dda8f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "03d19bfb-4a96-4efd-a27d-a3097aba3543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9a4f1e-8f02-4f22-acce-42559b9ff4ed",
        "cursor": {
          "ref": "714ac737-c5c8-461c-910d-d8e06c34b63e",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "2961be50-5c63-4247-98db-a211cf90ff43"
        },
        "item": {
          "id": "0f9a4f1e-8f02-4f22-acce-42559b9ff4ed",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e6f36f77-d6d6-4f59-ad36-b4a1eae5ef6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57967052-7745-4792-978b-540db5b65759",
        "cursor": {
          "ref": "9b691c39-f93f-4ab4-8392-4ef6cb934c1d",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "85763697-dc40-4784-abb9-febb95e9abb6"
        },
        "item": {
          "id": "57967052-7745-4792-978b-540db5b65759",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "db325370-1d49-4d17-9187-0290677eee00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3877da50-9829-4205-9606-90e38eb498bd",
        "cursor": {
          "ref": "a41c6cf6-260e-4b12-82a4-b8b13a9edb38",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9238840e-8e84-4ccc-96b2-385c23cd109c"
        },
        "item": {
          "id": "3877da50-9829-4205-9606-90e38eb498bd",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "43a18f51-4a5b-4da6-a23b-af00a44c9250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a742c6e8-2142-481f-b248-f76416ad9d56",
        "cursor": {
          "ref": "c3790195-1431-43cb-894c-c3ff32fb72d1",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b7d77733-a052-4611-a00c-c477b687942d"
        },
        "item": {
          "id": "a742c6e8-2142-481f-b248-f76416ad9d56",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "dd3af869-a7d4-4f92-8199-44bb25a1df9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0204b61d-2290-4ac0-a44f-951e945f438b",
        "cursor": {
          "ref": "c875c9ac-4a4e-46b6-94fc-7aeb46c4a132",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8a542e48-d1b6-4263-ae8e-a22c8a67be90"
        },
        "item": {
          "id": "0204b61d-2290-4ac0-a44f-951e945f438b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "693ad8c9-3171-4fd3-ba10-001b410fe0bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e31473-5499-4315-a324-1fd3bbf45fec",
        "cursor": {
          "ref": "91d17b55-d7d8-4b00-a33f-736156c4452a",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "2c505a94-3b41-47d8-8003-8c9c09d657d7"
        },
        "item": {
          "id": "38e31473-5499-4315-a324-1fd3bbf45fec",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c3ba7113-bc66-41be-9da9-656e5aa0b300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516b0603-70aa-431e-8227-c6162aaeb194",
        "cursor": {
          "ref": "a4510158-937f-4fd2-a0b6-302c5b05cd03",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c4325cf5-d05f-445d-8952-fcd28a3eb0c8"
        },
        "item": {
          "id": "516b0603-70aa-431e-8227-c6162aaeb194",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "13a9e058-6d77-4412-be63-bb54164098d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01a6b83-0300-47b2-a228-63a0febf8cb9",
        "cursor": {
          "ref": "874e2f94-0567-4623-abe2-495bd19de3d6",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "dc658f49-3a0e-4048-ba0a-a033200caba9"
        },
        "item": {
          "id": "b01a6b83-0300-47b2-a228-63a0febf8cb9",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0140fbc4-bf3c-42b5-b0de-253e43d720ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c4a5e5-1a15-41f2-9eb5-227b5af1ae4c",
        "cursor": {
          "ref": "f5852614-208e-42b7-8de9-d52f74ca9597",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "210917af-7b97-4da3-b36f-4c85a4073f4f"
        },
        "item": {
          "id": "25c4a5e5-1a15-41f2-9eb5-227b5af1ae4c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "63a4e77b-c01e-4679-bf56-9ed49e1ec819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38de35a4-77af-4df6-bded-6d8dde261296",
        "cursor": {
          "ref": "23cf90b7-955d-4dac-9868-03733a669b25",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4a6b9c30-cb84-4909-80c6-c15980d2f15b"
        },
        "item": {
          "id": "38de35a4-77af-4df6-bded-6d8dde261296",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "70dc7edb-6442-4d4c-b6a4-a80cca222f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f11deccc-cf71-42b1-a20c-d5edd3296aa1",
        "cursor": {
          "ref": "540b7ab4-c5b3-4592-b00b-e846f6780425",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "60bb5672-1b40-4803-bd2b-8beda09b28df"
        },
        "item": {
          "id": "f11deccc-cf71-42b1-a20c-d5edd3296aa1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "21dbf0e7-245e-4758-8923-6d777268abbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d36436d-72cc-4f38-9153-00571988f3bc",
        "cursor": {
          "ref": "5edc5523-e54b-4b2b-a4d3-073cc0006096",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2903123c-aa8d-4bb5-a08d-a6191598a77e"
        },
        "item": {
          "id": "4d36436d-72cc-4f38-9153-00571988f3bc",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3d4309f3-9a01-4cb8-b2e7-dfa438cd445a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69770eab-48f2-4c6b-b12c-b933129956d0",
        "cursor": {
          "ref": "ee77011e-248f-4c3f-85fc-1e0a3bbdc152",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ba6b8f0b-9628-4990-829c-dfeed5b7850f"
        },
        "item": {
          "id": "69770eab-48f2-4c6b-b12c-b933129956d0",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "1d4b7129-2a3b-49ba-9519-133ffe3b4604",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 120,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651d92b7-0fb2-4ca6-94b8-d1e6a358c3c9",
        "cursor": {
          "ref": "503e939e-ea23-4439-a817-93adc5021adb",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8b0de434-3b43-4598-b922-2b5b143f4679"
        },
        "item": {
          "id": "651d92b7-0fb2-4ca6-94b8-d1e6a358c3c9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d5a5fcb7-8ab4-464f-815c-896ff83be0b0",
          "status": "OK",
          "code": 200,
          "responseTime": 1403,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86bc057f-f8ab-4521-86c6-2ccb3c882fbc",
        "cursor": {
          "ref": "7f32cc4b-d206-40f3-8449-e16300f2d529",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "9be02e4a-8e80-48a7-9133-836b1061ecfb"
        },
        "item": {
          "id": "86bc057f-f8ab-4521-86c6-2ccb3c882fbc",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "d98b8f3a-f7e1-48bc-9aa2-5d9a029d60a4",
          "status": "OK",
          "code": 200,
          "responseTime": 659,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75731c1-d730-4f7b-8a29-7b764fc71c2a",
        "cursor": {
          "ref": "3aca1b45-3185-4304-b7a3-467b4f6aa533",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "49fd0043-1706-4e0c-b4a5-42cacf56b4d0"
        },
        "item": {
          "id": "d75731c1-d730-4f7b-8a29-7b764fc71c2a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "bbb2f32a-93a8-4682-a2a7-febef7e9570c",
          "status": "OK",
          "code": 200,
          "responseTime": 1922,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e98425c-5054-4516-a98e-066409e4172f",
        "cursor": {
          "ref": "6dbb76c1-42a2-44ad-87ac-4b3b3d967d4b",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "28bed850-a045-4f0c-822e-daa89f85352b"
        },
        "item": {
          "id": "0e98425c-5054-4516-a98e-066409e4172f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "938214b7-b2a8-4330-9903-64052765a5c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e98425c-5054-4516-a98e-066409e4172f",
        "cursor": {
          "ref": "6dbb76c1-42a2-44ad-87ac-4b3b3d967d4b",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "28bed850-a045-4f0c-822e-daa89f85352b"
        },
        "item": {
          "id": "0e98425c-5054-4516-a98e-066409e4172f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "938214b7-b2a8-4330-9903-64052765a5c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e98425c-5054-4516-a98e-066409e4172f",
        "cursor": {
          "ref": "6dbb76c1-42a2-44ad-87ac-4b3b3d967d4b",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "28bed850-a045-4f0c-822e-daa89f85352b"
        },
        "item": {
          "id": "0e98425c-5054-4516-a98e-066409e4172f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "938214b7-b2a8-4330-9903-64052765a5c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa1b6a6-7ead-4617-977a-3fa0ee70e4cd",
        "cursor": {
          "ref": "a407d464-dcd3-4209-894a-6e770adbc067",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "68f4322f-8047-43b6-be08-fbb90210d9bd"
        },
        "item": {
          "id": "baa1b6a6-7ead-4617-977a-3fa0ee70e4cd",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "ff0b16c2-d79e-484d-bf7f-6ee65d0a74f3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 84,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "979329af-d41a-400e-88e0-a756c278a0f9",
        "cursor": {
          "ref": "663caeb1-96e2-4c63-8f92-a36e92ed112b",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "326b3b9c-b17a-46ce-9ba3-1b6431b16bba"
        },
        "item": {
          "id": "979329af-d41a-400e-88e0-a756c278a0f9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "14a7f6bf-9424-4254-bc58-0a0a4138d306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "979329af-d41a-400e-88e0-a756c278a0f9",
        "cursor": {
          "ref": "663caeb1-96e2-4c63-8f92-a36e92ed112b",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "326b3b9c-b17a-46ce-9ba3-1b6431b16bba"
        },
        "item": {
          "id": "979329af-d41a-400e-88e0-a756c278a0f9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "14a7f6bf-9424-4254-bc58-0a0a4138d306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "c7422997-6aa4-4c95-9955-0f060d0e8a7b",
        "cursor": {
          "ref": "867e8c36-557e-42a9-b4a3-18169fc4e28a",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "204b02fa-4b26-4e9c-b08e-023423199ca6"
        },
        "item": {
          "id": "c7422997-6aa4-4c95-9955-0f060d0e8a7b",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "3b93ff5e-6038-4d0c-b7d5-5af0a5b631d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "f664811a-5aaf-4826-8136-907e7eae62fd",
        "cursor": {
          "ref": "194ea9ad-6252-45f6-b1d5-f8d0c934a9fe",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "bcf3fd39-b69e-4279-91db-fd7d70802b81"
        },
        "item": {
          "id": "f664811a-5aaf-4826-8136-907e7eae62fd",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "db4b2088-5386-4728-bf76-37cedab12419",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f664811a-5aaf-4826-8136-907e7eae62fd",
        "cursor": {
          "ref": "194ea9ad-6252-45f6-b1d5-f8d0c934a9fe",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "bcf3fd39-b69e-4279-91db-fd7d70802b81"
        },
        "item": {
          "id": "f664811a-5aaf-4826-8136-907e7eae62fd",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "db4b2088-5386-4728-bf76-37cedab12419",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "983016a6-60a5-4349-9095-bf49d8bdc292",
        "cursor": {
          "ref": "a4691ae8-a18e-473b-a281-54de2f78f686",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "4ba866c5-f4d1-4d76-8b22-d685c03d464a"
        },
        "item": {
          "id": "983016a6-60a5-4349-9095-bf49d8bdc292",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "83ebb625-0c23-4792-a233-6bffc1477155",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 75,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}