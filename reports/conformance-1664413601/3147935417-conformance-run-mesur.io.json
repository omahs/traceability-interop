{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2e190c2a-c5dd-4109-960d-f71f4c97b8c0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "76fcc446-05be-461e-bcee-b063baf2fe5a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "75bc91dd-94c1-48ab-88d7-abcacb5c66bb",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5855cf3-92a3-42bd-91f0-ad393f1a14e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4fcbdee5-42f0-4f0d-bd42-0417f55321a1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "36ddd75e-2b53-4d2c-89ee-c714d8cdd0bd",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d7dba072-0edf-4de7-b236-84fed2b1c137",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3666215f-3049-44e7-9cd3-42a9bc265d2f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7a2c672b-41bd-4321-8be7-8063b15983ba",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e960782-37a7-4e58-8656-6eda9746ea5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16afb7a5-21fb-4b12-8e9a-05354126cf91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0307834c-b917-4785-abef-b8360832a70b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc8c4468-ad1d-4d33-bc9e-03ef50690c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d8e5978-c1a9-40c1-ac65-1bcce58b2870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479753f4-7e1c-4ce7-9cee-02e8b7b40cfc",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6df38836-83c8-48e4-937e-4610b302477b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ce14e73-b349-476c-ae98-50096b9fa560"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0b3730ac-6aef-4594-9162-0ff2ee663e04",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "05803c77-5a6b-4848-a78f-4a51264a3fd4",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a412950-1dae-40a9-8457-e8d872bf6f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4fbe54eb-b33f-43f3-b6a3-de2fa05cdcd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9f61135-325c-4d35-b919-010f3d1abde7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e0af57f-229d-4605-82fe-72654d88e073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1cbce4-9b16-432b-b2b7-ed837fa0e72d",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e724f32c-e0e6-410f-be5e-8c220eca9ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21a03aad-0d8c-4e96-8339-17e8c9f402be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c5a7ca-d8ee-4cbc-9323-97b6fed7b3e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "580759be-fdce-464c-8cc0-248fc0413630"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a3c1d321-3b6c-4f8a-a94a-169bebee62b6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bd367b8e-e28a-423e-b971-7ae266ed5370",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cec7acfd-faf4-462d-aa9f-77dde5171b2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7fcc57f5-c01d-41bc-942e-5dd442717a96"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba3eeb2b-5407-4ad9-bae1-41f999a2de7b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "c36d01ce-a798-4a53-b8cb-1ab90c4525e9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "65691582-edac-4f5a-bcbb-c99259131625",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b421b964-5aab-43da-b660-c92eac17a480"
            }
          }
        ]
      },
      {
        "id": "18bfd146-62b2-4849-b2a1-26b4da8ccdce",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2b0764fc-f7c1-4b8b-a48c-365d44dc4d92",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7e7b5341-9d35-4633-89a5-406ded5ec624",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1b6bfe73-2c7f-40c7-8f6c-8d2a42b75693",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af0e2ebf-a737-4ebf-95f0-9289b49cd7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38b0c7f9-9af2-4323-af31-a7c98b936cfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4ac87d-efc4-485b-aea7-1bc4d9572df6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c531166e-f374-4e20-8e98-e5e231f72b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d505df-e2b2-4858-9d71-61d767e8a153",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "628888cf-53bc-425b-a0b5-160109a2f1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f118f16-bcc7-4b81-8ef1-ed9a58b4aaf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b13a99-3f34-4cf9-9611-e5bb55f90cd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "179fa8d3-f059-4db2-9830-81599c97b7b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6796d06-0dba-4ca4-a603-7f2391768377",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a8c6c8-9668-4bee-ae06-b7ab62527858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0afb2778-d9fe-4b2b-8c88-53226d5c2722"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ba9fe8-ede2-40cf-912b-7050729e4a64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66fb3a59-9c2e-43cd-abc2-ca20037cdd8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20aba87-b028-4400-a064-f655ee9fbf04",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ad3b61-8d06-4b9b-9b27-935ea925cac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99812a84-336f-4073-8648-6ae4cd26827f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "385345a8-bb05-4eee-b074-6276e201c3b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa2cb12b-d34a-4827-9222-6ecb52d2a364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6957cd85-5e13-41b9-ba24-46ebb08958ce",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e60e13-8e26-4a3c-8ff4-37b9fc08836f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab1fcd9-8325-400a-86a2-f2dcd40ce4cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08f7c12-dba4-4d86-b48b-566517da9ee5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04bc2fb2-f321-4844-bcd6-ebe02356dad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7c3c59-6459-40aa-96e9-19615315cb2e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbc2b2c-ddf3-4148-8f99-0c0c3fb3a8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eb0a166-7481-4d0b-b802-45da14e92e8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72adceaa-6430-440a-9dba-e9871d0fc47f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4771e84-ccd6-4ffb-ba0a-da9df183f5ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b48fdf-6f35-4301-a178-56b5f331ab7d",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eafe469-d313-4787-a970-59367946fac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95fd8f3d-eb06-42ed-ad30-b35bc1ec6e64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29321491-0bd5-4588-b53c-82f80ee27eb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e006824d-1a3e-4a8b-ad9f-ff551963fe43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3414a525-0bce-4050-81e9-49fd24295495",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60104a2-a02b-4f1f-aef2-06d3f5721f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5502e8c-3c29-4f15-a881-286cac5dfb58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeab09b6-c9bf-4a4d-a14c-6bb1a5715470",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebfd865c-5c59-4a85-af06-9a9665428782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f0d3510-ec23-42d9-8f21-6b82dc5a3f52",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20df919d-3aac-4b5f-bc58-f1a038906046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8c24794-a5f1-48ab-81c7-3579456af370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340eb5fa-9cb0-43e2-970b-71ec71ed434e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "790b386a-45bb-472d-90f3-526369e22a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73430b4e-e435-472f-8525-15154fa944fb",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84086a7-7afc-463d-97a5-34d86be27263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "267596e3-db68-44bf-8942-04a983ac510c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67746bb7-2af6-4805-a518-0a9655e5e1a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caadaaca-c16b-4230-b714-6e56cce198f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e5f034a-27d4-4da9-acc7-3297bdaa296b",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9019f9-e928-4702-98a0-7f1edc5485e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17fb5b01-34b9-4793-acc8-6eb66943743d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fbb3f46-7c2e-4893-9655-af8c77bbf8ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "be55a999-89e4-4913-a956-fd319ca6ec88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98b466a-86aa-4ca3-af77-e7bb29842d35",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b596ca4b-5664-4f9d-a861-e71cb32fa41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a73a448-93e0-4d92-bd01-95209650d08a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fde9077-ac37-4c2f-b1de-ae6d4b7c4367",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "8db4743b-527d-4711-8f22-684083da2216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563bb1ec-e8d5-4bb4-9e9f-57a80a5bb298",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "822961cb-f2b4-420b-945b-6009273c55e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79f5226a-795f-43d5-a606-ef25e26d30f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9481a686-9002-46b4-9fd3-4226d5990715",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf082b32-a65f-461a-aca9-694bd703d3b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da287ca0-5c7b-4c17-a8e5-de4350390ba4",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3a9ab9-c75e-4a0c-a980-92e9db0fa0cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dae20c2-7e93-4e3b-b979-1de576da2ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e4d8e9e-8c50-4680-9dbc-6ef17ea1fa94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef12a17b-f5af-4505-b219-b2adcee83af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc353ee4-4942-4d81-93bb-048e0ac593a8",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "622f6cd9-a86c-4804-88f7-61d269ce571b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32dc489d-4e43-4d3d-abde-b3f43ecf19ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34263002-f5ba-4ee8-9e28-c4c93fa8317b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "507edee2-2261-46ce-8736-4e28fe7fc2e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2322dd92-64f1-4505-8425-3a78a601a7ce",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1285264-2468-4c66-a1f4-e5901c9dc46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "506095dc-5494-4800-97e0-51b3b7c6ac9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b92bce-0d80-47b4-a9e2-ad21afa2408c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "8aa3dff6-4188-4d5d-9fa0-7511ff5a85fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e84685da-4aa1-4b62-8d16-c890edc2beb4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84b15f7-8b17-4a7e-ac98-5b97fc2bcb8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "724edbfe-3b54-4774-9634-2a32afe16205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4b335d-e711-4e56-93b5-1e9333b3f6f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5955a38-db6e-4a48-ad86-cf8e87f3a4b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b36e2f-578a-4689-8ff0-83f9b2ba3c85",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d753eb17-c463-4a1e-b4ca-91a858e603c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940a6a01-c401-4fbb-a8e0-be5b136326e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4245cb99-9264-49bf-b2f2-39c22aedb70c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b04970d8-41f1-4550-b541-2791b68704f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c818bf-634b-4a27-8737-f9bcb99f245b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f547d9-9343-42e4-b97b-19f77876552a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da62bda3-74f4-486e-be6e-67c9aeab5b1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f16277f-35a6-483b-8113-5d233ff96ebc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f7ceb66-f0d6-4580-b575-034d1f8b379c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a832d0c-2849-433e-942b-bb73776f7b43",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34a307d-703d-45fa-b9c9-7e7d3c832365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc2a4c28-5bd7-4a6e-8a83-1907a3a56fdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e303c255-e772-4e27-a19f-8c355699a51e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e3e0201-cd17-408e-ab4f-a51c9a9c2148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869b71a6-0023-4b11-ada0-7638f57bdc0b",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8fa5712-c2a8-4cdf-b1c3-68de92b623ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c6aeda8-7d78-43e4-ad31-c6d6e9583cc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "149629dd-7f39-482d-82cf-381017f634ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff30f06e-5614-462d-805d-dcb048e94941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a770b256-7657-41e6-b7e0-1ed91fb234dc",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0480e554-62d0-4695-a992-de51e1adace8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a64c230-ee01-4430-9a7b-fb2b998e9e07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607df2f0-031d-44f8-b2b7-bfc4f20be9bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47e3153e-3c63-46cb-8dd6-ea3c91138d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe8441c-7e67-4605-ac0e-3044139f178b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5586b698-9658-4a4c-83ba-be7c8dff0f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc7dca1c-e3f3-406d-9221-5a28f21bead9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "162f72bb-2f32-419c-b9bb-d0bdc63f7ad8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ebaca3d-14d2-423d-81d7-e028667dcdd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ccc5b33-3dea-4e3e-adc4-9d67ffc9e28e",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d61a6ff-bac7-4d9c-9d69-53abb4cecf9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "913f6a72-f3c6-442f-b63d-f3bcbd8e5657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d5f4fe-4352-4447-a4ba-820c92b2d97d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7565e579-16b1-488b-814e-7f1ae049e037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801a6e4d-8c30-46fa-adbb-dca6b7923f3b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e2f2b5-c4d7-455d-984f-30d16105a1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45b03c8b-1239-47d3-8adb-700ff7542bf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0008c2-6a42-4282-a87c-b48602b52812",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edab58bc-4bb9-40ae-8a95-381c87ffd39d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dfeadfe-0b8f-4f78-a7e9-c0d25a5b6ac5",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90df4f3-c558-40a5-ab2b-c113b1a91754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10428afa-8485-4d94-ab29-aac7e6869f6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bebd3ef5-882a-4e6b-a3a5-e9aaca4bb607",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bf48627-8d8f-443a-8ae8-bc4bf6adb921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8048c69-fa37-475f-8498-ad8ba14594c5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f835ec6f-bdcd-4d04-a1bb-5c60f8ecc899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb6bd7f6-cfec-4f28-aa5d-801166e89d1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "542d77b8-fdfa-4cec-912b-835506dc21a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae999905-0c81-4bf3-85de-7ec7b3433b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376514ec-1ea9-479f-9565-84ed38a97eb7",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b31d55-d572-4d62-ae6f-ea1ec7062887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19132b55-ed25-4813-93f9-a0b1823ceaf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7f92cc-6c53-41c5-ac82-33f045efafee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a99667e-c72c-414e-8713-f417b578893f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bcbd37f-02ae-4b35-9789-6addb2d166a0",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1153af4a-caf1-4b10-9d8e-df5b0596d5db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "311c64c2-69f8-42a7-abca-7556cf277da5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f957da-a39e-4d7f-a374-67aa84ff9b2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2630905-e052-452d-95e6-e5b63da1b8d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902d9382-68e3-4288-a532-c5f151fa147b",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2de9156-bdc5-4c2d-849a-96fb1fe8b06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa88af78-91d5-464a-aed3-230e8046b7c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c85c3e1-08b2-4263-a790-7a879207d6e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac1876b7-8baa-45a0-9c63-9411f6a8f210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b80b37-7603-4001-9afa-6bfea0f3c80f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6062c9ec-8985-487b-a68f-9426f6bbfba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a9abca33-6d27-494e-a0f6-567b4855182d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bda8a63-aa5a-4f61-93e1-d844ad7dc46d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56adf230-c29f-42c2-a12d-b811acfe74eb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2c99e9b8-d7bc-483f-8a28-d33e9ad495a6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "60ad75fa-7c79-456e-9243-29b0f6544be0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a131af-e920-4f7a-996c-b2133d29b18a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aea245ca-2bf2-4c02-a7b1-73e68be7fe4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84089631-8dbd-45b7-bc93-e0611fce21a4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "9e1f1854-f351-4831-85d6-9e6b6fda6063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0dd44a-92fe-4ec3-b604-23a3b7b4c6bd",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1adabe-3f5e-42b7-a38b-1e1c36fb3740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "878d0772-1f26-4ce6-b4e1-803310f4b3c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f21c42e5-a2fc-413a-b794-8bf426b1cb8c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "531494d2-f246-43f3-98c4-c07bf051742b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ed4ef1a-9708-4ae1-a2ee-fefee47dd97e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72e8a2c7-f5ae-4214-bb0e-60b67f888ee1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf7f0a66-45b0-45f9-9e15-f848b2823bf4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b772de1-1850-4a8e-a4d3-1e3f7a53246b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "270b454b-46b6-4eef-b68f-f77bb49d25b7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a2c2baaa-dda6-4233-89ab-e92f0280c0db"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "43db4954-a0bb-4d1a-8281-01e3708ae0f4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c5bbfa13-4fa4-4a4f-a4e7-55e5e1944bb0"
                }
              }
            ]
          },
          {
            "id": "1054fb4e-b65a-4d6a-8f1f-1e04e7b3e9b2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ab04c8cf-dba1-41b6-9ec4-7222fe64ae5d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5df388a7-235c-44ae-a8a7-dc8c13806d40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "404d10e7-99f4-4745-a2bc-845f8819fb1d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c97e942-ecc8-4ead-8846-6334f5ab1c7a",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "8c8c4d1d-0de3-4899-a494-bfddd5565f06"
                    }
                  }
                ]
              },
              {
                "id": "84434965-e433-47d6-b183-36ac35856cd9",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9cbc5a55-9f4d-48fb-bd06-e0a2f080a095",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a018959a-28f4-4821-b692-a508e6da117d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98eba084-05a7-4f8b-af53-dcb16e9507e8",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "a42dacd8-ac20-4627-b221-6c0ae5958342"
                    }
                  }
                ]
              },
              {
                "id": "7dbdf69d-5d1d-4ad2-9dfd-6dd75a0a3304",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f98f5b96-2257-4cf9-8e14-d09fd4c1cfa1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7afbb7b6-fb8d-4048-a7c2-a7ee895f8483"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "326cc7de-9117-4262-a2e6-396ff064d67e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "33724855-d843-435a-a99e-bd17ecdd1bad"
                    }
                  }
                ]
              },
              {
                "id": "1def455c-a874-4a6e-9d0f-2215152f7576",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3024b33-c7d1-436c-86a5-03b98630a5bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f310c51f-cd4f-4b81-b99b-5645de133477"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "daaf709d-07fb-4d6f-b01d-a16ad7edeacf",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "76d2328e-81e2-4968-92f1-2b3542ed98ff"
                    }
                  }
                ]
              },
              {
                "id": "c59a696b-66ec-41a7-8b13-080f45e027c7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "812725e1-b816-4d9c-a8f0-c08d73b4800f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1b9a7937-35aa-4502-924f-821178d5d0b2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59ca1b93-3954-411f-877b-c41fb083a778",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "4492c373-6b83-4830-9d5a-b680f57b3c11"
                    }
                  }
                ]
              },
              {
                "id": "8c08d860-57cd-4122-8286-e522156479d0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cb55877-f1fd-47d1-8d4c-fa66c467d1ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0df90bbf-1a19-46d1-a6a7-cb1171adfbb7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1ebc546-8f76-4d01-8bd2-74898a3a3fbf",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "d4c0fc63-aa79-40ba-8fb8-d643367fa31b"
                    }
                  }
                ]
              },
              {
                "id": "3ec697d4-bc39-4130-8550-b312a50a3c7d",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "190ff296-b36b-4659-8025-809b67d317ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9e5e2538-cf95-4265-a31f-bee7e92b7583"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0276b2e6-317c-4729-90f1-ba1d8a55be6c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "102b7bc9-ae05-4afd-9133-5b79b8045de4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0b067e39-0683-4b04-a7f4-6902bd7b1970",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2d71d2f8-8086-4823-8d6f-d1b9ea7c77e8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0dcdbafa-acdc-4174-b7bb-e9bb8a4ee953",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "56e73165-0244-420a-911e-9986445bae85"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "48331c5e-c381-44e8-965f-8f29181cf74f",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "560cd204-d9ed-4b9f-9087-5d12321bbded"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "edbda4cb-8896-4ff7-b911-6da247882fae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "011cd87d-be56-4a7b-96a8-f81ffb3ab796"
            }
          }
        ]
      },
      {
        "id": "513df7c3-e4f1-4677-9880-a65aef50f7ce",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e6f78ccd-a7aa-4f7f-937c-50892bb552c2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c59d8ccf-4d66-4636-9a67-1a1d300e9256",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "78b5dbe8-b467-48bb-9858-4de35216df06",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2f3c1c-be3c-4952-a585-97015a487bdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "179942b4-868d-4413-80fe-755428e17ea2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a743f5a-1754-4715-86a1-79eea7a2a2c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88244d21-2907-4b74-b6db-88639c2dcbfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a06a56-fe3b-4564-9fdb-727fdd2ab3a5",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c796c6d5-808d-42d3-8326-ef30840a0d1b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "d4579175-30dc-457c-bbe4-f9840a5022c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84edc70f-b109-45d3-9bc8-11c40bc7c6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6525d38-c493-44b7-8acb-88ac7f583b83"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0bf94ffa-5ff9-42a5-a781-b73bd4e72019",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5809cf51-8dbd-4beb-b093-b363479ed919"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfdeef5a-5664-426a-b70e-9a0759c40d1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "82f5e90c-1437-4025-bd06-9e502da104a0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "72e324c5-fb48-4d7b-b7ca-e271f4daddc8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "ca380bb4-3b80-4d1d-a78b-ddcc3e328ba7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a9711d8b-0c2f-4f64-9125-a72d37b2e735",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aeffa999-3969-4549-9543-d10542abd559"
            }
          }
        ]
      },
      {
        "id": "3bc80823-e546-44f9-add4-08fedff4ee76",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9f818af0-7df4-43bd-9a98-ac3d83a533b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e9af5dbf-755c-4991-a806-88b3b1e4d4ba",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "381d5f66-26f7-431d-a2c7-a96c916f7ea6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f04acfa-32f6-4d5c-a649-8a71c24c2e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4e98040-b591-4a05-a6f8-3bb1ebc34319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25429afc-9fa3-4574-bca1-d58fdde588a4",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e12c6d-87f1-41ba-ba2a-086122b01710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ba2950-815e-44e3-8bb1-eb9bf6997bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f402d261-fe87-42f1-9057-a71884ed9f6e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "717faa95-4274-4800-a20f-f9c407cc5e36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aead8b78-8393-4e05-896c-557365d41a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3c68b44-481b-42bc-b90e-72fb7e6e8f25",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a25914a-1195-412a-8217-5739738a183c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3741bcd8-c06a-46ba-a6d8-47cfeaafda2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a909a910-8f17-4244-a884-e6137def710b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6123c54-a2b9-4059-bb6f-591835ba1a57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f3adcbf-c6d1-43fe-8b54-ead1e881ff9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d2ae93-eda9-4899-985f-8d8864908b6c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3795508-4a54-47d9-9a97-dae5649d087f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d631ccda-6fe1-448a-a0c7-2118c5561dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d0f9ae-5307-4a16-8416-ed17c198259b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b99a1f6-c30f-4924-bf70-57c389b394b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81d2efab-2e23-463d-9b9c-12678011ebcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "020219f2-6580-49de-beca-e9ef5b5dde13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e51c930c-3cc1-4a39-8123-9795a60441fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea331973-5b13-4533-8677-086f343c8e92",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bbd9a21-8d67-405c-a2f8-d502e131cb81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b33d2338-7244-4504-984c-0a14068fa8f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e99835e-68cc-4da5-a531-1323ddebdc5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa763423-757f-40b8-83fe-e3ab048bf666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a175044f-f118-4281-9338-0d3a35d55d72",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2f26c6-3702-4e80-9473-d40971d2bc7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0796ff13-ab26-4c8a-a37b-7a356ce67211"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70be0887-3a62-4d2a-8703-abf848bd488a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec34558e-c326-4e0e-81b7-0b8554de8e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f8e111-713c-4299-8fa3-177d852662c5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38da224b-5d82-47bd-9458-912186ee34bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca00f7ea-0f37-4459-bf2e-6b79ff789d32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcee5fb9-0d5b-42e1-aa3b-637eeed439c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90189539-1dad-4a79-9f77-fb34ad4c56c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253f6bd1-7f5f-4876-b1e5-0c0effd6adff",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ccb0ca8-59c3-442e-b387-a9e498e00e58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef6aa835-e0c3-4edd-8069-31c9b71b4f9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b262134-aabe-4203-934e-bb6958aceb11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e29c7f0a-997d-403a-8427-c6431f6608fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78607fe3-5c68-4b8c-8b8e-145dbbb82498",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a5a1e1-9b0d-4d35-8c3f-d64db1a63c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3008db4-25a9-4a7c-b6cc-ecfcbc1b8654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae2305a0-f756-4a68-a14d-49fc62e74101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0553f063-b02b-4690-b295-0ae0d83de1ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58852293-b19b-4e60-8148-41fc55837a42",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c8872d-1cb2-4ff7-a389-b60359e9ade2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca4118a9-28a9-4f47-81c9-94c83ba16926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6de9db6-594f-4441-82f0-1a67b701e3bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7119d497-cf3d-413a-8436-c6152fdfc440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300d7ad9-83c3-479f-b38d-424327cc0393",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9383885-9f63-4e05-aa6f-af1b02f2b4b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15f423e4-1e4a-4e67-8006-5b7ff41f4546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bffc1f42-3f35-47b5-bede-c825a8bd360e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45f81d29-d3e3-42fa-a209-baea44cd8bca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede146e4-b739-4bc6-a248-82a68c4b8af2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8871039f-1adb-4fd0-b1f3-d638f95871c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ba97404-67ab-4e7b-8c7c-08c25f3fc6a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43b9c19-a1c1-4523-b989-9b3da3586138",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb80aa08-a273-4a4a-a124-0cf8e98289bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e32417-c56b-4c55-93d7-3428f3e35fc5",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8698c7c6-541c-40b2-a892-6d84d4c02285",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd7bd8c9-7b10-43c2-b38f-f2aeb222be9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19522740-6ded-4b07-a71b-0fd4cec75c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6490cf1f-cc25-4a93-aa84-74aa6c4b2c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b3ca20-5fe2-416b-a074-ae294e76f3b5",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b114fd7a-beca-4220-9e6f-e4bd3bf12e2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f8977de-ab01-4ebc-a690-f44a6e2384c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ca778b-a9bb-4469-8767-237e87bcad03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f618f49-5367-404c-a4d8-f60deb9a2ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19062f56-6963-4f92-91dc-8f58fa121199",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c45481-933b-4908-a411-f82369e8b2a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89da6f37-fdb9-40e4-8f14-036ad04384ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1b27ef-dab3-4c96-b94d-4e3cd311998e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17dc5865-1430-48a6-ab16-c53057268506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb31c9d-8ce2-4e56-8b3a-f61f145f4ebe",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d2efe3-4e5d-46bf-8478-9c8863fe32d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58a2fbfc-cd60-4842-9b39-7268879318a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7f93d6-8747-4e85-96d6-a32e163bbeb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2969f983-e574-48e4-bbb4-c318980c7633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958183e5-a890-498d-8a0e-c8a3f6b75602",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88cb90c9-0580-4b4f-a1b4-9d65e7f4582d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10bb5497-b80a-4160-b57e-3e0a07c124b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b818a3f-ee77-4be5-ba00-abe2a2e2a808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7149626a-bb5c-43be-926b-83b2cbd43d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "705dc61f-0cb7-41ec-99ed-f012ddb9674e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107e88b8-9635-4845-a810-f210018317ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "373d8bfe-ae21-494a-b5d6-bab1ca93a0c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3bed9ad-df61-4c95-93c6-583e604f91c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9986f17c-e16f-4fbc-98f0-d73671888b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6199cb12-1a76-48a7-91e7-910bdbbe5e89",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974860cc-a13c-4ca7-b645-86b74828f082",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05dc9760-2ae5-41a8-ba53-a9a28d5d1c10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ff89e0-6a62-47e9-a7d7-4c27bb4ebfc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4251f4e-86b5-40fc-b851-e958dc583a01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af9c0715-e5af-41c9-843b-21cbefed1ea0",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f9e16d5-8c2f-4ea9-9822-643b1fca5b40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec48eab0-90d5-4c79-967c-9f8412f3e90d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03dbb5e-f73e-41c1-a5de-d5d4510b51e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8828c324-f878-4f2d-8bfa-4a8882d52b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a75fa48-5346-4088-996a-515644b2037a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "943224b8-757a-4fb7-859d-ad55e1aa3b20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcab8f85-0e27-4fe2-9767-1754e7bdbdf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1fb3b6-8db8-4cb2-8a94-30847169a59f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82b5bbd6-8079-4433-98b2-fdbc4a49e03a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342c1e45-eb01-4d31-be91-e2648e003e0b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a77aed-34a8-4d7d-a744-290cbf818c7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77becf66-01b7-4c98-a627-f14c0b2cbadc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c58dbae-2728-43ff-b348-4850b2abd68e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b253f9d9-9bfd-43d2-a750-0130255410f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a06c5e86-c434-4a31-94f4-345d5eb07c6b",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "262f5b95-f66c-40f2-961b-714d1f8686d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdb27b8b-c034-4059-9978-b6fe03ac153f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdcd78d2-8a5a-48e9-824c-50dc07d5b0a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3136c174-a160-49e3-9ad7-9a6955962d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f837549a-0f70-4f27-92a2-28fdaecadf0a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06a2fbdd-874b-425b-923f-05a09011d80a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdb14eb2-75d1-42df-88c2-743d4380b12b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ccb275-a807-4984-9480-a8e2cc0e36fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b0868c9-2250-4d6b-ab2d-93750cf24309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4be9be-d182-4bfc-990d-5eb2e6b10c05",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ec8da6-97df-4aa1-9288-4caac3fa217a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39617a16-5a27-400b-b90b-d47bcb5d8d20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91949a64-cdd0-43cf-b8e4-28069ddfb80d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6350b6d-4cae-4135-a779-81d69824d396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a7d1fd-852f-42e9-9ee8-fab550d24ad8",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e7f6937-6dad-41d2-9e4b-71050cf29ff5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8265cbda-23ff-4d9a-8055-4c4df94babf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b521cbb0-11b8-48e3-954c-09a9dd773ba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a51635e-b2c3-4451-a3e6-cab15b938919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a929fe-bbdc-47db-b162-d6bbecae9ff4",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459e435f-1931-4e67-8655-d5fac5809b08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "067ace0a-63f8-4dbf-9e9f-48486b65edbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2030b5b3-bbbd-402c-be36-7a248c9c7da8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c2ce06-a0da-4614-9a0c-7f724655eb97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec5bdd2f-226d-42e7-975a-f937213a46c2",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d190594c-a7d9-4921-bcf0-58e54cb6f287",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "252c9ec0-5fa2-4e7a-bd27-377a85ce46b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29bf1361-4a61-4d88-b611-f5e54cada565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fec09df-94d6-4f23-b431-8e843dab13f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3aa7620-ac9e-40c4-a5f2-9ce3b5f3f169",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c6155b0-a065-47fc-ab81-744d29ee958c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79399813-35b4-4b2a-ba1e-8c9ca93d77d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41143b37-aef2-4f2b-b5e3-e0bd8b50873a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c1accdc-56c7-4d69-8fac-1a5a2f5afa1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc7f2862-5ac6-430e-adb5-fcac061a5df8",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f92f223c-6f85-4a68-9aef-c3379849be91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85c0eb74-26da-4185-aa65-56b4a4b2c80c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "694b263f-b40f-4334-95aa-5797618c16dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "130019bc-c5d0-45ee-8863-c2b81b535732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a90150d-b6a7-477f-8a18-4955b4ce6666",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ea8665-24ad-4b3e-8f6f-2d1d693ea130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "327fa886-9c76-4d31-9f51-02aab4e42cca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc421144-cb21-4b53-b890-eb1fee028918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96ec318f-9246-4f83-b227-07cad7a6728e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c289446f-e501-4b90-8a3a-b5f918855e6f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23759def-30a6-4c31-ae57-96ff743e1c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c96e303-15ab-458b-b047-a4f711b2a6dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4056db81-648e-4362-8270-187736d75fa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e16ebb1-9928-473d-985e-30a1da2b6f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d0b7e0-0b2d-4249-8edc-ef227935063c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adbdb6bd-a91f-401e-9560-003b9b750f4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4236afe-e1b5-4fd4-b9ed-6580419cb3a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ebb49e-53e2-4ed3-80d8-f79351c16252",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc8da712-5fc6-4323-9540-6b1863a9a595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff61148-95bc-43fd-94f9-3103553dda22",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d688dff-2ceb-4b79-a605-488c9f0355ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3326c3bd-ab4e-4b9b-8e9b-b8f1ca2217b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "803a1958-3f24-42c3-ae91-d86431522617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b9edac8-8910-4eba-be6b-ed5b832a7f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2210b0ca-47e8-4e81-85cf-df2312483129",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974f8639-1b2b-4a65-bb96-0ff319130c42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bf40e58-cbc0-4580-91eb-a487ee823e9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9308b6-ce65-4f00-be57-9375d7afadd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aca0d34-315c-4049-8423-d2e212503966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb19ce4-5d4e-41b1-ab3e-3d3f49f28833",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b8afce-4e22-42be-b8f2-0705a160b669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b175edb-055f-4133-8fa8-5f992497c300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35355988-da49-483c-900b-582748cdcc82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b084d18-d04a-441f-9c3b-8e987e89f1cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0172131-92b5-4ba3-8633-d12e4ad8e636",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772b9372-6b60-4298-8e43-cc36801e60dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "499cd8e7-a160-449e-9c6b-c1e3b99e4e12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61fab5e-895a-4c92-ae89-ffddddf89a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "994423dd-0c21-4dcb-8dcb-99e12d178eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "528fed62-e89a-4898-a1df-5e53b851edbd",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab14288-a8b0-4808-af85-5b0edf5e9651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9da1187e-cae8-488a-aa6d-59af35086b9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b15d29-7a6f-4cd2-9f51-a1b8954e47e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c07ac56-3456-4389-bf7c-e36e071f3766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b73db0e0-bdaf-43a3-afa5-d0fa8a2c64d9",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c12313f-f746-4080-b7ac-f69bbbf1923a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da3376bb-6323-421c-984f-8c7a053959f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b374bc-52f9-4589-b4b0-1c49816f23b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43111fac-1871-44f6-92c6-89c1de3de76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c58c44ee-4bd9-4d0d-b1e5-7c65ebeeabc8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1824089-ca17-4564-a14e-a0ad6af511ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c7629d9-0a30-4365-ad91-993376d21b22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01001da-5876-4673-808e-56f9163b5e09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "938d93c0-98ec-437b-b671-ec4bc722ddfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323f7a1d-7bcb-484e-9b01-f2e124a0fbb5",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b18510-9ff7-417e-8038-e56c15ccdf5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a400a43c-ae14-4111-875d-e290e1f98962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a574420-c7e2-474a-b958-e06055462916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bff9331-f5d9-4794-9cc4-8773a193d6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f24073-6416-459b-a083-b807ea2ee925",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7470317-affb-479b-81b0-d6312774c519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f7e25d2-1812-479a-8140-d2f2bf1d1c43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "845ed22a-ac23-454e-b722-23ce66065fbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "243cb2a9-9098-4a5e-86dc-6f1381e24711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bfd0652-43fe-4551-a9b8-abf920bc7c83",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8bdc323-7046-4a2f-a6a8-b1ebc1e1d351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3138312b-1c14-4774-a27c-41f55e9de832"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49947d8c-a052-4bc0-b4d9-def6cc3c4a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b75ca89d-8575-4484-b330-9720a8e120c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4120ddcd-5d84-4286-b3a7-eb8ec94dd804",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097069ba-546d-446e-972a-3e00c3d95d99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44830c0e-c11b-4b2e-b3e3-b8a51c69af88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dfbf54a-a52d-4e31-a785-2ac10f6585ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d513666-fce4-443d-b6bf-9507ea246e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222cfab7-b844-42cb-8ab2-d2540d978926",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41699ac-e30d-4e1e-982f-880a1ac0040e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50920a68-01e5-49e4-a6ba-b9cec779ad0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a73e513-7f55-466a-96fb-f51fb15ff217",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64ce8010-2a6f-4096-b96b-609d2367846a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b090674-56e6-40ce-abbf-e2f530fd869f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d47a0e25-e1af-4f7f-b985-a9887567495f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ab96359-c204-4e15-9490-d0f086997b58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5cc3610-71c2-410d-8531-00e050d3cdfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9d5b170-2e66-4731-b54e-bcc1b89095d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d4c8b83-c93e-46b0-a42c-ff54332ab9f6",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e153074-7dfb-4804-97e5-01f70304a43a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e52d716-e9e9-4441-9c53-4043121d2567"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db36d2b5-69b3-4cf2-befa-0c4071238056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57402f22-b442-4c3c-92c5-ed7b7f7b5552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4400a150-ee32-435d-b830-e1e6717351c0",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3cb10f-6b66-421c-b01e-137fb765f805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2da13492-317e-40da-a3f9-aa7114a7ce54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44fe831-6f38-4e37-b683-e43a12113388",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e77da0db-bfc4-48a2-ab48-893da1487d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e982a6-1c2f-4075-9ed2-9c9baca85fd5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a253534-8240-4bd3-bf69-01f552bed3da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22c2557b-f81e-4831-95cb-b02577190161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff7679f-686d-48c8-aba7-520c805508dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46598409-f14d-42cb-a092-fb9172fb4412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd824237-a94b-4b1c-9d7d-456ab494baef",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea835eed-4c14-45ca-98f1-926e37412d51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8602aca-59af-4a19-9bff-631538b3e252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf5c08c-0e5a-46b2-81f1-6d49dff66bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd4e2dc8-fd94-4fb9-ace1-fb65469eb138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e720c0-88b0-4566-91f5-80c5ea62895b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b5757a-6cde-4d0d-9943-2c81391c54c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06131fb7-9f8e-441a-a005-2231842e4a06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4dd990-70b7-49a1-96a7-abd2e31b6267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce249b51-a929-4bd8-b2b4-7143e65371e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8538b206-3e7d-4418-afcd-89ba06bbf331",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2af77ff-6f0f-4c0a-89d7-ab558ae01132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ebcc8e4-73e3-47bb-bf49-c2b1937073c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "219291da-7b3d-4917-bf83-02b39e51fdef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1bfe8a2-6803-485e-aa46-67c11e01040c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5aff732-0d90-4d2f-a96b-8005d9fa4353",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2300c62-e517-49b5-9fff-cb431ba2d565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c16b5b7f-dc7e-4e78-8abe-cad77699b730"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb181771-400d-4660-acea-0cb919c37778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bc54fbf-298f-4631-ac67-96c9ee971dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f7d5ab-3684-4cca-a54e-2dcdb25993ca",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44a52c6-0e5b-4981-ae7a-0d9c23e6d1f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a70fa2e9-70fe-48f3-8f90-e15cc39d1f2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa21c9d-0796-412f-bdcd-6010cce6cbac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc617dc8-7501-45a5-8314-cb72f7b97778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755bfb7d-9e6e-4e31-b507-1eb83d736c76",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e60a967-d4cc-4343-bb08-ca3f49cce898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0d5bc2-618f-4447-a8af-3969998c7453"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0007ecd2-61d8-435b-8764-66473327243e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24ead22d-e192-4d6c-9f4d-81343fefbbd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d27ff9-7f55-4964-a2be-8554144afe84",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50d09d1-de6f-4c8a-9475-5e7ef965c1f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb0a0345-c7a0-4c48-ba45-390a96bb8a50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da66c3c-7643-4adf-bc19-de74a503417c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4848635b-633d-48b6-ba73-7eef32fbbeda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf413c41-22a1-4ea4-a601-674e35d9a574",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3e9327-af09-4976-8ba5-97616b490122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fa2fff7-df4f-4b58-afab-307e5543151c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13006523-c0b4-4895-8994-79dfeb3a468e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38236769-9f15-47fd-b0ad-eab19fb43637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68293eb-5ed9-4252-bf0b-397ac8835754",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c98c08-e295-4dd9-b1c0-b98a07e61f60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c13c1fc7-417b-48e5-b81c-cace6b5291c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "251674cd-d9d1-4546-beec-a416e0d005a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07a4bfea-230c-4be0-981a-2991a7e980b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f25731-5590-48eb-b0fe-521e734edbf5",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883c2714-7453-4929-b6f3-b07845f4f149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ed2de6d-4f9b-4e01-b55d-ab6c9b3b2a62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d81268e-3a57-4782-8f44-3e48d11f6361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a98f81ce-5c2d-4400-a007-e3cac77fa537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7911ea67-4d85-4595-8727-4af7ace0cc26",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aae3136-0082-4f96-95e3-f6b3965bff66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9d95dff-5702-4f8e-bdc1-4ff9066f0cf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5553b92-a9b2-40d1-bb33-07a9bf689e47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1b20bfe-61dc-4b57-92a1-2996365091df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9854ad2f-53c2-4c9f-b7d6-5572312cda0c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713ebb8c-d760-43bb-803a-e4b4792cab9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5d1fbef-61b9-41e5-81e8-dd34ac8b702e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ce57a8-67c2-41f8-903c-9dabec4850f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38779de5-f9bc-4a21-89e8-e0a40ce05f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e0f5cb-63a6-4f35-99de-60eb22d239ab",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839e8171-2e72-4487-948b-b9e31978c3c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d06ad18a-415c-45a6-ba67-aa41a338c693"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7955794d-117b-4627-9371-32116bd48040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b09e0e-a8d5-4271-bd65-d96627fcd77c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834a8f26-9146-4c59-a5d7-9175d23a6073",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e0d1c2-06b3-4ca7-80da-6c941eca244a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6595f49f-1ca0-4cf0-ad27-7effff4441c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ea77ae-a26e-4507-ab89-fecb3f70deb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b67c966-40d1-48d9-a55c-82dfe057d52a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd75358-077b-496d-80e7-c3d0786c3efb",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f947a9e6-06cf-40d6-b099-38b7b995aa2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d024bcca-61e2-4de7-81ac-b44fbb99eba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5681fd9d-b7bf-4c90-9c71-67bb76f18ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95d27b54-6be8-4cdb-ad4f-b6278416c844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c53625-c91f-45a1-a385-432ad2263c7a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24161e6-b9fc-407b-8fda-6f36af892aef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36d5ddfa-70e9-4930-a8ff-2c6155d7fa35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe438fe-4b45-4309-b841-59bb341aec90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "927b9829-affc-4723-8b9b-56270ed652cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0130075-6d63-4607-98e5-0ba03bdde4f8",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea7a37e8-e0b6-46bf-bec4-f3a9f41a50c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d9014b3-a0ee-43b0-80d2-c502e2892db5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb0ff01-e79b-4821-bcde-3a796e55a384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa59bf60-bdab-4e5a-91d7-82e75626ae7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e1304ad-4e02-42ab-8876-5744a4b72414",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b98a8183-2fe7-4375-b47f-75bb77b64b1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ab2caee-7881-4487-a594-d285d0d719bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f749f3-1d88-44f0-8e1c-5634736720ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebfa36fe-d19e-41a7-8f94-a2ca50a98a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32b3e345-22d4-451c-9584-bd45d0f9dd12",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52d541d-03ca-4103-b446-f33535582f41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ab65c70-5e33-4da5-993e-eb39668b84e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a99738-518a-424e-9096-ce07543d3f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41a776f9-1585-4ef0-8983-c98b39b66127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd50161-f1a4-4ea1-a9c3-15dcbc1128a7",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb3c73a-b105-4945-b0e3-29ea95ebb908",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56fec289-97c3-459b-9105-acdb2384208e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0fc745d-0a93-42ca-bb05-16b764ee98e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea3542aa-e4ab-4d08-95d9-afeadd89a46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9886975-52d3-42ec-b80c-3a1548787404",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "961dc7c1-13df-4fd7-b12c-80533b7cb638",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e2c0747-7b92-4dc9-afc9-93ee46bc48a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "247c1f8c-fbe5-475c-a562-1f5e3614d3ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d058f54-64b4-42b7-8c60-62b7fc9115d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a4116d5-64ed-43b0-830e-a85b768823a0",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15c27d8-6040-4d83-85af-06937dbe6af8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fc55bb9-8ce6-42cb-a6b2-57e6c7827688"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b018ed-03ec-401f-8cdb-5d3e4372cf63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31b47644-5912-4571-9059-ab0d47816b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24de1f75-474f-403b-a630-8c5e0b33bb11",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a78a146-90a0-47f9-9cd8-990aea9adfda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c12b338-7e80-44f3-9d64-1dd83a440cf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d14fde-a232-419b-8077-eecdc5fd92a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eb49bf3-6ab5-4392-8f86-da93f6b8ec56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe97ff5-0811-4afc-b3db-cf9cd03f4527",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f48e65b-9b66-4db8-aee5-3305a6d3e5ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12217f3e-94bf-48b8-976e-06a557463220"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec41ca4-e646-4adb-9b6d-672f36e2ab8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3d50c06-2e62-42b9-a698-a9a3590b817f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00dc1bc-f187-4562-a7dd-cc5483dc3b72",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee14915a-ba65-42de-af72-de96e8f65581",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1865d71-da14-4689-b131-7e6f0ac3f4d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c0efec-8bf3-439f-aee3-e5f6b4accbe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93f77dfc-afd4-498c-be12-01049a8df60a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b7862d-1f8e-46c0-be21-36ce37560bbb",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a03e017-2685-424f-ab1e-85efe618e7fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37f0d296-8205-4d21-bce9-ca5827b67c91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc59820c-e71f-4a93-a83f-805ae586fd90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a9d048-7c0d-4a0a-bfed-b234076ea0b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed389316-6fa4-4fb2-8d64-5d734c7475fa",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6647b9cb-9e0a-483c-89e9-5749bceffd45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb90403c-5a57-4ad6-802c-e7606e9b722f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76f2d0f8-6ec0-4f62-962f-d18695e7e5c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b82e531-f216-44fe-bbe0-a07dcc20314f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ca2c4f-6277-457f-94fc-15e0d13b9bb1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c833f1-a0ed-4d9b-8e00-ac5c45e2c0d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0a2dbc1-20ae-4002-ae50-d99e9d4a9a8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c13036-16c6-4f03-9edb-325a92c6ff3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f359b2e4-452b-44d0-a917-45ed0f09de62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11abee45-4917-46fd-ac25-445fd7a1fdb4",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c42cc9c-2df2-49ef-bbd8-ba78873ff935",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60afafde-de28-41b9-b097-b314475e49ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1affee58-a93c-4b06-ada8-e83e116fe306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0837c260-90e3-429b-b1c0-e9346f5db79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c1531a-3d6a-43c5-8738-95f4da0aacf3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29436ff-5f25-4455-905b-b6763af3a258",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52039be6-7c07-4b37-819d-bdc387ebeb65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dacd4dcc-bac2-4dbf-8b74-6449f0e0ad48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e5262af-a7c1-4bb7-8b5f-2533ecceca23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c196e082-793e-45a3-bce6-40885cd4b77c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e11188d-1064-4581-acab-af2fc736e376",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53e7ca92-b528-42e3-ac85-2e31d32253b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e27df0-9534-4bce-81f9-eeee3a2d3e30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90fec7ea-f282-43ee-af39-77f1043f6b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae4ccb1-802a-4c13-a811-6b489afdcc4e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b28d3d-e786-40a1-ba02-f0a7919d39af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "694e426f-2b73-4fe7-8db4-f693b231bfe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1645bc72-ea2b-4c0d-a25a-48daaf377a47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e84d44c-b50d-4f74-8726-aa139368c45f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6bbbb5a-3e77-4173-8014-a0e6ae9538cb",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1179a34f-a16c-4f9d-836e-356026c94909",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c348a68a-3395-47c1-afa7-8d4ffa73360a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32fa905b-eea7-4823-ae66-f3741525c929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b628947-313e-4d7e-b145-e69e2f29ca36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac69e737-68cf-48a7-8b70-897eaa50c061",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f2aa2b-4a4d-47ee-bcaa-334266db064e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dc3007e-8330-4222-8ba7-22abd981f3c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81dc19aa-269f-4376-b884-ce44da3fd087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "369f9f24-44c0-4969-8938-1a63a3c7453a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a20cafb-c619-4807-8af3-1237aed7b152",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37068345-473b-4bc2-b5aa-be12cf69d8b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86b02027-db4f-487b-b755-b81c6cbfc13f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d0557e-68a6-4e54-bfb6-07c896607803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "898b2cdb-bf5a-48aa-b72a-c7fcffa6c018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64806894-a30a-438e-8541-a63ea1217955",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f71c32-af33-4f55-8895-90d7d994fea7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eeec3033-210b-44cf-9c52-bd57a7d036d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6aaab64-0cfb-4e66-a30a-9af088127695",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80afcb17-eccf-473e-bea8-32c8a5ca8e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f801ad91-1728-46bf-b5a1-4a536c319b46",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf1d309-4240-4eaf-8f1f-ce9a37d562ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38b91c95-482e-458f-ae9c-da550e624810"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34dc21a2-6b44-42d4-8a36-6f4b7a42a2a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daae8fd2-1d88-4997-82c3-4826ab61b03e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0c7ee0-11f9-4ee2-bcea-aca8111d2dbc",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c516bd-45c4-46b4-a570-ffbf69cc385b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a57e1828-b7cd-4d13-abb9-bd7dbb2913d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36bfb934-c9d3-47c0-83e7-a100e9aba4aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e83232ac-8997-4a78-aa31-28a93dbc8c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb614c06-0185-4142-8db3-c186f66afe5e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad362f1-0aac-4aef-b0b6-aaa133760508",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e12a0e3-3914-4863-88a1-c757a94d1908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26290551-289e-40ec-becc-7a167c118f93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a52ef01-a12d-4e21-a7aa-20e02eb33305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7098e7f1-1fca-4f64-b7dd-b534bd8b8a5f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc49f41-19cd-493a-a6cb-dad9a5977576",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "859a888c-eecb-4a20-b965-eda21e789a52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf4da65-8350-44fb-ab81-7dc2e0c2f5b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0bcdacc-b4ef-4704-b448-4c0797e54a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f42e6e9-6fee-4613-b844-21280c5a586c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c40c2e7-cd7d-4bdd-92d0-bda6ccfbf464",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "858ef18e-65e6-4fe7-b388-d605b47356e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "368a5e11-650d-464b-ae01-0d08c244485a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9b8813b-39e7-4b26-85ef-f62ab1056c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028a12a5-89c1-4e96-ba33-4f678137a91e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63cc72c-0b10-4fde-906d-1982a9002da6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcbc6170-15d6-4ebb-b52f-532d277f7cda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f3ff05b-cdf4-41bc-8efa-db8c04b2a951",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04cf7e17-cb79-4968-8220-3f7da04a0f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9895c097-5b2c-4ff6-af35-74765a38f3db",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7ab77c-c5c8-418d-a7a6-c3aca8cbe651",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f37b012b-b8f7-4946-9600-9a541e20f0c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45a3983-d820-4bbf-a4b5-4b73b666f1d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c85feba0-a343-4af6-84e0-0b0463dcf95f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e807951e-30e2-4152-983b-056dab15c22a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "471b4301-f082-4769-a605-fada3c6495b0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e551418c-c2a7-490f-939e-21d6207d8bc7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b71728f7-7cb4-4688-99ad-275aade62040"
                    }
                  }
                ]
              },
              {
                "id": "4f68e10d-86c6-4707-b799-3ea65fb245e4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bdc17f50-ff02-4aba-9e23-6dcc3c7b601f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d593d954-16cc-4cb0-888a-870e66d975e7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0eccd162-56b9-4315-b951-679d9c5ca719"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed71a5c-c632-4c43-9096-207741a12bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35179d31-d32b-4c68-863a-458639d9e727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca70efb-5b2f-4925-9370-61ef0173dd38",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72f332d-501b-4d84-a435-dcf1c752e268",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "244288c4-3dc3-4250-bf65-1ed6ab139e5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37d73ab-cb85-412d-b148-39f96389a2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95645446-3595-451e-a5e9-169f181f1caf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9594a327-54ff-4e23-b514-7d5b656a97a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26ad4216-804c-49fd-b6b5-9973641778aa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6e289d9-fe23-444d-845d-1e43f35e1882",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15b5613d-eb5a-451d-80ee-411939625f02"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "427267f8-5853-4122-9971-d1f9326b3c74",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3ca33f8f-bb7b-4bb0-a337-8d171eddcb9b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44bd9d58-7872-49dd-bf8a-6ada06efb413",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb267eab-f406-42e2-8cd7-51cb11f1bb0b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b65b7256-0b5b-45a0-9c17-a79b09b101fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec988dcd-50fb-4c2d-9515-43fed126021e"
                    }
                  }
                ]
              },
              {
                "id": "16b86e51-5500-4f48-b889-76941717c9a6",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b287a0d8-0854-4b15-9713-bef506690205",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ece5fbf1-9874-4b56-b548-dcc4836a7c62"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "407e905a-021b-4d71-bf3a-101c41be923d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "294ff4b6-dbef-445b-93bf-0231d4220fd3"
                    }
                  }
                ]
              },
              {
                "id": "a2f91e9e-6699-4e0d-bc2e-25093ad0a015",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ae34962-1bcb-4809-b09e-b35cd3b42c1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3a6a2032-4bab-4e99-afaf-86973a36fb74"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "acd430ae-c1f0-43f1-aaa6-c45e393d40dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08b0866a-8f75-4273-93e0-910d85310773"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "068e959f-1f34-4815-acb9-8991235b8b5a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1dab4c6b-8631-430c-9de6-6360acd8a9f1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "21132e9f-f3cd-423d-9a70-80dd547fde0a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "96ea725c-3d98-486b-9d16-57976bb61de9"
            }
          }
        ]
      },
      {
        "id": "ffc34e14-5e07-4991-bbca-f8864b8e00d4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1792df89-2773-4e77-8472-8a08740bef90",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c4ae19ff-61c6-456d-80b0-eab06cca8944",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f57b4a83-12af-4370-99ec-826c35ea469f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d39e839-5dc5-41eb-a84d-19fb4a8bda1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3626db05-b9c8-4bf3-bc7d-1fd6e9adbba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d40069-96f6-4da8-b714-4be6618837ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "797096d9-16ae-41db-beb4-9c87b19d9468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3669e32-8e80-437e-bb04-704071c45a6f",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f817744-4873-445a-9734-57940e014999",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "e72302a5-ae2b-44cc-a438-5c8fee0c3973"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb92e2d-c75f-4be7-9a34-54d38322f00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b7e5f27-a877-481e-afb8-138a2dbda1d2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e4b33e3-b291-4b0c-a7f0-07132237847c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "750e3010-a8bc-4dd2-b5f8-d4b1de1b4118"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "95c13708-d125-402f-b856-dd460e18851a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cb661ee-1304-4b53-bc0b-eb19c7a70375"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e7600485-67ad-4fc8-bc57-5cae34ddd8d4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "0d0b76ef-57a0-4c2e-9048-d48405ab367b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc6c05e0-7e3c-402d-a4af-f1a1dc9cb5a3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f70f62c-64c7-4a8a-9d97-c471734fe1ef"
            }
          }
        ]
      },
      {
        "id": "2c1d9322-bb44-4c75-bd83-af488abe6078",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b6cca868-218e-4a5d-bce8-3d0759ad5870",
            "name": "Negative Testing",
            "item": [
              {
                "id": "99ef2f13-b354-4c96-8c18-36fc7ce66275",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1780e091-c6c7-4464-9b36-757b45374329",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058c14f1-6822-4300-8d81-70e9289424ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6e992f6-a4b0-40c3-ade5-8b395fa13bda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec67d4e2-b2a9-41f6-a0ac-2f218d2082dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62e85be3-0122-462b-b8f6-d42168751cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf7cb0c-2a67-4cd8-9b3f-80923ef57032",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5fe1ba-8a56-4385-8cb7-0b2b24e9c85e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "62457d64-9820-423d-867e-391f1508c00d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c25f1bf-7a9b-4730-8d6e-6bbdb86556ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb0e3604-f86d-45b1-8a32-1b462292b7c2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37c2e5da-cc5e-4566-9db1-e532399c7649",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08456185-51e5-4409-b33c-eeed5b4a52ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "84269c00-11ba-477e-b6ba-39fa873a195c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5eb149f-76e9-4470-a105-d6aa47ae0af0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "93a821b2-48d2-4350-9a20-a53c49e34df6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "3486b667-b12c-4696-9c5f-8590f8a22a34"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "665b94c2-671e-4241-9165-30c4eb80e64f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a57736d8-96c9-47fc-b2cd-107125eb6a66"
            }
          }
        ]
      },
      {
        "id": "df64a127-4ced-4476-975f-af59314cf9d6",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e139bb07-7a1d-447f-98a5-6430582390ce",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1caf085f-b10c-4ea4-b2ca-cb09acd1b44c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7a4fe464-58ad-450b-959e-f0843a63e341",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f42a5ac-11f8-459a-9674-ec181ec9b18b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "111a160a-8749-4c7e-8cc5-07ea0b2d6f62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56387189-6268-4572-b1ec-bf3260a9b5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3cbe408-84d4-465c-a765-82b140f89a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72df418-e5d8-4183-a8fe-a802472ec525",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a152941-d1a0-412c-8dc7-7eeac544f4f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "362affb4-acf5-4b35-9faa-a5b5ff98782b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d6d1bc-68de-489a-90d6-f67108282b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e08933b8-983f-4314-9067-c308b7a6390c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f80329e-e4aa-495f-9f61-00c7469c6006",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f0be38b-79b6-4318-a167-80a5851862ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4fe4b82f-716e-47bb-a880-eb742cc97220",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1aa791eb-2c0c-40b1-9d79-03f5273a867b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "addd7fe6-e88b-4da7-a396-a9b43a16cc9f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "7933260b-53c7-4be1-97c6-58bd4023e6f2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5a4c493f-1e0c-480d-b094-8475970ed8ec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f300016c-b6f9-485f-9a00-cf9d0af3ac1d"
            }
          }
        ]
      },
      {
        "id": "e34feca0-8d02-4cfa-9d71-28de76199643",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "37f2e778-1a39-4902-bae7-8e6d31cbbfe5",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 155,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1211,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 155,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 203,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 155,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 315,
        "pending": 0,
        "failed": 284
      },
      "testScripts": {
        "total": 611,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 600,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 40.42857142857143,
      "responseMin": 11,
      "responseMax": 492,
      "responseSd": 62.146882832065174,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1664413419449,
      "completed": 1664413435456
    },
    "executions": [
      {
        "id": "75bc91dd-94c1-48ab-88d7-abcacb5c66bb",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 155,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d70917e9-5256-422a-8826-2aa1d7040841",
          "httpRequestId": "6d2a67e5-e2cd-463a-af20-02afd94fbf60"
        },
        "item": {
          "id": "75bc91dd-94c1-48ab-88d7-abcacb5c66bb",
          "name": "did_json"
        },
        "response": {
          "id": "57c605c0-4141-4513-b0c9-ac56ca0d6477",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.service[0].type should be array",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.service[0].type should be array\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "7a2c672b-41bd-4321-8be7-8063b15983ba",
        "cursor": {
          "ref": "623cfbb3-2fb6-448c-bd83-3bac22303b2c",
          "length": 155,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "05d3dff7-040d-410a-805b-d980bd5f0fbe"
        },
        "item": {
          "id": "7a2c672b-41bd-4321-8be7-8063b15983ba",
          "name": "did:invalid"
        },
        "response": {
          "id": "1c8ef125-de55-4e79-bb35-890fe377b8f3",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "7a2c672b-41bd-4321-8be7-8063b15983ba",
        "cursor": {
          "ref": "623cfbb3-2fb6-448c-bd83-3bac22303b2c",
          "length": 155,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "05d3dff7-040d-410a-805b-d980bd5f0fbe"
        },
        "item": {
          "id": "7a2c672b-41bd-4321-8be7-8063b15983ba",
          "name": "did:invalid"
        },
        "response": {
          "id": "1c8ef125-de55-4e79-bb35-890fe377b8f3",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "0307834c-b917-4785-abef-b8360832a70b",
        "cursor": {
          "ref": "34f89d6c-e309-4773-9201-666c3847c1ca",
          "length": 155,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5f434d6e-0b19-46bb-96f1-739fad44593e"
        },
        "item": {
          "id": "0307834c-b917-4785-abef-b8360832a70b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3885b3bb-1204-414a-9cec-2c5d9d4b8e30",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 137,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "479753f4-7e1c-4ce7-9cee-02e8b7b40cfc",
        "cursor": {
          "ref": "dcb3d79c-448f-4d9f-8ebc-27831dc87b9d",
          "length": 155,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c0a2c77f-340c-4361-9f0b-e1f943dbbc8c"
        },
        "item": {
          "id": "479753f4-7e1c-4ce7-9cee-02e8b7b40cfc",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "53c456d5-ad7e-4b0b-85fe-5169cf2f5200",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "05803c77-5a6b-4848-a78f-4a51264a3fd4",
        "cursor": {
          "ref": "ac0f0f75-7533-4a0f-8085-72462b374311",
          "length": 155,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9cac6e13-0484-43a7-bc18-ce96509d0019"
        },
        "item": {
          "id": "05803c77-5a6b-4848-a78f-4a51264a3fd4",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ec703e0b-1710-40b6-a96b-9c72586589da",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "4a1cbce4-9b16-432b-b2b7-ed837fa0e72d",
        "cursor": {
          "ref": "7d4e6b53-0380-4572-9201-eb6a5ab4881f",
          "length": 155,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3e6f1331-39cc-4704-8d2b-8a9c94438ec2"
        },
        "item": {
          "id": "4a1cbce4-9b16-432b-b2b7-ed837fa0e72d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1675445c-8428-45bf-b5c2-fff3efe8f9b6",
          "status": "OK",
          "code": 200,
          "responseTime": 262,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "4a1cbce4-9b16-432b-b2b7-ed837fa0e72d",
        "cursor": {
          "ref": "7d4e6b53-0380-4572-9201-eb6a5ab4881f",
          "length": 155,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3e6f1331-39cc-4704-8d2b-8a9c94438ec2"
        },
        "item": {
          "id": "4a1cbce4-9b16-432b-b2b7-ed837fa0e72d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1675445c-8428-45bf-b5c2-fff3efe8f9b6",
          "status": "OK",
          "code": 200,
          "responseTime": 262,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "bd367b8e-e28a-423e-b971-7ae266ed5370",
        "cursor": {
          "ref": "dead77dd-4960-429a-aa6b-54f3c3d1fff6",
          "length": 155,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4d47bb6b-fdf6-4fe5-9e25-98fb407dc8d5"
        },
        "item": {
          "id": "bd367b8e-e28a-423e-b971-7ae266ed5370",
          "name": "identifiers"
        },
        "response": {
          "id": "4fd35408-40e0-4445-a677-7caf5653fc17",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6bfe73-2c7f-40c7-8f6c-8d2a42b75693",
        "cursor": {
          "ref": "8ca611b3-774d-43ba-81f1-7458351ba965",
          "length": 155,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2ccbdae1-e6a7-4dd2-8c67-03a5b098c372"
        },
        "item": {
          "id": "1b6bfe73-2c7f-40c7-8f6c-8d2a42b75693",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9f52b468-717a-4f79-8355-7c9a5eb3a730",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 307,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "1b6bfe73-2c7f-40c7-8f6c-8d2a42b75693",
        "cursor": {
          "ref": "8ca611b3-774d-43ba-81f1-7458351ba965",
          "length": 155,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2ccbdae1-e6a7-4dd2-8c67-03a5b098c372"
        },
        "item": {
          "id": "1b6bfe73-2c7f-40c7-8f6c-8d2a42b75693",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9f52b468-717a-4f79-8355-7c9a5eb3a730",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 307,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "1b6bfe73-2c7f-40c7-8f6c-8d2a42b75693",
        "cursor": {
          "ref": "8ca611b3-774d-43ba-81f1-7458351ba965",
          "length": 155,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2ccbdae1-e6a7-4dd2-8c67-03a5b098c372"
        },
        "item": {
          "id": "1b6bfe73-2c7f-40c7-8f6c-8d2a42b75693",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9f52b468-717a-4f79-8355-7c9a5eb3a730",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 307,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "81d505df-e2b2-4858-9d71-61d767e8a153",
        "cursor": {
          "ref": "d6b5473c-37f3-4560-83d3-2cab58440504",
          "length": 155,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "88039763-ce1c-42c6-8bd0-454a50700068"
        },
        "item": {
          "id": "81d505df-e2b2-4858-9d71-61d767e8a153",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0487a2b3-db1e-4dc7-999d-37820e3a19a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "81d505df-e2b2-4858-9d71-61d767e8a153",
        "cursor": {
          "ref": "d6b5473c-37f3-4560-83d3-2cab58440504",
          "length": 155,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "88039763-ce1c-42c6-8bd0-454a50700068"
        },
        "item": {
          "id": "81d505df-e2b2-4858-9d71-61d767e8a153",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0487a2b3-db1e-4dc7-999d-37820e3a19a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "c6796d06-0dba-4ca4-a603-7f2391768377",
        "cursor": {
          "ref": "0b80a892-5d9d-4a84-8db9-a4f4a8437b10",
          "length": 155,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ac59dda9-4bac-457b-b285-2819e20c8809"
        },
        "item": {
          "id": "c6796d06-0dba-4ca4-a603-7f2391768377",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "6eada3a2-5e84-45c8-8660-2ac032521e38",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "c6796d06-0dba-4ca4-a603-7f2391768377",
        "cursor": {
          "ref": "0b80a892-5d9d-4a84-8db9-a4f4a8437b10",
          "length": 155,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ac59dda9-4bac-457b-b285-2819e20c8809"
        },
        "item": {
          "id": "c6796d06-0dba-4ca4-a603-7f2391768377",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "6eada3a2-5e84-45c8-8660-2ac032521e38",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "e20aba87-b028-4400-a064-f655ee9fbf04",
        "cursor": {
          "ref": "f54e23f2-8ccb-4227-b45c-e88115347cd8",
          "length": 155,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c3340333-00e4-4cb8-988a-39e878ef9131"
        },
        "item": {
          "id": "e20aba87-b028-4400-a064-f655ee9fbf04",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "5514de43-6e62-4de4-b34b-3197aa124d2d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "e20aba87-b028-4400-a064-f655ee9fbf04",
        "cursor": {
          "ref": "f54e23f2-8ccb-4227-b45c-e88115347cd8",
          "length": 155,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c3340333-00e4-4cb8-988a-39e878ef9131"
        },
        "item": {
          "id": "e20aba87-b028-4400-a064-f655ee9fbf04",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "5514de43-6e62-4de4-b34b-3197aa124d2d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "6957cd85-5e13-41b9-ba24-46ebb08958ce",
        "cursor": {
          "ref": "000d9852-90f7-4761-92f1-3da90c4e23cd",
          "length": 155,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8cf51ed2-1145-4be8-bdf0-e5a7c29e5941"
        },
        "item": {
          "id": "6957cd85-5e13-41b9-ba24-46ebb08958ce",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "90b95b2b-6666-4690-8f39-dbecc4745ef5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "6957cd85-5e13-41b9-ba24-46ebb08958ce",
        "cursor": {
          "ref": "000d9852-90f7-4761-92f1-3da90c4e23cd",
          "length": 155,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8cf51ed2-1145-4be8-bdf0-e5a7c29e5941"
        },
        "item": {
          "id": "6957cd85-5e13-41b9-ba24-46ebb08958ce",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "90b95b2b-6666-4690-8f39-dbecc4745ef5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "9d7c3c59-6459-40aa-96e9-19615315cb2e",
        "cursor": {
          "ref": "97d4c0ec-eae2-407c-bb1c-358b34d1fea1",
          "length": 155,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1642492f-3e45-4656-ba91-d45a0244927c"
        },
        "item": {
          "id": "9d7c3c59-6459-40aa-96e9-19615315cb2e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a954fd19-c56b-4ed6-8e38-6add308228be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "9d7c3c59-6459-40aa-96e9-19615315cb2e",
        "cursor": {
          "ref": "97d4c0ec-eae2-407c-bb1c-358b34d1fea1",
          "length": 155,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1642492f-3e45-4656-ba91-d45a0244927c"
        },
        "item": {
          "id": "9d7c3c59-6459-40aa-96e9-19615315cb2e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a954fd19-c56b-4ed6-8e38-6add308228be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "c7b48fdf-6f35-4301-a178-56b5f331ab7d",
        "cursor": {
          "ref": "45679ae3-996a-488b-a6a4-707749019a3d",
          "length": 155,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cd11141a-c402-4ea1-aca5-3b35f05f578f"
        },
        "item": {
          "id": "c7b48fdf-6f35-4301-a178-56b5f331ab7d",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "57034396-9b2d-4431-8cbd-824ca2cc2aa9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "c7b48fdf-6f35-4301-a178-56b5f331ab7d",
        "cursor": {
          "ref": "45679ae3-996a-488b-a6a4-707749019a3d",
          "length": 155,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cd11141a-c402-4ea1-aca5-3b35f05f578f"
        },
        "item": {
          "id": "c7b48fdf-6f35-4301-a178-56b5f331ab7d",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "57034396-9b2d-4431-8cbd-824ca2cc2aa9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "3414a525-0bce-4050-81e9-49fd24295495",
        "cursor": {
          "ref": "b91583d1-f55b-451d-a15a-f90e88ad0453",
          "length": 155,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ef731a64-ebd6-4adf-b0b6-2b258448aad5"
        },
        "item": {
          "id": "3414a525-0bce-4050-81e9-49fd24295495",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "0b04e83d-437f-477f-9a2b-b2f80808857b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "3414a525-0bce-4050-81e9-49fd24295495",
        "cursor": {
          "ref": "b91583d1-f55b-451d-a15a-f90e88ad0453",
          "length": 155,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ef731a64-ebd6-4adf-b0b6-2b258448aad5"
        },
        "item": {
          "id": "3414a525-0bce-4050-81e9-49fd24295495",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "0b04e83d-437f-477f-9a2b-b2f80808857b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "5f0d3510-ec23-42d9-8f21-6b82dc5a3f52",
        "cursor": {
          "ref": "25188f49-1ab1-46ba-9982-760bc0ca9268",
          "length": 155,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ccdeda2b-f0bb-4837-9e79-bbfaca411675"
        },
        "item": {
          "id": "5f0d3510-ec23-42d9-8f21-6b82dc5a3f52",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ccc7f36c-2111-44b0-89e1-2776b1c014a8",
          "status": "Created",
          "code": 201,
          "responseTime": 54,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "5f0d3510-ec23-42d9-8f21-6b82dc5a3f52",
        "cursor": {
          "ref": "25188f49-1ab1-46ba-9982-760bc0ca9268",
          "length": 155,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ccdeda2b-f0bb-4837-9e79-bbfaca411675"
        },
        "item": {
          "id": "5f0d3510-ec23-42d9-8f21-6b82dc5a3f52",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ccc7f36c-2111-44b0-89e1-2776b1c014a8",
          "status": "Created",
          "code": 201,
          "responseTime": 54,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "73430b4e-e435-472f-8525-15154fa944fb",
        "cursor": {
          "ref": "d9ae194c-f65d-4b71-aebd-90ad8f886026",
          "length": 155,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b656a863-794a-4503-bf13-cd5225bcca31"
        },
        "item": {
          "id": "73430b4e-e435-472f-8525-15154fa944fb",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "4e7824fc-996a-42b5-bcfd-1e7e3a30bcc7",
          "status": "Created",
          "code": 201,
          "responseTime": 42,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "73430b4e-e435-472f-8525-15154fa944fb",
        "cursor": {
          "ref": "d9ae194c-f65d-4b71-aebd-90ad8f886026",
          "length": 155,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b656a863-794a-4503-bf13-cd5225bcca31"
        },
        "item": {
          "id": "73430b4e-e435-472f-8525-15154fa944fb",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "4e7824fc-996a-42b5-bcfd-1e7e3a30bcc7",
          "status": "Created",
          "code": 201,
          "responseTime": 42,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "5e5f034a-27d4-4da9-acc7-3297bdaa296b",
        "cursor": {
          "ref": "a845453c-81a3-43ff-9cb0-bf08fe1d7e64",
          "length": 155,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a1f97b47-f587-46ef-94cf-16f67a4760a8"
        },
        "item": {
          "id": "5e5f034a-27d4-4da9-acc7-3297bdaa296b",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "5dc1a969-babb-4bef-9eeb-ac8d29b4d530",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "5e5f034a-27d4-4da9-acc7-3297bdaa296b",
        "cursor": {
          "ref": "a845453c-81a3-43ff-9cb0-bf08fe1d7e64",
          "length": 155,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a1f97b47-f587-46ef-94cf-16f67a4760a8"
        },
        "item": {
          "id": "5e5f034a-27d4-4da9-acc7-3297bdaa296b",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "5dc1a969-babb-4bef-9eeb-ac8d29b4d530",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "c98b466a-86aa-4ca3-af77-e7bb29842d35",
        "cursor": {
          "ref": "91fb9fae-730b-4776-b16d-5339da0e7590",
          "length": 155,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0580ec55-c77a-47cf-a62c-b15ddbcab29c"
        },
        "item": {
          "id": "c98b466a-86aa-4ca3-af77-e7bb29842d35",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "93e5da49-317e-4519-baeb-834a696c1d5b",
          "status": "Created",
          "code": 201,
          "responseTime": 42,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "c98b466a-86aa-4ca3-af77-e7bb29842d35",
        "cursor": {
          "ref": "91fb9fae-730b-4776-b16d-5339da0e7590",
          "length": 155,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0580ec55-c77a-47cf-a62c-b15ddbcab29c"
        },
        "item": {
          "id": "c98b466a-86aa-4ca3-af77-e7bb29842d35",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "93e5da49-317e-4519-baeb-834a696c1d5b",
          "status": "Created",
          "code": 201,
          "responseTime": 42,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "563bb1ec-e8d5-4bb4-9e9f-57a80a5bb298",
        "cursor": {
          "ref": "25e438a7-569e-4c07-ba34-be78de6eb49f",
          "length": 155,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "af8c0a4e-9c1f-4039-905f-adc7a6485e48"
        },
        "item": {
          "id": "563bb1ec-e8d5-4bb4-9e9f-57a80a5bb298",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "104b39cd-e082-4d9f-b893-3bf9d9625715",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "563bb1ec-e8d5-4bb4-9e9f-57a80a5bb298",
        "cursor": {
          "ref": "25e438a7-569e-4c07-ba34-be78de6eb49f",
          "length": 155,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "af8c0a4e-9c1f-4039-905f-adc7a6485e48"
        },
        "item": {
          "id": "563bb1ec-e8d5-4bb4-9e9f-57a80a5bb298",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "104b39cd-e082-4d9f-b893-3bf9d9625715",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "da287ca0-5c7b-4c17-a8e5-de4350390ba4",
        "cursor": {
          "ref": "da397c6c-c215-4483-98f6-6e2b7ae7f4c6",
          "length": 155,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "988ea91f-d29c-44b5-b920-98c4f359e535"
        },
        "item": {
          "id": "da287ca0-5c7b-4c17-a8e5-de4350390ba4",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "48b710fa-6db9-462c-9f9b-471744442d63",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "da287ca0-5c7b-4c17-a8e5-de4350390ba4",
        "cursor": {
          "ref": "da397c6c-c215-4483-98f6-6e2b7ae7f4c6",
          "length": 155,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "988ea91f-d29c-44b5-b920-98c4f359e535"
        },
        "item": {
          "id": "da287ca0-5c7b-4c17-a8e5-de4350390ba4",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "48b710fa-6db9-462c-9f9b-471744442d63",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "cc353ee4-4942-4d81-93bb-048e0ac593a8",
        "cursor": {
          "ref": "bd45cc48-b40b-4ccc-8dad-792b61ec48b1",
          "length": 155,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "146b4a7c-1579-4e52-936b-36d746aae75e"
        },
        "item": {
          "id": "cc353ee4-4942-4d81-93bb-048e0ac593a8",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "4a693c9e-e1d7-4394-acd5-992f1cb090a1",
          "status": "Created",
          "code": 201,
          "responseTime": 51,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "cc353ee4-4942-4d81-93bb-048e0ac593a8",
        "cursor": {
          "ref": "bd45cc48-b40b-4ccc-8dad-792b61ec48b1",
          "length": 155,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "146b4a7c-1579-4e52-936b-36d746aae75e"
        },
        "item": {
          "id": "cc353ee4-4942-4d81-93bb-048e0ac593a8",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "4a693c9e-e1d7-4394-acd5-992f1cb090a1",
          "status": "Created",
          "code": 201,
          "responseTime": 51,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "2322dd92-64f1-4505-8425-3a78a601a7ce",
        "cursor": {
          "ref": "56c7235d-4f08-422c-a163-5811e1365186",
          "length": 155,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2df6ee0e-f576-46a5-b11f-770f679a0a1f"
        },
        "item": {
          "id": "2322dd92-64f1-4505-8425-3a78a601a7ce",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a54e48b0-9937-47da-97ee-aae318f1ab46",
          "status": "Created",
          "code": 201,
          "responseTime": 40,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "2322dd92-64f1-4505-8425-3a78a601a7ce",
        "cursor": {
          "ref": "56c7235d-4f08-422c-a163-5811e1365186",
          "length": 155,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2df6ee0e-f576-46a5-b11f-770f679a0a1f"
        },
        "item": {
          "id": "2322dd92-64f1-4505-8425-3a78a601a7ce",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a54e48b0-9937-47da-97ee-aae318f1ab46",
          "status": "Created",
          "code": 201,
          "responseTime": 40,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "e84685da-4aa1-4b62-8d16-c890edc2beb4",
        "cursor": {
          "ref": "dc229305-a4ff-4e51-bfef-add2df4443ad",
          "length": 155,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6add898e-1652-4b28-8f0f-5c924377d81c"
        },
        "item": {
          "id": "e84685da-4aa1-4b62-8d16-c890edc2beb4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d2661b15-584d-461c-8b06-148052548b06",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "e84685da-4aa1-4b62-8d16-c890edc2beb4",
        "cursor": {
          "ref": "dc229305-a4ff-4e51-bfef-add2df4443ad",
          "length": 155,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6add898e-1652-4b28-8f0f-5c924377d81c"
        },
        "item": {
          "id": "e84685da-4aa1-4b62-8d16-c890edc2beb4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d2661b15-584d-461c-8b06-148052548b06",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "11b36e2f-578a-4689-8ff0-83f9b2ba3c85",
        "cursor": {
          "ref": "2574107b-5df3-4479-8e7a-7c580d56e18e",
          "length": 155,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "835efa6b-f9b0-4dc5-a1e5-f7e6f5ed14df"
        },
        "item": {
          "id": "11b36e2f-578a-4689-8ff0-83f9b2ba3c85",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "84bda39f-5831-4fb7-b1a0-943d47b3e7ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "11b36e2f-578a-4689-8ff0-83f9b2ba3c85",
        "cursor": {
          "ref": "2574107b-5df3-4479-8e7a-7c580d56e18e",
          "length": 155,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "835efa6b-f9b0-4dc5-a1e5-f7e6f5ed14df"
        },
        "item": {
          "id": "11b36e2f-578a-4689-8ff0-83f9b2ba3c85",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "84bda39f-5831-4fb7-b1a0-943d47b3e7ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "37c818bf-634b-4a27-8737-f9bcb99f245b",
        "cursor": {
          "ref": "67d6b580-c40e-4230-8d31-bd072e50217a",
          "length": 155,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4fde1990-d87d-4db4-a081-d6f5b20a0fe0"
        },
        "item": {
          "id": "37c818bf-634b-4a27-8737-f9bcb99f245b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "eb7078da-481c-4b58-abde-833e27f5f812",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "37c818bf-634b-4a27-8737-f9bcb99f245b",
        "cursor": {
          "ref": "67d6b580-c40e-4230-8d31-bd072e50217a",
          "length": 155,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4fde1990-d87d-4db4-a081-d6f5b20a0fe0"
        },
        "item": {
          "id": "37c818bf-634b-4a27-8737-f9bcb99f245b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "eb7078da-481c-4b58-abde-833e27f5f812",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "5a832d0c-2849-433e-942b-bb73776f7b43",
        "cursor": {
          "ref": "dbec02a8-04f2-4c6a-adc6-da8d60544428",
          "length": 155,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e7e5a479-41da-4609-8277-8dc92f19ac70"
        },
        "item": {
          "id": "5a832d0c-2849-433e-942b-bb73776f7b43",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "20a536d6-9b59-45a1-9749-88ee1e7808c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "5a832d0c-2849-433e-942b-bb73776f7b43",
        "cursor": {
          "ref": "dbec02a8-04f2-4c6a-adc6-da8d60544428",
          "length": 155,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e7e5a479-41da-4609-8277-8dc92f19ac70"
        },
        "item": {
          "id": "5a832d0c-2849-433e-942b-bb73776f7b43",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "20a536d6-9b59-45a1-9749-88ee1e7808c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "869b71a6-0023-4b11-ada0-7638f57bdc0b",
        "cursor": {
          "ref": "b31fccd0-b5fd-494d-9e11-b150cab6c55a",
          "length": 155,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3ddbfec2-b4ec-4df0-a700-5d690f6d16b2"
        },
        "item": {
          "id": "869b71a6-0023-4b11-ada0-7638f57bdc0b",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "7a8a5f33-623b-4b38-94dd-8b312e78fd1b",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "869b71a6-0023-4b11-ada0-7638f57bdc0b",
        "cursor": {
          "ref": "b31fccd0-b5fd-494d-9e11-b150cab6c55a",
          "length": 155,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3ddbfec2-b4ec-4df0-a700-5d690f6d16b2"
        },
        "item": {
          "id": "869b71a6-0023-4b11-ada0-7638f57bdc0b",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "7a8a5f33-623b-4b38-94dd-8b312e78fd1b",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "a770b256-7657-41e6-b7e0-1ed91fb234dc",
        "cursor": {
          "ref": "4c42fef3-3cce-4a12-adcb-a711d40f4a7f",
          "length": 155,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7456e19c-1bdf-4b30-9383-e8d03feec72e"
        },
        "item": {
          "id": "a770b256-7657-41e6-b7e0-1ed91fb234dc",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "888458d4-bf73-48d1-aeb0-f37a3dece24a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "a770b256-7657-41e6-b7e0-1ed91fb234dc",
        "cursor": {
          "ref": "4c42fef3-3cce-4a12-adcb-a711d40f4a7f",
          "length": 155,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7456e19c-1bdf-4b30-9383-e8d03feec72e"
        },
        "item": {
          "id": "a770b256-7657-41e6-b7e0-1ed91fb234dc",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "888458d4-bf73-48d1-aeb0-f37a3dece24a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "4fe8441c-7e67-4605-ac0e-3044139f178b",
        "cursor": {
          "ref": "b7809503-0a06-4178-bfd1-5b10a9dea7c4",
          "length": 155,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8fe09a01-d86b-496c-bcdb-e1a4382ef702"
        },
        "item": {
          "id": "4fe8441c-7e67-4605-ac0e-3044139f178b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "7edc2d04-d5a8-4bdd-a540-4f8a372f2215",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "4fe8441c-7e67-4605-ac0e-3044139f178b",
        "cursor": {
          "ref": "b7809503-0a06-4178-bfd1-5b10a9dea7c4",
          "length": 155,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8fe09a01-d86b-496c-bcdb-e1a4382ef702"
        },
        "item": {
          "id": "4fe8441c-7e67-4605-ac0e-3044139f178b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "7edc2d04-d5a8-4bdd-a540-4f8a372f2215",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "9ccc5b33-3dea-4e3e-adc4-9d67ffc9e28e",
        "cursor": {
          "ref": "964ed923-0ac5-442a-99e0-3eb820c01375",
          "length": 155,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6fba1820-dd50-44f2-b15a-14560ae4c3f2"
        },
        "item": {
          "id": "9ccc5b33-3dea-4e3e-adc4-9d67ffc9e28e",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "44c51015-54fa-40c0-96ee-6ac32bd93496",
          "status": "Created",
          "code": 201,
          "responseTime": 46,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "9ccc5b33-3dea-4e3e-adc4-9d67ffc9e28e",
        "cursor": {
          "ref": "964ed923-0ac5-442a-99e0-3eb820c01375",
          "length": 155,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6fba1820-dd50-44f2-b15a-14560ae4c3f2"
        },
        "item": {
          "id": "9ccc5b33-3dea-4e3e-adc4-9d67ffc9e28e",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "44c51015-54fa-40c0-96ee-6ac32bd93496",
          "status": "Created",
          "code": 201,
          "responseTime": 46,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "801a6e4d-8c30-46fa-adbb-dca6b7923f3b",
        "cursor": {
          "ref": "b5b42daa-9fdc-4537-93c8-d3460f889b42",
          "length": 155,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2240921b-a74b-4361-8469-21e14af99377"
        },
        "item": {
          "id": "801a6e4d-8c30-46fa-adbb-dca6b7923f3b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "69f499c2-5af7-4da2-b236-27007badeb6e",
          "status": "Created",
          "code": 201,
          "responseTime": 44,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "801a6e4d-8c30-46fa-adbb-dca6b7923f3b",
        "cursor": {
          "ref": "b5b42daa-9fdc-4537-93c8-d3460f889b42",
          "length": 155,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2240921b-a74b-4361-8469-21e14af99377"
        },
        "item": {
          "id": "801a6e4d-8c30-46fa-adbb-dca6b7923f3b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "69f499c2-5af7-4da2-b236-27007badeb6e",
          "status": "Created",
          "code": 201,
          "responseTime": 44,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "2dfeadfe-0b8f-4f78-a7e9-c0d25a5b6ac5",
        "cursor": {
          "ref": "7dc12031-d6bf-4e83-92fe-476a570face3",
          "length": 155,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "71515a99-53a5-4b66-89bf-56ef302818e1"
        },
        "item": {
          "id": "2dfeadfe-0b8f-4f78-a7e9-c0d25a5b6ac5",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "b10137d0-1dbd-4c1e-b82f-bf7b8dca934c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "2dfeadfe-0b8f-4f78-a7e9-c0d25a5b6ac5",
        "cursor": {
          "ref": "7dc12031-d6bf-4e83-92fe-476a570face3",
          "length": 155,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "71515a99-53a5-4b66-89bf-56ef302818e1"
        },
        "item": {
          "id": "2dfeadfe-0b8f-4f78-a7e9-c0d25a5b6ac5",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "b10137d0-1dbd-4c1e-b82f-bf7b8dca934c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "b8048c69-fa37-475f-8498-ad8ba14594c5",
        "cursor": {
          "ref": "2f6616d0-c0b8-4653-aa50-bf6f1a1d9da8",
          "length": 155,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7cd34307-1b9c-4396-afa6-c13c78c0a884"
        },
        "item": {
          "id": "b8048c69-fa37-475f-8498-ad8ba14594c5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "797cdd61-d508-4d38-a99d-221be93a8b3a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "b8048c69-fa37-475f-8498-ad8ba14594c5",
        "cursor": {
          "ref": "2f6616d0-c0b8-4653-aa50-bf6f1a1d9da8",
          "length": 155,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7cd34307-1b9c-4396-afa6-c13c78c0a884"
        },
        "item": {
          "id": "b8048c69-fa37-475f-8498-ad8ba14594c5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "797cdd61-d508-4d38-a99d-221be93a8b3a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "376514ec-1ea9-479f-9565-84ed38a97eb7",
        "cursor": {
          "ref": "46b74c7e-4264-4607-b7c7-adb5dd3c2b58",
          "length": 155,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "87d88b44-1c6a-4591-b045-f6c8d44ea95a"
        },
        "item": {
          "id": "376514ec-1ea9-479f-9565-84ed38a97eb7",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "d484d263-ec55-4f1d-82d3-ff4005d8c9df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "376514ec-1ea9-479f-9565-84ed38a97eb7",
        "cursor": {
          "ref": "46b74c7e-4264-4607-b7c7-adb5dd3c2b58",
          "length": 155,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "87d88b44-1c6a-4591-b045-f6c8d44ea95a"
        },
        "item": {
          "id": "376514ec-1ea9-479f-9565-84ed38a97eb7",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "d484d263-ec55-4f1d-82d3-ff4005d8c9df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "8bcbd37f-02ae-4b35-9789-6addb2d166a0",
        "cursor": {
          "ref": "1c6aa3b4-9144-44a8-ab52-973e2b8e2028",
          "length": 155,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "376597c4-10a6-4d1d-ba6b-c73738f0b85d"
        },
        "item": {
          "id": "8bcbd37f-02ae-4b35-9789-6addb2d166a0",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "a0884f7a-5aec-4a40-812f-dbae1efeee5d",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "8bcbd37f-02ae-4b35-9789-6addb2d166a0",
        "cursor": {
          "ref": "1c6aa3b4-9144-44a8-ab52-973e2b8e2028",
          "length": 155,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "376597c4-10a6-4d1d-ba6b-c73738f0b85d"
        },
        "item": {
          "id": "8bcbd37f-02ae-4b35-9789-6addb2d166a0",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "a0884f7a-5aec-4a40-812f-dbae1efeee5d",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "902d9382-68e3-4288-a532-c5f151fa147b",
        "cursor": {
          "ref": "df940415-7131-4c65-9d39-ea8e8e9f1299",
          "length": 155,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "38b33ede-0e22-4ef7-af6d-f0d770b91d46"
        },
        "item": {
          "id": "902d9382-68e3-4288-a532-c5f151fa147b",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "5a987e11-7c3c-4c72-ad62-b8cc06c01dc0",
          "status": "Created",
          "code": 201,
          "responseTime": 54,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "902d9382-68e3-4288-a532-c5f151fa147b",
        "cursor": {
          "ref": "df940415-7131-4c65-9d39-ea8e8e9f1299",
          "length": 155,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "38b33ede-0e22-4ef7-af6d-f0d770b91d46"
        },
        "item": {
          "id": "902d9382-68e3-4288-a532-c5f151fa147b",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "5a987e11-7c3c-4c72-ad62-b8cc06c01dc0",
          "status": "Created",
          "code": 201,
          "responseTime": 54,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "46b80b37-7603-4001-9afa-6bfea0f3c80f",
        "cursor": {
          "ref": "526b8f89-4bea-4dc3-ba93-404cd0711000",
          "length": 155,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b74d72ce-8d8a-4097-9e39-f6e14fa67575"
        },
        "item": {
          "id": "46b80b37-7603-4001-9afa-6bfea0f3c80f",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "e23c40bc-44fe-4452-bfd1-40f3645113c6",
          "status": "Created",
          "code": 201,
          "responseTime": 40,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "46b80b37-7603-4001-9afa-6bfea0f3c80f",
        "cursor": {
          "ref": "526b8f89-4bea-4dc3-ba93-404cd0711000",
          "length": 155,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b74d72ce-8d8a-4097-9e39-f6e14fa67575"
        },
        "item": {
          "id": "46b80b37-7603-4001-9afa-6bfea0f3c80f",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "e23c40bc-44fe-4452-bfd1-40f3645113c6",
          "status": "Created",
          "code": 201,
          "responseTime": 40,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "60ad75fa-7c79-456e-9243-29b0f6544be0",
        "cursor": {
          "ref": "e7c5ee93-7f42-46d4-8b5c-7369a6388052",
          "length": 155,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "13ad7545-2c9f-4055-8939-9adf7e8baa55"
        },
        "item": {
          "id": "60ad75fa-7c79-456e-9243-29b0f6544be0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "bf32d04b-63a8-4101-b6a0-beb36b5fb51d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "60ad75fa-7c79-456e-9243-29b0f6544be0",
        "cursor": {
          "ref": "e7c5ee93-7f42-46d4-8b5c-7369a6388052",
          "length": 155,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "13ad7545-2c9f-4055-8939-9adf7e8baa55"
        },
        "item": {
          "id": "60ad75fa-7c79-456e-9243-29b0f6544be0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "bf32d04b-63a8-4101-b6a0-beb36b5fb51d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "eb0dd44a-92fe-4ec3-b604-23a3b7b4c6bd",
        "cursor": {
          "ref": "a31d1f84-0c9d-4654-ae28-9464a9c81b60",
          "length": 155,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "78d1c742-46b7-4ae6-a986-7a8b9547a133"
        },
        "item": {
          "id": "eb0dd44a-92fe-4ec3-b604-23a3b7b4c6bd",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "5429a5cd-9fdf-4f84-8c33-b3e2993677cc",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "eb0dd44a-92fe-4ec3-b604-23a3b7b4c6bd",
        "cursor": {
          "ref": "a31d1f84-0c9d-4654-ae28-9464a9c81b60",
          "length": 155,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "78d1c742-46b7-4ae6-a986-7a8b9547a133"
        },
        "item": {
          "id": "eb0dd44a-92fe-4ec3-b604-23a3b7b4c6bd",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "5429a5cd-9fdf-4f84-8c33-b3e2993677cc",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ab04c8cf-dba1-41b6-9ec4-7222fe64ae5d",
        "cursor": {
          "ref": "b2082c59-91c2-4abf-8e7f-1a384e7d4012",
          "length": 155,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7b1747d1-0d13-471f-9496-4f7065c0d4bf"
        },
        "item": {
          "id": "ab04c8cf-dba1-41b6-9ec4-7222fe64ae5d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "04039b36-4123-4594-938e-f4c58970047e",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab04c8cf-dba1-41b6-9ec4-7222fe64ae5d",
        "cursor": {
          "ref": "b2082c59-91c2-4abf-8e7f-1a384e7d4012",
          "length": 155,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7b1747d1-0d13-471f-9496-4f7065c0d4bf"
        },
        "item": {
          "id": "ab04c8cf-dba1-41b6-9ec4-7222fe64ae5d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "04039b36-4123-4594-938e-f4c58970047e",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "84434965-e433-47d6-b183-36ac35856cd9",
        "cursor": {
          "ref": "5ff55c84-09bb-472c-86e7-1a7d6fd9107e",
          "length": 155,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "691483c7-6bc6-4436-ad13-d67233c54232"
        },
        "item": {
          "id": "84434965-e433-47d6-b183-36ac35856cd9",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "4446a545-d18e-422d-99cf-b9e40c72a5e2",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84434965-e433-47d6-b183-36ac35856cd9",
        "cursor": {
          "ref": "5ff55c84-09bb-472c-86e7-1a7d6fd9107e",
          "length": 155,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "691483c7-6bc6-4436-ad13-d67233c54232"
        },
        "item": {
          "id": "84434965-e433-47d6-b183-36ac35856cd9",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "4446a545-d18e-422d-99cf-b9e40c72a5e2",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dbdf69d-5d1d-4ad2-9dfd-6dd75a0a3304",
        "cursor": {
          "ref": "f0846d73-8009-4f0e-8821-b0e64aaa56a6",
          "length": 155,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "00d3b991-acaf-440f-9315-97f0ff00a190"
        },
        "item": {
          "id": "7dbdf69d-5d1d-4ad2-9dfd-6dd75a0a3304",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "49fd50a5-e7b2-46c5-96ab-4625bb735e1a",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "7dbdf69d-5d1d-4ad2-9dfd-6dd75a0a3304",
        "cursor": {
          "ref": "f0846d73-8009-4f0e-8821-b0e64aaa56a6",
          "length": 155,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "00d3b991-acaf-440f-9315-97f0ff00a190"
        },
        "item": {
          "id": "7dbdf69d-5d1d-4ad2-9dfd-6dd75a0a3304",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "49fd50a5-e7b2-46c5-96ab-4625bb735e1a",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "1def455c-a874-4a6e-9d0f-2215152f7576",
        "cursor": {
          "ref": "937e9b28-bb53-488b-b95e-c368051fee15",
          "length": 155,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "45750dc4-7800-4d4b-94d5-b8928a6e01d6"
        },
        "item": {
          "id": "1def455c-a874-4a6e-9d0f-2215152f7576",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ede9e4f2-10c8-47e0-bb1e-cd20db2f9871",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1def455c-a874-4a6e-9d0f-2215152f7576",
        "cursor": {
          "ref": "937e9b28-bb53-488b-b95e-c368051fee15",
          "length": 155,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "45750dc4-7800-4d4b-94d5-b8928a6e01d6"
        },
        "item": {
          "id": "1def455c-a874-4a6e-9d0f-2215152f7576",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ede9e4f2-10c8-47e0-bb1e-cd20db2f9871",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c59a696b-66ec-41a7-8b13-080f45e027c7",
        "cursor": {
          "ref": "f3f56ef1-b825-4454-aad4-33574fb96889",
          "length": 155,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "358f2fc4-5bc7-4ef5-ad8b-c070d01a7259"
        },
        "item": {
          "id": "c59a696b-66ec-41a7-8b13-080f45e027c7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f0b3eccb-2df4-4ac0-91a6-30222855e17e",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c59a696b-66ec-41a7-8b13-080f45e027c7",
        "cursor": {
          "ref": "f3f56ef1-b825-4454-aad4-33574fb96889",
          "length": 155,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "358f2fc4-5bc7-4ef5-ad8b-c070d01a7259"
        },
        "item": {
          "id": "c59a696b-66ec-41a7-8b13-080f45e027c7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f0b3eccb-2df4-4ac0-91a6-30222855e17e",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c08d860-57cd-4122-8286-e522156479d0",
        "cursor": {
          "ref": "9bf16d40-5631-48a8-a61e-7e2e86f8d687",
          "length": 155,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6f1ca13e-6c6a-4e04-8b0d-87db84dff880"
        },
        "item": {
          "id": "8c08d860-57cd-4122-8286-e522156479d0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "97cd6f5e-2348-49db-929d-dbf5d276034d",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c08d860-57cd-4122-8286-e522156479d0",
        "cursor": {
          "ref": "9bf16d40-5631-48a8-a61e-7e2e86f8d687",
          "length": 155,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6f1ca13e-6c6a-4e04-8b0d-87db84dff880"
        },
        "item": {
          "id": "8c08d860-57cd-4122-8286-e522156479d0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "97cd6f5e-2348-49db-929d-dbf5d276034d",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ec697d4-bc39-4130-8550-b312a50a3c7d",
        "cursor": {
          "ref": "a60d8b44-6ee2-4943-9118-f405562885a1",
          "length": 155,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "86a20208-cac6-4943-86c1-34ce2ee9d320"
        },
        "item": {
          "id": "3ec697d4-bc39-4130-8550-b312a50a3c7d",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "8d22c0b2-f45e-4dd2-b598-b0cea5d9b22a",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ec697d4-bc39-4130-8550-b312a50a3c7d",
        "cursor": {
          "ref": "a60d8b44-6ee2-4943-9118-f405562885a1",
          "length": 155,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "86a20208-cac6-4943-86c1-34ce2ee9d320"
        },
        "item": {
          "id": "3ec697d4-bc39-4130-8550-b312a50a3c7d",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "8d22c0b2-f45e-4dd2-b598-b0cea5d9b22a",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b5dbe8-b467-48bb-9858-4de35216df06",
        "cursor": {
          "ref": "4ea28403-2695-46cc-9a7e-7188ed72a74b",
          "length": 155,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9aa7a519-446c-4480-a7e1-9b9e6ce33397"
        },
        "item": {
          "id": "78b5dbe8-b467-48bb-9858-4de35216df06",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "166f27c6-e20e-446e-ab67-f8d48610987c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "78b5dbe8-b467-48bb-9858-4de35216df06",
        "cursor": {
          "ref": "4ea28403-2695-46cc-9a7e-7188ed72a74b",
          "length": 155,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9aa7a519-446c-4480-a7e1-9b9e6ce33397"
        },
        "item": {
          "id": "78b5dbe8-b467-48bb-9858-4de35216df06",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "166f27c6-e20e-446e-ab67-f8d48610987c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "96a06a56-fe3b-4564-9fdb-727fdd2ab3a5",
        "cursor": {
          "ref": "3e1b62f5-86b6-4d86-8edd-97b6e7df7b88",
          "length": 155,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "eaed7cba-7f7f-4424-9f3b-276bef808571"
        },
        "item": {
          "id": "96a06a56-fe3b-4564-9fdb-727fdd2ab3a5",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d869c1e1-fa09-432d-8bf1-e52c5b6c862a",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 12,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "381d5f66-26f7-431d-a2c7-a96c916f7ea6",
        "cursor": {
          "ref": "98473af2-da4d-4180-b23d-8acbe8fa8de2",
          "length": 155,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b4c13dee-691f-4506-aa6d-114be2bcc8c5"
        },
        "item": {
          "id": "381d5f66-26f7-431d-a2c7-a96c916f7ea6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4be1be57-eb56-4d4e-b6c5-8481377a1278",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 14,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "381d5f66-26f7-431d-a2c7-a96c916f7ea6",
        "cursor": {
          "ref": "98473af2-da4d-4180-b23d-8acbe8fa8de2",
          "length": 155,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b4c13dee-691f-4506-aa6d-114be2bcc8c5"
        },
        "item": {
          "id": "381d5f66-26f7-431d-a2c7-a96c916f7ea6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4be1be57-eb56-4d4e-b6c5-8481377a1278",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 14,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "25429afc-9fa3-4574-bca1-d58fdde588a4",
        "cursor": {
          "ref": "ab05e93d-885e-458f-b31b-8e1d56a4875a",
          "length": 155,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3e49d3b8-4f32-4c4b-9a2a-8bba2831101a"
        },
        "item": {
          "id": "25429afc-9fa3-4574-bca1-d58fdde588a4",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "63148498-0673-4b99-84b0-5f110258e9b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 12,
          "responseSize": 56
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f402d261-fe87-42f1-9057-a71884ed9f6e",
        "cursor": {
          "ref": "31aa0596-2760-471c-ac4e-fd3b73898b31",
          "length": 155,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "997b7da9-4841-41ec-a8b1-efde8f0ca58f"
        },
        "item": {
          "id": "f402d261-fe87-42f1-9057-a71884ed9f6e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4946bcc7-6a6c-4ea9-ae67-d12d926c1395",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 65
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "a3c68b44-481b-42bc-b90e-72fb7e6e8f25",
        "cursor": {
          "ref": "0c9b6d1a-f9d1-409d-a2e0-ba71ce84017c",
          "length": 155,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f025580e-b677-4c1e-a96d-660b4246fe96"
        },
        "item": {
          "id": "a3c68b44-481b-42bc-b90e-72fb7e6e8f25",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5e3becd0-2342-4c71-a510-026f89d9ef1b",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "a909a910-8f17-4244-a884-e6137def710b",
        "cursor": {
          "ref": "dd21bc6f-20d7-4809-ba4c-b7667e59b776",
          "length": 155,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c65e8f30-da43-44c5-8813-cb12c93dab51"
        },
        "item": {
          "id": "a909a910-8f17-4244-a884-e6137def710b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5855e36e-62c1-4991-9f89-dca4e9dcc731",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "26d2ae93-eda9-4899-985f-8d8864908b6c",
        "cursor": {
          "ref": "de9a0891-fdf9-4ac3-bc29-86acf80276a6",
          "length": 155,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "50b41e7f-2226-4a7d-9220-0fe9ea7d9d40"
        },
        "item": {
          "id": "26d2ae93-eda9-4899-985f-8d8864908b6c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3d6d0c61-bc7a-4f72-85fa-5179df62037b",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "30d0f9ae-5307-4a16-8416-ed17c198259b",
        "cursor": {
          "ref": "adf10e72-bce0-4ca1-86e5-5c7b54688d26",
          "length": 155,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3b1628c2-7032-47b1-b5c6-36fc927438fc"
        },
        "item": {
          "id": "30d0f9ae-5307-4a16-8416-ed17c198259b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "83cf5101-7eec-4dbe-bfda-f6ca2d7f37a1",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "ea331973-5b13-4533-8677-086f343c8e92",
        "cursor": {
          "ref": "77078dde-318e-4619-b00f-73cf78be5edf",
          "length": 155,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "efb37730-31e9-47a5-9886-d8454057ad87"
        },
        "item": {
          "id": "ea331973-5b13-4533-8677-086f343c8e92",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "89500617-1835-470e-8c9e-8a80238487a5",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "a175044f-f118-4281-9338-0d3a35d55d72",
        "cursor": {
          "ref": "f64985b8-9781-45b5-b8da-a0960371a714",
          "length": 155,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "13d77465-2211-4a1c-9d8c-fcc78d0495c1"
        },
        "item": {
          "id": "a175044f-f118-4281-9338-0d3a35d55d72",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "dbd8f166-5fab-4893-98d3-5c7f682ebd9e",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "61f8e111-713c-4299-8fa3-177d852662c5",
        "cursor": {
          "ref": "35b87d09-eea5-4429-af61-519fa12f3664",
          "length": 155,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b73c0ff7-295a-4a1e-9d2a-65ebd5516b02"
        },
        "item": {
          "id": "61f8e111-713c-4299-8fa3-177d852662c5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8a62552e-cc0b-4ee4-ba94-db05692574e6",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "253f6bd1-7f5f-4876-b1e5-0c0effd6adff",
        "cursor": {
          "ref": "24ed4a33-2622-4a93-95d9-0aeba789c4a8",
          "length": 155,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "15056171-50ce-40c2-bafb-c7dd0e289df2"
        },
        "item": {
          "id": "253f6bd1-7f5f-4876-b1e5-0c0effd6adff",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f496bde0-0f0c-4096-ac94-13df421caa43",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "78607fe3-5c68-4b8c-8b8e-145dbbb82498",
        "cursor": {
          "ref": "779d9d07-09db-4b20-bb7a-2b210fc895e0",
          "length": 155,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "27356073-d16e-4a65-89e2-4f29f63c9538"
        },
        "item": {
          "id": "78607fe3-5c68-4b8c-8b8e-145dbbb82498",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "0420c2bd-dc49-4046-91e4-3040bf7bdca1",
          "status": "OK",
          "code": 200,
          "responseTime": 267,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "58852293-b19b-4e60-8148-41fc55837a42",
        "cursor": {
          "ref": "138c3e7d-16f2-4ade-a441-a4d95ea192c1",
          "length": 155,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c13b91b7-aa1a-46db-baa3-cf5744e93051"
        },
        "item": {
          "id": "58852293-b19b-4e60-8148-41fc55837a42",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5e6b733e-1480-42e1-b143-80a8a0092604",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "300d7ad9-83c3-479f-b38d-424327cc0393",
        "cursor": {
          "ref": "9e56ce40-ca5a-479e-a967-c4c13cf82858",
          "length": 155,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2cebb41c-f2b5-4c23-b8c8-b0ec8f642e4b"
        },
        "item": {
          "id": "300d7ad9-83c3-479f-b38d-424327cc0393",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e80cf180-e35e-4aac-85c2-efe1822d9e67",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "ede146e4-b739-4bc6-a248-82a68c4b8af2",
        "cursor": {
          "ref": "a39b2ef1-a813-4fe9-a14e-bc808ea2d6e5",
          "length": 155,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "74b21ef4-92de-47dc-b0fa-34d9ef5113c4"
        },
        "item": {
          "id": "ede146e4-b739-4bc6-a248-82a68c4b8af2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "80b3a609-4ace-40b4-a210-5fec7d7b74ee",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "83e32417-c56b-4c55-93d7-3428f3e35fc5",
        "cursor": {
          "ref": "c163a7ec-f622-4b73-a2e2-cbb22c9d55c9",
          "length": 155,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7d570880-856d-45b2-b6fb-99a3547ba3f0"
        },
        "item": {
          "id": "83e32417-c56b-4c55-93d7-3428f3e35fc5",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d06953ae-77ae-4915-ab39-59047348c16c",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "74b3ca20-5fe2-416b-a074-ae294e76f3b5",
        "cursor": {
          "ref": "2418c57f-9129-4db7-97ab-166f50decd73",
          "length": 155,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e368ccee-6fff-4027-a3d1-737a1bce58f8"
        },
        "item": {
          "id": "74b3ca20-5fe2-416b-a074-ae294e76f3b5",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "0ceba5ee-c2af-4dcf-b87d-c993c579f1d2",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "19062f56-6963-4f92-91dc-8f58fa121199",
        "cursor": {
          "ref": "1e3540ea-0d30-4ca6-880e-f14d93ca705a",
          "length": 155,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ade948b4-f318-42fe-b2d5-fef122343a4e"
        },
        "item": {
          "id": "19062f56-6963-4f92-91dc-8f58fa121199",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "7a069b72-3327-40fa-bcd9-129d879833ec",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "7cb31c9d-8ce2-4e56-8b3a-f61f145f4ebe",
        "cursor": {
          "ref": "bd85ac16-f855-4723-8ced-deb84cf94678",
          "length": 155,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "91cdd397-8424-45c0-9d94-53cd612e8dc7"
        },
        "item": {
          "id": "7cb31c9d-8ce2-4e56-8b3a-f61f145f4ebe",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5239c44c-e935-4ef9-8e77-c28f9f96b88a",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "958183e5-a890-498d-8a0e-c8a3f6b75602",
        "cursor": {
          "ref": "d8bde6c6-d182-4279-8a29-362323a83d30",
          "length": 155,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4f722475-6574-4802-b43e-051e1eba0ae0"
        },
        "item": {
          "id": "958183e5-a890-498d-8a0e-c8a3f6b75602",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1127f7a0-776f-47d6-b4cd-30aeaf95b811",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "705dc61f-0cb7-41ec-99ed-f012ddb9674e",
        "cursor": {
          "ref": "073f2320-61c3-4346-b63d-dc2972bf2c32",
          "length": 155,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "cb7a3b49-9170-442a-a4c0-79617bc38ddd"
        },
        "item": {
          "id": "705dc61f-0cb7-41ec-99ed-f012ddb9674e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d337bd1b-1152-480f-a1ad-a664414b25e0",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "6199cb12-1a76-48a7-91e7-910bdbbe5e89",
        "cursor": {
          "ref": "2f734a06-2cfd-494e-b663-46ed85158ca8",
          "length": 155,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "244ecbfb-47f6-48bd-a6bd-01ccd9f5fd30"
        },
        "item": {
          "id": "6199cb12-1a76-48a7-91e7-910bdbbe5e89",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6a25adae-6680-4361-b51e-5b12da4a24aa",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "af9c0715-e5af-41c9-843b-21cbefed1ea0",
        "cursor": {
          "ref": "be551f53-4466-45ad-94f4-406881549417",
          "length": 155,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "070a0836-bdf6-4349-8080-85d5c8f10d87"
        },
        "item": {
          "id": "af9c0715-e5af-41c9-843b-21cbefed1ea0",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8b1729e6-922a-4f62-bbaa-7b9343effd21",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "5a75fa48-5346-4088-996a-515644b2037a",
        "cursor": {
          "ref": "8fad0c8e-b060-432b-81df-c5d4ddaab9f4",
          "length": 155,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2da5de2b-b8b8-4e5e-a45d-3b8c8d2f138a"
        },
        "item": {
          "id": "5a75fa48-5346-4088-996a-515644b2037a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e1e27373-4744-42ca-b63e-8e32667c390a",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "342c1e45-eb01-4d31-be91-e2648e003e0b",
        "cursor": {
          "ref": "6947f9c9-6b1c-4a5b-bfef-1938d4730168",
          "length": 155,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d3231de9-94c2-4a2b-8cf6-f0b96f2b8816"
        },
        "item": {
          "id": "342c1e45-eb01-4d31-be91-e2648e003e0b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "0209da44-4386-4ef3-9f2a-562c7ce15018",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "a06c5e86-c434-4a31-94f4-345d5eb07c6b",
        "cursor": {
          "ref": "d98805a7-9eac-4766-86d8-ce1c120cceba",
          "length": 155,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6f01154c-9dd1-4a4b-adf0-467c974a5f41"
        },
        "item": {
          "id": "a06c5e86-c434-4a31-94f4-345d5eb07c6b",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "5f746a66-4e5c-49e0-b996-c347b4690399",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "f837549a-0f70-4f27-92a2-28fdaecadf0a",
        "cursor": {
          "ref": "aae387e8-ab46-4c77-bcf1-5635b1b1e00c",
          "length": 155,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "771722e7-051d-4b28-b862-2585a8ca20b5"
        },
        "item": {
          "id": "f837549a-0f70-4f27-92a2-28fdaecadf0a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "05518a35-f868-43e7-8f17-22f37e13fb1b",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "bb4be9be-d182-4bfc-990d-5eb2e6b10c05",
        "cursor": {
          "ref": "f8fa17db-0deb-440f-9996-9c37b0f20ff1",
          "length": 155,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "fcbdb15e-5968-4316-913b-67ec62399ff6"
        },
        "item": {
          "id": "bb4be9be-d182-4bfc-990d-5eb2e6b10c05",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "80492396-e990-4b60-a18e-07b951e614e8",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "d1a7d1fd-852f-42e9-9ee8-fab550d24ad8",
        "cursor": {
          "ref": "7371390a-d570-4368-9193-f642278a9753",
          "length": 155,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "53efb95e-49c1-474a-988d-82c31cbe0548"
        },
        "item": {
          "id": "d1a7d1fd-852f-42e9-9ee8-fab550d24ad8",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "07422041-f40d-4357-88fd-a4dceec9c00e",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "c4a929fe-bbdc-47db-b162-d6bbecae9ff4",
        "cursor": {
          "ref": "9424be01-91c9-4df1-a97b-19a2eaf67c9e",
          "length": 155,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "799fba1e-6327-4320-8869-9f203e1adad4"
        },
        "item": {
          "id": "c4a929fe-bbdc-47db-b162-d6bbecae9ff4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "58425024-8994-4a23-a877-60cc806e5d76",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "ec5bdd2f-226d-42e7-975a-f937213a46c2",
        "cursor": {
          "ref": "e3e5b8c7-45da-44a9-9c6c-964f663cf659",
          "length": 155,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "39eeb983-587b-4345-abac-0b88a8ae68c3"
        },
        "item": {
          "id": "ec5bdd2f-226d-42e7-975a-f937213a46c2",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d84d476d-d35e-42e8-b6a8-08e186b69387",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "d3aa7620-ac9e-40c4-a5f2-9ce3b5f3f169",
        "cursor": {
          "ref": "234dddb0-7876-4265-b6df-92786acaedca",
          "length": 155,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "350910b7-36a6-4d13-b430-818e915f8cbf"
        },
        "item": {
          "id": "d3aa7620-ac9e-40c4-a5f2-9ce3b5f3f169",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3c722930-04ea-44f8-b459-9417d671cce0",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "cc7f2862-5ac6-430e-adb5-fcac061a5df8",
        "cursor": {
          "ref": "60704bcd-e917-4973-a2aa-1bd14f51ee7f",
          "length": 155,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0e279bdc-bc09-409e-adc3-afb3f6a5a10e"
        },
        "item": {
          "id": "cc7f2862-5ac6-430e-adb5-fcac061a5df8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "227057c6-94e5-4760-9cab-3738c938d7a2",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "5a90150d-b6a7-477f-8a18-4955b4ce6666",
        "cursor": {
          "ref": "d7158b49-780f-4df9-9635-46431d6e6c10",
          "length": 155,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "3e897df9-e07b-4fae-b852-603aeab6a5b3"
        },
        "item": {
          "id": "5a90150d-b6a7-477f-8a18-4955b4ce6666",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a42eff77-6e88-4d75-a680-497b829a2ecd",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "c289446f-e501-4b90-8a3a-b5f918855e6f",
        "cursor": {
          "ref": "b2337b76-8b9b-4bd0-8ed7-922f1250f1bf",
          "length": 155,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d72a96bc-d903-4e95-89a3-63fc9c329270"
        },
        "item": {
          "id": "c289446f-e501-4b90-8a3a-b5f918855e6f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "cc14aca6-8a9e-459c-b557-c8115a5a3e43",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "32d0b7e0-0b2d-4249-8edc-ef227935063c",
        "cursor": {
          "ref": "158862ee-409a-43da-8f4a-bc91854508e2",
          "length": 155,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9d9a7298-3668-4cbf-b44a-6cf1499138de"
        },
        "item": {
          "id": "32d0b7e0-0b2d-4249-8edc-ef227935063c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0db3e083-c741-424a-8f0e-b018af49fc8c",
          "status": "OK",
          "code": 200,
          "responseTime": 27,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "fff61148-95bc-43fd-94f9-3103553dda22",
        "cursor": {
          "ref": "82f22803-f120-4236-ad38-a63d0f69fc7b",
          "length": 155,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "941eb178-2851-49f7-915f-520103a968f4"
        },
        "item": {
          "id": "fff61148-95bc-43fd-94f9-3103553dda22",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "57b797f3-ba5a-43c1-ab9e-762c9e4435f3",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "2210b0ca-47e8-4e81-85cf-df2312483129",
        "cursor": {
          "ref": "98cff234-fc86-4713-8c5c-25f2bee5262d",
          "length": 155,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "74e034af-4166-40b4-83d6-db28cbe95102"
        },
        "item": {
          "id": "2210b0ca-47e8-4e81-85cf-df2312483129",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8727b92c-c726-4e03-942e-335ae61d7714",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "ccb19ce4-5d4e-41b1-ab3e-3d3f49f28833",
        "cursor": {
          "ref": "673b7c4d-19ab-4fb5-8dfa-e9294042242d",
          "length": 155,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ab0cbc98-fac1-4c75-a430-d11813bcb9df"
        },
        "item": {
          "id": "ccb19ce4-5d4e-41b1-ab3e-3d3f49f28833",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e995ca1a-6ebe-4f9b-b603-a9dd3fd3aacc",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "f0172131-92b5-4ba3-8633-d12e4ad8e636",
        "cursor": {
          "ref": "adfa24cf-316a-44f9-b2c4-ed15c748a07d",
          "length": 155,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5979105c-fcad-4c04-951c-42e7117e2942"
        },
        "item": {
          "id": "f0172131-92b5-4ba3-8633-d12e4ad8e636",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "95a7d748-33d0-48fa-a529-79eae5c87515",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "528fed62-e89a-4898-a1df-5e53b851edbd",
        "cursor": {
          "ref": "cf44aa00-8d36-41e0-a77f-8b0a4fe109c1",
          "length": 155,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6a6259f3-6f8a-46ed-92bd-f1499ae6e475"
        },
        "item": {
          "id": "528fed62-e89a-4898-a1df-5e53b851edbd",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a77f7d9a-24cc-4e7d-a668-473440c6f6fe",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "b73db0e0-bdaf-43a3-afa5-d0fa8a2c64d9",
        "cursor": {
          "ref": "210022d7-56e3-40b6-a4b6-28f3c8af00d8",
          "length": 155,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3f10fe0f-2af7-484f-988b-29998d087911"
        },
        "item": {
          "id": "b73db0e0-bdaf-43a3-afa5-d0fa8a2c64d9",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "893d359d-63b9-4297-9b3c-1b2318f9fb91",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "c58c44ee-4bd9-4d0d-b1e5-7c65ebeeabc8",
        "cursor": {
          "ref": "38394537-01f2-46cf-b595-898bbf40e70b",
          "length": 155,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "edaf21f9-fb47-48ed-a5e1-c30027607eed"
        },
        "item": {
          "id": "c58c44ee-4bd9-4d0d-b1e5-7c65ebeeabc8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "438472ee-c21c-4133-8f78-2dd5b6383fdd",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "323f7a1d-7bcb-484e-9b01-f2e124a0fbb5",
        "cursor": {
          "ref": "14b7e5c5-da36-4109-877b-c65301a47644",
          "length": 155,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7c056574-e835-438a-a0c5-6658412be038"
        },
        "item": {
          "id": "323f7a1d-7bcb-484e-9b01-f2e124a0fbb5",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f35253ea-60cc-4977-b70e-26a5f5fc8749",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "f9f24073-6416-459b-a083-b807ea2ee925",
        "cursor": {
          "ref": "023baf23-4032-409e-951c-2a1ce4f985f5",
          "length": 155,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e88899a2-e094-4bcf-a124-4068412d9780"
        },
        "item": {
          "id": "f9f24073-6416-459b-a083-b807ea2ee925",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "89604f02-fc88-4364-a90b-5555a19c1390",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "2bfd0652-43fe-4551-a9b8-abf920bc7c83",
        "cursor": {
          "ref": "03b1b4ef-b509-43d6-a1bc-9dff33fb425a",
          "length": 155,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "449e17c0-50d8-493c-8af7-0c2a9af366d4"
        },
        "item": {
          "id": "2bfd0652-43fe-4551-a9b8-abf920bc7c83",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b6ff0767-9185-472c-9aa4-be946399ea81",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "4120ddcd-5d84-4286-b3a7-eb8ec94dd804",
        "cursor": {
          "ref": "b530f6f3-269f-4370-9d8f-abbd1687a0d9",
          "length": 155,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "cce7941d-fbe5-4551-be61-5a58d34b3065"
        },
        "item": {
          "id": "4120ddcd-5d84-4286-b3a7-eb8ec94dd804",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "785310d6-fba3-4390-8bbc-65520f6d4b01",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "222cfab7-b844-42cb-8ab2-d2540d978926",
        "cursor": {
          "ref": "0dc6ace4-6679-4dd9-a0ce-929a602438c1",
          "length": 155,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c101e402-e8b7-436a-b562-218318594cff"
        },
        "item": {
          "id": "222cfab7-b844-42cb-8ab2-d2540d978926",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b2df58e1-4e5a-4924-89f9-b39bdc62b97d",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "0b090674-56e6-40ce-abbf-e2f530fd869f",
        "cursor": {
          "ref": "0198d13a-89eb-49a6-a654-75521ee95406",
          "length": 155,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "89d8c0d3-3af4-4cc1-82fa-ed47b28bf7ce"
        },
        "item": {
          "id": "0b090674-56e6-40ce-abbf-e2f530fd869f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3c4f5b5d-174a-4c46-b56d-4ebd30e0c390",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "4d4c8b83-c93e-46b0-a42c-ff54332ab9f6",
        "cursor": {
          "ref": "57060f48-a578-4e25-bfcd-33034813c593",
          "length": 155,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a982822c-e395-45e5-8efb-6896ab5cc13d"
        },
        "item": {
          "id": "4d4c8b83-c93e-46b0-a42c-ff54332ab9f6",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "29c63c5e-7bec-4bba-8c91-232ae9c51db4",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "4400a150-ee32-435d-b830-e1e6717351c0",
        "cursor": {
          "ref": "7016a027-dc20-45b7-aaf8-5083caf16e15",
          "length": 155,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f800131a-fac6-45e3-98e2-02357b6fa118"
        },
        "item": {
          "id": "4400a150-ee32-435d-b830-e1e6717351c0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e75a612b-9c84-400a-b0f9-8c55c97fc0f3",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "67e982a6-1c2f-4075-9ed2-9c9baca85fd5",
        "cursor": {
          "ref": "5e4ba35a-f852-4b16-b684-6604b5fef0a8",
          "length": 155,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "97c56c43-eab9-4f39-8ead-f584552f16ad"
        },
        "item": {
          "id": "67e982a6-1c2f-4075-9ed2-9c9baca85fd5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "923931f9-a07c-4799-9dce-bdac0a965877",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "bd824237-a94b-4b1c-9d7d-456ab494baef",
        "cursor": {
          "ref": "cb6604cd-8437-4524-9913-795b1e9c6273",
          "length": 155,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "bcd27169-9e3d-4f2f-9a4f-034d31c16020"
        },
        "item": {
          "id": "bd824237-a94b-4b1c-9d7d-456ab494baef",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d32d3c7d-56f0-48b5-8288-552149e32fef",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "63e720c0-88b0-4566-91f5-80c5ea62895b",
        "cursor": {
          "ref": "0cc934aa-efda-41ba-a01a-d206c8193a40",
          "length": 155,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "58627e37-32ca-4a62-8b4a-c6313c17f4cd"
        },
        "item": {
          "id": "63e720c0-88b0-4566-91f5-80c5ea62895b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "767cc057-aa9e-4892-9f2e-50057eaa5679",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "8538b206-3e7d-4418-afcd-89ba06bbf331",
        "cursor": {
          "ref": "f60441f1-4a68-4aa4-b79c-b248c1a51e47",
          "length": 155,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "994eb11d-8c54-423a-ba02-ef7749f100dd"
        },
        "item": {
          "id": "8538b206-3e7d-4418-afcd-89ba06bbf331",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "af3a06ef-7aba-4699-99ec-bc547c713bbc",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "d5aff732-0d90-4d2f-a96b-8005d9fa4353",
        "cursor": {
          "ref": "ae007234-074c-48c8-803d-9d6d1bbd7d38",
          "length": 155,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1dcc63e4-2b63-4718-84d0-992d34aa3ac0"
        },
        "item": {
          "id": "d5aff732-0d90-4d2f-a96b-8005d9fa4353",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "69ee6bac-aee7-45e9-bf2c-3928305eda49",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "a1f7d5ab-3684-4cca-a54e-2dcdb25993ca",
        "cursor": {
          "ref": "bc381be8-fdb2-44a8-b26b-3f9de7fa2227",
          "length": 155,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "893714b6-66ff-4148-9a58-614e5c10c1db"
        },
        "item": {
          "id": "a1f7d5ab-3684-4cca-a54e-2dcdb25993ca",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "88570421-c2cf-4cd7-aa1d-4284e4c8dcab",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:106)"
            }
          }
        ]
      },
      {
        "id": "755bfb7d-9e6e-4e31-b507-1eb83d736c76",
        "cursor": {
          "ref": "fe0cd3a9-9343-46d3-a3fc-dc184650eed9",
          "length": 155,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0bb40888-debe-47b8-835b-1346237391c7"
        },
        "item": {
          "id": "755bfb7d-9e6e-4e31-b507-1eb83d736c76",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "48aa268a-5158-4c9c-ac20-c1cb0291e3c4",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "64d27ff9-7f55-4964-a2be-8554144afe84",
        "cursor": {
          "ref": "5425f48e-2768-49ac-ae47-1b52575633a0",
          "length": 155,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a3be88fb-7555-4bd9-ab2c-737a680dee41"
        },
        "item": {
          "id": "64d27ff9-7f55-4964-a2be-8554144afe84",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "94d5d89a-e407-4c49-bf35-7936bd2e1db8",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "bf413c41-22a1-4ea4-a601-674e35d9a574",
        "cursor": {
          "ref": "915a005c-e057-44a8-9f0d-ebf5d7bb107f",
          "length": 155,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "52ce3d84-15ae-49ca-b5ae-472f16490e23"
        },
        "item": {
          "id": "bf413c41-22a1-4ea4-a601-674e35d9a574",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d69f9df7-68f4-48b1-9dde-881ac0c6caec",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "d68293eb-5ed9-4252-bf0b-397ac8835754",
        "cursor": {
          "ref": "b21d49f1-f7d3-403d-8277-2a1e0a196e45",
          "length": 155,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a5afdc03-bd74-4a37-ba0b-425ae6bb63cf"
        },
        "item": {
          "id": "d68293eb-5ed9-4252-bf0b-397ac8835754",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3cb5e9de-222e-4342-902b-2e40a435d1d8",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "75f25731-5590-48eb-b0fe-521e734edbf5",
        "cursor": {
          "ref": "777fcdc9-8d54-4e0f-a584-494ed971b188",
          "length": 155,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ba7d76b2-1da1-4d45-8ac0-1e4fbc224ada"
        },
        "item": {
          "id": "75f25731-5590-48eb-b0fe-521e734edbf5",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8b24dfcd-cb6c-4797-9f90-491efb4f7dc9",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "7911ea67-4d85-4595-8727-4af7ace0cc26",
        "cursor": {
          "ref": "a3dd2e46-71b0-4184-bb75-375af6a46583",
          "length": 155,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8cec2286-26b8-4e7e-b5a8-41d8e32c5c83"
        },
        "item": {
          "id": "7911ea67-4d85-4595-8727-4af7ace0cc26",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8eecac99-6259-4432-aff9-8c3cf15def72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 17,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "9854ad2f-53c2-4c9f-b7d6-5572312cda0c",
        "cursor": {
          "ref": "54fe5a1c-eb4c-4923-9550-9875141b57ff",
          "length": 155,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4fdb94d8-ffa9-4e96-bc4d-37c88f49b472"
        },
        "item": {
          "id": "9854ad2f-53c2-4c9f-b7d6-5572312cda0c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "aaa5ca17-99e4-4592-aaec-3ef44f7f4e25",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 17,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "49e0f5cb-63a6-4f35-99de-60eb22d239ab",
        "cursor": {
          "ref": "079255c2-670f-4230-87a9-ca397ad13baf",
          "length": 155,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "52e5f0e2-6526-4644-9875-b234dfed7a76"
        },
        "item": {
          "id": "49e0f5cb-63a6-4f35-99de-60eb22d239ab",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "01a5be01-e4e5-4eed-adfe-db697f7902d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 15,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "834a8f26-9146-4c59-a5d7-9175d23a6073",
        "cursor": {
          "ref": "874fc5f6-4c77-484b-9824-0093a3528e0b",
          "length": 155,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "edc9fa4f-16f6-467c-8845-07c2f96f84d1"
        },
        "item": {
          "id": "834a8f26-9146-4c59-a5d7-9175d23a6073",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "1b5eb644-2171-4071-9db6-7bda7e2a6c83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 19,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "1bd75358-077b-496d-80e7-c3d0786c3efb",
        "cursor": {
          "ref": "e001bce6-8a9e-4e15-8e9d-a32ea897ba4a",
          "length": 155,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "cb77b574-bd84-441d-9c28-642a9125c940"
        },
        "item": {
          "id": "1bd75358-077b-496d-80e7-c3d0786c3efb",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "43509e01-9587-4654-a981-9059690650e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 16,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "06c53625-c91f-45a1-a385-432ad2263c7a",
        "cursor": {
          "ref": "bd31cef5-7622-4e0d-8656-a00a3c7bbd42",
          "length": 155,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e7b36e79-1654-45bd-b54c-16dd51a10cfb"
        },
        "item": {
          "id": "06c53625-c91f-45a1-a385-432ad2263c7a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "96a83f06-8b52-4b82-a0c6-a6f478fb40a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 16,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "b0130075-6d63-4607-98e5-0ba03bdde4f8",
        "cursor": {
          "ref": "b7a2a9b5-e7f1-4b7c-8462-2d27fc2f89f1",
          "length": 155,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8b0e2493-5002-4dac-a1bd-7220669cef66"
        },
        "item": {
          "id": "b0130075-6d63-4607-98e5-0ba03bdde4f8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4cc655c3-9b0f-4f2d-9e87-c9963948a237",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 18,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "7e1304ad-4e02-42ab-8876-5744a4b72414",
        "cursor": {
          "ref": "03be50b4-4ca3-4396-8671-ac4772639c2d",
          "length": 155,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "edee766e-4dc6-4a9c-9cfc-14d1afe1a820"
        },
        "item": {
          "id": "7e1304ad-4e02-42ab-8876-5744a4b72414",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "39cbe54d-93ec-437e-ac54-3575e213b44a",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "32b3e345-22d4-451c-9584-bd45d0f9dd12",
        "cursor": {
          "ref": "667aaaf5-fd57-4efc-8fde-4fff7ce5cd89",
          "length": 155,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e7f1de0d-0098-4012-8eaf-c1c2bea465c7"
        },
        "item": {
          "id": "32b3e345-22d4-451c-9584-bd45d0f9dd12",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "daa23d3a-532a-4045-9733-1a92e16af9ff",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "ffd50161-f1a4-4ea1-a9c3-15dcbc1128a7",
        "cursor": {
          "ref": "0ed1513e-1f27-4af0-9ad4-07c052a9faf4",
          "length": 155,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9b578ce2-7ade-4058-b5ce-12e6a2197f20"
        },
        "item": {
          "id": "ffd50161-f1a4-4ea1-a9c3-15dcbc1128a7",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6d8d8630-27c4-40be-b43a-63551895e6f2",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "a9886975-52d3-42ec-b80c-3a1548787404",
        "cursor": {
          "ref": "0cc124eb-370c-4f42-b6ce-258834429594",
          "length": 155,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1644ce6a-5877-435f-aaa3-bcea68459ff0"
        },
        "item": {
          "id": "a9886975-52d3-42ec-b80c-3a1548787404",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3cc759b6-a515-4415-b156-ba0e1396bf5f",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "3a4116d5-64ed-43b0-830e-a85b768823a0",
        "cursor": {
          "ref": "ce9d8a0b-4c06-4269-b2ee-d68e94c585ce",
          "length": 155,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "87a14da8-ef57-491b-9b8c-653a5a17d904"
        },
        "item": {
          "id": "3a4116d5-64ed-43b0-830e-a85b768823a0",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1af8c82e-d05a-4821-8907-fc5dc64e0b32",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "24de1f75-474f-403b-a630-8c5e0b33bb11",
        "cursor": {
          "ref": "c591bb6f-8986-4bd1-8ce5-35d393f40e52",
          "length": 155,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f499214a-908d-482c-8649-1db74e12dba4"
        },
        "item": {
          "id": "24de1f75-474f-403b-a630-8c5e0b33bb11",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "df9a426e-71b5-4f74-82b0-a4eb6493d034",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "efe97ff5-0811-4afc-b3db-cf9cd03f4527",
        "cursor": {
          "ref": "f613668e-b2a0-424e-aa6b-205e72dfdf85",
          "length": 155,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6b3c6435-36e4-4a18-bf2e-50df5db5726b"
        },
        "item": {
          "id": "efe97ff5-0811-4afc-b3db-cf9cd03f4527",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "977247d1-a8ce-4a03-8dac-787e7036339f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "c00dc1bc-f187-4562-a7dd-cc5483dc3b72",
        "cursor": {
          "ref": "3f10acc6-9749-42bb-8f45-1382cad097ac",
          "length": 155,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "80af96c0-f332-45d5-91aa-7697e79ff3f7"
        },
        "item": {
          "id": "c00dc1bc-f187-4562-a7dd-cc5483dc3b72",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6f629e55-0cbe-42ee-b012-0fd5d57d309b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "34b7862d-1f8e-46c0-be21-36ce37560bbb",
        "cursor": {
          "ref": "d327df70-9724-4ba6-a579-c2070040c9a9",
          "length": 155,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "019deffc-d2a7-4ed6-bbc2-287467726a52"
        },
        "item": {
          "id": "34b7862d-1f8e-46c0-be21-36ce37560bbb",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a6c1f6b0-58ce-476e-be26-251f64c96810",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "ed389316-6fa4-4fb2-8d64-5d734c7475fa",
        "cursor": {
          "ref": "c3102067-6d9d-4323-86c2-363bd2f08a0b",
          "length": 155,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ab656fd4-788a-48a2-8146-86bc47604bc3"
        },
        "item": {
          "id": "ed389316-6fa4-4fb2-8d64-5d734c7475fa",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b2bd728b-ea40-42c6-bc69-1470e1e563d4",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "91ca2c4f-6277-457f-94fc-15e0d13b9bb1",
        "cursor": {
          "ref": "afab9c2c-c5a7-4398-b567-5826959474ef",
          "length": 155,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c8659a7b-cef3-4cbd-960d-42899c8630d8"
        },
        "item": {
          "id": "91ca2c4f-6277-457f-94fc-15e0d13b9bb1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9408ad73-e50e-498d-a68b-fec086c48b18",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 21,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "11abee45-4917-46fd-ac25-445fd7a1fdb4",
        "cursor": {
          "ref": "58cbd91a-86e9-41cb-b566-87bd15749509",
          "length": 155,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0b8a80d1-a9d7-4f05-9dad-1f3e8844907c"
        },
        "item": {
          "id": "11abee45-4917-46fd-ac25-445fd7a1fdb4",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3cc2b5d0-70e8-40b5-8a80-3cec8f6a6c82",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "03c1531a-3d6a-43c5-8738-95f4da0aacf3",
        "cursor": {
          "ref": "30751917-96dc-4795-916f-c58e6663a3b2",
          "length": 155,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "5f53c7c2-526c-42f1-978f-17ee84fecb9c"
        },
        "item": {
          "id": "03c1531a-3d6a-43c5-8738-95f4da0aacf3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "53062454-9773-4b7d-998d-50861021b4d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 21,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "c196e082-793e-45a3-bce6-40885cd4b77c",
        "cursor": {
          "ref": "993c4be8-a5bb-4d2c-84db-f8c6e6bc6f5f",
          "length": 155,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "76c0a4db-dbce-49b4-81b6-f0f38483f146"
        },
        "item": {
          "id": "c196e082-793e-45a3-bce6-40885cd4b77c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2fe8ac8e-5359-44a6-92f0-ed3104d02110",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "7ae4ccb1-802a-4c13-a811-6b489afdcc4e",
        "cursor": {
          "ref": "cfc26522-62c3-4f79-b120-6c13728a54a9",
          "length": 155,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1d6da945-5d41-41b9-889d-50773fbfbcb5"
        },
        "item": {
          "id": "7ae4ccb1-802a-4c13-a811-6b489afdcc4e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "42e0ed78-74d4-4244-813a-f307116f68d0",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "c6bbbb5a-3e77-4173-8014-a0e6ae9538cb",
        "cursor": {
          "ref": "65010c75-ac78-4863-a215-08a593af0e33",
          "length": 155,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "00db061a-95c1-48b5-a6e2-cedf82c07815"
        },
        "item": {
          "id": "c6bbbb5a-3e77-4173-8014-a0e6ae9538cb",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9e5af622-2305-4fe5-bfb9-a82a928ba932",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "ac69e737-68cf-48a7-8b70-897eaa50c061",
        "cursor": {
          "ref": "4673208a-e8d8-43a9-9598-9edfa7dd00c5",
          "length": 155,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "267f8593-2ceb-446e-a464-11a52117f709"
        },
        "item": {
          "id": "ac69e737-68cf-48a7-8b70-897eaa50c061",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "bf1a3c52-1028-4886-8f61-31fcf4717cd5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "3a20cafb-c619-4807-8af3-1237aed7b152",
        "cursor": {
          "ref": "0c8bbaa5-8d52-491d-b0f8-fe69a966e77f",
          "length": 155,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "867e2ef6-bcc0-47b0-b841-25d2aad77cbc"
        },
        "item": {
          "id": "3a20cafb-c619-4807-8af3-1237aed7b152",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1ed3239d-14f2-4d0b-9b4a-0efbf55e1489",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "64806894-a30a-438e-8541-a63ea1217955",
        "cursor": {
          "ref": "bbb2681b-cc5d-44d0-9e16-bbc09a5464ea",
          "length": 155,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "614d5db2-9938-4975-ae56-2db5c2c39ddf"
        },
        "item": {
          "id": "64806894-a30a-438e-8541-a63ea1217955",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7e136673-da32-4bc5-b9ea-9970481503f9",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "f801ad91-1728-46bf-b5a1-4a536c319b46",
        "cursor": {
          "ref": "12c79228-5481-426a-9f97-af58fb0bf292",
          "length": 155,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3a5ed2b2-3a57-4e0d-90a2-28902b2d7698"
        },
        "item": {
          "id": "f801ad91-1728-46bf-b5a1-4a536c319b46",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "194e8993-62c8-429c-9dc3-af23d16ab6eb",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "2e0c7ee0-11f9-4ee2-bcea-aca8111d2dbc",
        "cursor": {
          "ref": "f37a1fcb-2274-4e44-af7c-c61679ce3617",
          "length": 155,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "5205c842-22bc-4f4f-9bed-b256312154d6"
        },
        "item": {
          "id": "2e0c7ee0-11f9-4ee2-bcea-aca8111d2dbc",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ed969b3f-6449-4794-b1a3-d662d845f1b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 18,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "fb614c06-0185-4142-8db3-c186f66afe5e",
        "cursor": {
          "ref": "3f1e8a1b-545f-4dfb-bda3-409ac28ce4c7",
          "length": 155,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3957144e-b9f9-4c7b-b8b2-e0b25cb690f0"
        },
        "item": {
          "id": "fb614c06-0185-4142-8db3-c186f66afe5e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1eeae95a-2774-4399-b774-e139c53040d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "7098e7f1-1fca-4f64-b7dd-b534bd8b8a5f",
        "cursor": {
          "ref": "7da58457-d48c-4235-b44a-a815c504de2c",
          "length": 155,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "909d2334-a4a6-4a91-9c55-696288825180"
        },
        "item": {
          "id": "7098e7f1-1fca-4f64-b7dd-b534bd8b8a5f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "11a5b4f1-fefe-43d7-aef7-a578346c48c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 17,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "3f42e6e9-6fee-4613-b844-21280c5a586c",
        "cursor": {
          "ref": "81bea460-490c-4492-a80d-c09f26044b54",
          "length": 155,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9a1fd79a-c49a-4c3e-96bd-fab0f7a2d0ae"
        },
        "item": {
          "id": "3f42e6e9-6fee-4613-b844-21280c5a586c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "328a4b0c-034f-46f8-afda-bfc4f204f902",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "028a12a5-89c1-4e96-ba33-4f678137a91e",
        "cursor": {
          "ref": "4bcc3f3e-d2f8-47e0-89f3-a24446eb949f",
          "length": 155,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1c97b614-478d-484c-8b93-977c7a3c3fe4"
        },
        "item": {
          "id": "028a12a5-89c1-4e96-ba33-4f678137a91e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "eab03779-2a6b-4ff4-b7ff-d1d776805a77",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "9895c097-5b2c-4ff6-af35-74765a38f3db",
        "cursor": {
          "ref": "395d6464-b910-4d93-a313-4fc94e78f039",
          "length": 155,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "352be3dc-8df7-4171-98ac-42b23d74cfb1"
        },
        "item": {
          "id": "9895c097-5b2c-4ff6-af35-74765a38f3db",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "74190b6b-fd72-427d-b75f-6a9c855d51f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 18,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "bdc17f50-ff02-4aba-9e23-6dcc3c7b601f",
        "cursor": {
          "ref": "d7c46f34-2847-44f9-b4fb-ad4c495f8eba",
          "length": 155,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "979e93d2-bc59-44cb-8cfd-3230fcd56a74"
        },
        "item": {
          "id": "bdc17f50-ff02-4aba-9e23-6dcc3c7b601f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "55023d36-3e78-4f6e-8701-f250e1ed23d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "6ca70efb-5b2f-4925-9370-61ef0173dd38",
        "cursor": {
          "ref": "5a953bac-2fa8-4b3c-818b-cc85b9c82234",
          "length": 155,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "01d4e324-bca7-424b-be61-822ebd18bd6d"
        },
        "item": {
          "id": "6ca70efb-5b2f-4925-9370-61ef0173dd38",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "550c6110-f77b-40b1-8c2e-5d16363472a3",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "3ca33f8f-bb7b-4bb0-a337-8d171eddcb9b",
        "cursor": {
          "ref": "ad877ee7-3de2-4cf7-adaf-966936d9aa3d",
          "length": 155,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1318e366-c026-4602-82f8-0a5cd3b8d408"
        },
        "item": {
          "id": "3ca33f8f-bb7b-4bb0-a337-8d171eddcb9b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "97b323a9-e865-4648-b037-1dd5e38f2ae2",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b86e51-5500-4f48-b889-76941717c9a6",
        "cursor": {
          "ref": "d8d8a24f-0e13-44fc-8060-8b915d034c30",
          "length": 155,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "45565177-576e-46f5-a717-63eac77d0f2d"
        },
        "item": {
          "id": "16b86e51-5500-4f48-b889-76941717c9a6",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "8f47c883-ec9f-493e-9618-0b87b2715970",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f91e9e-6699-4e0d-bc2e-25093ad0a015",
        "cursor": {
          "ref": "fb08ba1e-ba2e-4f36-aae9-0cbafff25677",
          "length": 155,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "7fdee0d2-db27-4fde-8617-de36e59bbaca"
        },
        "item": {
          "id": "a2f91e9e-6699-4e0d-bc2e-25093ad0a015",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "7f43d9ef-6da9-4459-8300-1aafad353092",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f57b4a83-12af-4370-99ec-826c35ea469f",
        "cursor": {
          "ref": "c7f4c741-462d-4e0e-929f-d15d08b3e2cc",
          "length": 155,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "88cd10ad-8d3a-4927-baab-2e49b4403186"
        },
        "item": {
          "id": "f57b4a83-12af-4370-99ec-826c35ea469f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "41f33074-11da-4b89-a83c-0b62ff8eda2c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 15,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "f57b4a83-12af-4370-99ec-826c35ea469f",
        "cursor": {
          "ref": "c7f4c741-462d-4e0e-929f-d15d08b3e2cc",
          "length": 155,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "88cd10ad-8d3a-4927-baab-2e49b4403186"
        },
        "item": {
          "id": "f57b4a83-12af-4370-99ec-826c35ea469f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "41f33074-11da-4b89-a83c-0b62ff8eda2c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 15,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "e3669e32-8e80-437e-bb04-704071c45a6f",
        "cursor": {
          "ref": "bdf02d5a-ce3c-4354-9b9a-bd126243441b",
          "length": 155,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "16e58f6c-c6fa-45f5-a133-47dcc75a1371"
        },
        "item": {
          "id": "e3669e32-8e80-437e-bb04-704071c45a6f",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "4da90296-d461-495b-9816-0ff26dc5ceda",
          "status": "Not Found",
          "code": 404,
          "responseTime": 14,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "1780e091-c6c7-4464-9b36-757b45374329",
        "cursor": {
          "ref": "3f98d653-e3b1-491a-b220-ebb90abd2150",
          "length": 155,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f1fd732c-e4e5-4f85-8bbe-37e382358d3a"
        },
        "item": {
          "id": "1780e091-c6c7-4464-9b36-757b45374329",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4d95cbdc-acd3-4039-99d3-b9a4e50a56f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "1780e091-c6c7-4464-9b36-757b45374329",
        "cursor": {
          "ref": "3f98d653-e3b1-491a-b220-ebb90abd2150",
          "length": 155,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f1fd732c-e4e5-4f85-8bbe-37e382358d3a"
        },
        "item": {
          "id": "1780e091-c6c7-4464-9b36-757b45374329",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4d95cbdc-acd3-4039-99d3-b9a4e50a56f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "4bf7cb0c-2a67-4cd8-9b3f-80923ef57032",
        "cursor": {
          "ref": "c0345a15-206e-44d4-aa2a-c6b317e9c4e0",
          "length": 155,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ff4021eb-706a-4353-be01-4b421dd42081"
        },
        "item": {
          "id": "4bf7cb0c-2a67-4cd8-9b3f-80923ef57032",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "894ecd04-a5f8-4190-9572-1c917dae6ab4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "7a4fe464-58ad-450b-959e-f0843a63e341",
        "cursor": {
          "ref": "bcae86c8-cec8-48b5-a7cf-f78f8ca83027",
          "length": 155,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "cfd4a82c-2641-4efc-a5c4-342abcbace31"
        },
        "item": {
          "id": "7a4fe464-58ad-450b-959e-f0843a63e341",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "02cafc85-7350-4b33-9896-10a2df2f7937",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "7a4fe464-58ad-450b-959e-f0843a63e341",
        "cursor": {
          "ref": "bcae86c8-cec8-48b5-a7cf-f78f8ca83027",
          "length": 155,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "cfd4a82c-2641-4efc-a5c4-342abcbace31"
        },
        "item": {
          "id": "7a4fe464-58ad-450b-959e-f0843a63e341",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "02cafc85-7350-4b33-9896-10a2df2f7937",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "a72df418-e5d8-4183-a8fe-a802472ec525",
        "cursor": {
          "ref": "d19dfd75-55ce-4e08-83ce-00acc83e5903",
          "length": 155,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "bff55b61-6df6-441f-8f9c-5e763261df76"
        },
        "item": {
          "id": "a72df418-e5d8-4183-a8fe-a802472ec525",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "cb42b958-4bd0-482f-8d38-85dcb94593e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 12,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      }
    ]
  }
}