{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4d7beec6-492c-4e67-b3fb-3fde74f4610f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a6560587-a55a-47ef-9ff0-875b67d9dbbf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ccb33d8e-03b5-47f0-bb82-2f5ad41da629",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dee5e2f8-f856-482e-9ccf-3870840b7a48",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "334e8cfc-ed95-4b31-a07b-e2c9cc35e81b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "6e661602-a7ba-40bd-ba38-e93438f6ddb2",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "dfc4bfa6-df1d-4f15-bf4e-9be571dfa3ac",
            "name": "Negative Testing",
            "item": [
              {
                "id": "62b3b50c-92ef-4048-b0cb-c3d9dd098cf3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "71065f60-f976-46e0-9d21-9a470453c67e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c097715e-1518-4c09-8441-f0e4cc100494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "659b4d1f-9ccd-4822-a629-62270c82ca93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35773ea-5229-430d-a7b3-0669a2ce13cc",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ef8f49-5e71-42cd-a963-6206ecf9e98f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "437b9639-4dd8-4021-8991-f79b01d50def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec59019-975e-45bf-b4a1-e1670031d117",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdfe9359-5cfd-427b-9170-0f8efb89e7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dfab7fd3-6245-4766-8160-b7b7ab03896f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c42cd4bb-f605-4435-bcae-fccd03692b99",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "838c1c15-c92b-465c-a43b-f236a4eed412",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab315f2-7dca-4e3d-873c-fe9dea8fbaa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40c0f5f6-32b7-431f-b21a-30bcafb468d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5f89a3-1faa-43bb-bad0-ec9a28ae1640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f540946-5271-4c72-a767-d75f0ef8d281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca697a0-347b-4522-9c0d-00a28a7a8d33",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b45c7d-4e9d-4094-9b02-bfe5efe2879e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "edc73f9e-4e19-4693-b769-48a07e50c80f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf151769-7b59-425c-8695-ad8be330bbff",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "d70047eb-bf3a-4c8a-81be-738b213c1cdd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c37e9d74-677e-4f9a-8d61-fd1482de07f7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f8532dcf-168b-4c5c-a3a2-a84c01b63b55",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ea4ca92-aebd-41a7-a94c-6ac2fb2a6aaa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d9bcb9bf-ad59-4d70-ae2f-57a57e311378"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2642757-7471-4b71-b7ae-bca762d71e21",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "a5524660-a9da-4e0c-8899-06d4e2882ad4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77ff8a69-a587-4edb-87a8-59bcf5874834",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0aa7d52d-fc29-422b-b104-e5614d430ccc"
            }
          }
        ]
      },
      {
        "id": "52d14846-a30d-40d4-b7ca-a5d7d50a9c0b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "6512fd57-bf64-4c08-9e21-5dc3ae741f17",
            "name": "Negative Testing",
            "item": [
              {
                "id": "584c0e3e-3643-4c0a-bf32-f398994c99a7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c14ed440-6203-4c76-ad17-98632bcd71d6",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47930fe-4cfe-4bfa-8c66-090470f7ddbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a471ea87-2666-4c7f-9c65-99ad9d0a8b88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b42f06-1093-4d94-8196-447c025023cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5f46a6a-0d1f-4d37-99fc-886dcca6a89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67246aeb-d48d-4adb-ab44-bd1f3d18c306",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a58a8d9-b993-4640-b8d7-e2263f6cc829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abc94099-3dad-4e9a-8b33-abbca205cdf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09061bcd-2d0f-4393-91bf-235daf00c9ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "577e1df2-a84a-41bb-ac3a-d8605d0b56c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84aba988-2915-4b0f-9363-5d38af67d5e8",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1ace2b-2a7d-4ea7-b089-360ef874976d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b23215e-47c6-46b2-93bd-6c4d6b4cfc50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b145df-95d7-4774-9da8-046657150b42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc81f0f9-e5a4-4582-9812-2d1ee7a46ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d981b63-65dc-464c-8322-2ad9e992e8dc",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ed3cad-6d8a-46b1-8632-555aa27e2d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b994fcc9-2f92-4378-8b10-392f4f591a4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff5c75d3-d0e0-4559-827a-1cfc3b3eed76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4645990a-4ffd-4125-a96e-b8340bea7b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4dfd07c-55d1-48a0-802b-a23af6bc7450",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b4402d1-185f-48f2-9504-6a1990c8ae95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2735f3a3-6652-4384-86d1-c9fd965d5fb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb4d78c-6938-4742-aa8b-ebc1c6c143a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4fc2fbc-9660-46ef-9099-71ddb32b8268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93cc222e-3b4d-4ed2-b06b-91e6a4275cd5",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a06df8ca-a0a4-4dbf-a533-9998db23ba03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da8b3976-c10a-46dc-84d3-bd2640c8113d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452ee140-61ac-4f67-9a37-d631be3c9765",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "135e183e-81d5-4488-8e8a-c1a007618bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7319952-5042-4957-a8dc-dd5c8c6c14b6",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "027ebfa6-6622-4aa5-a900-bd408a64b0e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02654255-08e9-4daf-b83f-97bef4728876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01901e00-e125-4f84-b53e-5db4b19700f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8a26576-8f01-41f7-82cc-a86b7825d3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "335cf315-0548-460e-b5f1-2f71c6e742bb",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb8b1ae-1693-4f9e-99f8-285b038f9303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b12d13a-1284-45f4-83a9-93830210c6e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b02046a-c6be-4fdb-9557-b6d64d9ae2b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a76048ba-7523-423d-b9d6-06230b020463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b4e232-d804-49e8-82f5-e4dab6054a3f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9bbcb72-2b94-4869-9fda-9f437a82750e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3d12224-92ff-47da-910d-6e70035ca7c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40341e7e-53e6-49a1-b4d0-b57dce4933ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74d1cea3-a683-4f35-90f1-667da0074b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f4fd1d-da18-4060-aa2c-c985dd2f979c",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54cf2409-9797-46b1-a89a-69bf2fd8e419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d1b8e99-fc08-4bcc-9793-c1b6e0ae5df8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aaa6dc1-f320-4a2f-8230-487ee3e1f630",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "745d7071-060a-4769-b3f0-86a82c1d0816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e30a2bfa-5294-4ab8-9d86-901aaf6356ae",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e314dfbd-8db8-4c4e-a22a-895ba74eda95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "778e48b7-c125-49dd-8796-5463e87d6514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc9365d-ab99-45e1-a4b7-138a998e5597",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "992f9c0e-7f53-4cbe-b3fa-50d838e5b6c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22fa15e-c2da-4e36-8e3a-2b2c68f34cc8",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e62ac63-5428-4685-a5c5-23b03c11b529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cfb6b8b-e937-42fe-a852-52283f52837f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a32a668-d432-4512-b59f-ade0472c99ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "58d55235-09d0-4cac-99ae-aa4d66c3f02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ba3ed3-3b4c-429d-9244-a8c3815e484a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03aae59d-7112-4ad6-92c5-bc42bd6e6af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fca6e732-a817-4312-bdda-0d3583c12fd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef1e12d-22df-4fbb-913c-81003d6636ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60185356-d3e6-428c-ba2d-344bdacea9c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec131d61-4c89-4df2-b2ca-b2e6b5b3d03c",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47afb9e6-14a6-43ea-b7ed-ba47596b59cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7625cff1-7a01-40fd-8fb1-0d6c17932c69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629b8c59-0548-4888-8dfd-5699783d5c42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "322e3392-8c45-4385-a908-b8e1a6c1bc6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a988d0b-0ae8-4c8b-a8e1-eeeccd329e73",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc169f74-c875-4a60-afa4-42b09c49e1f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b674aba-908a-4040-b5db-e31960d2e9ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a049bba6-259b-473f-b40b-dbd746f82582",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "e84db3cf-f3e5-4c4a-a25d-83d59770bcff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66947406-1732-4f7e-bbed-f3d905552dc2",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "320e0ddb-256f-41c3-928e-6c0326e39dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42a8505b-b2be-43e2-9fa6-e5e8ffa89bde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55994660-3c49-4fcc-8bef-8d252a0dfa34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "af124679-f11d-4568-b3ba-abde33355afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b8e08a-4535-41ce-bc4d-7b0d0d376e0a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc6742e-8f5e-451b-9f04-935d2aa105e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcd60f7a-a88b-4bd1-8fe6-7871e43385d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2b90ac-6bf8-4fbf-abad-2a39c437d4c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b48a3eb9-d0b4-409c-931b-983e4a0e8d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bfc547d-61dc-4e1f-948f-c9843080b297",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4da1a06-bf9c-45b4-81b6-2a3f0f2ae7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87f7349a-c212-4f27-b28b-2328c96b292d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ff45a3-0b3a-4f1a-8028-c0daf42e9dc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c21827df-13a9-493e-8abe-f8759a2a7bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fcacb9a-6c93-46a8-b515-29a605613c2d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef5b75e-5f57-4eaf-a7f5-aeb32e5085b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe7f4114-f238-497b-a8a6-90acacda5419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aff0d5d-77e1-4ef2-9d9d-6825598e0476",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9941e3df-9142-4554-9226-ce606e75a77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23834a7f-f5c4-40cd-9440-9c5b37ec9bad",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d488a2ac-3504-4a0a-8650-a935e18e34b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e95ad2f1-7b28-4f42-a1d6-30c221b48032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6581a988-ed43-44f1-817d-28ae30ffdf48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74fdecf6-1660-47a7-8ff6-ff0488a9ce68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d85f90c-4fb1-48b8-a874-9fb41199dc82",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ff6433-3671-4851-9040-a48b4cdec6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c501f7bf-12a0-4ce3-9634-9e7c78949bbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc71421-add8-4fa3-bad0-fe4ad286dfc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09337f62-36b3-4a69-adf1-0570853f1bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50dd8369-8ba5-4399-9dd3-c1bba7249a47",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d775bb8e-05fe-4a31-86b3-a16c5014b7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b459bd38-96cf-4373-8d81-950fdb0b9ac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d9db3c-6747-4756-be18-dcd446e901d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12e411de-412d-4e7b-86af-d122f5b22f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5996b56d-b852-4063-94bb-31ef0ebbc758",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f38d4e73-0d18-4ada-a542-555f069a98e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8978418-666d-4cc2-a797-8c665c76a94a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f8cf7b-c2a8-4866-93b4-c65be025cf6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b385a931-ba6c-4e2e-b272-449083c4925e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2811e7a-2166-4ef9-8913-522bdb20881f",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ae46df-47d1-4c1a-a763-73704601922f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6750bc8c-f0b6-4db3-a87e-0b8f36a7cf3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83dd6169-26ae-40e1-a9e7-46d5812eadeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f6a231d-5656-4239-a9ec-16b0cc184742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe9d7d66-d9d0-4818-ba9a-2a0053242bd9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63162d15-b9eb-4cd0-b222-3b8358fa6d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f2b08b-5bd7-48f2-8ff7-816a04c076f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c699d8-47b8-402d-a8e7-201e6a2d97e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35cded24-1f0b-4697-8719-ce7b2060e5fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27dbf02b-80a1-4b92-b84c-212fe19d82f2",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a021b62-6004-4038-acaa-861860bce14f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d485831-e364-4849-814c-ceb0e899cf2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2811d5-e082-4d91-af0e-9cdb45317c05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a252b29-623e-4420-a093-625af493e4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7891490e-a015-499a-9704-9c692a4e4f34",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d819bd7f-ec2d-48de-a944-254a2c76e29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77608501-7bb6-4988-aede-8da35c3d141c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0d5d94-b198-492b-ac3e-10fd819aaf7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57a87783-3fa3-4a1c-b7cb-c9207b9a6ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c1e84f-2181-4a68-8f5d-50cd3e96d51c",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b232ab-ec53-4bcd-9d2f-433370378c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74c3ba26-92ec-4ed8-a5f2-0dc0d5563910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28137b4-bf6d-47a7-a001-02475cb3fc40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f2980ec-c0ce-420f-aab5-79e408d28d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c357f8-6a0f-449f-8372-f165ecbc7a68",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a906c6ae-b05f-4707-af56-14d7a4153b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94dee462-77d7-43f4-b884-83fecd7d73ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f419d8ae-2f5c-40bd-bd3d-a57399eb9ed5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7078969-cb2c-4168-881b-155773e6b15a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7265ae-0c25-4cdc-b7af-19a6454589a9",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72530e39-e4f6-4547-97c2-2339bf51077a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "274f1769-2265-4be1-b868-b84541dc8278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15aefe18-6acc-41d6-a48a-4799626e3301",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f59d17b-edb4-4995-ac42-b9dc22e82c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2d6173-355e-4654-a011-9c96238084e9",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04035ff-0f3e-4498-88d2-ffe6f26f22b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c8855add-d6fd-4d8b-b904-6f4e21a7073f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23bc2b5f-7ea9-4b39-af11-320bfe951fd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6ab7c1e-f8a0-48dd-a6c1-b78b24495b20"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "33b7fc14-2260-4ef0-9aca-209b5fa4e858",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "41997916-9e47-4bc7-be90-f7165b8e7d0a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35e5a1d-c635-444e-9beb-32360f19b13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9c41892-4bd0-4782-bb1e-03a18231b02c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3082690e-b295-49bc-9510-188f175f011a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "ab410dba-5385-49cf-9aa1-cb124b67749b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722319f9-1dd6-48e3-9b1c-7ab1e1cf3396",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd3d18c2-86c8-4397-a87d-80abea9b55c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75509d85-63b0-4bc5-854e-6af80903714b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67784eb-92b9-4e43-b281-61d1c14c47d7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "c60d0c22-46b0-4001-8512-d8f4f0669921"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5739d45a-bdcf-4261-89c4-c29b76f1a323",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65a0c6bd-1767-47c6-9ead-235baf0e58a0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e59e3036-8f99-4f82-809e-c043760947dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "174245ee-38c6-4e0e-bbf1-1aabc63b3d49"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b12414e9-c546-41f6-a138-cf811fbddae2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e014d36d-4996-4ed5-a9b9-3b15321fc7a5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9f1b36d5-ae40-4127-a413-8a7969839ab7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2e0b2178-0ff0-4db6-ab02-a292b4b6820a"
                }
              }
            ]
          },
          {
            "id": "56a6abbe-27b1-45f0-9f5c-6b0cc00ec873",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4f63f054-013c-48a5-abaa-ca8a3ac3e353",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6da3f5ec-a250-4041-8d52-ae5cfcbcb6a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "be75f263-94a1-4472-b769-a7d6b0df81f5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cedf5846-b176-4ce8-b897-37a97e4e55fc",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "c8caed3f-81e4-445d-ae64-254c1b02a039"
                    }
                  }
                ]
              },
              {
                "id": "688dd0b8-1fd1-4d47-b382-555ee071d6f9",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5d5198c-a0a6-4a7b-a22f-781c9e18b7f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2491fb6b-b2e3-46dc-8c7c-e27651544669"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bae28b6b-f5d8-42db-9036-5ff5e07f5c9b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "81aa33d0-a0ea-4938-9caa-89b4b2b72d43"
                    }
                  }
                ]
              },
              {
                "id": "74583449-bbdf-4212-ab84-f2ddeb7e25db",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "87c609e3-54a9-4028-88d7-fd1e2dab77a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ff5919bf-4376-456d-b826-4dc317c3c029"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d488dbe4-38b4-4a91-92a8-922a9269ea82",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "3dc6ce62-9c1f-40de-99b3-3e904592a705"
                    }
                  }
                ]
              },
              {
                "id": "54e86f22-0ca7-4eca-832d-4058e8b916b0",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a934dc80-82f6-403e-a9dd-fc2383e0ef99",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c227613d-90e2-425f-85cf-947cea2837ab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63efd97f-843f-414f-95bb-f42f8a0fec09",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "50d61d4a-a9cb-4a9d-ba95-b3615faef493"
                    }
                  }
                ]
              },
              {
                "id": "9370406c-bcc8-42eb-98d1-f887e384bbd6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aad0da55-4b2d-42fd-8e5d-326d9fb43998",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "76ec429e-59ad-41df-8476-1c1c7d26d807"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2194f065-4680-45b2-adf8-8f97731f68f1",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "407d5299-b1ca-48cd-b3a8-dc45d57f24b9"
                    }
                  }
                ]
              },
              {
                "id": "861d1c12-86ea-4874-9196-6eb0521d5b4e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0bfcff7c-519e-4a79-9c67-b056e7a4a809",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a9fdf2c5-4ee3-4f21-a9a5-da5fb4213ef4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f6de859-5be4-4464-8d1b-64ba36155532",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "d28d03c2-7271-4e26-bd19-81f60bb8f6ea"
                    }
                  }
                ]
              },
              {
                "id": "b37a4c78-1f94-4a86-95f4-b56a6ded8ff3",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d914897a-65a2-481b-8592-a711d4a89352",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9ab2f857-34cf-4459-bdc7-34d9ac2143cc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fdd24518-cdfb-4e98-bf41-4713dfbd1357",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "0446b112-8dc3-43ec-8fd0-42460542252e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e46aef04-09ef-4dc1-8542-9e3d3a069527",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bf068d25-3463-4c72-9f57-04030dc23606"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ef2be60a-de5a-498c-9577-1fd71f774ca8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ba663a23-ebac-486e-8636-357628c27b9e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "486e1a4f-a669-4677-9bf2-8c102feee0eb",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "3d8f0756-718b-43ad-bbbd-d59f1b7ffbff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40d328cd-bf73-4d52-8192-0195df63e59d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c6212e6f-08c9-466d-bcff-0aa6ade1ebbf"
            }
          }
        ]
      },
      {
        "id": "8da6a68e-b37c-4ce1-affb-256840ddc240",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d6e1c6a4-e94b-42cf-b360-73cb9b908e45",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c68892ca-b986-41ad-b83d-6a14788d25b4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ddc2f9d2-4e5d-4a5c-bccc-957f8169fc25",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a2ddcd-1c0d-44ba-841a-890be9932ea0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f085aa-ddee-4a99-93f5-e428b413b699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56415038-94f2-4874-b68b-079a790cfffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2dc250ed-1a18-4691-9c6b-a4b458e152f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e46f6848-f756-4978-b08c-be56dcef6eba",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc9193e-c5a3-46f3-90fa-c558f87a9c4a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "b74e488d-f893-4b4d-a614-e5ca7d0645e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "085894d0-5d8f-4fd5-aa9b-440ee49596cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87ac8e63-7f68-449f-a957-257f9cda5674"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd564d9c-9236-4c37-b2a5-aa673e027b65",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4bdd2e45-9355-4ae7-8cc8-ce42d9d2b12e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccb22268-39ad-4c5f-8c6e-41eb07023622",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "744def81-0120-42ce-8229-dc0441f5d573"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d879ef8e-f258-401a-a32a-c4bf74fb5bc3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "8bf6c69b-1d0c-4b5b-ae74-b2a9c0c1b867"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1192faba-559e-4837-9157-f1589077b01e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "928726de-9546-4b65-8121-5186de12f016"
            }
          }
        ]
      },
      {
        "id": "f87355d9-0875-4458-a6ec-6bdd30e265b5",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3b15506a-129b-4519-9770-d1709e61477a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d7392da4-b2f2-4a34-8d20-b9fca99a6c98",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a39f53a5-56bf-479f-8542-a7173639a6b2",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f80cfa-0d1d-4689-a7b8-895fd9a92cba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9b30c30-a27d-488d-99b2-38388083df32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8817d9-75fd-4bd5-a249-5a1c0e98fcd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c872d933-6c07-4d4a-84ce-15a786ac40b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f4e133-5521-4c54-b272-b5627e882e33",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca055a2f-e9a3-4da0-93a0-90e11a53a97e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "614dc721-60d9-4526-a9a5-b15581eb97a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a65e82a-9d84-4c50-9713-54aeddfa04d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72f61855-e797-4ee2-ab38-ae8ec7eeb997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e66bece-afbe-4635-8c46-36dea3ef83ec",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14dcd22-75ca-4a87-a901-7360d4a5be7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "693c60d2-8fc9-4859-b0de-88ddee2186e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b2efafa-2f31-4dd3-988e-a2d4f792be40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cfba4881-e540-40e0-a6e6-bb6fdb9acfdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e2cbd5-2e97-4f83-ba70-7026ff18e4ec",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a5ecca-60d0-47d5-83fc-72c33cb71427",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c874dc8-62b1-45a7-b5a3-86b254811838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e878ccc8-332e-4800-92d3-37963cd6f067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b27b9e2-e243-481c-9f89-25dbf22e50c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1528b02a-0be0-4726-8208-c7c49245b8bc",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a632327-146c-4ce3-87ee-4e629a87bab2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58bcc987-2179-49fb-b49d-dee1fb3c31f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5cd4cc-c6b1-44e4-9ca0-025855510dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a3077ec-8ef0-4760-962c-42fb8672d457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c4cf36-445c-4456-8a58-03af681ec923",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c12802-7bfe-4bb6-9cc1-3cd7a77e9746",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61498724-caa9-4313-bcbe-e5e7d6a38e90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b59634d-4677-40f4-b46f-fa8a65602f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f0f7431-4fb3-4206-9a30-0ba660227c8c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b13c9acf-2d38-4fd6-be88-636d67cd51c8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d2386723-faa1-4045-94ca-b26b54e2a327",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288c25d9-1c84-44ac-bef8-e604e6403147",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "748c9cd0-f201-40cf-ba8c-f4444284e3b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13486f85-9922-43b8-9880-fdb5cfadafb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5149ef3e-38f7-453f-93e7-55841b2c6d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914fff48-a9ca-4018-853a-471e95f3e1f7",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd89cb2e-e008-4532-8dae-877d1270489a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "244a5b78-254b-4d52-9105-6169b2ae9dd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95a0665-ec93-4ba0-87ca-15f6877ec067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70e6ed54-73d5-4c4e-954b-3851faff95d8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75257710-f97a-490f-a025-d36e4500a566",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dcc1880f-a8da-4c47-9a28-ef07fb379579"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "218c1b15-fdff-4ddf-837f-d1edbcd67c3b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2744f16e-a28d-48f2-8b0a-53bc420b4f9e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83d91827-2607-401d-9a61-04b849dd0eb4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "104f303e-6b04-4d98-b29e-0740f077cdb3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d85da5f4-9c1d-4a7d-a549-7c4e14179615",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "12b8454c-7bf9-4caf-a718-209e0c157f12"
            }
          }
        ]
      },
      {
        "id": "ad0d473a-71a5-457d-a3f8-e60e4aa14358",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f302fbd7-546f-4ce5-a956-f6a9f4642a90",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c62c9796-5311-4243-a763-d1d4a573fe4e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a4e2e9c2-d9db-4bc0-b74c-a958675efaaa",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e7a3591-7745-4aaa-bade-6190c5e5604b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9208e609-0c81-4fe7-b21e-e2042cfbb59b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "806feb6e-b535-4e81-8a23-627e09b272c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59e8b279-cfab-4ce7-96ff-3c7b1197d92a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8bfc60-841e-47bc-bc4f-0d77ec638243",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d24342-a590-4f35-9512-770a33fc0fde",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "33d52882-34b4-48c6-8e92-5cfe7800cb36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15885a89-d8f6-4d8f-8534-fa3e918cb64c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89f750e4-046c-4415-805d-48a7f88bfa2c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa456e78-964e-487c-b7c4-8d024712ddda",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0cdcc182-9769-40bd-9ec8-14c35f5aa8d5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b268a2e-7600-49ec-b3b8-bea51693e8c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f215d909-65d6-4293-8b3c-253428328148"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "00581686-b5ca-4186-991b-3661cdee44ff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "6dd59a05-4871-48c4-b345-5d824188e1c0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70a63aae-7152-4a6c-8c56-9fb9746b3518",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "04cb7eb4-d7be-4a62-bc13-4ab97e12dbc1"
            }
          }
        ]
      },
      {
        "id": "5295cf97-2d14-484c-815f-382fe1cb8093",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3a8d3643-1803-4405-8804-ffa818965d27",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1a78e97a-3ef2-4b1b-9b1b-a43a6711ed6d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4c1e713e-8f69-4b0c-beac-b9993e01a274",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa2dadd-261c-4b8b-8b7b-cd1a0d90cce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89d90d5a-58c4-4c81-b78c-79f34b3446c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5799fa1b-da54-4a3f-954e-16e377ae1876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82de6cd7-bdcd-40cc-a4a8-b8d0a2e0ceaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d0fdee-4d46-4b8a-b205-1df22e0a2f88",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62e5b1a-953c-4406-99a4-87c71461c034",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "3f7389d6-092d-4f5d-a7a8-acd5e465628c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9083174e-6f07-45ab-a777-f1a9d4823193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "932c379d-6f5a-4351-b332-f0f5efc7c595"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a13657a-a4c2-4beb-8916-43de59d8272a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "914c900d-be68-4e15-9953-74c64995942c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a4e1372-8212-4490-a812-5204a26c149d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a919d32b-c1ac-4147-a4be-41df7ca1ea9b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "558752be-58e4-49a9-9093-bd967749f558",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "93a0d7fb-80f9-44d0-a3d1-fa27c5f3d5ed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e15f4d58-6b77-45b4-a873-74c068a49905",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6486a2e5-d675-42ac-b789-fe91c977b710"
            }
          }
        ]
      },
      {
        "id": "87aab87a-2d6c-40f6-ac71-8b1eef5a468e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "4284e114-c7fd-4a6e-8a46-5a1dbcfde965",
            "name": "Negative Testing",
            "item": [
              {
                "id": "543f5771-7c92-48e2-8f89-d3986ce15fae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0c711e01-9547-47c4-8d9f-329716cdb485",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b0cb7b-1abe-42c9-a12a-1eec19a620e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "930505fa-5440-402b-87de-b0c30da41a79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7957b0a2-dec6-4a33-9292-62afcd9d6478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60135100-7219-4ebf-9189-b435a1c60e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec4d01f-2a1a-4388-ac57-c13eb82e0494",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b590cce-cf15-4235-8112-79a424a04f35",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "62cc1a4a-b932-4567-a478-70795a4e2493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d66056-1d84-4c85-ab0a-ad3712d9aaf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "68e81cdf-bd86-4fa0-8e3f-d41eaef12b45"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bdda132c-035b-4304-a27a-cb4697365938",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8fabede1-3afb-49cc-92d3-ca460694fcfc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "76fcdbef-535a-40b9-a183-65fa2f8613ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6d947fd7-1228-48a1-b6eb-dcf3ef98dfde"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e59ce18a-116f-4501-bbca-51fc6e7e4703",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "f83c7247-2b4b-4350-951d-96a069cd4ba3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "baaa4fc2-377e-45c1-8bf8-26e1cdabe59c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "06976dde-5673-4e27-9212-ef8a5dba5035"
            }
          }
        ]
      },
      {
        "id": "1b2957eb-d846-40f1-8a66-84d13634f08f",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "723affda-9457-4624-8d30-d9e52b5b6414",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 475,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 111,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 131,
        "pending": 0,
        "failed": 8
      },
      "testScripts": {
        "total": 240,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 235,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 53.261261261261254,
      "responseMin": 10,
      "responseMax": 421,
      "responseSd": 93.25676186982506,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1662944083481,
      "completed": 1662944092482
    },
    "executions": [
      {
        "id": "ccb33d8e-03b5-47f0-bb82-2f5ad41da629",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 63,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a25dfed4-987e-48ed-957d-f34e0dcfc932",
          "httpRequestId": "123ba0b2-14ec-42ee-b719-a9d9300fea08"
        },
        "item": {
          "id": "ccb33d8e-03b5-47f0-bb82-2f5ad41da629",
          "name": "did_json"
        },
        "response": {
          "id": "5e0a3ba5-6134-4ecf-8251-4e04bbfd9f91",
          "status": "OK",
          "code": 200,
          "responseTime": 162,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71065f60-f976-46e0-9d21-9a470453c67e",
        "cursor": {
          "ref": "9cd0af1f-a7ed-4c0e-b9f2-97006d5356d5",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d828ce3e-c8a8-40d5-9de0-3c8be35995a9"
        },
        "item": {
          "id": "71065f60-f976-46e0-9d21-9a470453c67e",
          "name": "did:invalid"
        },
        "response": {
          "id": "343b9d0a-c417-4533-9960-ab7cca8b9464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71065f60-f976-46e0-9d21-9a470453c67e",
        "cursor": {
          "ref": "9cd0af1f-a7ed-4c0e-b9f2-97006d5356d5",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d828ce3e-c8a8-40d5-9de0-3c8be35995a9"
        },
        "item": {
          "id": "71065f60-f976-46e0-9d21-9a470453c67e",
          "name": "did:invalid"
        },
        "response": {
          "id": "343b9d0a-c417-4533-9960-ab7cca8b9464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35773ea-5229-430d-a7b3-0669a2ce13cc",
        "cursor": {
          "ref": "af7e3917-9f09-4452-84b1-27f4bad2229c",
          "length": 63,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3ff786d5-c7d2-448f-922b-8e49659f7205"
        },
        "item": {
          "id": "d35773ea-5229-430d-a7b3-0669a2ce13cc",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2d4777a4-0b4d-4dc7-a66d-c5244e222a6e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 69,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec59019-975e-45bf-b4a1-e1670031d117",
        "cursor": {
          "ref": "fd346c2f-840a-4130-97de-6bcccb302244",
          "length": 63,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "349e4d7d-a6b5-4b25-b0b6-45e3bbb8204f"
        },
        "item": {
          "id": "4ec59019-975e-45bf-b4a1-e1670031d117",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8ee378ac-254a-40c8-87d2-a84bf13544f0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 13,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "838c1c15-c92b-465c-a43b-f236a4eed412",
        "cursor": {
          "ref": "557ceaf8-8e4e-4490-b3b1-8f6b82985643",
          "length": 63,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c57e2735-27ce-4d6d-a203-9dea4a19cc40"
        },
        "item": {
          "id": "838c1c15-c92b-465c-a43b-f236a4eed412",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a52bfd1c-3d9a-4968-aaca-be34285cf846",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca697a0-347b-4522-9c0d-00a28a7a8d33",
        "cursor": {
          "ref": "1edb2daa-7597-4a3b-8cf7-88164c7623c0",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "10779188-8ac5-4585-baba-df2918f25e92"
        },
        "item": {
          "id": "0ca697a0-347b-4522-9c0d-00a28a7a8d33",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "879254da-313b-472c-a3d5-ab782692b8f0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 13,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca697a0-347b-4522-9c0d-00a28a7a8d33",
        "cursor": {
          "ref": "1edb2daa-7597-4a3b-8cf7-88164c7623c0",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "10779188-8ac5-4585-baba-df2918f25e92"
        },
        "item": {
          "id": "0ca697a0-347b-4522-9c0d-00a28a7a8d33",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "879254da-313b-472c-a3d5-ab782692b8f0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 13,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8532dcf-168b-4c5c-a3a2-a84c01b63b55",
        "cursor": {
          "ref": "c66fc45d-d3a4-4fc9-8bc5-debfce4e0205",
          "length": 63,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ba9f7a18-ec45-428b-920b-7ebf46eed055"
        },
        "item": {
          "id": "f8532dcf-168b-4c5c-a3a2-a84c01b63b55",
          "name": "identifiers"
        },
        "response": {
          "id": "add24fcc-ff37-4903-ab01-ed1513496c3a",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14ed440-6203-4c76-ad17-98632bcd71d6",
        "cursor": {
          "ref": "1e27f91f-3628-4370-aaf1-1bb64febc567",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f78f99f6-4a7d-4413-80ce-da95d35f2562"
        },
        "item": {
          "id": "c14ed440-6203-4c76-ad17-98632bcd71d6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "82c0dd5d-d5d0-41d8-92cf-7919655bc934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14ed440-6203-4c76-ad17-98632bcd71d6",
        "cursor": {
          "ref": "1e27f91f-3628-4370-aaf1-1bb64febc567",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f78f99f6-4a7d-4413-80ce-da95d35f2562"
        },
        "item": {
          "id": "c14ed440-6203-4c76-ad17-98632bcd71d6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "82c0dd5d-d5d0-41d8-92cf-7919655bc934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14ed440-6203-4c76-ad17-98632bcd71d6",
        "cursor": {
          "ref": "1e27f91f-3628-4370-aaf1-1bb64febc567",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f78f99f6-4a7d-4413-80ce-da95d35f2562"
        },
        "item": {
          "id": "c14ed440-6203-4c76-ad17-98632bcd71d6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "82c0dd5d-d5d0-41d8-92cf-7919655bc934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67246aeb-d48d-4adb-ab44-bd1f3d18c306",
        "cursor": {
          "ref": "71374530-6173-4866-94fa-b7a56e52cf71",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9e5bd1f4-5e83-4aad-a331-4bf5ca86e7ca"
        },
        "item": {
          "id": "67246aeb-d48d-4adb-ab44-bd1f3d18c306",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b6ea2fb1-2406-4801-be1c-640fc8eda42c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67246aeb-d48d-4adb-ab44-bd1f3d18c306",
        "cursor": {
          "ref": "71374530-6173-4866-94fa-b7a56e52cf71",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9e5bd1f4-5e83-4aad-a331-4bf5ca86e7ca"
        },
        "item": {
          "id": "67246aeb-d48d-4adb-ab44-bd1f3d18c306",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b6ea2fb1-2406-4801-be1c-640fc8eda42c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84aba988-2915-4b0f-9363-5d38af67d5e8",
        "cursor": {
          "ref": "d3920764-c796-4389-9515-d2f3823921c5",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e6a5c416-f5ef-4771-a622-fa89d12d00ae"
        },
        "item": {
          "id": "84aba988-2915-4b0f-9363-5d38af67d5e8",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "6de62952-8b05-4804-87e4-360f03f6c708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84aba988-2915-4b0f-9363-5d38af67d5e8",
        "cursor": {
          "ref": "d3920764-c796-4389-9515-d2f3823921c5",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e6a5c416-f5ef-4771-a622-fa89d12d00ae"
        },
        "item": {
          "id": "84aba988-2915-4b0f-9363-5d38af67d5e8",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "6de62952-8b05-4804-87e4-360f03f6c708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d981b63-65dc-464c-8322-2ad9e992e8dc",
        "cursor": {
          "ref": "15ab6bec-2caf-47f6-af82-6ba7b5042e60",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7c459ffd-3740-4079-bcc5-d1d612d2d857"
        },
        "item": {
          "id": "7d981b63-65dc-464c-8322-2ad9e992e8dc",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "e629af88-b5d2-47d5-9bb5-faef389da25c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d981b63-65dc-464c-8322-2ad9e992e8dc",
        "cursor": {
          "ref": "15ab6bec-2caf-47f6-af82-6ba7b5042e60",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7c459ffd-3740-4079-bcc5-d1d612d2d857"
        },
        "item": {
          "id": "7d981b63-65dc-464c-8322-2ad9e992e8dc",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "e629af88-b5d2-47d5-9bb5-faef389da25c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4dfd07c-55d1-48a0-802b-a23af6bc7450",
        "cursor": {
          "ref": "d527030c-5416-4f0b-9139-a353a842d001",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "64a77c3d-825a-4f35-9dca-8d1e480639e1"
        },
        "item": {
          "id": "e4dfd07c-55d1-48a0-802b-a23af6bc7450",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "7e76ff81-fd65-4151-a645-3ebbe48d7b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4dfd07c-55d1-48a0-802b-a23af6bc7450",
        "cursor": {
          "ref": "d527030c-5416-4f0b-9139-a353a842d001",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "64a77c3d-825a-4f35-9dca-8d1e480639e1"
        },
        "item": {
          "id": "e4dfd07c-55d1-48a0-802b-a23af6bc7450",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "7e76ff81-fd65-4151-a645-3ebbe48d7b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93cc222e-3b4d-4ed2-b06b-91e6a4275cd5",
        "cursor": {
          "ref": "c0e2d558-4a8d-4fe6-b98d-b22ffc440951",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "81347773-ad55-49ba-a1b7-db66437cd17c"
        },
        "item": {
          "id": "93cc222e-3b4d-4ed2-b06b-91e6a4275cd5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7754b11e-9def-492e-8ad6-35f1f3cb0012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93cc222e-3b4d-4ed2-b06b-91e6a4275cd5",
        "cursor": {
          "ref": "c0e2d558-4a8d-4fe6-b98d-b22ffc440951",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "81347773-ad55-49ba-a1b7-db66437cd17c"
        },
        "item": {
          "id": "93cc222e-3b4d-4ed2-b06b-91e6a4275cd5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7754b11e-9def-492e-8ad6-35f1f3cb0012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7319952-5042-4957-a8dc-dd5c8c6c14b6",
        "cursor": {
          "ref": "f7e9dc6a-8b8d-4053-a4e7-8e5bad5bb428",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8d28bc16-7217-489f-b3dd-87e0a49a5a61"
        },
        "item": {
          "id": "b7319952-5042-4957-a8dc-dd5c8c6c14b6",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "3abd7c83-cfd5-49d6-b0de-02f144471d40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7319952-5042-4957-a8dc-dd5c8c6c14b6",
        "cursor": {
          "ref": "f7e9dc6a-8b8d-4053-a4e7-8e5bad5bb428",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8d28bc16-7217-489f-b3dd-87e0a49a5a61"
        },
        "item": {
          "id": "b7319952-5042-4957-a8dc-dd5c8c6c14b6",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "3abd7c83-cfd5-49d6-b0de-02f144471d40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "335cf315-0548-460e-b5f1-2f71c6e742bb",
        "cursor": {
          "ref": "9efac8e8-4e73-46bd-b882-3cf6bf373e91",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "109a7d7f-b218-46de-b26d-1971117d23f9"
        },
        "item": {
          "id": "335cf315-0548-460e-b5f1-2f71c6e742bb",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "afbdc8dc-c6de-491a-a0db-771bcbcdb0da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "335cf315-0548-460e-b5f1-2f71c6e742bb",
        "cursor": {
          "ref": "9efac8e8-4e73-46bd-b882-3cf6bf373e91",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "109a7d7f-b218-46de-b26d-1971117d23f9"
        },
        "item": {
          "id": "335cf315-0548-460e-b5f1-2f71c6e742bb",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "afbdc8dc-c6de-491a-a0db-771bcbcdb0da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b4e232-d804-49e8-82f5-e4dab6054a3f",
        "cursor": {
          "ref": "7389fadf-a1d7-4ecc-a714-983b8adf5f61",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6eec922b-ad8b-4e0d-8e92-fd84794645f0"
        },
        "item": {
          "id": "62b4e232-d804-49e8-82f5-e4dab6054a3f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d9cf09ad-e462-4757-9074-ace3dbd149ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b4e232-d804-49e8-82f5-e4dab6054a3f",
        "cursor": {
          "ref": "7389fadf-a1d7-4ecc-a714-983b8adf5f61",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6eec922b-ad8b-4e0d-8e92-fd84794645f0"
        },
        "item": {
          "id": "62b4e232-d804-49e8-82f5-e4dab6054a3f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d9cf09ad-e462-4757-9074-ace3dbd149ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f4fd1d-da18-4060-aa2c-c985dd2f979c",
        "cursor": {
          "ref": "e6989506-332e-4f2d-9cde-7f11a51006c6",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "77509416-8c54-4a71-8983-c79f89b81178"
        },
        "item": {
          "id": "14f4fd1d-da18-4060-aa2c-c985dd2f979c",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "6d32bb6b-d30f-413c-aee2-93b76951699b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f4fd1d-da18-4060-aa2c-c985dd2f979c",
        "cursor": {
          "ref": "e6989506-332e-4f2d-9cde-7f11a51006c6",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "77509416-8c54-4a71-8983-c79f89b81178"
        },
        "item": {
          "id": "14f4fd1d-da18-4060-aa2c-c985dd2f979c",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "6d32bb6b-d30f-413c-aee2-93b76951699b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e30a2bfa-5294-4ab8-9d86-901aaf6356ae",
        "cursor": {
          "ref": "44a9120c-9a15-4077-a376-45ffd07f82ce",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ffdd0e3a-f40c-467c-aa04-c481622879a6"
        },
        "item": {
          "id": "e30a2bfa-5294-4ab8-9d86-901aaf6356ae",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "08052b4a-f75e-4238-819a-508c0629e305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e30a2bfa-5294-4ab8-9d86-901aaf6356ae",
        "cursor": {
          "ref": "44a9120c-9a15-4077-a376-45ffd07f82ce",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ffdd0e3a-f40c-467c-aa04-c481622879a6"
        },
        "item": {
          "id": "e30a2bfa-5294-4ab8-9d86-901aaf6356ae",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "08052b4a-f75e-4238-819a-508c0629e305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22fa15e-c2da-4e36-8e3a-2b2c68f34cc8",
        "cursor": {
          "ref": "5515a184-e844-4490-907a-729e65fe6760",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5569fb89-ec09-475b-a8bf-b5fcfc93759c"
        },
        "item": {
          "id": "c22fa15e-c2da-4e36-8e3a-2b2c68f34cc8",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5ec2ce0d-035c-4d27-a684-51e7c9405349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22fa15e-c2da-4e36-8e3a-2b2c68f34cc8",
        "cursor": {
          "ref": "5515a184-e844-4490-907a-729e65fe6760",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5569fb89-ec09-475b-a8bf-b5fcfc93759c"
        },
        "item": {
          "id": "c22fa15e-c2da-4e36-8e3a-2b2c68f34cc8",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5ec2ce0d-035c-4d27-a684-51e7c9405349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ba3ed3-3b4c-429d-9244-a8c3815e484a",
        "cursor": {
          "ref": "59cffe1c-6985-4396-91ef-fa51174c8f3f",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8b888944-a56b-4f7c-b61d-1e4568c39e6e"
        },
        "item": {
          "id": "e6ba3ed3-3b4c-429d-9244-a8c3815e484a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "caad1a46-ca43-47bd-a30b-f8508cc78f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ba3ed3-3b4c-429d-9244-a8c3815e484a",
        "cursor": {
          "ref": "59cffe1c-6985-4396-91ef-fa51174c8f3f",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8b888944-a56b-4f7c-b61d-1e4568c39e6e"
        },
        "item": {
          "id": "e6ba3ed3-3b4c-429d-9244-a8c3815e484a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "caad1a46-ca43-47bd-a30b-f8508cc78f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec131d61-4c89-4df2-b2ca-b2e6b5b3d03c",
        "cursor": {
          "ref": "3102d347-4546-4a03-8ec3-1b5ea97a068e",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f7fedef8-3467-4f61-8ba8-a9b53fcf6cdc"
        },
        "item": {
          "id": "ec131d61-4c89-4df2-b2ca-b2e6b5b3d03c",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "b05984e7-1b38-490b-ac9f-6f4042e733d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec131d61-4c89-4df2-b2ca-b2e6b5b3d03c",
        "cursor": {
          "ref": "3102d347-4546-4a03-8ec3-1b5ea97a068e",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f7fedef8-3467-4f61-8ba8-a9b53fcf6cdc"
        },
        "item": {
          "id": "ec131d61-4c89-4df2-b2ca-b2e6b5b3d03c",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "b05984e7-1b38-490b-ac9f-6f4042e733d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a988d0b-0ae8-4c8b-a8e1-eeeccd329e73",
        "cursor": {
          "ref": "ea1a32c6-aac8-48f0-a5e5-6f7630689a9d",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "12a793d5-f5f0-40eb-9394-9d1458b7dce0"
        },
        "item": {
          "id": "4a988d0b-0ae8-4c8b-a8e1-eeeccd329e73",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "aa3fb820-219f-43b6-9e23-f1d6710e8f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a988d0b-0ae8-4c8b-a8e1-eeeccd329e73",
        "cursor": {
          "ref": "ea1a32c6-aac8-48f0-a5e5-6f7630689a9d",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "12a793d5-f5f0-40eb-9394-9d1458b7dce0"
        },
        "item": {
          "id": "4a988d0b-0ae8-4c8b-a8e1-eeeccd329e73",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "aa3fb820-219f-43b6-9e23-f1d6710e8f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66947406-1732-4f7e-bbed-f3d905552dc2",
        "cursor": {
          "ref": "563a502c-b8b5-40fb-ac00-36ac1dd1b844",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0c76f780-01dc-4bed-aef1-790ded9c48b3"
        },
        "item": {
          "id": "66947406-1732-4f7e-bbed-f3d905552dc2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a38ac978-a623-4ecb-9db3-c54271d9c0ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66947406-1732-4f7e-bbed-f3d905552dc2",
        "cursor": {
          "ref": "563a502c-b8b5-40fb-ac00-36ac1dd1b844",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0c76f780-01dc-4bed-aef1-790ded9c48b3"
        },
        "item": {
          "id": "66947406-1732-4f7e-bbed-f3d905552dc2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a38ac978-a623-4ecb-9db3-c54271d9c0ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b8e08a-4535-41ce-bc4d-7b0d0d376e0a",
        "cursor": {
          "ref": "77385f97-1c42-4e9a-b471-1ec040fdbfdf",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d73c6233-d662-4351-b54a-5b1bfaa434bf"
        },
        "item": {
          "id": "22b8e08a-4535-41ce-bc4d-7b0d0d376e0a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0dffd536-48dc-492b-ac0d-f3fff3be861a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b8e08a-4535-41ce-bc4d-7b0d0d376e0a",
        "cursor": {
          "ref": "77385f97-1c42-4e9a-b471-1ec040fdbfdf",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d73c6233-d662-4351-b54a-5b1bfaa434bf"
        },
        "item": {
          "id": "22b8e08a-4535-41ce-bc4d-7b0d0d376e0a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0dffd536-48dc-492b-ac0d-f3fff3be861a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bfc547d-61dc-4e1f-948f-c9843080b297",
        "cursor": {
          "ref": "c1cd031c-320f-41b9-baf3-094a2f519715",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d65c7e9c-8ab5-4ff8-85d8-2e90288781b1"
        },
        "item": {
          "id": "9bfc547d-61dc-4e1f-948f-c9843080b297",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "dfa7bee2-39a0-4ab6-b836-9439435fd779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bfc547d-61dc-4e1f-948f-c9843080b297",
        "cursor": {
          "ref": "c1cd031c-320f-41b9-baf3-094a2f519715",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d65c7e9c-8ab5-4ff8-85d8-2e90288781b1"
        },
        "item": {
          "id": "9bfc547d-61dc-4e1f-948f-c9843080b297",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "dfa7bee2-39a0-4ab6-b836-9439435fd779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fcacb9a-6c93-46a8-b515-29a605613c2d",
        "cursor": {
          "ref": "f8f57eaf-d2e0-4703-94e4-4c98eabd2d8a",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "37dbc622-9ca4-4d04-89ce-34310a33dbed"
        },
        "item": {
          "id": "0fcacb9a-6c93-46a8-b515-29a605613c2d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "696fd6e8-ce39-4857-a1ce-115047da1922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fcacb9a-6c93-46a8-b515-29a605613c2d",
        "cursor": {
          "ref": "f8f57eaf-d2e0-4703-94e4-4c98eabd2d8a",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "37dbc622-9ca4-4d04-89ce-34310a33dbed"
        },
        "item": {
          "id": "0fcacb9a-6c93-46a8-b515-29a605613c2d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "696fd6e8-ce39-4857-a1ce-115047da1922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23834a7f-f5c4-40cd-9440-9c5b37ec9bad",
        "cursor": {
          "ref": "5845b972-0ee8-432a-95de-23b804c48406",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "67ad6ee8-0940-4db8-8ad5-11da2d754885"
        },
        "item": {
          "id": "23834a7f-f5c4-40cd-9440-9c5b37ec9bad",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d9c6a2b8-40fa-405b-aa39-524cf5138199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23834a7f-f5c4-40cd-9440-9c5b37ec9bad",
        "cursor": {
          "ref": "5845b972-0ee8-432a-95de-23b804c48406",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "67ad6ee8-0940-4db8-8ad5-11da2d754885"
        },
        "item": {
          "id": "23834a7f-f5c4-40cd-9440-9c5b37ec9bad",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d9c6a2b8-40fa-405b-aa39-524cf5138199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d85f90c-4fb1-48b8-a874-9fb41199dc82",
        "cursor": {
          "ref": "9f0ac15b-5ce1-4268-9e0e-fce01e266fbd",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "409c6000-da42-4b2a-94f7-d5cd980f65da"
        },
        "item": {
          "id": "1d85f90c-4fb1-48b8-a874-9fb41199dc82",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "ffceadea-6d0a-4725-b8d7-dd7b326b5148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d85f90c-4fb1-48b8-a874-9fb41199dc82",
        "cursor": {
          "ref": "9f0ac15b-5ce1-4268-9e0e-fce01e266fbd",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "409c6000-da42-4b2a-94f7-d5cd980f65da"
        },
        "item": {
          "id": "1d85f90c-4fb1-48b8-a874-9fb41199dc82",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "ffceadea-6d0a-4725-b8d7-dd7b326b5148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50dd8369-8ba5-4399-9dd3-c1bba7249a47",
        "cursor": {
          "ref": "39cb07f5-db21-4926-9fa7-5e8101dad440",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "01f74295-b251-4d4e-ab48-7a2078f845d8"
        },
        "item": {
          "id": "50dd8369-8ba5-4399-9dd3-c1bba7249a47",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "bb96d175-8573-467f-bee4-bb51313f6a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50dd8369-8ba5-4399-9dd3-c1bba7249a47",
        "cursor": {
          "ref": "39cb07f5-db21-4926-9fa7-5e8101dad440",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "01f74295-b251-4d4e-ab48-7a2078f845d8"
        },
        "item": {
          "id": "50dd8369-8ba5-4399-9dd3-c1bba7249a47",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "bb96d175-8573-467f-bee4-bb51313f6a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5996b56d-b852-4063-94bb-31ef0ebbc758",
        "cursor": {
          "ref": "8da28cb7-ac66-4366-a1bc-a9e65e317aa7",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f7a65904-507f-49ee-8b32-cb115a5560b3"
        },
        "item": {
          "id": "5996b56d-b852-4063-94bb-31ef0ebbc758",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "545b219f-17d3-465d-b1ab-27f886b3388b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5996b56d-b852-4063-94bb-31ef0ebbc758",
        "cursor": {
          "ref": "8da28cb7-ac66-4366-a1bc-a9e65e317aa7",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f7a65904-507f-49ee-8b32-cb115a5560b3"
        },
        "item": {
          "id": "5996b56d-b852-4063-94bb-31ef0ebbc758",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "545b219f-17d3-465d-b1ab-27f886b3388b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2811e7a-2166-4ef9-8913-522bdb20881f",
        "cursor": {
          "ref": "9f65d837-08c0-46e3-ac66-f50ab89bef97",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "92a8ec06-11ce-44fe-86bf-89c9a9864f83"
        },
        "item": {
          "id": "b2811e7a-2166-4ef9-8913-522bdb20881f",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "f73768f4-0897-4c9a-88a5-563d7447522f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2811e7a-2166-4ef9-8913-522bdb20881f",
        "cursor": {
          "ref": "9f65d837-08c0-46e3-ac66-f50ab89bef97",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "92a8ec06-11ce-44fe-86bf-89c9a9864f83"
        },
        "item": {
          "id": "b2811e7a-2166-4ef9-8913-522bdb20881f",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "f73768f4-0897-4c9a-88a5-563d7447522f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe9d7d66-d9d0-4818-ba9a-2a0053242bd9",
        "cursor": {
          "ref": "9b7f5346-b12a-457c-a4a2-122a5ae627c4",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "36f2c1db-23d7-4619-b194-6f6f282e003d"
        },
        "item": {
          "id": "fe9d7d66-d9d0-4818-ba9a-2a0053242bd9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9bcf5ac0-d828-438c-bd9b-6abf13d900e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe9d7d66-d9d0-4818-ba9a-2a0053242bd9",
        "cursor": {
          "ref": "9b7f5346-b12a-457c-a4a2-122a5ae627c4",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "36f2c1db-23d7-4619-b194-6f6f282e003d"
        },
        "item": {
          "id": "fe9d7d66-d9d0-4818-ba9a-2a0053242bd9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9bcf5ac0-d828-438c-bd9b-6abf13d900e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27dbf02b-80a1-4b92-b84c-212fe19d82f2",
        "cursor": {
          "ref": "8d08d087-66b2-4b7d-85ef-7e82c1f078ee",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b158b380-e5d0-4adf-939b-3a69c277ec80"
        },
        "item": {
          "id": "27dbf02b-80a1-4b92-b84c-212fe19d82f2",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "f2888a57-58e7-4d87-a76c-5a74b53dc2e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27dbf02b-80a1-4b92-b84c-212fe19d82f2",
        "cursor": {
          "ref": "8d08d087-66b2-4b7d-85ef-7e82c1f078ee",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b158b380-e5d0-4adf-939b-3a69c277ec80"
        },
        "item": {
          "id": "27dbf02b-80a1-4b92-b84c-212fe19d82f2",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "f2888a57-58e7-4d87-a76c-5a74b53dc2e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7891490e-a015-499a-9704-9c692a4e4f34",
        "cursor": {
          "ref": "83745b00-8376-42cd-a39b-bdb96fca26a2",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fe231038-8d69-4131-b617-6d565d4e9c46"
        },
        "item": {
          "id": "7891490e-a015-499a-9704-9c692a4e4f34",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "dd9e1805-72bc-4364-87a2-6f8a80194c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7891490e-a015-499a-9704-9c692a4e4f34",
        "cursor": {
          "ref": "83745b00-8376-42cd-a39b-bdb96fca26a2",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fe231038-8d69-4131-b617-6d565d4e9c46"
        },
        "item": {
          "id": "7891490e-a015-499a-9704-9c692a4e4f34",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "dd9e1805-72bc-4364-87a2-6f8a80194c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c1e84f-2181-4a68-8f5d-50cd3e96d51c",
        "cursor": {
          "ref": "ff3cdc8d-2a98-44f7-8b46-09156b424846",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "62de28e4-66d3-45cf-af9b-60fd0c574174"
        },
        "item": {
          "id": "98c1e84f-2181-4a68-8f5d-50cd3e96d51c",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "78c620b5-5556-49f2-b66b-ea2cd0b823a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c1e84f-2181-4a68-8f5d-50cd3e96d51c",
        "cursor": {
          "ref": "ff3cdc8d-2a98-44f7-8b46-09156b424846",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "62de28e4-66d3-45cf-af9b-60fd0c574174"
        },
        "item": {
          "id": "98c1e84f-2181-4a68-8f5d-50cd3e96d51c",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "78c620b5-5556-49f2-b66b-ea2cd0b823a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c357f8-6a0f-449f-8372-f165ecbc7a68",
        "cursor": {
          "ref": "f719cf60-33bf-4e4e-99ab-ae63fc3ab812",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a2f3e965-a014-41c5-a558-778a12fe08bb"
        },
        "item": {
          "id": "36c357f8-6a0f-449f-8372-f165ecbc7a68",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "ddc45cbd-e0bd-47c0-ad5e-c2c2e0a7f005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c357f8-6a0f-449f-8372-f165ecbc7a68",
        "cursor": {
          "ref": "f719cf60-33bf-4e4e-99ab-ae63fc3ab812",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a2f3e965-a014-41c5-a558-778a12fe08bb"
        },
        "item": {
          "id": "36c357f8-6a0f-449f-8372-f165ecbc7a68",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "ddc45cbd-e0bd-47c0-ad5e-c2c2e0a7f005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7265ae-0c25-4cdc-b7af-19a6454589a9",
        "cursor": {
          "ref": "64448780-75ed-4a8a-9b2c-16f892162b6d",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a978d3b4-8be7-43cb-9b24-2a7222845eb6"
        },
        "item": {
          "id": "ab7265ae-0c25-4cdc-b7af-19a6454589a9",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "cf0a6f74-9c8f-458d-b768-c04a37383abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7265ae-0c25-4cdc-b7af-19a6454589a9",
        "cursor": {
          "ref": "64448780-75ed-4a8a-9b2c-16f892162b6d",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a978d3b4-8be7-43cb-9b24-2a7222845eb6"
        },
        "item": {
          "id": "ab7265ae-0c25-4cdc-b7af-19a6454589a9",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "cf0a6f74-9c8f-458d-b768-c04a37383abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f2d6173-355e-4654-a011-9c96238084e9",
        "cursor": {
          "ref": "e068f46c-019c-4ebd-b8d0-693ddb60080a",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2e99159d-fe43-490b-829b-3a94f08c01c6"
        },
        "item": {
          "id": "0f2d6173-355e-4654-a011-9c96238084e9",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "fa6db522-d122-4270-a03d-4e8a9722399c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f2d6173-355e-4654-a011-9c96238084e9",
        "cursor": {
          "ref": "e068f46c-019c-4ebd-b8d0-693ddb60080a",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2e99159d-fe43-490b-829b-3a94f08c01c6"
        },
        "item": {
          "id": "0f2d6173-355e-4654-a011-9c96238084e9",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "fa6db522-d122-4270-a03d-4e8a9722399c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41997916-9e47-4bc7-be90-f7165b8e7d0a",
        "cursor": {
          "ref": "c15f4971-d505-4c16-9cc6-5304c7507eb5",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8dbcd3d5-c8a7-4fa0-a2bc-a78e21cb2f85"
        },
        "item": {
          "id": "41997916-9e47-4bc7-be90-f7165b8e7d0a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "641dee80-cfe8-4116-afa6-94669e730dd4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41997916-9e47-4bc7-be90-f7165b8e7d0a",
        "cursor": {
          "ref": "c15f4971-d505-4c16-9cc6-5304c7507eb5",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8dbcd3d5-c8a7-4fa0-a2bc-a78e21cb2f85"
        },
        "item": {
          "id": "41997916-9e47-4bc7-be90-f7165b8e7d0a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "641dee80-cfe8-4116-afa6-94669e730dd4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "722319f9-1dd6-48e3-9b1c-7ab1e1cf3396",
        "cursor": {
          "ref": "ee94fed5-9c26-454f-8e33-c5301dc81162",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ab209619-00da-4232-bf0d-4c2050ff1267"
        },
        "item": {
          "id": "722319f9-1dd6-48e3-9b1c-7ab1e1cf3396",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "0c90c4b6-92a1-46d2-a8ab-cb2011823476",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "722319f9-1dd6-48e3-9b1c-7ab1e1cf3396",
        "cursor": {
          "ref": "ee94fed5-9c26-454f-8e33-c5301dc81162",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ab209619-00da-4232-bf0d-4c2050ff1267"
        },
        "item": {
          "id": "722319f9-1dd6-48e3-9b1c-7ab1e1cf3396",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "0c90c4b6-92a1-46d2-a8ab-cb2011823476",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f63f054-013c-48a5-abaa-ca8a3ac3e353",
        "cursor": {
          "ref": "805daf28-882e-4f9e-93ab-a9c311689b5a",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "72cf698b-6e34-407f-9163-6f371a7962ee"
        },
        "item": {
          "id": "4f63f054-013c-48a5-abaa-ca8a3ac3e353",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d179ee27-56d7-4c28-8bef-7bda595fa3fa",
          "status": "Created",
          "code": 201,
          "responseTime": 388,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f63f054-013c-48a5-abaa-ca8a3ac3e353",
        "cursor": {
          "ref": "805daf28-882e-4f9e-93ab-a9c311689b5a",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "72cf698b-6e34-407f-9163-6f371a7962ee"
        },
        "item": {
          "id": "4f63f054-013c-48a5-abaa-ca8a3ac3e353",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d179ee27-56d7-4c28-8bef-7bda595fa3fa",
          "status": "Created",
          "code": 201,
          "responseTime": 388,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "688dd0b8-1fd1-4d47-b382-555ee071d6f9",
        "cursor": {
          "ref": "d4851695-268c-4eb2-830d-24ecfe66639e",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "dceec35e-6fc0-4ebe-8868-5a749ea70f2b"
        },
        "item": {
          "id": "688dd0b8-1fd1-4d47-b382-555ee071d6f9",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "905b4f95-f150-4a24-ab73-5979d81c659d",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688dd0b8-1fd1-4d47-b382-555ee071d6f9",
        "cursor": {
          "ref": "d4851695-268c-4eb2-830d-24ecfe66639e",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "dceec35e-6fc0-4ebe-8868-5a749ea70f2b"
        },
        "item": {
          "id": "688dd0b8-1fd1-4d47-b382-555ee071d6f9",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "905b4f95-f150-4a24-ab73-5979d81c659d",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74583449-bbdf-4212-ab84-f2ddeb7e25db",
        "cursor": {
          "ref": "2f194320-09e4-4d30-b832-b208d2b7e65a",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4e91d834-af8c-4481-8759-5c46da03abb9"
        },
        "item": {
          "id": "74583449-bbdf-4212-ab84-f2ddeb7e25db",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "dd423adb-e1e2-42ed-9b26-1f07967784a2",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "74583449-bbdf-4212-ab84-f2ddeb7e25db",
        "cursor": {
          "ref": "2f194320-09e4-4d30-b832-b208d2b7e65a",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4e91d834-af8c-4481-8759-5c46da03abb9"
        },
        "item": {
          "id": "74583449-bbdf-4212-ab84-f2ddeb7e25db",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "dd423adb-e1e2-42ed-9b26-1f07967784a2",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e86f22-0ca7-4eca-832d-4058e8b916b0",
        "cursor": {
          "ref": "65e36a44-b57c-46d1-97e4-72b7d04cba26",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0fc12dee-8c2c-46bd-817a-ffa2f7f3cb39"
        },
        "item": {
          "id": "54e86f22-0ca7-4eca-832d-4058e8b916b0",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "edd42a96-3859-4cc2-85f1-9a21185b0638",
          "status": "Created",
          "code": 201,
          "responseTime": 421,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e86f22-0ca7-4eca-832d-4058e8b916b0",
        "cursor": {
          "ref": "65e36a44-b57c-46d1-97e4-72b7d04cba26",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0fc12dee-8c2c-46bd-817a-ffa2f7f3cb39"
        },
        "item": {
          "id": "54e86f22-0ca7-4eca-832d-4058e8b916b0",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "edd42a96-3859-4cc2-85f1-9a21185b0638",
          "status": "Created",
          "code": 201,
          "responseTime": 421,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9370406c-bcc8-42eb-98d1-f887e384bbd6",
        "cursor": {
          "ref": "085a99e8-f51e-49e5-a7f0-9713ce4f2105",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "98073c1a-16f7-4f33-be2c-414ae5d0715e"
        },
        "item": {
          "id": "9370406c-bcc8-42eb-98d1-f887e384bbd6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d59f7a59-c506-48c0-9dbb-890b6310fea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "9370406c-bcc8-42eb-98d1-f887e384bbd6",
        "cursor": {
          "ref": "085a99e8-f51e-49e5-a7f0-9713ce4f2105",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "98073c1a-16f7-4f33-be2c-414ae5d0715e"
        },
        "item": {
          "id": "9370406c-bcc8-42eb-98d1-f887e384bbd6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d59f7a59-c506-48c0-9dbb-890b6310fea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "861d1c12-86ea-4874-9196-6eb0521d5b4e",
        "cursor": {
          "ref": "c6c05663-26c6-4396-b4eb-c358e06fadbb",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "22e19564-747d-4216-9c80-58a6ebc4ec32"
        },
        "item": {
          "id": "861d1c12-86ea-4874-9196-6eb0521d5b4e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1053345f-022c-4c61-9d5f-d50933814d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "861d1c12-86ea-4874-9196-6eb0521d5b4e",
        "cursor": {
          "ref": "c6c05663-26c6-4396-b4eb-c358e06fadbb",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "22e19564-747d-4216-9c80-58a6ebc4ec32"
        },
        "item": {
          "id": "861d1c12-86ea-4874-9196-6eb0521d5b4e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1053345f-022c-4c61-9d5f-d50933814d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b37a4c78-1f94-4a86-95f4-b56a6ded8ff3",
        "cursor": {
          "ref": "b3734a56-1290-4623-bf3f-4e5e9b270bdf",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "64b0ebc0-19a9-4df8-9e55-6099d0f17133"
        },
        "item": {
          "id": "b37a4c78-1f94-4a86-95f4-b56a6ded8ff3",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "175fbcb4-9b4f-4df2-9e7c-99b1462cdae6",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b37a4c78-1f94-4a86-95f4-b56a6ded8ff3",
        "cursor": {
          "ref": "b3734a56-1290-4623-bf3f-4e5e9b270bdf",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "64b0ebc0-19a9-4df8-9e55-6099d0f17133"
        },
        "item": {
          "id": "b37a4c78-1f94-4a86-95f4-b56a6ded8ff3",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "175fbcb4-9b4f-4df2-9e7c-99b1462cdae6",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc2f9d2-4e5d-4a5c-bccc-957f8169fc25",
        "cursor": {
          "ref": "0bce7658-ca67-4e94-bf6b-eb5ec92fe70a",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "28edb74c-c838-4e1d-ad0e-36dc4d60f3a5"
        },
        "item": {
          "id": "ddc2f9d2-4e5d-4a5c-bccc-957f8169fc25",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ce7d0e87-2a54-40bc-a464-21442b66a1a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc2f9d2-4e5d-4a5c-bccc-957f8169fc25",
        "cursor": {
          "ref": "0bce7658-ca67-4e94-bf6b-eb5ec92fe70a",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "28edb74c-c838-4e1d-ad0e-36dc4d60f3a5"
        },
        "item": {
          "id": "ddc2f9d2-4e5d-4a5c-bccc-957f8169fc25",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ce7d0e87-2a54-40bc-a464-21442b66a1a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e46f6848-f756-4978-b08c-be56dcef6eba",
        "cursor": {
          "ref": "0135590b-32b7-4fcd-b392-0ebe2cc5a732",
          "length": 63,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d208c4cb-bfef-4109-923e-98b194de8d26"
        },
        "item": {
          "id": "e46f6848-f756-4978-b08c-be56dcef6eba",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "913e2f11-8ecb-4ece-afe7-a5031bc17e2f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 13,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a39f53a5-56bf-479f-8542-a7173639a6b2",
        "cursor": {
          "ref": "78214bc1-5331-40c1-9c04-97792bb3abf9",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9c0fe22f-c5f8-464f-99a6-4476d0dbf69a"
        },
        "item": {
          "id": "a39f53a5-56bf-479f-8542-a7173639a6b2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "36c27644-1382-4692-9395-34330df86275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a39f53a5-56bf-479f-8542-a7173639a6b2",
        "cursor": {
          "ref": "78214bc1-5331-40c1-9c04-97792bb3abf9",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9c0fe22f-c5f8-464f-99a6-4476d0dbf69a"
        },
        "item": {
          "id": "a39f53a5-56bf-479f-8542-a7173639a6b2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "36c27644-1382-4692-9395-34330df86275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f4e133-5521-4c54-b272-b5627e882e33",
        "cursor": {
          "ref": "ac392d6f-ae95-49c5-99b9-6edc7988ba78",
          "length": 63,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4a591f54-e70d-4675-b035-e6050ca4b442"
        },
        "item": {
          "id": "c4f4e133-5521-4c54-b272-b5627e882e33",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7a1612d1-373b-474c-a200-5d74f58659af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e66bece-afbe-4635-8c46-36dea3ef83ec",
        "cursor": {
          "ref": "f4408835-e775-4127-9aaf-d05d6ac324f0",
          "length": 63,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "69bd192a-cbb9-4755-a57e-1e4aecb55e28"
        },
        "item": {
          "id": "8e66bece-afbe-4635-8c46-36dea3ef83ec",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0998a690-321b-4053-8afb-a08fd518d238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e2cbd5-2e97-4f83-ba70-7026ff18e4ec",
        "cursor": {
          "ref": "997b161e-90fa-49a4-9452-6ecab51587b1",
          "length": 63,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "19052c34-2a85-4072-84ec-37a45de09017"
        },
        "item": {
          "id": "c4e2cbd5-2e97-4f83-ba70-7026ff18e4ec",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e042e0a0-00ac-42b7-8d6b-78ab4dc9a2f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1528b02a-0be0-4726-8208-c7c49245b8bc",
        "cursor": {
          "ref": "bbcbf833-7057-448b-9a63-e39971430069",
          "length": 63,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d55b7616-8fcd-4406-9f9d-5b224d9a0c88"
        },
        "item": {
          "id": "1528b02a-0be0-4726-8208-c7c49245b8bc",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a0b6d208-3a26-430f-9951-c3804c3dbfd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c4cf36-445c-4456-8a58-03af681ec923",
        "cursor": {
          "ref": "9fef32c9-0108-4a59-add4-158d12ef81b2",
          "length": 63,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "00084586-3309-4815-9d2c-8b1878ad6188"
        },
        "item": {
          "id": "43c4cf36-445c-4456-8a58-03af681ec923",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e6425245-b8be-4060-b035-de0a31e3590a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2386723-faa1-4045-94ca-b26b54e2a327",
        "cursor": {
          "ref": "f7d080ff-6b3a-4fa3-8328-d4e442fcf35e",
          "length": 63,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e583d117-930d-4088-8554-5e0a216cbb6b"
        },
        "item": {
          "id": "d2386723-faa1-4045-94ca-b26b54e2a327",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "eccb089b-f3ed-4c23-98de-a68adc2ef831",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914fff48-a9ca-4018-853a-471e95f3e1f7",
        "cursor": {
          "ref": "be388aa3-3cbe-46da-b2d5-0841805acdcb",
          "length": 63,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ead504d3-8d8e-4ec8-a1ba-c677e2c17400"
        },
        "item": {
          "id": "914fff48-a9ca-4018-853a-471e95f3e1f7",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "e1de2620-8e81-49c9-b393-35395a09714e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 14,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4e2e9c2-d9db-4bc0-b74c-a958675efaaa",
        "cursor": {
          "ref": "6e688479-0f41-4d46-9af2-46b1e918f206",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b75b6c1c-db37-4516-9e3d-91056a25e062"
        },
        "item": {
          "id": "a4e2e9c2-d9db-4bc0-b74c-a958675efaaa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4c2131d7-52ad-44ec-a0f3-9a76db36bb9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4e2e9c2-d9db-4bc0-b74c-a958675efaaa",
        "cursor": {
          "ref": "6e688479-0f41-4d46-9af2-46b1e918f206",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b75b6c1c-db37-4516-9e3d-91056a25e062"
        },
        "item": {
          "id": "a4e2e9c2-d9db-4bc0-b74c-a958675efaaa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4c2131d7-52ad-44ec-a0f3-9a76db36bb9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8bfc60-841e-47bc-bc4f-0d77ec638243",
        "cursor": {
          "ref": "62045c78-5258-4bd4-ae76-20b7f227a45c",
          "length": 63,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "40c3cead-9ab8-4cd7-9fdd-edad965057d4"
        },
        "item": {
          "id": "5d8bfc60-841e-47bc-bc4f-0d77ec638243",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "af2194a3-5d18-466f-88e7-2ef78824273b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1e713e-8f69-4b0c-beac-b9993e01a274",
        "cursor": {
          "ref": "fb05f1cc-061d-4617-a826-cd2451f55436",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7470398e-3ac7-4238-96b8-ee3d0cddda89"
        },
        "item": {
          "id": "4c1e713e-8f69-4b0c-beac-b9993e01a274",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "fc6a3053-382d-44d7-8c75-68e3d79c5c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "4c1e713e-8f69-4b0c-beac-b9993e01a274",
        "cursor": {
          "ref": "fb05f1cc-061d-4617-a826-cd2451f55436",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7470398e-3ac7-4238-96b8-ee3d0cddda89"
        },
        "item": {
          "id": "4c1e713e-8f69-4b0c-beac-b9993e01a274",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "fc6a3053-382d-44d7-8c75-68e3d79c5c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "f0d0fdee-4d46-4b8a-b205-1df22e0a2f88",
        "cursor": {
          "ref": "fc16da5b-32bf-4b9b-b239-dfb6c8db317c",
          "length": 63,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d14e6854-b4f0-443c-a331-681564a0a97f"
        },
        "item": {
          "id": "f0d0fdee-4d46-4b8a-b205-1df22e0a2f88",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "156f472d-0b9d-40ec-a5be-28aa8507f3bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "0c711e01-9547-47c4-8d9f-329716cdb485",
        "cursor": {
          "ref": "4093e713-122d-43cc-9ccb-a626e493da73",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "eff53d56-4f6e-4e1b-8e39-90ad161e0be1"
        },
        "item": {
          "id": "0c711e01-9547-47c4-8d9f-329716cdb485",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4dc0810d-47eb-4944-a7e5-6bd1b99cbd10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c711e01-9547-47c4-8d9f-329716cdb485",
        "cursor": {
          "ref": "4093e713-122d-43cc-9ccb-a626e493da73",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "eff53d56-4f6e-4e1b-8e39-90ad161e0be1"
        },
        "item": {
          "id": "0c711e01-9547-47c4-8d9f-329716cdb485",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4dc0810d-47eb-4944-a7e5-6bd1b99cbd10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec4d01f-2a1a-4388-ac57-c13eb82e0494",
        "cursor": {
          "ref": "56a7a1cc-55cf-451f-8187-d491730e8022",
          "length": 63,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "13121f79-9273-458c-a1cf-1bca90089ad3"
        },
        "item": {
          "id": "5ec4d01f-2a1a-4388-ac57-c13eb82e0494",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "387aea38-8353-46b4-829f-25951338335e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 12,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}