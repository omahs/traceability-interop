{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "8ef50181-a1ae-496b-8415-89d35eac423c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "78965820-5b6c-49ea-92dd-158b4e2edf91",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f9cf01b9-1844-4663-9a21-6eb37aba5fae",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cef91501-7b51-4d34-abc1-99afc1774b56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "645640ee-e043-4fa4-aa14-cff800b38951"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "4d10ba47-90c8-413b-a0cf-090fbfe963ad",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e83c7f5f-1e2a-4a9b-8106-14903c3037ea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0add82b7-2f5e-4074-b6f4-9805c99df42b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f1e4cc4f-84d7-4315-9bea-6fd4235b2393",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b248ee-611f-405c-9c31-da7ca60a79a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "527dcfe8-fe80-40ec-bc1c-07db12741b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b61476-a398-4952-836b-2508677380f8",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c76a3e-33a1-44c0-bf6a-55f0078e2391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c5abbe1-91e9-4159-87bb-5c01dd7e99fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a77ad7-c5a4-48c1-a36b-7bbaede0f5fe",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fff6481-b5d9-4e9d-afa7-726f4601a948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e5cfdf1-3746-4a2f-b054-fe5f752a0d33"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "133485c6-5e9d-4d9e-ba63-8cfb92fa891d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "397b735b-e880-4e77-8256-801402f9cd51",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0787b355-d29f-4ea2-94b9-8e2d77b474f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c10286e9-337b-4002-9240-ea1c63492702"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165b84e8-8207-4879-887d-668260d28b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "594c78f9-70ca-48d8-891f-150caddc522d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f198fa5-943a-4fa1-9bcc-f87aa2a93748",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95acc801-d91d-4b9e-a5e1-a2fe312d56f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7305f622-d78c-4403-ad19-d137e84b435d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c602ab0-7f4b-4b14-bbba-01620528c693",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "4565cb33-e9e3-4820-8432-525f29876882"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fb31d6a0-49ee-4372-8699-3488201093be",
            "name": "Positive Testing",
            "item": [
              {
                "id": "eeb2c05c-8877-4c55-a3c1-36743b909c53",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2233ff3c-077c-439f-a780-50179a9fe35e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3ad8104c-9fcb-4e09-9824-2d78e4a85583"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad53cdf3-921e-42e5-9f8d-a6d8fe898b3b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "8dac5e8d-f20b-4630-82c7-3046922b92cb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a33924ea-bda8-4282-a847-66ec00636e71",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "27e3b1ce-f29c-4ec1-8955-227c849425ee"
            }
          }
        ]
      },
      {
        "id": "3dbac12c-95b9-4b2a-9e7b-4d7e39f78ea5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0a23f27d-3783-4b24-b699-cea2a8554ce9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1198ebdc-ec5f-46e4-9d90-74bc1d698a4c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "78114fba-9de5-481c-a69f-b5ad3ea5c20e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7dd6e01-d776-42b1-aa3a-178a069dd7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f29490d-8484-476d-a162-fc70a7c5a3cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f45c1f-e86d-4eb7-9b8d-ed04c5241bb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80192c6c-e7f7-42c0-aea9-6d17e9f0be30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e206f37f-118a-4797-b539-d77d30db8960",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71367db7-d889-402b-8cc4-08d44bc1cc15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ff03bf-3c14-4d52-a73d-cb96b54048b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d91be4a-ef70-485f-9e8e-93d372a5fc18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ed5aeef-7602-4b0c-a4ff-79395ed6365d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4f0997-588c-4e9a-9046-3118e2bbb334",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5457b4c-8448-4408-bfaa-fdad5cf0fefc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "673c284f-c2de-4294-ae33-5225d46d49c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "776e5c8b-7163-414c-9256-cd819b2bec40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "002a2590-9bbb-43f3-99a1-f4e795e15a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9868fe6-9bfa-4002-94d1-2f8473ce6d8f",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0df5a8-c08f-4a3e-829a-bc168b3f242b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "247bd32b-33ed-472a-95c4-29af4a5e1569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2e41f0-40bf-4e3f-bb03-133406ea99ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea245dd1-d352-4beb-90bd-3883f02cd332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e08a7c0-d054-4caa-89e5-ab1fba36ead7",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed39efde-4716-4a00-b003-c875ff86932f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62dc0e41-49cc-44b9-85b9-8f0d03843286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62bfe7fb-5b46-4473-9e78-65dbc3333e53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c054c19-9366-4363-9e96-04026f24312e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8590ebe2-c7aa-4fc7-8002-85815317b78d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "161b4ee5-46a1-4cc2-9b61-62fbd0777919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b20610b-f8c4-47bb-8b27-e07d08c923e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a905fd26-2e03-4e24-bcd4-73ebb00696c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b90a0f9-dce1-4768-9829-0d978f13c207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3790d00c-588f-4951-ab2b-c4267a73d4b5",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ded9dd-908f-4b41-b952-701fe398f02d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2062bf15-c977-4d6e-bd45-79fea1e06694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba02cc3-b04c-4d19-a24d-03e896327efb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e9876ef-3f21-4d33-8fce-53fd7d580eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a7f5ea-26dd-4065-b26d-3091f6f59c05",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2904e956-f3ed-4d13-a706-7746db9be9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64c51ebf-9f51-4c5f-a09c-9fce6cad687c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d60987bd-5a25-4f01-81e3-4f117fee1393",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52b0204f-34fc-4d20-ac71-0bb8ff333336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ca7962-498f-4e09-82e3-9de7c1b03d48",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e6876c-0fde-491a-938e-67349c5b1678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4104703a-e836-4dfa-a194-e1184d82c9ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93e9008-19cd-461b-9803-52cb4cca4cbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9777e42a-5c70-43a9-91ed-cc0f3a5b9ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3544755-6a12-4350-8d6f-867593bf44ca",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32fc1dd-cb38-4dc2-8660-a43691c987c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c27a6a4-12a1-40fd-a880-0655cd0e544f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8890019-4253-4750-9e01-ae80c9a8481c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e65302f-ee37-477c-9531-1fde5497d763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd93fff2-d457-4935-92dc-512cd334a4a2",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "687bea34-bbb6-4403-bf4b-f0886e2a8ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "738718f3-e687-4eda-b0d1-ec0c05f727f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57724f85-a59a-4972-a321-8802ee8de6f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "91f0e755-4c37-4bbf-8100-a7df9a7f33a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b57f9e3-1d18-410b-8158-417cc9f488d5",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0c4878-ef2c-4aab-86fa-c5ebe671b5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2365cd10-7efe-4c46-9c2b-7126dcdf2ce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8dc750-0bb6-44a0-878e-4cbfac9b1888",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "caec50c3-88c1-4af8-a369-cb6ec60da638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41fa2d3-c7d3-45db-8db9-8d24d27ff35e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de615b01-0d4f-4404-9a75-c4dd5c533c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9849a4e2-b9bd-4c23-bf73-a5eb7e2c2fb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce659941-de68-4f81-95ac-53d71dba5082",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1ee273c-e6ea-4af3-a4c0-8e3ed2c3b7e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ca7427-f7c5-44f8-8532-16d719754bd8",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f60e9fc-a14c-4950-ad12-54021edce060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec8cd377-0f4e-4588-b66e-463126def49a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1117fe2-9e95-46a7-b66b-ccd8669d7ca3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f2853e6-0bc1-4f04-a3e7-fb2cc7132997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa79c88-2d1c-4d46-9dc0-603439dc8e0c",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac158a20-62c0-420a-8b87-049882e22a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a71ac38-15b8-45e6-8e23-5e74a9db1e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4db0180-9fca-49be-a134-f1e62c22f6a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "b0882001-bc76-4024-bffc-fa96ac65463b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f59ff9-a68f-44b4-9ca5-f6ff94c92847",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4afbf9f9-f0dd-4954-8a1f-5968fa391bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ff19d4a-f20a-4b88-8178-d882e9bedce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b5f536-5ff6-40bd-aa75-2bb38b5e475f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "5b52462f-9b7b-4d0e-8078-6312384fdb67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "945bd87d-feca-4c15-b92d-136e1b102d12",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "141ed054-0701-4436-8a3b-cd88ed780eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d91bd7b4-17c0-45d7-aa49-45639046b56e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7898cef5-1131-4ac9-931a-69bd7b583d97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae6c89eb-f905-4d56-924e-4e9fbcac6581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aece21c-5154-4a55-b36b-050f3d9b60a6",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "872f929b-1a2d-4d89-8fdd-f89b6a4b7290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bfe40e8-3ccf-42d3-b844-4b3b4baf3cea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d25bbb6f-07ef-49b0-a2fe-fd637335dff1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5aa5f53a-073c-464b-a525-d3f6d3ed4080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf23748-3332-4796-afcf-a5e93f7d2f21",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ddb28f-3b4a-47e3-923c-dc7b0323593a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "059dd020-4040-4ef6-8d43-c6d56d6754dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449fae77-707d-4112-b75b-59fc1e9588b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80d34885-0cdb-4b60-a68f-1222bd03c24b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f19590-6042-4d3c-9925-5b5211644d5b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc1791c-f10d-4642-89d8-863971146dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24c6a9f4-7568-4432-86de-a994d8848b1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f95bab0-2517-4eeb-afe1-1c3e182b4b41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95207c70-2830-4dd2-9196-571bf3d7bd59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f207dbb5-c1e9-421d-b763-c8475cc20879",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d7573a9-3e4c-450d-b5bc-25e2df26803a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85b5c652-34ca-432b-974b-394dc83175b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b6d5872-c633-4930-ad8a-22aa7ba3223a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6f6fe9e-569e-4add-8e82-b48d46a938e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452bb8c2-a209-4e1f-ade8-c45523571014",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "723d5f7c-214a-4dfa-8acc-985e8c6d2df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f12d37b-a973-4c58-aa46-a5b981056667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3821750a-63d1-4a4d-aba4-c01ab12d2584",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9da6b4be-dce2-4eaa-96e0-9c9c4b0be315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ea455a-c757-49ca-acaf-a79b6bdd8e7e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "134831dd-58a3-464a-b09b-6ea7d298169b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6b81fb5-3c1a-4ffd-9afb-7bb1e9d66a86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f42ad10-6598-4fae-972e-00f61c3e4c58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f997290a-13fa-4127-ac15-1f60db206495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0721c7b-baf1-4b06-b584-e91d92f0a4ce",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a49fcb-4947-4bf7-905c-88de3d3f4a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1a23c34-ac45-4797-a490-840bb0c6c3a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d9d514-d098-4381-b512-258f486e1350",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bd6a442-bea5-487f-85ae-b886af9b8608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff60e92-f36a-49cc-8447-2d0d5ad9299b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b53fbf-7d16-4dcd-83cb-56ed4594dab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5692b2d-df57-4f94-bae3-bb13bf91754d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c2f253-1f2a-476b-8893-7326f086fa6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60f5f8d4-ded0-459c-83e0-e93f5ae1cf16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5c2afa-9e80-4636-b3fa-5fedcaa1186c",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f59cb2-6396-463f-a50e-034846654d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbcbf518-b9e6-43ab-9925-aa9e1f694951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "170bbb0e-df22-4cbf-95aa-7ce216be2d90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c62db87-91c6-4561-a676-31cd3c70e7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f9af36-36e4-488f-b374-892ec901eff6",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d205cf2-33fb-4a2f-a56c-b3d587b1d566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f5626f0-a957-4794-be2f-d310f9b2f184"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bada85f7-d962-4e7b-957d-ae6c079c5c2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99e9087c-5166-4359-b31d-f295257f5527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534a4302-e4ca-4a16-bcfb-ecb0aa6b496e",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61939d36-db30-4c73-9e27-1066824c8a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae34ac1f-fb73-4627-b0dc-3f2e0d2c977b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46331496-c9ed-4a7c-90a2-f24a0b55c693",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55b12934-39e1-47f2-9236-be017f586bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21c539d-93e8-4691-9ca3-714ad2da8c6c",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3fdbcd1-cfcc-4ac5-8c5e-a50c445b5b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c54f16d-0ad2-4bb6-97c8-946d3bd2b442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8933af65-bc68-4bfe-b5c7-cf3dacab8f4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b333254-66cf-4072-baab-1beb99cdb902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dfed967-616f-40b0-90c4-140ccdf14b6d",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92e9fbd-c9de-444f-b6bc-10bce477ddc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f034212-1502-4fd1-abd0-7aba4405bcbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d69977-dd57-44cd-b570-471f370d692c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "365094c1-6cb3-48d7-8e94-647c54f51a01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d9e289-1c31-4cb4-bfa2-9333189da1e4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fbe709e-0171-4b4d-abcd-9cb60b63780a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "278328a5-db6c-46cc-8074-828c86ff7ef6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b759f64b-8cbc-497b-9b2f-6c03d4226304",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e56107e-ecab-4047-815c-2ef1f5e82b84"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a4dcb699-5b29-46c0-9428-2042ec869095",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6dad3174-c5a9-4d06-9f94-f7e824c7cf5c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b525fe08-f069-43ce-ab4a-4d873953372c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21a87e15-3fdb-4b25-b074-6272b7980fbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f557491-5b4d-44d7-bd63-84382d958994",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "f0d638ec-4f72-4ebb-85f9-caeba5c14f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d8e1d29-2e61-4f19-8d07-ffdf50e87cb4",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9dbc64f-f7a1-424f-a114-773d862322c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f53f109-16f6-421e-95c9-c2ba273a975b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9260008c-469d-4f98-9cd1-2ddfbb3ab0ae",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "5a334974-bdca-4add-b46f-86726a65a7ee"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9a6fe88-5fa6-4fc4-ba39-c5111a16ae28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b774bee-0f3c-4aaa-ae7d-900276a80702"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "56c31fe1-d0fa-4ed3-9857-c2ece291d6ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1f8a812-3bd9-40f2-8c6e-56fc155dc92a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e24a7edd-696e-4d90-9389-a6c8d83983db",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9df21e1d-6c8a-49cf-8aa8-2db777289aac"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d6f023cd-ead3-4d6c-9f96-1cfa64f7298c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fd680d49-ab49-477b-9eb2-bd0f250a02ab"
                }
              }
            ]
          },
          {
            "id": "fe60e1b2-2ea6-4122-a268-913f13ddba5e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "95bc69cc-25d8-411d-94ec-94e29554763f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7168f8c0-da25-4b53-bc54-80fcdd3799b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f23c56d1-49eb-4bf7-90b1-fb1d558a54cc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4697eb9c-0029-48af-a245-3bd4950dc5bb",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "3a6268da-9d58-43b7-b508-06e0f01b48c0"
                    }
                  }
                ]
              },
              {
                "id": "e91397f3-c09d-4643-89ad-debe0fa8f586",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f386258-1ca0-434b-8d04-964d0d998420",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b5705c2e-17fa-4d7c-a4f7-89093703af9a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20ade665-8f1e-4542-b04a-b4f940e5f66c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "0c55e7d3-05c2-42b4-af05-01e1b3feccf8"
                    }
                  }
                ]
              },
              {
                "id": "0f5ff5d6-f59e-40d9-83e9-a46528d0e927",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8cc31aa1-1e18-4662-bc18-67c108ef53f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8a78ff5f-f64f-429c-9c2f-93f7b1a467f0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c474914-2f00-4198-b898-c6c587b75b17",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "b4f002bb-a193-488c-a57f-3a164805ca82"
                    }
                  }
                ]
              },
              {
                "id": "4dff3aff-1c70-4c2d-b46b-2dac443b53c5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd494718-7c33-45ae-81cd-27ce98198d0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2ba83c88-fd1b-416e-9f3c-3230d4bb3ab2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "696a5d4e-80da-42b3-a39c-a2ddc1905496",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "ce7b543e-a9fc-48ca-bdf9-9bc3a7d5bf72"
                    }
                  }
                ]
              },
              {
                "id": "0b6a2080-3e2c-4c68-98e3-f82bc45b2288",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bab3388a-3d27-472e-ae5b-eda9894f4bbc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "79742820-0b33-42ee-b5a7-3d6dc50fb7c0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ccb9714a-c1aa-4855-a914-0ca4a786996c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "cdde6acc-7303-4093-b3b3-dd068e030d43"
                    }
                  }
                ]
              },
              {
                "id": "154de229-02c7-4d77-8e4a-590f134d1906",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b3a99f6-0e82-42fd-8d0e-8ff45e8fccc0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "245e46b3-7076-48f3-b2cd-d2ad00d2072f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9fc80e76-fdd9-41da-8d0a-54bb97c1086f",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "c22c6ec6-a489-4bbe-b5f0-2a6f70122221"
                    }
                  }
                ]
              },
              {
                "id": "4f22da0b-85a5-4403-a173-b5e136a921c3",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7f8a669-106d-454d-b82c-12b6509c657e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aaf249ad-737f-41d3-b6db-bb49ed30982a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8872eb9c-90d3-48b1-ad5c-7ffc814bd336",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "6e8100c4-5fe6-4b05-b400-751014795805"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f71bee0a-2773-4279-be34-9f7d8c153903",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "05e34faa-cb01-45a2-a959-c8ccbb342153"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "69542399-fe44-40e3-bdfe-55de18b80250",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f6b0925d-22e5-45bd-ac10-4b7902d7afb1"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "491d80bc-3068-4948-951c-ffea2ebec5d6",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "d448ff63-9b2b-4213-8ae4-f572e1d7e938"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2113b751-dfc3-46d7-8459-dd8bd92a07cc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4524f6bc-404f-4285-9dbc-165003a1052f"
            }
          }
        ]
      },
      {
        "id": "f272d6fe-6b11-4826-a24f-d617b9b49e70",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0a60515e-612b-42d6-a339-907f476c8cf3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d2f59dbf-da69-4d06-b841-4b13f0c02b7a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f2142250-8d42-4973-98da-409b5bfd3834",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abaed33f-798a-44b7-a655-9af4eaf67c61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5822d86-e3c5-4218-80a9-32cbde9a0c86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27404e1e-29b2-4a6a-80bc-fd9619b09163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d24d437-3a5c-4f52-a5f8-c6625abc000e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea48c8e5-34d0-4d3e-b112-bc1c5ddbd46b",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4cab1fd-98ff-4eb5-9518-f8cdb3e03821",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "61774849-9530-4d64-91b8-544e2228735f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4f0346-885e-44e5-b6aa-a3fe413c4891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ae29224-7b3f-44f5-8fd6-73cd3a3c0949"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13a9fb5b-8926-4d0e-86a8-8017ae254b79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19191511-139c-4a8b-8a62-f01b83e90635"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "38fd36b4-2646-41cd-a607-af8f1c1ef15c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61a0f6a7-a0ef-444e-bc5c-dfdfc666c5f6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ab6bd656-513e-41e6-8b13-ca2072cfdfe2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "5a49a12c-d63a-4fb7-bf3d-c7ee1e6976eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "db3ab537-6478-41e5-ba3e-0ae7aad7a7f6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "884f4ae1-c443-47a9-99b7-fe5da28b468a"
            }
          }
        ]
      },
      {
        "id": "e9aa87b3-cdb3-4231-84bf-af3e15c71d97",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b91c6b2d-eb74-4914-9cba-f6f9732a30bd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "03af1f40-7422-4b23-be4d-ac8df20b0745",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1013dc02-01fd-4978-86a7-b10776159295",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2546ef-5429-49fc-b341-e4c9beb1b9d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb7ff6fe-7e99-4872-9fe8-44cb52562663"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2cb802-b7a8-4090-92bd-637e847d79f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56995a00-a0ea-4c11-9fbc-9e3a1d04473c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9644ad67-4603-464c-914b-c3da670bc74f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ad5c9f-8b95-4861-b7f0-ecfaeab3188c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c3a4aae-59f9-4ae3-b194-dd1e30e5c125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce8a94a-4533-4828-b0ea-2b645a16d460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "423d2f6a-4834-4398-918e-9c59fde1f8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b3f6bd-97e9-4e33-9f8a-c603e4d59d2e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebcee7f9-730e-489a-95cf-3f690a542a4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "507f24b7-49d2-421d-85ea-1d1a5910104c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d8051b-c672-4958-b054-6159ac986dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3508564-a8a0-46c2-b566-79bc2cfbd1df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2335c182-f142-4561-b2fb-b5fa849feadc",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02888f2f-4280-4e48-9169-917e67948ba1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53f60741-7ce9-433f-a459-684ec54e4adf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65808f0-bb1a-494a-98fb-5769f3b32c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7eb25400-bb22-44c4-9b7b-9e21de91ae3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70860cef-3e00-4cec-bec6-988c3cbf1187",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be50c081-33aa-4fe2-a4ad-d391835a441d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c64076b-2b7a-429f-ab58-65570b25ede4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51547711-0ad9-45c2-a02c-be5ee6eef066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d808f6f0-d3c1-48de-939e-42c2948f17dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ddca79-ec1f-42ef-9d1e-7a4444e3bf5f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce290b83-af03-426e-a412-4b9313bbf758",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce2521a4-5fc9-42a9-a632-e291a958af08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0598bea3-9fe0-4ec4-ac23-51639bffeb24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c704ec2e-6b1f-4c31-8ee2-7e868d8cdb8c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "122efa7a-814c-4dc8-a074-6de0ce16091b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e9df443a-e3cd-4b70-b509-b2f55669298c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085ccf71-27f4-418a-89c0-52a18c96a564",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "3abe2052-4bc0-4f5a-af1a-5f03d7cbc432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c27eca-66b7-4728-b0ac-89f590c9781e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "620aaabb-268e-4fe4-af3b-e10126839478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29449d97-090e-4976-bce8-0fa57254b0c9",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8cccc4-1f44-4151-808c-8884271f3069",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "0ffabbea-f3ee-4956-9ab6-c0a9ba12aaeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee2ed98-6780-4cfe-a086-bb8ee819be0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9bbbc354-7921-44c9-a275-3ace85621b68"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dcf33900-6cd2-4248-a8b4-c0797c7ebd2b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fcce60b3-1d7a-439a-8eba-420be962ed02"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "81b917a2-b0c3-47a3-a3d9-d9823dd7010a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e657a3e1-b644-4ce7-85a8-c6393bc6a5c6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "088e00a0-481a-4778-8170-67c22bd8548e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "4df6d423-145c-4055-aa13-676a88d12069"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "74eca2d6-888c-4601-a75c-fb9c9178394e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eccdca69-6f86-49c9-a2f5-53f34adfa1d5"
            }
          }
        ]
      },
      {
        "id": "1ab84ade-b639-4119-ac68-7e607a958af5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0fd7cbb0-2c2a-484c-8dc9-9a04f450e65d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c8aef156-6dcb-4aed-8fd5-9212a8ec537d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5717e94d-fa0d-46c0-8713-754f3e61c128",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b5a3c2-b61e-481f-88eb-6f488b2a8c50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "806de51b-faa7-4a9a-b696-bc8f2ebe9b8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2538dcd-fb19-409e-accd-833bc40d3078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a283984-c693-478b-b56a-fb3a2ad4573c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc8a1652-79ad-43fd-abc7-84c5fcabdb44",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9312387-f4f6-4d92-b244-a6eadaaefd98",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "8be7b837-2aa7-4fd2-b948-597b4f172eb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76cea721-7d72-4818-99c6-d861733f312d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8b25d4a-cde0-4822-b80c-9253079ce865"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25bacba6-a3a8-46a1-a733-c7844d7622d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41952c88-84cf-4992-9cae-3566ffdf24c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a897b25-5284-4e69-9905-dca5b3a90599",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e090f5b-fbdc-406a-94e4-facf7c3d0ee4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4cd3190a-6a67-4500-8309-2b2144f26c39",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "3b1d5d70-1d99-4b7f-b2ee-b306389bbaf6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e60fc9e4-dbe4-4c31-b5be-398c1ccc8ff0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d77d5152-03ec-4af8-a8ec-e5bd8c2febd0"
            }
          }
        ]
      },
      {
        "id": "1f60dc94-e47c-46f8-9c5b-df0932fdf44b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "78c03374-f7d6-4cb0-a410-64e824a3e354",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a84924f9-e5f7-44f1-a5b5-1d339c9cfa9f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b30542f-0fe7-4308-b1e3-43e20ea6e0b5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1f85b1-f9bb-4981-ae5f-212e09c01874",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec2809a-e99b-44e6-a9e5-9dbd06b2b5e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a5e421-58cf-4149-9d7d-cf941e84316d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da952df7-533e-4967-9de6-b2d3b1822833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364e3d7f-3912-4b6d-bef0-cc36a7876e1d",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ca047b-0b21-4d10-b049-6cbbad4b6252",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "a7f69d0d-e9f8-4d76-acf1-66a4f32cc59c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f8b05a-ab86-4b5b-af5e-f6f0b7502d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "875d5035-85bc-4436-9658-9e4361247779"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2933dd2e-726b-4abc-a097-699e336adf12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51bb18a8-461b-4750-886f-c8b2ebb8d11e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8782092-5a9f-4fa0-a8c1-417d81c915a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1cbbb699-92cd-434d-815f-440fb7563dac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed25fc20-5352-4c9e-9d38-48132f74c9c1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "d5f94181-bbaf-4c8b-93a7-4935387d8b56"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f3a0b36-7077-4a83-bb68-cbff24b4e4b8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7ac68eae-e16a-459e-9a28-f3317a91332a"
            }
          }
        ]
      },
      {
        "id": "f1da32d3-472e-4a96-86be-e15b9dd94b4d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "520b221e-0b27-4d9d-a4c0-6d95be793870",
            "name": "Negative Testing",
            "item": [
              {
                "id": "462d0cd9-36d0-48c7-a4a5-c5e9b8c85502",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5ca36979-cc34-433c-9ee2-3e549c157917",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b5e4ea-658e-44c6-9a4e-3378677119d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee28770-05e4-4899-99c5-ab78a969080d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60ed1bb-2052-4ef9-8187-b8e9d7304236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a0a55bd-60a8-43e2-8933-d92cae079ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af9f0ea-c594-40d1-b8b3-ee5bf9688dec",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5d79a2-5dfc-44ed-8934-e353ff868b41",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "5a25c612-d033-4f2e-af8b-d64fc839e27d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84bf0285-c73f-43f9-800a-1764859a124b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "305e3e29-7c1c-4ab6-9bec-671e1b2f6bf5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0aa01ff8-a08b-4b1b-a9ab-cde98bd6a91d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f010ec4-bb6c-4651-a2f6-4171f82a49b2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "90fee597-3ecf-4b52-946d-6afa8345f20f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d60d6b9-ffa2-4be4-8f77-a060609f0c8c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fa3b98cf-1704-4f82-930f-8c867746f9e1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "19d79ed8-ff9e-47db-b91f-e10c58aa0224"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "03f5961d-7cd0-4df7-890f-6569372a1f93",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "af7ec4fd-c9aa-4e05-87c0-cfd3ca7aa3e4"
            }
          }
        ]
      },
      {
        "id": "8de01afa-eb95-48f0-805b-75e836d0a20e",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "f7650587-65b9-4165-9d50-9bc5d512610c",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 475,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 111,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 131,
        "pending": 0,
        "failed": 102
      },
      "testScripts": {
        "total": 240,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 235,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 71.21621621621621,
      "responseMin": 33,
      "responseMax": 407,
      "responseSd": 60.735344564566944,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1662944090271,
      "completed": 1662944102139
    },
    "executions": [
      {
        "id": "f9cf01b9-1844-4663-9a21-6eb37aba5fae",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 63,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "35340193-bf2e-43fc-a5d2-a281316972a5",
          "httpRequestId": "d963f9e0-9e17-4478-9bcd-8bb97b36e877"
        },
        "item": {
          "id": "f9cf01b9-1844-4663-9a21-6eb37aba5fae",
          "name": "did_json"
        },
        "response": {
          "id": "da1f77d1-3032-4d66-a10b-b32182f5d03d",
          "status": "OK",
          "code": 200,
          "responseTime": 224,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e4cc4f-84d7-4315-9bea-6fd4235b2393",
        "cursor": {
          "ref": "1cdf6888-bc15-4040-813c-867d087a8fc9",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "89b29665-6013-48bc-ac13-fea2a95bc15e"
        },
        "item": {
          "id": "f1e4cc4f-84d7-4315-9bea-6fd4235b2393",
          "name": "did:invalid"
        },
        "response": {
          "id": "ea649b72-185c-471e-bb07-d205e684764d",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e4cc4f-84d7-4315-9bea-6fd4235b2393",
        "cursor": {
          "ref": "1cdf6888-bc15-4040-813c-867d087a8fc9",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "89b29665-6013-48bc-ac13-fea2a95bc15e"
        },
        "item": {
          "id": "f1e4cc4f-84d7-4315-9bea-6fd4235b2393",
          "name": "did:invalid"
        },
        "response": {
          "id": "ea649b72-185c-471e-bb07-d205e684764d",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b61476-a398-4952-836b-2508677380f8",
        "cursor": {
          "ref": "307e26ab-33db-41d8-9906-6f8de70f1a9d",
          "length": 63,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d8c5175e-060e-42fe-a6cc-461554f25495"
        },
        "item": {
          "id": "f5b61476-a398-4952-836b-2508677380f8",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "680550cd-5b78-4c97-9737-27c5258ac06d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 122,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "08a77ad7-c5a4-48c1-a36b-7bbaede0f5fe",
        "cursor": {
          "ref": "f7168ac3-38e2-43a6-82b0-df8314501a38",
          "length": 63,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c7b0eaa5-ffcd-4e5e-b19c-2c19ac8e46bc"
        },
        "item": {
          "id": "08a77ad7-c5a4-48c1-a36b-7bbaede0f5fe",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f9ee9ba1-3764-4601-a821-9f956dd852b3",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "397b735b-e880-4e77-8256-801402f9cd51",
        "cursor": {
          "ref": "d20120a0-eb89-4b4a-bcc0-ba35bb572154",
          "length": 63,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "dab3b09e-c940-401c-88eb-b0da0342c575"
        },
        "item": {
          "id": "397b735b-e880-4e77-8256-801402f9cd51",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8033d476-c458-4790-bdd5-e95aa3d45089",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "5f198fa5-943a-4fa1-9bcc-f87aa2a93748",
        "cursor": {
          "ref": "00bd7000-b8f3-4f07-b795-cd22eaae01bd",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "055587ed-b29d-4851-a136-f4ed92d7a9bb"
        },
        "item": {
          "id": "5f198fa5-943a-4fa1-9bcc-f87aa2a93748",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "17e96787-ae28-41c2-a350-b4ca97694060",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "5f198fa5-943a-4fa1-9bcc-f87aa2a93748",
        "cursor": {
          "ref": "00bd7000-b8f3-4f07-b795-cd22eaae01bd",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "055587ed-b29d-4851-a136-f4ed92d7a9bb"
        },
        "item": {
          "id": "5f198fa5-943a-4fa1-9bcc-f87aa2a93748",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "17e96787-ae28-41c2-a350-b4ca97694060",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "eeb2c05c-8877-4c55-a3c1-36743b909c53",
        "cursor": {
          "ref": "e801174d-6417-4bd2-9393-cf34857d4843",
          "length": 63,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e95f7dd6-fb7a-464c-92af-6ed64318d3d5"
        },
        "item": {
          "id": "eeb2c05c-8877-4c55-a3c1-36743b909c53",
          "name": "identifiers"
        },
        "response": {
          "id": "f87fa1cc-8158-4edf-bbb4-8ece20ede580",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78114fba-9de5-481c-a69f-b5ad3ea5c20e",
        "cursor": {
          "ref": "2b464d59-e92c-4635-ba5c-2e6922c70674",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "abd41bf9-b405-4571-8286-50e9e52dbb95"
        },
        "item": {
          "id": "78114fba-9de5-481c-a69f-b5ad3ea5c20e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "08b665f3-c58b-4812-9b8b-f1e9c844e5b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 295,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "78114fba-9de5-481c-a69f-b5ad3ea5c20e",
        "cursor": {
          "ref": "2b464d59-e92c-4635-ba5c-2e6922c70674",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "abd41bf9-b405-4571-8286-50e9e52dbb95"
        },
        "item": {
          "id": "78114fba-9de5-481c-a69f-b5ad3ea5c20e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "08b665f3-c58b-4812-9b8b-f1e9c844e5b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 295,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "78114fba-9de5-481c-a69f-b5ad3ea5c20e",
        "cursor": {
          "ref": "2b464d59-e92c-4635-ba5c-2e6922c70674",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "abd41bf9-b405-4571-8286-50e9e52dbb95"
        },
        "item": {
          "id": "78114fba-9de5-481c-a69f-b5ad3ea5c20e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "08b665f3-c58b-4812-9b8b-f1e9c844e5b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 295,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "e206f37f-118a-4797-b539-d77d30db8960",
        "cursor": {
          "ref": "f63dee02-e874-4cad-a0af-4ddb2d57dcf4",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b6b262b2-b8eb-454c-ad8f-6dadecb2afe9"
        },
        "item": {
          "id": "e206f37f-118a-4797-b539-d77d30db8960",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e10cebda-ceb7-4bc0-98df-07236fbef45e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "e206f37f-118a-4797-b539-d77d30db8960",
        "cursor": {
          "ref": "f63dee02-e874-4cad-a0af-4ddb2d57dcf4",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b6b262b2-b8eb-454c-ad8f-6dadecb2afe9"
        },
        "item": {
          "id": "e206f37f-118a-4797-b539-d77d30db8960",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e10cebda-ceb7-4bc0-98df-07236fbef45e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "ff4f0997-588c-4e9a-9046-3118e2bbb334",
        "cursor": {
          "ref": "7194ee7e-7b5c-44ea-bdde-e52a35c80dc2",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a8a7a145-94b8-45d2-8a0e-9c3a697ff88d"
        },
        "item": {
          "id": "ff4f0997-588c-4e9a-9046-3118e2bbb334",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "af43c46a-c3ea-4eee-aeb8-9ad463a9bb78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "ff4f0997-588c-4e9a-9046-3118e2bbb334",
        "cursor": {
          "ref": "7194ee7e-7b5c-44ea-bdde-e52a35c80dc2",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a8a7a145-94b8-45d2-8a0e-9c3a697ff88d"
        },
        "item": {
          "id": "ff4f0997-588c-4e9a-9046-3118e2bbb334",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "af43c46a-c3ea-4eee-aeb8-9ad463a9bb78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "c9868fe6-9bfa-4002-94d1-2f8473ce6d8f",
        "cursor": {
          "ref": "a9593cf6-faa7-49cf-b193-abeccaa3f528",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "44de7153-d0c8-4758-aa4c-f7bef8c20952"
        },
        "item": {
          "id": "c9868fe6-9bfa-4002-94d1-2f8473ce6d8f",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "3429d266-6f61-464f-8a78-8feca0d36878",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "c9868fe6-9bfa-4002-94d1-2f8473ce6d8f",
        "cursor": {
          "ref": "a9593cf6-faa7-49cf-b193-abeccaa3f528",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "44de7153-d0c8-4758-aa4c-f7bef8c20952"
        },
        "item": {
          "id": "c9868fe6-9bfa-4002-94d1-2f8473ce6d8f",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "3429d266-6f61-464f-8a78-8feca0d36878",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "6e08a7c0-d054-4caa-89e5-ab1fba36ead7",
        "cursor": {
          "ref": "ce78f0ee-2c99-4508-969c-d7dd7db45f22",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d5dfecaf-5448-4a85-b64b-ed2f290853d8"
        },
        "item": {
          "id": "6e08a7c0-d054-4caa-89e5-ab1fba36ead7",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "59f034e6-d23d-4d3c-8061-5240bea35478",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "6e08a7c0-d054-4caa-89e5-ab1fba36ead7",
        "cursor": {
          "ref": "ce78f0ee-2c99-4508-969c-d7dd7db45f22",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d5dfecaf-5448-4a85-b64b-ed2f290853d8"
        },
        "item": {
          "id": "6e08a7c0-d054-4caa-89e5-ab1fba36ead7",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "59f034e6-d23d-4d3c-8061-5240bea35478",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "8590ebe2-c7aa-4fc7-8002-85815317b78d",
        "cursor": {
          "ref": "722d67a8-0a20-4634-8e59-b0e42691804c",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "76c8a0e3-c692-451d-a26c-cc633f348ed4"
        },
        "item": {
          "id": "8590ebe2-c7aa-4fc7-8002-85815317b78d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "bb20b193-f0db-4276-a386-2c5ca3d96a25",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "8590ebe2-c7aa-4fc7-8002-85815317b78d",
        "cursor": {
          "ref": "722d67a8-0a20-4634-8e59-b0e42691804c",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "76c8a0e3-c692-451d-a26c-cc633f348ed4"
        },
        "item": {
          "id": "8590ebe2-c7aa-4fc7-8002-85815317b78d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "bb20b193-f0db-4276-a386-2c5ca3d96a25",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "3790d00c-588f-4951-ab2b-c4267a73d4b5",
        "cursor": {
          "ref": "d55c784e-9f36-499e-814f-5ca451bb6ced",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "28832c4b-5b55-4fdd-be94-464f99898214"
        },
        "item": {
          "id": "3790d00c-588f-4951-ab2b-c4267a73d4b5",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "0d422a3e-687f-4a07-81bf-3a8468313aea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "3790d00c-588f-4951-ab2b-c4267a73d4b5",
        "cursor": {
          "ref": "d55c784e-9f36-499e-814f-5ca451bb6ced",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "28832c4b-5b55-4fdd-be94-464f99898214"
        },
        "item": {
          "id": "3790d00c-588f-4951-ab2b-c4267a73d4b5",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "0d422a3e-687f-4a07-81bf-3a8468313aea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "35a7f5ea-26dd-4065-b26d-3091f6f59c05",
        "cursor": {
          "ref": "1590f996-6eba-4a13-a045-d342a20ea405",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3ffd4bdf-d3bc-4ac3-baeb-9b8335ff9001"
        },
        "item": {
          "id": "35a7f5ea-26dd-4065-b26d-3091f6f59c05",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "ca51030d-a213-4e2f-b98f-05a453e923c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "35a7f5ea-26dd-4065-b26d-3091f6f59c05",
        "cursor": {
          "ref": "1590f996-6eba-4a13-a045-d342a20ea405",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3ffd4bdf-d3bc-4ac3-baeb-9b8335ff9001"
        },
        "item": {
          "id": "35a7f5ea-26dd-4065-b26d-3091f6f59c05",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "ca51030d-a213-4e2f-b98f-05a453e923c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "65ca7962-498f-4e09-82e3-9de7c1b03d48",
        "cursor": {
          "ref": "794347aa-f6ae-47f6-9718-3d44faecaeb6",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6992df3b-7aea-4fae-9347-064580e85c5a"
        },
        "item": {
          "id": "65ca7962-498f-4e09-82e3-9de7c1b03d48",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ccf4de1e-0f73-47af-bb6c-a2b875b6fc70",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "65ca7962-498f-4e09-82e3-9de7c1b03d48",
        "cursor": {
          "ref": "794347aa-f6ae-47f6-9718-3d44faecaeb6",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6992df3b-7aea-4fae-9347-064580e85c5a"
        },
        "item": {
          "id": "65ca7962-498f-4e09-82e3-9de7c1b03d48",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ccf4de1e-0f73-47af-bb6c-a2b875b6fc70",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "e3544755-6a12-4350-8d6f-867593bf44ca",
        "cursor": {
          "ref": "4eb11952-73b4-400e-8e43-dcac1511f058",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "56cd1dcf-b248-4606-a268-bd490c6975b8"
        },
        "item": {
          "id": "e3544755-6a12-4350-8d6f-867593bf44ca",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "85c239d7-792f-4a49-bd2f-a15db1e10644",
          "status": "Created",
          "code": 201,
          "responseTime": 70,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "e3544755-6a12-4350-8d6f-867593bf44ca",
        "cursor": {
          "ref": "4eb11952-73b4-400e-8e43-dcac1511f058",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "56cd1dcf-b248-4606-a268-bd490c6975b8"
        },
        "item": {
          "id": "e3544755-6a12-4350-8d6f-867593bf44ca",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "85c239d7-792f-4a49-bd2f-a15db1e10644",
          "status": "Created",
          "code": 201,
          "responseTime": 70,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "bd93fff2-d457-4935-92dc-512cd334a4a2",
        "cursor": {
          "ref": "4faf5b40-9ea0-46c9-bde6-e0d6b789dc61",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "dc4d60dc-ca59-4128-82ca-a7cdb895b653"
        },
        "item": {
          "id": "bd93fff2-d457-4935-92dc-512cd334a4a2",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "c0df1d45-33ad-450d-b885-3cf5f411c37f",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "bd93fff2-d457-4935-92dc-512cd334a4a2",
        "cursor": {
          "ref": "4faf5b40-9ea0-46c9-bde6-e0d6b789dc61",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "dc4d60dc-ca59-4128-82ca-a7cdb895b653"
        },
        "item": {
          "id": "bd93fff2-d457-4935-92dc-512cd334a4a2",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "c0df1d45-33ad-450d-b885-3cf5f411c37f",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "9b57f9e3-1d18-410b-8158-417cc9f488d5",
        "cursor": {
          "ref": "7d2c7978-89c6-413d-9374-3e6ed40726dc",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c1323f69-58a4-4239-beae-6ab82ab32ac9"
        },
        "item": {
          "id": "9b57f9e3-1d18-410b-8158-417cc9f488d5",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "356ae04f-6d27-46ee-8912-9413af05a8f4",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "9b57f9e3-1d18-410b-8158-417cc9f488d5",
        "cursor": {
          "ref": "7d2c7978-89c6-413d-9374-3e6ed40726dc",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c1323f69-58a4-4239-beae-6ab82ab32ac9"
        },
        "item": {
          "id": "9b57f9e3-1d18-410b-8158-417cc9f488d5",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "356ae04f-6d27-46ee-8912-9413af05a8f4",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "f41fa2d3-c7d3-45db-8db9-8d24d27ff35e",
        "cursor": {
          "ref": "b0449dbb-f5a8-43c2-9e32-dc20b21faf25",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5acecc41-04b6-4435-9e35-001a3172d5a8"
        },
        "item": {
          "id": "f41fa2d3-c7d3-45db-8db9-8d24d27ff35e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7d913dfa-bdd8-4ed6-bda1-1f8e0ec0d57c",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "f41fa2d3-c7d3-45db-8db9-8d24d27ff35e",
        "cursor": {
          "ref": "b0449dbb-f5a8-43c2-9e32-dc20b21faf25",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5acecc41-04b6-4435-9e35-001a3172d5a8"
        },
        "item": {
          "id": "f41fa2d3-c7d3-45db-8db9-8d24d27ff35e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7d913dfa-bdd8-4ed6-bda1-1f8e0ec0d57c",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "57ca7427-f7c5-44f8-8532-16d719754bd8",
        "cursor": {
          "ref": "050e0576-3012-43a8-900f-b6b5a5a26d23",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f73cc808-6d70-4da3-a519-232d266ec1e8"
        },
        "item": {
          "id": "57ca7427-f7c5-44f8-8532-16d719754bd8",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "de1b3f7e-066b-4ccb-afd1-c2324362cab6",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "57ca7427-f7c5-44f8-8532-16d719754bd8",
        "cursor": {
          "ref": "050e0576-3012-43a8-900f-b6b5a5a26d23",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f73cc808-6d70-4da3-a519-232d266ec1e8"
        },
        "item": {
          "id": "57ca7427-f7c5-44f8-8532-16d719754bd8",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "de1b3f7e-066b-4ccb-afd1-c2324362cab6",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "1fa79c88-2d1c-4d46-9dc0-603439dc8e0c",
        "cursor": {
          "ref": "a1a2fd28-7462-4640-b74b-3406957dcc0f",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a9e7a340-f075-42c1-a95d-d65184dc16a9"
        },
        "item": {
          "id": "1fa79c88-2d1c-4d46-9dc0-603439dc8e0c",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "6400d992-6054-4226-913f-08011e39efaa",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "1fa79c88-2d1c-4d46-9dc0-603439dc8e0c",
        "cursor": {
          "ref": "a1a2fd28-7462-4640-b74b-3406957dcc0f",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a9e7a340-f075-42c1-a95d-d65184dc16a9"
        },
        "item": {
          "id": "1fa79c88-2d1c-4d46-9dc0-603439dc8e0c",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "6400d992-6054-4226-913f-08011e39efaa",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "b8f59ff9-a68f-44b4-9ca5-f6ff94c92847",
        "cursor": {
          "ref": "0d1272bb-1901-4d56-9a33-2754c2f5a53d",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "cd57c22f-d75d-403f-a476-25ecec7155fd"
        },
        "item": {
          "id": "b8f59ff9-a68f-44b4-9ca5-f6ff94c92847",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "cf2bfd92-31be-4949-9aa2-162cd8c9b65b",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "b8f59ff9-a68f-44b4-9ca5-f6ff94c92847",
        "cursor": {
          "ref": "0d1272bb-1901-4d56-9a33-2754c2f5a53d",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "cd57c22f-d75d-403f-a476-25ecec7155fd"
        },
        "item": {
          "id": "b8f59ff9-a68f-44b4-9ca5-f6ff94c92847",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "cf2bfd92-31be-4949-9aa2-162cd8c9b65b",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "945bd87d-feca-4c15-b92d-136e1b102d12",
        "cursor": {
          "ref": "cd0f40d8-f77a-4b4d-b348-3ffab63c9fec",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "16f9b7a0-94f3-4db0-8a70-ca8ea0e0fb15"
        },
        "item": {
          "id": "945bd87d-feca-4c15-b92d-136e1b102d12",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "59e5ae9f-0e2a-45ef-9603-5da892c0b46d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "945bd87d-feca-4c15-b92d-136e1b102d12",
        "cursor": {
          "ref": "cd0f40d8-f77a-4b4d-b348-3ffab63c9fec",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "16f9b7a0-94f3-4db0-8a70-ca8ea0e0fb15"
        },
        "item": {
          "id": "945bd87d-feca-4c15-b92d-136e1b102d12",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "59e5ae9f-0e2a-45ef-9603-5da892c0b46d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "0aece21c-5154-4a55-b36b-050f3d9b60a6",
        "cursor": {
          "ref": "0a24dafe-fa02-4848-a12a-c0259297f2af",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ffdcd0eb-d353-4fab-b165-9de44f3398f7"
        },
        "item": {
          "id": "0aece21c-5154-4a55-b36b-050f3d9b60a6",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "6126dc9f-7596-404a-9442-e8b42c5588e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "0aece21c-5154-4a55-b36b-050f3d9b60a6",
        "cursor": {
          "ref": "0a24dafe-fa02-4848-a12a-c0259297f2af",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ffdcd0eb-d353-4fab-b165-9de44f3398f7"
        },
        "item": {
          "id": "0aece21c-5154-4a55-b36b-050f3d9b60a6",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "6126dc9f-7596-404a-9442-e8b42c5588e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "5bf23748-3332-4796-afcf-a5e93f7d2f21",
        "cursor": {
          "ref": "074dcf40-8ab7-4faa-8227-54e02dac4e75",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8d5d7613-0554-43da-b13a-0a369f9cef60"
        },
        "item": {
          "id": "5bf23748-3332-4796-afcf-a5e93f7d2f21",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "10db0527-5d59-4649-8e6c-5e328a1d6df5",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "5bf23748-3332-4796-afcf-a5e93f7d2f21",
        "cursor": {
          "ref": "074dcf40-8ab7-4faa-8227-54e02dac4e75",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8d5d7613-0554-43da-b13a-0a369f9cef60"
        },
        "item": {
          "id": "5bf23748-3332-4796-afcf-a5e93f7d2f21",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "10db0527-5d59-4649-8e6c-5e328a1d6df5",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "c4f19590-6042-4d3c-9925-5b5211644d5b",
        "cursor": {
          "ref": "114777a3-ece7-421c-88b7-1a715c3b56c9",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e263dcba-4bab-4433-80eb-10127cb5ec69"
        },
        "item": {
          "id": "c4f19590-6042-4d3c-9925-5b5211644d5b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0ef4ae1d-fe05-4300-8c05-ed1fd0435ef8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "c4f19590-6042-4d3c-9925-5b5211644d5b",
        "cursor": {
          "ref": "114777a3-ece7-421c-88b7-1a715c3b56c9",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e263dcba-4bab-4433-80eb-10127cb5ec69"
        },
        "item": {
          "id": "c4f19590-6042-4d3c-9925-5b5211644d5b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0ef4ae1d-fe05-4300-8c05-ed1fd0435ef8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "f207dbb5-c1e9-421d-b763-c8475cc20879",
        "cursor": {
          "ref": "c8f8996a-686b-4eb6-88d7-c199ca00fa24",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d4f0a8da-7727-4a3b-957a-38e1d6763016"
        },
        "item": {
          "id": "f207dbb5-c1e9-421d-b763-c8475cc20879",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "6d466958-a0f0-4075-a12d-3eeffe64882f",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "f207dbb5-c1e9-421d-b763-c8475cc20879",
        "cursor": {
          "ref": "c8f8996a-686b-4eb6-88d7-c199ca00fa24",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d4f0a8da-7727-4a3b-957a-38e1d6763016"
        },
        "item": {
          "id": "f207dbb5-c1e9-421d-b763-c8475cc20879",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "6d466958-a0f0-4075-a12d-3eeffe64882f",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "452bb8c2-a209-4e1f-ade8-c45523571014",
        "cursor": {
          "ref": "e2987e18-82cc-4df8-aed1-10e4fb751a22",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fdb20986-9e4a-4b54-affb-d5c1c86fc72b"
        },
        "item": {
          "id": "452bb8c2-a209-4e1f-ade8-c45523571014",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "63deb6ec-a764-4cb9-a7b6-a59784258448",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "452bb8c2-a209-4e1f-ade8-c45523571014",
        "cursor": {
          "ref": "e2987e18-82cc-4df8-aed1-10e4fb751a22",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fdb20986-9e4a-4b54-affb-d5c1c86fc72b"
        },
        "item": {
          "id": "452bb8c2-a209-4e1f-ade8-c45523571014",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "63deb6ec-a764-4cb9-a7b6-a59784258448",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "d4ea455a-c757-49ca-acaf-a79b6bdd8e7e",
        "cursor": {
          "ref": "0d7bc17c-3668-4e23-acf9-6c1bcdef730a",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a5b2e0a5-f85c-402d-b121-df6d3f1305dd"
        },
        "item": {
          "id": "d4ea455a-c757-49ca-acaf-a79b6bdd8e7e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4452c6ea-f76a-4824-99d0-3ebeaf075445",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "d4ea455a-c757-49ca-acaf-a79b6bdd8e7e",
        "cursor": {
          "ref": "0d7bc17c-3668-4e23-acf9-6c1bcdef730a",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a5b2e0a5-f85c-402d-b121-df6d3f1305dd"
        },
        "item": {
          "id": "d4ea455a-c757-49ca-acaf-a79b6bdd8e7e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4452c6ea-f76a-4824-99d0-3ebeaf075445",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "c0721c7b-baf1-4b06-b584-e91d92f0a4ce",
        "cursor": {
          "ref": "ac3678f1-2efe-4f7b-988a-291b1bac677f",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "cb0b928d-45d2-4785-b785-fa350b823f63"
        },
        "item": {
          "id": "c0721c7b-baf1-4b06-b584-e91d92f0a4ce",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "28de92a9-e8e4-4bb8-a73c-d9dbcdf42065",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "c0721c7b-baf1-4b06-b584-e91d92f0a4ce",
        "cursor": {
          "ref": "ac3678f1-2efe-4f7b-988a-291b1bac677f",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "cb0b928d-45d2-4785-b785-fa350b823f63"
        },
        "item": {
          "id": "c0721c7b-baf1-4b06-b584-e91d92f0a4ce",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "28de92a9-e8e4-4bb8-a73c-d9dbcdf42065",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "bff60e92-f36a-49cc-8447-2d0d5ad9299b",
        "cursor": {
          "ref": "0b071c2e-0b83-4734-be2a-0aa69a31e8a3",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ddddbcd1-bef0-4764-a8b0-aa7353f6378a"
        },
        "item": {
          "id": "bff60e92-f36a-49cc-8447-2d0d5ad9299b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9c998d46-03ac-4b76-842a-d7e0925b1068",
          "status": "Created",
          "code": 201,
          "responseTime": 83,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "bff60e92-f36a-49cc-8447-2d0d5ad9299b",
        "cursor": {
          "ref": "0b071c2e-0b83-4734-be2a-0aa69a31e8a3",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ddddbcd1-bef0-4764-a8b0-aa7353f6378a"
        },
        "item": {
          "id": "bff60e92-f36a-49cc-8447-2d0d5ad9299b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9c998d46-03ac-4b76-842a-d7e0925b1068",
          "status": "Created",
          "code": 201,
          "responseTime": 83,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "8f5c2afa-9e80-4636-b3fa-5fedcaa1186c",
        "cursor": {
          "ref": "86c0f561-5aad-444b-b394-f66b0874e489",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "daee1ea9-86f1-41d5-bd25-4f9ab23e7c2a"
        },
        "item": {
          "id": "8f5c2afa-9e80-4636-b3fa-5fedcaa1186c",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "e3e00ce4-d654-4724-bd0e-b7e73a701ab4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "8f5c2afa-9e80-4636-b3fa-5fedcaa1186c",
        "cursor": {
          "ref": "86c0f561-5aad-444b-b394-f66b0874e489",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "daee1ea9-86f1-41d5-bd25-4f9ab23e7c2a"
        },
        "item": {
          "id": "8f5c2afa-9e80-4636-b3fa-5fedcaa1186c",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "e3e00ce4-d654-4724-bd0e-b7e73a701ab4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "f7f9af36-36e4-488f-b374-892ec901eff6",
        "cursor": {
          "ref": "f9a92bd1-96f2-476f-8d23-dd03ef2e422e",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "881df969-5fa7-4cf1-b943-d8b0147704cd"
        },
        "item": {
          "id": "f7f9af36-36e4-488f-b374-892ec901eff6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8a4f5e28-24d7-4260-a9a2-a4d94842177d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "f7f9af36-36e4-488f-b374-892ec901eff6",
        "cursor": {
          "ref": "f9a92bd1-96f2-476f-8d23-dd03ef2e422e",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "881df969-5fa7-4cf1-b943-d8b0147704cd"
        },
        "item": {
          "id": "f7f9af36-36e4-488f-b374-892ec901eff6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8a4f5e28-24d7-4260-a9a2-a4d94842177d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "534a4302-e4ca-4a16-bcfb-ecb0aa6b496e",
        "cursor": {
          "ref": "e5de1050-63d8-4706-8a2d-4272547366c0",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4230ff6e-adb1-4118-927e-d032e858bf4f"
        },
        "item": {
          "id": "534a4302-e4ca-4a16-bcfb-ecb0aa6b496e",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "90f67b99-1d30-460f-bd52-601d42c49b27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "534a4302-e4ca-4a16-bcfb-ecb0aa6b496e",
        "cursor": {
          "ref": "e5de1050-63d8-4706-8a2d-4272547366c0",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4230ff6e-adb1-4118-927e-d032e858bf4f"
        },
        "item": {
          "id": "534a4302-e4ca-4a16-bcfb-ecb0aa6b496e",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "90f67b99-1d30-460f-bd52-601d42c49b27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "f21c539d-93e8-4691-9ca3-714ad2da8c6c",
        "cursor": {
          "ref": "e2f87104-42aa-4080-91aa-45f67910f8ce",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "782351c3-19c2-4eef-87a6-5026303670b2"
        },
        "item": {
          "id": "f21c539d-93e8-4691-9ca3-714ad2da8c6c",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "cf1c262e-9728-4ce0-9dd4-1806bedde21c",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "f21c539d-93e8-4691-9ca3-714ad2da8c6c",
        "cursor": {
          "ref": "e2f87104-42aa-4080-91aa-45f67910f8ce",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "782351c3-19c2-4eef-87a6-5026303670b2"
        },
        "item": {
          "id": "f21c539d-93e8-4691-9ca3-714ad2da8c6c",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "cf1c262e-9728-4ce0-9dd4-1806bedde21c",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "1dfed967-616f-40b0-90c4-140ccdf14b6d",
        "cursor": {
          "ref": "93a0dc9c-96fe-4230-9b82-d9d9becc5e96",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3f5a5af1-0ff2-4171-9018-db4f6606f627"
        },
        "item": {
          "id": "1dfed967-616f-40b0-90c4-140ccdf14b6d",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "d7dada99-828d-4ac1-9bab-842485361c65",
          "status": "Created",
          "code": 201,
          "responseTime": 89,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "1dfed967-616f-40b0-90c4-140ccdf14b6d",
        "cursor": {
          "ref": "93a0dc9c-96fe-4230-9b82-d9d9becc5e96",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3f5a5af1-0ff2-4171-9018-db4f6606f627"
        },
        "item": {
          "id": "1dfed967-616f-40b0-90c4-140ccdf14b6d",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "d7dada99-828d-4ac1-9bab-842485361c65",
          "status": "Created",
          "code": 201,
          "responseTime": 89,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "b1d9e289-1c31-4cb4-bfa2-9333189da1e4",
        "cursor": {
          "ref": "5ca541d5-9b92-40f9-98aa-823fd1c63c2f",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6fae2d8c-10a7-4f42-9ff4-7d37b90b5dbd"
        },
        "item": {
          "id": "b1d9e289-1c31-4cb4-bfa2-9333189da1e4",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "569ed0f9-59ad-4d0c-9e4f-62171c515603",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "b1d9e289-1c31-4cb4-bfa2-9333189da1e4",
        "cursor": {
          "ref": "5ca541d5-9b92-40f9-98aa-823fd1c63c2f",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6fae2d8c-10a7-4f42-9ff4-7d37b90b5dbd"
        },
        "item": {
          "id": "b1d9e289-1c31-4cb4-bfa2-9333189da1e4",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "569ed0f9-59ad-4d0c-9e4f-62171c515603",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "6dad3174-c5a9-4d06-9f94-f7e824c7cf5c",
        "cursor": {
          "ref": "de4638c2-0e1d-4174-90ff-5fa8cbf48796",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "702c67e5-1ac2-4b7e-9a92-d3053f37ef2f"
        },
        "item": {
          "id": "6dad3174-c5a9-4d06-9f94-f7e824c7cf5c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4ffbe0d4-ead3-4778-9530-0f7b9f3c0a77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6dad3174-c5a9-4d06-9f94-f7e824c7cf5c",
        "cursor": {
          "ref": "de4638c2-0e1d-4174-90ff-5fa8cbf48796",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "702c67e5-1ac2-4b7e-9a92-d3053f37ef2f"
        },
        "item": {
          "id": "6dad3174-c5a9-4d06-9f94-f7e824c7cf5c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4ffbe0d4-ead3-4778-9530-0f7b9f3c0a77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "4d8e1d29-2e61-4f19-8d07-ffdf50e87cb4",
        "cursor": {
          "ref": "b4119cba-1c5e-4d26-ac3a-374130de9cfa",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a59e0078-757b-4639-9364-16ff1bc7056f"
        },
        "item": {
          "id": "4d8e1d29-2e61-4f19-8d07-ffdf50e87cb4",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "79ed46bc-6750-434b-9500-5371d6f7700e",
          "status": "Created",
          "code": 201,
          "responseTime": 68,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4d8e1d29-2e61-4f19-8d07-ffdf50e87cb4",
        "cursor": {
          "ref": "b4119cba-1c5e-4d26-ac3a-374130de9cfa",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a59e0078-757b-4639-9364-16ff1bc7056f"
        },
        "item": {
          "id": "4d8e1d29-2e61-4f19-8d07-ffdf50e87cb4",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "79ed46bc-6750-434b-9500-5371d6f7700e",
          "status": "Created",
          "code": 201,
          "responseTime": 68,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "95bc69cc-25d8-411d-94ec-94e29554763f",
        "cursor": {
          "ref": "c91c1c68-fea7-468a-90b4-481a7d150a2a",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6a11ffdd-ba9c-4f98-a050-95e990502326"
        },
        "item": {
          "id": "95bc69cc-25d8-411d-94ec-94e29554763f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "26ede97b-7f99-4ab4-b939-88a5445ccd44",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "95bc69cc-25d8-411d-94ec-94e29554763f",
        "cursor": {
          "ref": "c91c1c68-fea7-468a-90b4-481a7d150a2a",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6a11ffdd-ba9c-4f98-a050-95e990502326"
        },
        "item": {
          "id": "95bc69cc-25d8-411d-94ec-94e29554763f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "26ede97b-7f99-4ab4-b939-88a5445ccd44",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91397f3-c09d-4643-89ad-debe0fa8f586",
        "cursor": {
          "ref": "c251da9b-70a9-4a13-837f-81bbf729f2c4",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "381ffcc6-0a91-42ec-b5c2-9dfcbf612abc"
        },
        "item": {
          "id": "e91397f3-c09d-4643-89ad-debe0fa8f586",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "cc6545f5-e4c1-4b99-9830-921a4085345d",
          "status": "Created",
          "code": 201,
          "responseTime": 71,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91397f3-c09d-4643-89ad-debe0fa8f586",
        "cursor": {
          "ref": "c251da9b-70a9-4a13-837f-81bbf729f2c4",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "381ffcc6-0a91-42ec-b5c2-9dfcbf612abc"
        },
        "item": {
          "id": "e91397f3-c09d-4643-89ad-debe0fa8f586",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "cc6545f5-e4c1-4b99-9830-921a4085345d",
          "status": "Created",
          "code": 201,
          "responseTime": 71,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f5ff5d6-f59e-40d9-83e9-a46528d0e927",
        "cursor": {
          "ref": "95b87363-3089-443d-a339-49ea733975a8",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "aef19c35-7bc2-4215-9be1-9e33cdd9539a"
        },
        "item": {
          "id": "0f5ff5d6-f59e-40d9-83e9-a46528d0e927",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9b565250-962f-4e26-a9a8-40503ba1b3ea",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f5ff5d6-f59e-40d9-83e9-a46528d0e927",
        "cursor": {
          "ref": "95b87363-3089-443d-a339-49ea733975a8",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "aef19c35-7bc2-4215-9be1-9e33cdd9539a"
        },
        "item": {
          "id": "0f5ff5d6-f59e-40d9-83e9-a46528d0e927",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9b565250-962f-4e26-a9a8-40503ba1b3ea",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dff3aff-1c70-4c2d-b46b-2dac443b53c5",
        "cursor": {
          "ref": "7bdd2494-4de8-4cb4-991a-124f73d0cdd3",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "12a0ab84-bcb8-4014-b7f0-c7870c8d309f"
        },
        "item": {
          "id": "4dff3aff-1c70-4c2d-b46b-2dac443b53c5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5407fb10-f8af-4107-a5fa-6f6c81f03396",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dff3aff-1c70-4c2d-b46b-2dac443b53c5",
        "cursor": {
          "ref": "7bdd2494-4de8-4cb4-991a-124f73d0cdd3",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "12a0ab84-bcb8-4014-b7f0-c7870c8d309f"
        },
        "item": {
          "id": "4dff3aff-1c70-4c2d-b46b-2dac443b53c5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5407fb10-f8af-4107-a5fa-6f6c81f03396",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b6a2080-3e2c-4c68-98e3-f82bc45b2288",
        "cursor": {
          "ref": "1b8c9921-3474-4f29-9214-3bf8ad80aec3",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "57d3e134-1a6c-4954-aa36-ef4d2510a8d3"
        },
        "item": {
          "id": "0b6a2080-3e2c-4c68-98e3-f82bc45b2288",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "94c31db8-54d6-49d9-bb8b-c022b09102d0",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b6a2080-3e2c-4c68-98e3-f82bc45b2288",
        "cursor": {
          "ref": "1b8c9921-3474-4f29-9214-3bf8ad80aec3",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "57d3e134-1a6c-4954-aa36-ef4d2510a8d3"
        },
        "item": {
          "id": "0b6a2080-3e2c-4c68-98e3-f82bc45b2288",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "94c31db8-54d6-49d9-bb8b-c022b09102d0",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "154de229-02c7-4d77-8e4a-590f134d1906",
        "cursor": {
          "ref": "de08e105-8fdd-412b-a544-bbcbd31a62f7",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "dc8dbc1a-b172-4c6f-a91f-77001a4ee90a"
        },
        "item": {
          "id": "154de229-02c7-4d77-8e4a-590f134d1906",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1c0be7d7-4e1f-4d4f-850f-bd094f066041",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "154de229-02c7-4d77-8e4a-590f134d1906",
        "cursor": {
          "ref": "de08e105-8fdd-412b-a544-bbcbd31a62f7",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "dc8dbc1a-b172-4c6f-a91f-77001a4ee90a"
        },
        "item": {
          "id": "154de229-02c7-4d77-8e4a-590f134d1906",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1c0be7d7-4e1f-4d4f-850f-bd094f066041",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f22da0b-85a5-4403-a173-b5e136a921c3",
        "cursor": {
          "ref": "4ada3e4b-a50d-4ce1-abc1-7f041c2d3143",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "831e58f7-b00e-424c-a96b-404339b27bf0"
        },
        "item": {
          "id": "4f22da0b-85a5-4403-a173-b5e136a921c3",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "939a1b2f-f279-4d43-81da-23c334854973",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f22da0b-85a5-4403-a173-b5e136a921c3",
        "cursor": {
          "ref": "4ada3e4b-a50d-4ce1-abc1-7f041c2d3143",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "831e58f7-b00e-424c-a96b-404339b27bf0"
        },
        "item": {
          "id": "4f22da0b-85a5-4403-a173-b5e136a921c3",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "939a1b2f-f279-4d43-81da-23c334854973",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2142250-8d42-4973-98da-409b5bfd3834",
        "cursor": {
          "ref": "513ffffb-226b-4c66-b808-b75c163b8b96",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "79b3845b-213a-4cdc-bb37-0aa80346c6a5"
        },
        "item": {
          "id": "f2142250-8d42-4973-98da-409b5bfd3834",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3c8987d0-d01b-4fa9-b8fc-83287bffe661",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f2142250-8d42-4973-98da-409b5bfd3834",
        "cursor": {
          "ref": "513ffffb-226b-4c66-b808-b75c163b8b96",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "79b3845b-213a-4cdc-bb37-0aa80346c6a5"
        },
        "item": {
          "id": "f2142250-8d42-4973-98da-409b5bfd3834",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3c8987d0-d01b-4fa9-b8fc-83287bffe661",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ea48c8e5-34d0-4d3e-b112-bc1c5ddbd46b",
        "cursor": {
          "ref": "b4ba6534-6abc-4737-9c7f-3d7f35ca44e7",
          "length": 63,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "295bd00d-1b1a-4a33-a5c1-9403a7823d98"
        },
        "item": {
          "id": "ea48c8e5-34d0-4d3e-b112-bc1c5ddbd46b",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d194f3c6-7c7c-4294-888e-fff64ac1c9e5",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 35,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1013dc02-01fd-4978-86a7-b10776159295",
        "cursor": {
          "ref": "e562d4e0-2a19-4f1a-94a5-f74579db13cd",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "030b57fb-349e-4913-ab27-e1c85447f0c5"
        },
        "item": {
          "id": "1013dc02-01fd-4978-86a7-b10776159295",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7d0a512d-3c56-480a-9d56-4e4839086b4f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "1013dc02-01fd-4978-86a7-b10776159295",
        "cursor": {
          "ref": "e562d4e0-2a19-4f1a-94a5-f74579db13cd",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "030b57fb-349e-4913-ab27-e1c85447f0c5"
        },
        "item": {
          "id": "1013dc02-01fd-4978-86a7-b10776159295",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7d0a512d-3c56-480a-9d56-4e4839086b4f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "9644ad67-4603-464c-914b-c3da670bc74f",
        "cursor": {
          "ref": "41b7467d-fa0c-4ab9-903b-e3ea9e5e95fd",
          "length": 63,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "71510a50-25af-4fe4-b2af-b256748d5118"
        },
        "item": {
          "id": "9644ad67-4603-464c-914b-c3da670bc74f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6d1a9ba9-70db-49b5-b45c-7e26b12d25d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "72b3f6bd-97e9-4e33-9f8a-c603e4d59d2e",
        "cursor": {
          "ref": "dd7b7f42-9a28-4291-9b3d-485983da3e17",
          "length": 63,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "31bc4e34-2e42-4bf3-9459-e94cf5a9ccd3"
        },
        "item": {
          "id": "72b3f6bd-97e9-4e33-9f8a-c603e4d59d2e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d96b2f79-d767-4e01-9f0f-b7bd94136d6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "2335c182-f142-4561-b2fb-b5fa849feadc",
        "cursor": {
          "ref": "2e112d98-59da-44c2-b824-8f0cb7edd6a5",
          "length": 63,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e96a3aed-ac44-4179-b9b3-1bf992531fa9"
        },
        "item": {
          "id": "2335c182-f142-4561-b2fb-b5fa849feadc",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "345c7d55-88cb-417e-ab53-ef0e47b9e5d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "70860cef-3e00-4cec-bec6-988c3cbf1187",
        "cursor": {
          "ref": "4b99e24c-512c-4212-a539-8e6e918bb603",
          "length": 63,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6b88025e-34f6-4040-a410-f23fa2ab170e"
        },
        "item": {
          "id": "70860cef-3e00-4cec-bec6-988c3cbf1187",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "bf0a5924-8444-4ddd-b140-2a4dc08023fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "77ddca79-ec1f-42ef-9d1e-7a4444e3bf5f",
        "cursor": {
          "ref": "0987f62a-94d4-4e23-98d6-14da01c4d45b",
          "length": 63,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "fc7df4f2-d869-41a1-bf4e-60400537592b"
        },
        "item": {
          "id": "77ddca79-ec1f-42ef-9d1e-7a4444e3bf5f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c8eee2b8-a995-466c-96fb-be216e46c6ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "e9df443a-e3cd-4b70-b509-b2f55669298c",
        "cursor": {
          "ref": "83f86c51-f41d-4dec-84c8-7a20698b2f43",
          "length": 63,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "429c2b13-af9a-4687-a613-b9f1ccf8a0a7"
        },
        "item": {
          "id": "e9df443a-e3cd-4b70-b509-b2f55669298c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e6a9e11e-8708-463d-a454-f998e6c26157",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "29449d97-090e-4976-bce8-0fa57254b0c9",
        "cursor": {
          "ref": "78940a26-d8f7-4e4e-8e8b-fb1213eb97d4",
          "length": 63,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8d7c95cf-967b-41a4-ae72-0816d2767570"
        },
        "item": {
          "id": "29449d97-090e-4976-bce8-0fa57254b0c9",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "c508e8d3-9dfb-417f-9b0c-f876fb98c26f",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "5717e94d-fa0d-46c0-8713-754f3e61c128",
        "cursor": {
          "ref": "6212dfe1-95d7-429f-962d-8c8938501d22",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e21b9334-0100-4c6d-a703-7bb1469fdedc"
        },
        "item": {
          "id": "5717e94d-fa0d-46c0-8713-754f3e61c128",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "adcdb71f-ad73-425b-b2b1-96bd6a30477f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "5717e94d-fa0d-46c0-8713-754f3e61c128",
        "cursor": {
          "ref": "6212dfe1-95d7-429f-962d-8c8938501d22",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e21b9334-0100-4c6d-a703-7bb1469fdedc"
        },
        "item": {
          "id": "5717e94d-fa0d-46c0-8713-754f3e61c128",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "adcdb71f-ad73-425b-b2b1-96bd6a30477f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "fc8a1652-79ad-43fd-abc7-84c5fcabdb44",
        "cursor": {
          "ref": "0e549729-4e7b-4656-ac1b-fac3c22e6616",
          "length": 63,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f1a47f74-fb01-4346-bc17-984140bc7064"
        },
        "item": {
          "id": "fc8a1652-79ad-43fd-abc7-84c5fcabdb44",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "e00f16f7-682a-49f4-8dbb-1d30827124c3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "6b30542f-0fe7-4308-b1e3-43e20ea6e0b5",
        "cursor": {
          "ref": "ed0b9c60-eba2-4ad7-a766-1b8d19735679",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f3a87378-d8f0-4bf4-bc37-1732d0d8407d"
        },
        "item": {
          "id": "6b30542f-0fe7-4308-b1e3-43e20ea6e0b5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f5153a0b-71ae-4e66-b266-b57d7a635fcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "6b30542f-0fe7-4308-b1e3-43e20ea6e0b5",
        "cursor": {
          "ref": "ed0b9c60-eba2-4ad7-a766-1b8d19735679",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f3a87378-d8f0-4bf4-bc37-1732d0d8407d"
        },
        "item": {
          "id": "6b30542f-0fe7-4308-b1e3-43e20ea6e0b5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f5153a0b-71ae-4e66-b266-b57d7a635fcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "364e3d7f-3912-4b6d-bef0-cc36a7876e1d",
        "cursor": {
          "ref": "eee6abef-f5aa-4a3e-b4c6-d05523f73779",
          "length": 63,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "028b0fef-58eb-4df7-9413-d03383ba0e51"
        },
        "item": {
          "id": "364e3d7f-3912-4b6d-bef0-cc36a7876e1d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "ba895103-6d7c-4113-bfb8-faf6e702c86b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 139,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "5ca36979-cc34-433c-9ee2-3e549c157917",
        "cursor": {
          "ref": "28e651a6-3e83-4c1b-893e-bc096886aa9d",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2d3f0218-ad47-4f25-9a48-443397402354"
        },
        "item": {
          "id": "5ca36979-cc34-433c-9ee2-3e549c157917",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "641353c9-ebab-4b47-8d66-4d4f08020c7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "5ca36979-cc34-433c-9ee2-3e549c157917",
        "cursor": {
          "ref": "28e651a6-3e83-4c1b-893e-bc096886aa9d",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2d3f0218-ad47-4f25-9a48-443397402354"
        },
        "item": {
          "id": "5ca36979-cc34-433c-9ee2-3e549c157917",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "641353c9-ebab-4b47-8d66-4d4f08020c7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "9af9f0ea-c594-40d1-b8b3-ee5bf9688dec",
        "cursor": {
          "ref": "65ef9ee2-73a8-4191-b920-5ff983668208",
          "length": 63,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "268cb642-9448-4beb-8b28-646877c0f5dd"
        },
        "item": {
          "id": "9af9f0ea-c594-40d1-b8b3-ee5bf9688dec",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "3e4cef97-6955-440c-8f07-99670d656d21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      }
    ]
  }
}