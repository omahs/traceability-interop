{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "947451d1-2e26-4daa-8e8c-4675ef21cbee",
        "name": "Clear Cache",
        "item": [
          {
            "id": "615a29c7-7826-4596-aab1-c2349c1a3247",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e5dca66e-b214-41a9-a9d4-387689e1a595",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c0f784fa-6d82-43e7-ab17-2cecc923eef0"
                }
              }
            ]
          },
          {
            "id": "5ee091a7-ec68-4045-b500-5508e89ef982",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "309bef6c-1804-43c4-b845-0ff857a20717",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5518c733-0818-48d6-b401-998fec1623ee"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6ba7d5cf-5b2f-493c-96c8-699d31fff5f7",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "be60b053-3a12-4756-8b07-ca9f8c9403e3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "495c52b1-dca4-4827-8661-8bbb95219799",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ac276f9-0eb3-4877-9f44-4f37c448aeb9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "49f17cac-9665-46e1-84a5-794dd03b80dc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "41777b0b-dce4-4765-a947-421af310a975",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c573575c-a5a0-4b92-a12d-fbe2206b473f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ae13b8e1-9f72-4aa1-ae99-0525f0753e73",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "83fb90a9-1557-4602-9837-1c21c4bcceeb"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d019e613-b4ee-4e99-93e3-755025fbb17b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "bd4c9fc2-6f6c-42b0-ad27-85482612c7a1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98ca279f-99e6-4087-aaa1-7f16895fc533",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "379daa35-92e0-4024-827f-e2b13d3218a2"
            }
          }
        ]
      },
      {
        "id": "c0390fcc-69dc-4146-a87b-4911452239a5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "479a9779-8409-4699-945c-2f9243ac4924",
            "name": "Negative Testing",
            "item": [
              {
                "id": "74d14ff7-725d-4324-9f9b-da932c2de14c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b7b207e6-4a2e-41a2-a4a9-3486443d3ed6",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ef3b98-e6d9-48a6-9e07-d51543cf5755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49844361-966a-4c60-8309-13dd811eef39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc32169-20fb-4aed-ac34-ee935765321c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a02ef852-5bfc-460a-b865-a6a0dca33391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45f47a5d-c60e-4763-977e-f7c17f069bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb233168-963b-4eb9-8fe5-4e5d8723cc0d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b118b0-a31f-467f-aab1-3df8df742f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df02ac98-3e7b-41ac-b46c-f5ab093635d1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "72b05551-01ec-4602-8daa-9599aced62b1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "55b1fa60-c31e-4676-a83e-5c6d54d55604",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e895577b-7388-4681-b6d8-a24f9d1616c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95611266-b50b-4961-a7df-ed216e5167ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4adc4804-69c3-4d46-97de-153be8289fe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f3e2e0f-3617-4107-8c8e-0d2639caa2ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b428b3b8-de32-4eab-b39d-d11b1e62afcf",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f05bbc-98cc-4fd5-af1e-4ba606e63e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "628f19df-1a54-4966-b1ba-a0961459b516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4c76ac-1a5c-4d5c-944b-14940111c475",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "9086bcf1-5adc-45c7-bc39-8c3c0b47344c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "dc07a06c-e074-428e-b8b2-c00aacd06fae",
            "name": "Positive Testing",
            "item": [
              {
                "id": "88a29030-f5fc-4e39-a8a9-2dcd8968bc0d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "50a95ac0-6e2e-4d87-8bd8-68c18a394176",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2b8610e7-b040-404a-99d5-744640695c21"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "795190db-b864-4451-be6e-0ea021e8d57a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "861fe4eb-fbbf-448a-87f1-25461043730c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34d8bf54-37e2-43ae-bd4c-16fc376116af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "66430e1e-212f-443a-857e-47fbfaa2db30"
            }
          }
        ]
      },
      {
        "id": "d347a9f1-be45-43f8-9c07-24aa723e9052",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d007c1f9-d226-4023-a674-d7bbe6d940f1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3af05a5f-ac5f-4f68-b1d1-8ff968886011",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b8779e7d-0353-44ac-af7c-c5823d19b6f0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab824bff-64bc-48cf-b6de-a5768a7925a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae38d398-a668-4224-842f-c0aafe18daef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d766340-4a89-45fd-a962-a48439af981e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3af359c4-cba5-413c-a28f-a913af8c7109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f2da5d-3c1a-429f-aa46-93a6e107c485",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd67954c-3999-48df-9cad-a6c857f778c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03ca1c07-0e86-44cc-8a6b-885eada9fe7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c6e4a2-b6ae-42f0-96a4-ac07fd586452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54dc60ce-210b-4bef-a16c-5d4498056560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "517e448c-c647-485c-b60b-de054eb80a84",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "880822ba-6aaa-41cc-8d9a-91341ecfeaab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ffac99-890a-4c5d-9634-21a5e007376a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b024a9e4-2c5d-490f-8a32-745dac62a8a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "159ef2f4-28ba-41a5-b3cd-0bae5b60262f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7caaf195-8311-451a-ab46-3649a2e35978",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d1d419-1770-49c1-a8a4-9c5dae01bb47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40be4163-e931-4aed-84c1-45f3779954b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f4a3911-995b-4214-a7f5-cde47b7cc0a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7f95ef1-f4b7-40f8-9148-d59f2aa3b3a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bcd4981-4e88-4b52-9070-74e37517a009",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f705516b-e2c9-4bc6-b7ec-b5bdd4c4b8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cebcb02a-4da9-4ac6-8629-921a2cf3730f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5008c28-a029-4912-ac63-cb97804094b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8cda464-8fc2-493c-a821-2e8822bede8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f13c9cc-5ac3-4a4e-b2b3-b0b69ec9ab05",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95615488-145d-4858-8dd0-bcf1f9d109cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89bcc484-0d56-4c0c-bc4c-e14b8794f03f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c31b9969-2cb4-4b98-938c-12ccb8bbe50e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7aebfe5c-1bff-46e8-a6ca-bafad71e3b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e3b040a-7113-4142-8c33-a695d23a98da",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be9627c4-1553-4478-a7f0-f4682805e475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcb7c9cd-35fa-46a6-b866-8b452266e758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42debf86-ea5e-49ec-ad2c-e195667ee5d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75b74d44-276d-4273-8ee9-01a3893f17e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c073241d-3bae-45a0-a03e-e2f9fe554f52",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6754d30-ed18-4650-8ef1-00fedb399f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d464e19d-0470-4e21-8c15-7bd8d1b043ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ba6a12-1224-476b-81f6-81f5e9c7f2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6698595d-4ca7-40f0-9745-9623c37cea6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae0fab9-6972-4f8f-b66b-7711c7712250",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f6c5bc6-ee71-4425-a136-364d7e533a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c28d9b29-5789-48ce-8b16-82b4ff87b5f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08272ee-4ad4-49a2-b550-883913fbb55d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e3a3670-7bf2-4c48-ba83-6caf76a697e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7df26d-39cc-4594-a551-970823e3e8ed",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c755c2-a87c-4bf3-9a30-97d9039f57c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01803d53-9be9-4ba3-ba5d-8ef51b54c139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a941e68e-0fb0-48f0-9459-1e9f9d31f736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7000e2e-58e6-46a8-a594-9a9e531c4701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d57c433-4c54-4f0d-9462-227b52196d2a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a72cd7-9780-496f-86b6-9f369a4c4273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "745b00a1-c435-4e4e-9f91-47f914ed6842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c64ba6-b924-416f-8992-ee5ed55a1377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc06892a-2317-47d1-9172-4e59514f55c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e64be6e-4655-48c2-8317-42addddbb501",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e34605d-d433-45bb-9e9f-f8f109ecd212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c66087b3-8472-4ed0-aa78-96cae468e2d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39de0108-45c8-4fec-911a-32cd38236f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91b5ab4e-25f7-4d8a-a266-48b473c3d40a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f73cc821-211f-4f7b-bbcc-2e9f4b871d55",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5671778-4dfd-4c5c-bb99-c64d31775015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "279d900a-cfb5-42b7-b9fa-14d1f902402b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ee4a82-591d-47b2-aad4-5835507f9856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b56b3efd-5428-40de-9cdd-35bc19ad5981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e281f11f-467c-4aef-a217-9b1b5b720c4b",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b96e92-a401-4390-a93a-47c48adbb620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58a00776-80dd-40b5-81cd-e4f4d58f69ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d63ca2-f72a-4ec4-a16e-0dd51e5c8ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "d56e0bd9-d307-4e28-a1af-acce561bbc82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d932dc-965a-45ef-8132-65a9c7bab854",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c8a780-7e47-4c76-b8b1-e7e3abebb667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f355e74-cff4-40b1-80fd-5f7ca08ebdec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb7bf89e-58a1-4b30-8246-3ec1a88e98fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff6d8826-65b2-4733-a676-b033acc4b0dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83ce87b-d11c-4828-9297-df2de0a0d736",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e047e11b-c157-498d-be6b-88b0346459d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f77c493-c308-4b08-bbc5-2d86771aa10d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ea3573-283b-4309-8d3f-d2bd2623767e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ff6e540-f005-4cde-9e91-83a063afa11b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb87ab0-8fb9-4ef9-98ff-b7ba5742b57b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f5230b-969f-4ef2-9ec5-d0df5f5a5ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44999a49-b506-43b2-86a4-7b3bd8643573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0e79a2d-682d-4ba2-973d-b7c58aafb85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d170997f-f825-4446-b166-513d0bf71e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae7bab7-8ecb-43fb-8609-1fb3ad6cbe42",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18be4fd5-0de5-42bc-9fa7-5430ef6dfd2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93a797bc-b45e-4cfa-9949-d85f742c3cb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b5308f-a3d1-41ea-b799-8ffa4456273f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9268b945-481d-4079-8455-86e87d79d5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "492ff678-fee8-48bc-abeb-e3aa3eb96a54",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8b942f-ec97-4c9a-bab0-85f7bce73894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a592be6d-7b6f-475c-b998-d00de078c100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88fbb988-7eb5-42a9-bff7-550a5534de4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c6ad16b-ad0e-4a74-aee8-aabc90fac75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13042ba9-cf7b-442f-a7f5-ba82051f51b0",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2f2e8c-61b9-492e-8603-61c214232bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92e8b07f-bed1-442d-95fc-5f9b54014ca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f051613-06af-4aca-bc17-48493c072e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2679b77d-c092-4132-a909-2bb93c735af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143a6dd6-9ee0-4a06-98b6-d395b8418f09",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1647d7-f3b8-4e09-83a5-6c4f720af148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b181972-205c-4439-8e91-3d01e9ba20cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e395084-2352-4c3a-ae92-481861ce6708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "beb96624-9b77-4e11-bf57-b283d2fc5735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aacc1a95-b4b0-4de3-b55e-2b3ee34763cc",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6465e964-0fd1-4de6-8ac6-21554ca8288c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e278e7ba-4bd5-406b-9c7b-368fd78a7e87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61f42e3-8a0f-4145-9a60-2fad141ffbef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9efb47a0-2150-4c7f-bda0-017890b2852e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb21ed8-a6e7-4ee9-8257-4223b8b5cce7",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edea7034-cd29-49da-9360-a47db2ec69a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0943608d-9750-4add-816e-7b5c0111628c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbdedc95-ef67-44c1-8231-8f7af2c3a90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "429f2809-b24a-42ce-9ebd-7dc2279344ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f84c6d7-c657-4d6d-b603-063f6b4fa55d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0295485e-bdb4-4c3d-a3e2-741aadff0541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a672780-b77d-4894-a40e-d15db4ab2efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c1faa8-22a1-4d75-9bd6-3e2135146082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "044469bb-40ac-4239-8a16-1c380beb6548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621b5a52-3f83-4a3f-8e5c-b79427951e7d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "951b542b-9337-4c36-a8a4-636ec4bdb21b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72be2f50-8735-45cd-8ff0-b8ab6c986c23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45c9833d-fb11-41d8-a8b8-d783cec9994d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9d6d8e1f-dedd-4065-b176-022a1ba21ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa1dfa9-2174-44d1-9e5e-5e95a0430134",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a3a8ba-bb77-4e7d-8c38-b44785041728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79fc0d8f-5ee8-4b00-9125-89e14ea8e6d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c761d7-7e33-4e59-8937-cb9095478189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4466ac7c-66fd-4931-baee-e61e40e53025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80896de6-c367-4663-8ca4-8298427a07f4",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ebdd22-9779-4202-b1be-4904371882fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77c6afea-16ea-493c-97ca-acb3a12062ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07434364-baeb-4d77-ab46-bd3f50d279f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "36a72729-0215-4886-b0fa-6bb5612501d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a374697-05a9-457b-82aa-44513deacb4e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0293444b-057d-43aa-b7e8-78862f348f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55798873-3c91-489e-ad90-11046eec4512"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5781ba9-0143-45b8-aead-7fb18ce52089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "de6edfd9-57c1-43af-8931-3ea3d3cb956a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a926afb-88fd-40a0-a5f2-a217a9e6108c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fea7719-0e5d-4b84-b06d-283f9794ef04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a963c73c-1bdc-49b3-89ee-ed4b783fb12c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f786fd21-1ccc-4a11-9b70-c6b08fb29101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "60335935-57bf-4efd-93bf-2424d03e266f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a856654b-4e0e-4897-bf04-8fc3000f678f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3c7cb1-1425-4504-b911-f1be292106bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08de278c-b122-4d3a-bf39-6b25d889eeb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1635fe4d-14e0-4f5d-bcc0-9d757155127e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bafa0e6-d36e-404c-86bc-7f1a076db0fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7622608f-c2f4-4a04-a8e1-feb616a776c6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2541af8-f1eb-4644-9ef2-ed7caf72c5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd508246-78b2-46f7-9923-945a2e9b81f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f42d775e-1db4-452c-8100-6f5e0293ebff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a289ab8f-eb91-42cc-9669-f8b7d8e7023f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb63ef8-fc87-4300-b5b5-70bc37716efa",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c54e8bf5-0f03-4576-93e3-6d3bd3c8f72e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9388dec-f98f-4e06-9f43-e3e81e063f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0607fea-9f84-4e95-acad-a6f95ad36f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b1de768-8851-466d-886f-38c556d0bd98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e4eede-c5de-4522-8578-03b4fa1bf888",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab29163-b7d8-40c6-b134-8129a1302470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f6c8b1a-fc07-44a2-b46c-f4814e1900fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19f5c3a-947d-4c26-956a-4ca02c03612c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "281dfdc5-658c-452d-bde2-f945037fbc78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91683afe-c335-4041-bdcf-e47da537d6ae",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4220d5a-ff85-4c78-9b06-fe78ceda9c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6904549b-2f0b-4c1a-b377-589ac7909ae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a712165-cbf4-43e6-a25d-702028d988f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6b2d8f9-f781-4f80-84d2-fec085e18c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d48ac7ee-d468-4baa-8921-fb1e1e46e412",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b1fdc9-bcf4-4f7f-a525-8a3c1b49ac79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbf77dc8-5eeb-4aba-ae49-e7552ab3e062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7094442d-b3c4-475e-87f1-8d0ec111b08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7c48b82-9c10-4508-aeae-62b2a5a19108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6c5e74-07ec-49b2-a051-dd4aa6b2e37c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c63a2a3-feaf-4fe2-9a44-16e38a90a139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "516cd323-2a23-4bb3-9d16-e9248a4e62a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d1373c-7813-42d7-8ce5-cfb29a6003f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fca56c1-7a27-4ada-a686-465d3fe60b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c20d4025-ea12-472a-ab63-f44ef5e09aab",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0755948d-2ade-454a-92d3-dc2ff5097d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3579e84d-65a1-483d-9f06-26e75f2c40de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "175e5fd5-0895-4f86-871a-baac64f0ee65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f42a697e-92cd-4642-8f78-be7965ae9cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da392dd3-26b3-4e53-a7de-ed4a435fd18f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b33b72-e804-4208-8b02-1a4ececd193d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2289b1fd-7ce9-483f-8015-4dc3b7180105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40933ea-c275-4a8b-9c7c-a10834f9c25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fe6e6174-60d9-492f-ba7f-d8c5dfdc8557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "604041de-fa2e-4dac-ab04-a746494628f5",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4827b48a-2df8-49f5-9432-c33d83eca8cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39c5b855-5e79-4820-b514-a16b78063e76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5aabc1b-9206-4c41-b2ae-0075ea0e1863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbf3685c-e70f-4ee0-8f73-663956035944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534619c4-a0b3-4d08-89fc-7ca20928791c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "030b0c62-3f8e-4378-a440-d1f06e81dda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24eb6138-7b55-45f1-9650-b6233f8e5edf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266c56b1-a9d6-4504-b794-463221c2e438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ad216c9-c59c-47e7-96a8-6017efab25ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5f2ef0-f0f8-48ec-8d29-aa967e32af53",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e73c394-e662-45ae-b84e-0c7ff575243a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d33c5082-24e6-4ccb-b295-79319419e1f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95015d8-9ee9-4fa6-9cda-c5a8bd46e22c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e93fece2-cde3-4c7f-8058-8ecda89a7256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f4001f7-8f32-42c3-ac01-f8a25447bdca",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "011fe676-c5b3-41e1-a534-bc390436ac32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a7582f6-2f89-4dcd-9ef8-e30cc4ffcdb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528f5469-eb65-44d4-b1db-4c4d48b6a24f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "49a155af-d3ed-4f0f-8e61-e289dfcea694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b90d1f-2b96-4946-9f50-53bf1fd3759f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec279d4e-a762-4642-b7f6-174286d03fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69261ecb-413a-4e7d-b9fc-2fe676cf10bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14e22a8-f805-4aca-b632-28fb70a074ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "16396899-9e43-4c0f-ad63-1fddd0191a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0faa006-a9ab-4e60-8e25-509971756e38",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6245044-7a67-4cfb-b604-1c761d6aec69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "757121cd-bd61-40ea-91b5-a42611f69595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75cbdf5a-14ed-4b10-838b-ec726e083b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e9689b-c2f4-49f2-902f-eaf223f5a708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ef1bc7-fcbd-4b9a-b19a-e40ad4a2f17e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea06846-dd41-4aca-b4a0-c726d56ead3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6853ab72-42fd-45c8-af9c-e9a05427f5f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de8d6f0-f1c1-4320-8fdd-dfb8eb75af2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6d934a8-6031-4394-bf0b-a5ab8ab10670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10f2b8d-dcb8-40b5-a5fa-2baf7d95ef63",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d3c34e-1a3c-48c2-b23a-d8891715cf54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8842020b-eeeb-4101-acd2-6241f7ce5936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ec444e-34cb-4d8d-a586-779eefe0c1e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "93dc7bc8-478c-4526-8d14-8dd546a8346d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ce152f-f814-4f41-8539-2cc13e5e2dac",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb3ca9a-ef1f-4879-87c6-fe0db85dacb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8775eca-269f-4be0-a0bd-93028bb02eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e0fc48-6a1d-4c5f-83bd-2683313dec2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "915e44e7-6bad-4c5c-83fb-dc091d87df17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f67fe451-8d58-4675-b4da-a8611760f7dc",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb8e086-092d-4337-813f-17cb6c1d8026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16039c8d-a15b-49bd-a72b-98c3443727b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "245498dd-2cb1-4d22-bda8-f222b3756749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "10641ca6-a95c-4554-b0b4-371fa4226b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68386cfa-1853-474a-84f4-457d63d2c61f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aacb379e-27e4-4088-8389-aaaccf6bc1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea21f9d3-2df3-47a6-aa65-c2f4050e61a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c1b7822-95cb-4ae3-a348-bec0049cd824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6cd0e27-3214-4b4a-93b7-e9e1432c437f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263bf9a0-ac36-410a-ab94-b35c53257dc9",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4808abc-a3c1-418b-ba6b-2a0c4984e9f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8de8d23d-892b-421b-95ac-ce2f18b742cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab38ada-df91-4c37-a8b8-5c10a30725ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb3d4f36-ebdc-47e1-9e02-b9029be637fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2e0af6-bab2-4f2b-abcf-094ba30c3ea5",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e18855-1a91-46ec-a7aa-ce055bd87a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e48462f1-2d90-42ab-a2c5-9f7835799024"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2405a39-5b99-4d50-84bf-15404ea6bfdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "914e5abf-5b76-4b51-ac10-43749966ccfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a61caecf-1bc5-4a54-bbb2-aa3cf71cf8d5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fed69cb-a0bb-4708-a122-799f008f2cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf52aa2c-8d46-4f07-9f01-bd558c6a7638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f34f22-1e2a-458e-82f3-c01a00c3e5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c1bfe2a4-5970-4753-abb2-7d40532b17f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e1f4f18-b037-4d99-9b7d-54dc8ca6cbac",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d991fbea-7319-4eed-9a24-4d9d15b6613b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85fb2f58-1710-451f-b98c-f10a99a774e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25bc5f6a-98f5-4bdd-b815-43a22a6054d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "146ae20b-e522-451a-92b1-c9b1309a0913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "524ad63a-5ad9-4a3d-89b2-1b990eb2e23c",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc1ddd2-2531-4fd7-a609-9c5ac7981d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7cdfc60-2f60-4cbd-93db-9c4ea31c693f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81ae618-09ec-47a0-bd18-74f69200cd11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "736632dc-a929-4edf-9da8-b99a1dd5a224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be69473-38a3-4c61-a258-e499f4ac457f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a40c0f-a7ef-4614-b57f-6da7004956e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "996c2092-7d04-45d9-8bf3-38126df61a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5801d6ca-cfde-4777-bcfe-2dbd8fdef3c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f20c69a0-b2cd-42cd-9834-95ea0b248f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a54d628b-85c5-4b10-8e42-5dcbeb7eea5a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "670c58f6-583e-4591-b57f-e1421a7feecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87a1d85b-e8cc-4c24-9f2b-b0adecc769c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b91cc399-a846-4c94-ba02-958c67c58b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "27f6f930-1a97-4077-96f0-51e6c5869794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e74b08-9e4d-41bc-abef-e02bd562f530",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23e7f26-dc39-49c7-a383-66e3806964c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88dbee74-7174-4fdc-9eea-d4f49c0e3088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "174b6e82-7251-4f18-a869-f63baf78ec62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3eef960f-5f68-4640-86af-f9f7ac5c8e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a84e9aff-5bb8-4788-a85d-383c305036ac",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11bc97cb-bfba-44a4-803c-ff3b4cbb4d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3cc005d-9847-42b5-8d0d-d79c20234dcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74abe4ef-0b85-41a8-b40c-7f52c894626f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "69078aba-6a4c-4117-9347-86e322508580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c9dac3-54d7-4ef6-b4f5-e68f7a74ba57",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65063a0-9813-4ef0-bbe1-1da322611237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6671c992-f8fd-489b-8edc-6908c97358d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3de734-0797-413c-89e6-f2a524465871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd80a07a-f8f3-4298-8999-4472ccff19a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce3ac6a6-dc4d-439c-8350-332261371458",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b85773d0-a3d2-48db-8d67-80aff63d80b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d9a7f9d-377b-44eb-8a70-8b17bf6759bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743e7c1d-a1c4-4fa7-b387-0a38ca85fac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "caece0ba-94c2-44bb-b075-cd458305c47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1db2aad-6847-48e4-83fb-2c1e11e20041",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "871c1f0b-8640-4d0b-a92b-1ceb65f9fab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98bc1fa4-06b7-40dc-838d-b0a6e0a37778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed0035a-8f51-47d0-b18c-917ca209f6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "146939d0-0d29-4ffc-8e1b-b47b22bfa6f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eeed6ef-5991-46c7-abc6-0a80a5882feb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf32605-4552-445a-8c1c-5c01a0b7b5a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e9d7a36-2ac1-4635-b8de-c2e7ff994e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6cf3d3f-406d-457a-9ef7-9a3f01937887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5c3b77c-fefa-427a-a7b4-aa612dbc52c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c228f267-f18d-444a-8465-6007639849b6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7db6e9f-16e0-4815-8d0e-2fa5c845c146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1da0a03-2384-46c7-9f24-81d6b8f5c84f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25da7f59-8ad3-44aa-9774-cedcf6a3b05a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9874cb3c-f29d-4d45-bc4f-f11d662ed877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79765d12-cb5b-4e15-a400-cddf9b436b7f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5146a93-2d85-4164-bea1-a37b89d3dfaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3206b79-f916-4754-b504-fd2918f6fcfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c25e2e-0754-408c-968d-dba91dc81e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fdad491-d3b2-400c-a541-7afe5e2264d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c6c0ee-cb31-4065-b223-82b8369b1f2e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca79fcbc-fdc7-4174-a587-cb0606a5516f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "228ec07c-ed03-478b-a2d5-a63acee8cb27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33738bc-9a2e-4a59-8422-a0699d030690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "dff8efe5-69f3-4e83-b846-ae6ffd1b36e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361f2b8f-68c2-4d12-8b26-2bdbfa8ba9af",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c72073c1-5bda-4071-8f9e-c0cd53c4bc2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bbeb677-0ead-4742-9706-f8b13fec8c5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71ef058-2232-4a63-9d4b-bb423112a011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd85a4b1-d0c7-4933-8620-c1bd9c7e391c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98b39e2-ba2e-4a6f-8f10-de9fa598de96",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21acce9b-4581-4dc5-8cf7-ccae67abcc1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f31eff8e-e8f0-46cf-852a-c8da6acb01f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b17443f3-bf36-4d20-a572-0dfcc2b600fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a90b4dbf-9f7f-4de8-8cd1-566a18e62023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6171b222-7ccb-4732-8873-de111ce77346",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f05d0a6-9020-408b-be44-a02ebd4a9951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "202e895b-1f5b-4bce-ab48-8714d120d76a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02dfd2d6-3fe0-4504-8313-0b97291b61ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "02084d88-7396-40a9-a483-347f7b30aaee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f788fce-50a2-40c3-bc06-25f5b632779f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55092e3-ca62-4e49-94ed-0f433e0a10e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d458ce31-7ff0-4aba-920b-96de28996f61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d061bcc8-00e1-42cb-8783-d2c4a285b2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9996674c-cc88-448c-a3ee-dad17a629e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f20649b0-a7e3-4f0a-ba37-f2aade0962e0",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba31c4a-3a7d-491c-b934-33ab653c1d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aae21f34-011c-480b-80fc-19c7804d2407"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae04ef69-31cb-4677-9cd5-0aa14af7ea3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "22641000-7e61-4ee4-bcfb-b14cadc2ff46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194396ef-26f6-42f4-aeaf-1cd8d0803986",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "682c8415-a35e-4cd1-828d-9f329be39b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b538f4ba-c35f-47d6-98a9-f7c0becf070d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2031cfc-71f3-4e8e-90c2-684efd084fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d568e5f-2203-4d25-939b-6a8a384569e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "099c46d1-f5b3-466d-b94a-c5fe21b848eb",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9e01a3-8ba3-44bd-9dee-f39d3e3a4d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3346eb46-0e40-42d6-aa26-8a2da5cc05f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79608540-6e1f-44d6-a7aa-f73a523403e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea50c7f3-c15c-4a23-b8f3-446521361bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddfd0f57-7f15-48dd-bf34-45743cda0b17",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b611a81-01ca-4e9f-997d-f74d61880f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63406701-c5c0-4523-84ee-8d2936393169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbf97c5-a8ee-4824-9659-78d1d70168d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9424aeac-03e5-46fa-b30a-9aee5fb06006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf009ed4-bb92-4337-8850-ad2caa82ac6f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ac0e8d-ef46-4674-8f3a-5bdd8ee3fc99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fddda801-9600-48a2-b9c2-d2169bc6099d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32baa0c0-92df-40b0-a2f1-7434eb488d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "575c1af4-08bc-43ae-b241-c3bb1e0e1bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42fadbc8-e709-427b-b697-1a0a4eb6924f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d5a6b4f-2f29-4bb3-aea0-16c813bce0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7df28ac-24a3-4451-925e-237ecad77a49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93139dc-9ea8-4357-b6ca-6f155f936d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "323f1c7b-63d2-4969-86d5-7b8f4ba5d469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4534c8d1-4904-4cf3-b2b4-35c15013dad1",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "485641ca-ebd6-4217-9684-aa598d31b641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1430bd4-5ade-49ae-9cb0-e7ae40cff976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dcf3a96-0812-4fad-b4d1-e2a6242b9c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ab33195a-7277-4301-97f7-af4791478fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec7787b-aff8-4508-889c-91966fe06a09",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df277b18-6adf-4710-8c38-8a2302b4c71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7ebc0ab-00c6-499b-ac8e-7915f28e0d3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746f44a3-97f0-4df4-89b9-c534757bd2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "280c7952-87e4-47fd-8651-eb21106d5993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32f2f66-1c14-491c-bd34-ed6e9d5707d6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fdbf3e5-03b1-49ea-b9be-6e7fc2408351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d5c9345-6b56-4b18-8e6a-d5798f9d742c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b9a14d-0599-40f3-baca-cc5ca2da28fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "099a2246-1574-4732-a114-60bfe0f2664e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e97537-653d-4908-9c17-218359438c57",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d5eee55-97c2-4fcd-8cb8-d95d81d566e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "921b6dc3-f8ac-41c3-a465-20bb361870d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808c9933-febd-43a9-982f-4e329e0c1901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a1ff309-2eeb-453e-9321-601fbdad1863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "289d6006-de1d-4ef1-aff4-1fa5b3f8063d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "599617ec-d3f9-456f-a820-7661eac149da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed88f617-cc87-4791-88fc-75fdc72f0517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b548b6ad-59d8-4c4f-afcd-a879dd57e65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d1dca7f-53ff-4125-a5c8-acf3f9f73feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e4e8b9-cae3-44b0-b111-bd135ef7e9d4",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f17dcd7-c58e-492f-ac27-bca61b96deb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b59e5e4d-7e93-4b7e-9a68-86c01f88e18d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f9f98e-0588-4bc4-89ff-3b3f73d4bf9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fba5cef-e917-4d90-8e09-f0d51a2b53d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee39b596-d4ff-42ce-bc74-bdb7cb819932",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b14806c-79e4-4d12-a1a0-79047333f7c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dec1ac6-ef87-486f-b7e9-61dccf66f52f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51f2abe4-ef9d-4a40-a9b9-bbc43257d6ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "667eed48-ace1-44d5-9e16-50ad6293f2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc44216-4e27-4bdd-9bd4-799354458f45",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4178d06a-00b0-45e1-a55b-f02f82a5abd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7d8a410-517a-46b1-9119-d4435a21111e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb22b26-e8bb-426d-ac2a-b4f622800951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e985771-1edc-44a1-8069-464da12e90ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46daef4f-630c-4035-8dcf-df22be2e8cb4",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce376522-c4ef-48de-b2f0-2b0d610bc94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b687ff2-d70b-43ca-a1c9-1dd96db362a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e8954a-5de2-48bd-9cbb-76fc930037cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "45a40d17-9e76-44a9-879d-479ffe4a67cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d3eb030-44ed-4f90-9be1-7d3483d2d8e6",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0e4efa-86ab-4189-b5a9-b8e77efb2f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a490676-5130-4195-8dc6-74ab2a82bbfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f2cc56-388a-4a46-9580-a231049faa5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5dd32a0-4e12-43d4-8c1f-c730d73128ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "560d1e3c-9a58-4b8a-b02d-4524eec7e9a0",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a4ce366-3fe9-4e01-85d4-9d1e9e41825b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec25c4a8-d9ff-44b2-ab4c-584c7009ca0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b9ac1e-5506-47b3-b901-8ef6f7af8a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "46a4a152-7507-49e0-8a99-7772df9ffa7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad2c330-2c87-4776-b6ab-2c4d1adc6b32",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b07f764-f65e-4786-b9f4-463ee26c9b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cf18ce6-fc50-41b8-a32e-322e39fc1338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7865c4-7545-4e3c-b646-dfc720ea13a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "55f43f99-176d-4a06-bafb-26341b1f0eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d914aec9-1a73-4e9c-a6bc-d04cd0e2b477",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "214a2ee7-0e92-4910-8082-aee4dee50cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3e98650-a3ec-4d72-bfff-e99a4a3a45ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4fcba52-5d5a-4ead-b8f4-c7b6fcd901f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "672a4df1-9008-42a0-99c5-cdfeafabb63a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fb2e45-65e3-431c-b92d-ecb2aca33bea",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea26a756-0aad-4217-b4c9-f70214d68bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d8e58c6-9b2a-40e8-aa62-824eb60dd8da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7300ee1b-031b-4609-a6ba-47dd7c413879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "240bf2a3-bf1a-47d9-8dcc-ea99772e30de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f8089b-f3bf-4f9b-b848-1214daf908c5",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ad6c2e-f4bf-4b65-98c8-bbb5403dda4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5105b7a-be4b-4cc8-99d5-72661c1a14ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "543d517b-ad4f-49ef-9dc9-a73dcc648b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2edabd50-52dc-45a5-842c-ed116271d306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8bcb26-24de-43db-bf26-bcbc648531db",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c8a294-73ff-4845-a9fc-844a31c0014a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c04a0233-a47e-416e-9b35-6633b76510e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e42db2a9-58e2-4f17-a1ed-cfdac4c3e418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0608af15-b88e-428a-b953-238bf8bd3829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46273cf7-9dde-4796-ab01-b0eb49ae42bd",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1858b9db-6ddd-4412-9d7f-97ea98474709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73d26c9c-8ca4-4fa8-8746-21b24125df40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c6920e-58b7-4429-931c-0a6b3bfbf62b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2e8cbf0-2564-4487-a9b0-6a8fbfc99818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efcf7538-ba96-48d5-a97e-27b542b303db",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ffa14e-ed7e-49fd-837c-822602ab235c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cd0cc83-6dbe-4e22-8961-fc8dc5f38d86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a934ad9a-9e11-4bb9-bde6-940e1f472552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "775dd2b3-8e4f-4728-9eec-5888c3501564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c32193e8-c1df-4571-9146-5e5ffdca6e9a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "828a097e-f38e-45f9-8dd7-9de0232d074f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f68c8c49-011a-423a-a3f0-0306c9a2fe91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7471aba-13cb-4e51-a072-05051745a929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd2acf1e-f891-4efa-bab8-a7f767762e2d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8d706549-3687-497a-aed7-e9ef53fa9fd2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6fc5ec7a-3dbb-462c-bbe5-b1d062a0acb0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "285606a1-bd8e-4ddd-a77e-ad65db2de7e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "804249e4-3751-4092-9e7a-6b0c41727bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da71436-bc5f-43d6-914b-5741f719d97d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "af2c0505-8371-4773-9f76-286809e3701a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f91c5a-57df-4f53-9836-6ebb123bd0cf",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7287c2f-bf16-442a-9cff-4359aad56307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1327942b-9a9c-461d-bf50-3716edf74bc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe1afb2-f27d-44a3-8393-e1d588db8be5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "4637ee90-3979-4664-b574-37a9e8bdd55d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "253b08cd-6ae0-4670-bd09-6d3c992901eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25ca4c7e-66be-460b-bc42-db7cdf2fc928"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8fb237e-8f64-440e-9edc-6d699a6980f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c9d831e-6fd7-4c78-b27a-88e14bc1f7c7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "59dfaa2b-3cf3-42fa-80c0-ddb550859925",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ccc2e555-436d-48db-ab16-f852687fef2c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2ac7d2c-a529-494f-bbd8-114adb77ea18",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5a9568a1-9c9e-4373-9c0a-a114581d9a68"
                }
              }
            ]
          },
          {
            "id": "9fb3dfda-bcb9-4f29-865c-c4083f839e28",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7025fb9b-30eb-458c-b01b-7c9c9742cb78",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6df6fd4-6f81-4844-9521-021f7159546b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b07d1002-f089-45fd-98d2-41cf501090a1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "343d10e3-a3d1-4f20-ac15-eb540864c713",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5c0397d0-dbb0-4d1f-9521-9440a75f5eb7"
                    }
                  }
                ]
              },
              {
                "id": "d1a5cb99-2bed-4d19-a9ec-fecab10eae0c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "43a3a2d2-0aeb-4195-b87c-0b3fd25bcf3a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "72ade64a-5d4f-4beb-9573-a478e25e9323"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0495c73a-4e0e-4f1a-8a43-421437c2e923",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2c98eb9d-7f1c-4f1c-b1cd-c5202760e092"
                    }
                  }
                ]
              },
              {
                "id": "95b6d63c-bf9a-4b53-9cea-ed2763ed1f6c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b487e84a-2185-414b-b8f9-40b5af483435",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a5cb18b7-b0f0-48dd-bbcc-0574cf0bc5c5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27fb1da0-3081-4abf-a491-2f65421110ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d59ea4fb-1da0-4f19-b989-1f6bded98200"
                    }
                  }
                ]
              },
              {
                "id": "c76d65fd-c178-43c6-86f2-3ed43988e4ee",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ec05938-205c-457a-bda8-98e2e58db752",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e51ba2aa-3e6a-40e8-b394-bd216ee4bf14"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6c2b2f6-4213-417a-9fa6-b628a7abeda7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "83ce2a40-a163-4644-a7ca-99e3b1b25264"
                    }
                  }
                ]
              },
              {
                "id": "78e15607-5e52-49d8-b28d-ee9cb3a4e928",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cfdffb5-ec60-432b-a4aa-55c3bbb1d800",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e9730059-78c6-4d12-a8a1-2dd17203716a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5848f885-6f13-4e9a-8937-0fb0fbe940d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3a986e5e-939b-4813-a104-cd2a1a8e1f3f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "752135e6-d33e-41e5-a530-5c1d292473c5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c04811cb-453d-4046-8fd4-0ecb140bc227"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3b5f7834-b104-4685-bc3d-203ea094138a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4c09e500-a3db-4276-b5bc-d25145fb261c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c43bef7a-effb-4064-a564-6186d5d6a7cd",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3df48f04-0c13-4a18-a403-4b8ae7150464"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "be1afdcd-b50f-48c0-a320-a58531cf0e15",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "32cc6c16-0726-4bfe-acd3-9bddfd99b9d7"
            }
          }
        ]
      },
      {
        "id": "8a37b8d6-bccc-4da0-8346-d5ad94c969db",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "bf1e3673-d07a-4a59-bf9f-d36b76f7d3be",
            "name": "Negative Testing",
            "item": [
              {
                "id": "74df7d24-5b79-41e5-8532-55a2e953ef5c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c9a265cb-50b1-4732-88fb-34fe19122ca3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f093e87-1ba6-4f8b-a50d-ff90008f97c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a223f616-5df5-4d9a-912c-bed54728531d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f4bd6f-9b96-4602-8e76-a838847ac507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa1b0e7-d136-43f0-965a-bda0d16fcd2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e67053e-088b-4dfe-836a-3347c8a30210",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a4bf4df-6593-48b6-b4f7-db138fd82bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43a68a1a-c92b-423e-a5bc-e772879f38e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00fe1e77-0d1e-4ba4-a495-ac238ace5c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cd661b4-4d1a-4351-b59c-8e8b363aa24a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f2ace5-3e4f-4d4d-a87c-360fa613cf73",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f73e0c04-928d-4c73-be4d-31eb95bcf804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bff0b3d-5365-4893-969e-d4a1addcaa2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae0a1d0-0557-4f30-9a67-9e48ed499a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf468980-bfe1-4abd-ba67-3cbe0a60c0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8614b0dc-35c8-4c51-9b85-2e0a30f0864b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "382045d3-d6a6-440c-8b33-d64604218ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9353451e-22d4-484e-a68f-99f76e864a4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb666277-e9ca-4b1f-b6be-67e32f29f785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "616818b3-aa12-4ec1-adda-295f33e358f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec83ca1f-e238-436b-9ad6-bceaf6255cc3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95d505a-47ed-4245-b16e-668964d53266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22952aff-40b0-4861-b612-173e4cbcb795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f53dacca-9157-4cfd-bfb8-f711e4b808a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b87653e4-a449-4321-9d5d-e77bd0dcbbc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d0af55-bcdb-4d32-83b6-a2ba51292892",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab96e5d4-d7cc-48fa-9bea-04616218e942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbf20b86-18ce-4267-be21-9f15884c6a7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de27d1ac-bcd5-47b3-86d0-f0598cf95f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "01893799-2c87-44d1-9b4b-dec5a1f7d32a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9307af85-179f-46f7-ab22-ed4fadad0bd7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "039f8f44-aecc-49e1-88e7-4940a124ccaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c9601e5-1206-4e75-b476-3a8a125af062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77028f75-1502-4d9e-ac81-47c398b18780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "584a9678-f719-4afa-af11-13d1f35eaabe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb4cb30-525f-4c16-aca3-bd2d519e02a1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f0ba32-5c9d-4caa-b6ff-720a00d965a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bc7b48f-eb26-4f5f-9edd-a785bb6ae123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1d6ce7-aa96-4ac4-b94b-6eb2aae962cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "979402fe-71e8-4dc4-ae02-a9d6481e6571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d08476-8923-457d-8800-474fb18ad1b7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae81b453-67e6-4b08-91a7-bf3fc812d35d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81ef802c-f8af-4fe7-b7ae-1268cf44d230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca271e8-e6b7-4d69-92f8-40ff8209e321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "83c87911-6c74-429c-813b-2aa9577045b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb49b6a4-6b7b-469f-806f-eb116411e28b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0397c5-65ba-4248-94c1-2277cbba70ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dff3096-462b-4bf8-bcc1-37cca8fdefb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c52f59-3ccd-48db-bf4b-3c6db383b59d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "373d767f-77b6-4d0f-967a-67c41c62f52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7403c2d4-6f05-4c72-9833-621513a7e915",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8ac14d-93d8-4795-a416-e5301271ddb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcb1921a-8cdb-44ea-9d3d-c845484386f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c53bf0b-d793-4275-99a1-fdaf83f78c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ab63873d-5e96-45e5-a281-b5488dd8cfce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac23069-e360-4227-b81a-669238941797",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b6e0e1-6528-47da-87b4-4ff330f7c97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a954b2e-6126-4d4c-816d-a37b331a5e0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d7b38ef-d1b1-4404-a104-d9578d04eeff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "da579a26-9d79-4742-9014-2c491b72116c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9deeca37-323d-4938-a7d0-a5ad1a2ca26f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24005353-794b-4ef9-961d-91a4b9a46f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58094134-abef-4b88-9d7a-e7f0f015ea7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff85320-bbbc-4521-baca-9693ff53a9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "572ca6f9-f65a-4048-a1e9-319ccf75b081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d55781f-7ae1-45f1-a897-9c3ecd60ee0a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2e258b-5583-44f7-adf5-004446cc5e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "954dd01c-04c6-474d-b4e2-f737f64ade30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7620ab5e-798e-4ecf-ac5e-6ec820c86494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ac2385c-81cc-469d-8780-9a6908d6e0d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7600e0a-de72-4570-aea3-7280b1b8e869",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f66b27-7725-46d3-9e0c-07a88ece3576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb96f93-7a30-4c76-bf95-ead07e9f0aeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7631744f-7c15-44aa-8ba3-f61a93067ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3e6ccfa-4b69-4d20-beac-80419367079a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b97ee6a3-ac98-4189-bc82-d9d36d9059c6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f6d1795-7459-40d5-8eef-327b2bd5c922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea672b37-de2d-4a83-96c5-045e15d46905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a1121f-18cf-4b1d-b625-2b92da377ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "96da0441-1cb1-47b7-b7ed-ed53f23e693c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa17256-60f9-47fe-b05f-9eb6d09b2a89",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0820189-d703-4603-ae92-751f816e0a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35caa418-0671-4418-a668-7d7d10fba1f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c35d77d-e081-487a-b462-1474eea833aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "646d2fe6-67c9-48dc-8d07-5197c021b7d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7ede40-e3cd-4f78-bc93-b8baed6807ae",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "569bc02e-57fe-4f8a-83bb-162969d39502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf1a3561-a779-443e-8f03-a7f7f48dfcbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1075f7d-c0d7-479c-94ee-ed60179322d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "82f683ea-4ddb-44c1-8a15-72163033721b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051ad867-cafc-4045-9380-921c3ad96048",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ac7d4d-c659-49c3-bcb2-31620c2c25a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cd177bf-a6e6-4483-8f36-1eb939be79aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a4ebf5-0554-4fed-8217-89166285546c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3549725a-c09e-41af-9a5c-7925c937a65f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7346cd2c-acef-4731-92de-369b56c5d211",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db71779-0843-4f0e-b680-0f31ace1a554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a741815b-ca38-46a1-a189-c2795907588d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "700a02fa-e6eb-418c-be49-00152c9859a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5ea900a-babf-4209-809a-7e63ed5ca0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a34e8e7b-85e1-4a20-9544-51b9fe31607d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3496e73-2d5e-468d-83ef-eb4a21465dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37d2b2cf-3fe9-4afc-8e49-5257daa4c942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf87d409-9bec-42c4-b021-0787fe5c40ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95878404-2fad-4a9d-807a-88646965f616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90da74f0-ac82-48c7-9ee6-a2c01fbb5454",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b94a24-cb26-46b8-804d-ad88bb076a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f7748db-77a3-4718-b23d-50044e5c5cf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5f616b-3146-4599-bff7-c1b5b23fb155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dac0105e-0d63-4f51-9024-04e500a2cbf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988d884b-945f-4b81-82cb-ca72dc482d75",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e54f2385-db3c-4531-a6ca-e5eedc2e33bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "016e2755-5e60-4ad9-b8c8-1f086a667e4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6a8392-e778-45cf-a8f4-31e17d2ea159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f63e7633-3f86-455e-b547-9eed80efd5e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2930a229-9e9c-4624-bbd1-44c16358ddf3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f48c82f8-9d3f-461a-99a7-e13b49f2f599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba46c273-9d8a-4d85-9f39-be4a24192d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4673ef22-adee-4d47-9eb8-05c412995e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1634baf6-ee3b-4141-819a-b38eb52a023c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "829d0707-37c6-4009-9c14-755f04d7747e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "660a5c5a-a321-4ef1-9c23-24d5a31ca5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "208aaf49-c6a3-46f0-9254-57856f96cc33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260844fe-f18c-44a6-b797-6a10a4a01223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b0ee853-e120-4c01-8c91-98bd8fb92eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b764650-1869-421c-9d55-b963b7a92475",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0b32d9-d4d0-491c-8e7f-4f33aebd1665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8884851-0eb5-404e-99ff-38baed09348d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd708a4b-fb0c-440b-8073-fa2d18c7cfb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32565c96-c098-4ba6-b36d-436d84e15507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37608743-5e77-4474-b307-5f7e4b9f9965",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32fe3fd-c356-48b2-b0a4-f6206424d414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eafefa85-47f9-430e-9893-56da9a69fff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9beb3963-0806-433e-97c8-a250471dcbe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57d3668d-4e09-4f37-95cb-08f14f456373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bebbd21-ab5d-4de2-843b-5ff6f525501e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecffdb28-3c0c-42a7-84a9-f591e6847503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d31501-d4c2-4918-916c-147ec5333558"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e28da532-7c4d-4478-972c-9204b569ca6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b154ee-21a1-4230-8887-37b93266a275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef382667-50e6-4292-9f63-587c95adb12a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba9d3b2-f1f9-4580-8a0c-dc31aaea760b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "419ee065-618b-4da5-9dee-2ca6f649060c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff562aa-0317-48bd-b84f-02d5d17e4b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b774c7d9-0bec-4472-a92f-fafa0fb88a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a3d542-3e93-4cd2-baf5-27d13887e034",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ab35ad-620c-4031-9bee-97cab109f8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a26afbd-a41a-4920-8e19-be85549955ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c73f1f2d-aa32-4e32-8b9b-3e2446b8d0fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c6034ea-9004-4417-898b-5549fdb26188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a14c96d-8d4c-4661-bd17-7e6ede4b00a6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "120f6c96-e560-4a24-8dcb-d3f53915b220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc303135-d292-4cc6-9972-4511cc9de6e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a047b2-9a93-484c-be3a-3971cd3f5721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d622d4db-1bf5-4516-be81-58c66e4bf5aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c645aa-e4db-4157-9797-7b9b10740167",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc7ed23-7fbd-4206-8ec3-a4907bd93399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f667dcc9-6fad-4ced-8ad7-33444b6c16fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7862c89c-1e70-47fd-9d5b-48e683a5d841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9540576-faff-4515-9c2a-3d6f6314f168"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2cdd2128-dfb6-4332-86bd-e1c645d4fb3e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cb754890-071a-4573-9b5c-ba3d19b879d0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "671b6aed-3122-4143-9340-44a5eb71d562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8732bdbf-ec76-4da1-a40a-8a552ecbca25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09909deb-6b5c-48b0-8942-2976c64f5ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91ef6153-2b66-4549-a89f-3b5f299c04f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3f8fdc2-c4cf-436d-8964-61748455f39d",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afc3a7a-9417-4964-9b03-1b33f250f4ae",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "9ae72703-00b0-4da2-b94d-8a9b66ad0699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcae474d-c571-4667-bf6d-ffffca6e17f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92623471-fc39-4fb1-aaa0-0fbd6420dd4a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b934daab-c43d-49f3-afa4-cf7c219cca1c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "768bcb62-585a-4fda-a77e-714e611e1a93"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7ab0545-5f08-4762-9ff6-f0f96b1cb9ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da136e7e-3cd4-42c4-9144-0344781f8721"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40571634-728b-4a3e-9eb7-982a90a9764b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "972c90aa-8fd7-4c04-89b3-2d17736bc085"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f7388f5-098e-4253-851e-d72864e556ad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "058fce43-53ef-459b-b950-5f165396d4ea"
            }
          }
        ]
      },
      {
        "id": "e6f6018d-09d0-4a94-b810-bc18a496dc38",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "24cbd552-53a6-4097-a8b1-6ef6ecd3bd4c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a4c14562-3154-4b0e-8bc5-162c1388f5c7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f67a775b-610f-4f7c-9ecf-aafdc4fdceca",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7729b5-caa1-4ef6-900f-286d7ec7f68f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b79268bb-d06f-4aea-a051-08f1327c8c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867da8ec-f8e2-4eaf-9de0-8f37d24196b7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85bb7098-d625-4ea1-982b-198686a3cb42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97f0fabd-05fb-49e9-a9ec-73f77b152a13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b58db052-dd2a-46af-80df-81f67905bb2a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8bd251-5fc4-491c-949a-225e6395fb13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1c61c2d-b045-4404-a7d4-94fb9afee52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a14686-dea6-4d89-8a12-a6df9721f4c8",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dde487a-08b8-466d-903f-d8981c4b22a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98872745-46b3-46fe-971f-b936a2203b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34fefc6-fc92-4f07-ab78-e88a17c643a2",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb8eb57-7ef0-4864-890e-762c0f8d9f3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e59afc-fdde-40c2-acd7-c3d437b8f7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ba0f3f-d06b-429f-b442-840079f24801",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a2780f2-bd2a-4b3a-97e9-0d05d3639dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "613bfb0e-b831-4d4b-908a-6eb5a916acb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364fd024-afa9-4c30-9f4a-719a4a4551d9",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b74df6-9cde-4c1d-b6e4-0a8f91e97997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5373ef1d-ebbf-4648-a299-1e8fe79598e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "069514db-bcd8-4fd7-8ebf-8280db8f8b21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0baad0af-13e7-4580-b9c0-7c66cead44a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a632a2-cfd1-4f0c-84e6-503283a75d90",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0565e3cc-f9d0-4807-a664-4e5d309420e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66e38c73-30e7-46ab-a947-1a2eb07e84c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2016ad-9b23-43db-bf52-5f0613b9fd80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16082a4e-a3a8-4c75-8322-60ff90a6faa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e14bca-932a-4172-862c-2527900310d6",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65f33817-72e5-4518-9069-e770d1160a5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07162ebf-9d44-4853-8857-1ddda2d6d3c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8353a2-09c2-4f2c-bb96-337975f97586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ea85b4b-fa3d-4030-9ed5-fc4fae0ee829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83cd73b9-6691-451d-9606-26993b2d7548",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68cc899-8da1-4cd8-9f60-c5f26f9a70ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a81fae5a-22eb-4cbb-9a7b-80ad0885046b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbff4ce4-5c3b-47a1-844c-33424cf1eff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f37a9281-418c-4be2-bbe2-d2477d1a447a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "974f9377-ecf1-4659-add3-b67f88b88411",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e516b6db-822b-4ddc-871e-37c93970a9d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4a219e2-978d-4fd9-990e-f51d4e216db4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9116aa-3cda-4696-8c09-14822327d84a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24ee5992-bf5e-428f-826d-bc3074984538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb606ab-a417-4937-bc67-4efc41ed57dd",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b12613d-36fd-40bc-be45-ae733d16ebb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5bdf797-ed13-42b8-ba2b-a4a0ad677833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8bb7c06-d5ba-47d1-b63e-0bb10ce114d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "489a3a19-0640-4fff-a4fe-1bd4344ab88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf3c681-0924-4456-932c-b5ba78f1ab88",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505ec2fe-de43-4cf3-bcd8-809b202edd58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0dfade1-7d02-445c-9c8d-e8ced1c87e51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "262dad97-2037-48fc-bd06-8d9f33ab38d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e93aad32-225f-416e-b78a-8bde48eac9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e3232f-ecdc-46d0-b1a0-6e4f3e32d2b2",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1bd9131-3678-42bf-8eea-8c579eb23f94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2c45e95-3e56-4e3f-aa8c-142485a163bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b8e291-94c4-4b6b-82d7-93f954439ace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d011a61c-0d58-4d71-82f0-4b5312d80d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837724b9-c653-4e4f-9465-8df081a2f66b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "249a5697-8019-428e-98f8-fe105cf91c1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1e9e766-c3be-483a-a820-088df5b12bcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbf7d27-719a-475d-923b-6eb6546aa0c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38effc92-58df-452b-9640-ca8e3e136e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7520f3-8b87-4183-a673-302dcf0ed2a5",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03dbc303-00a9-4c34-84f3-dd7f3894585f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc1eff47-387d-41e6-84a7-6bfabb544f01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1291ffd-7afa-44de-96c5-e3d6f83ebb69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94b57291-7481-4f9a-b841-0f8146d55788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25cbee8f-3a9b-44fb-8546-d4c2769a50cb",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad6c22b-5a74-464f-9446-b260bbbe6967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46d08287-a998-4c5e-9029-fc337131d2e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c66b51-8564-4667-8eed-aa21b6634469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b74aed51-fefd-4c80-a493-a1014951d655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4537da4a-9c5d-4358-bfc4-87fdabbc7621",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd8ee4d-1834-48f8-b2c5-8ff3e5fc26e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9083b3d-48a5-4cd7-aec8-3d384f69d06e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2bce965-3b0e-48bb-a905-9a4e14db96fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "290ae2b1-7b19-438e-ac4b-f9b6b3fd17d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73937f59-202e-4f69-b7b5-a5e74e21554a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0bc010-1325-49a4-a89e-c93626751d72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c02bc5d-d315-4ecc-969f-90c83e840629"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03f503e-fd02-439c-99a7-b651e5bff458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3f0a5cd-7eb4-468f-9f85-596efdbcc726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12481aa-8a74-4fa2-974b-137a7fbdc2e2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71871183-fdb0-4414-b011-7fc330f4665b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "363f7746-1b41-44e6-8aaa-7b16830f9c49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf0cf3b7-8ceb-4f00-857e-d4adc60469b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "287e7b1c-2530-4155-a068-d868375ab849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a3aaafe-cec3-4599-8b2c-e07bd1c79f1d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9620a53e-ce86-43bf-a0c7-d8e4e204501c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7312623d-b93f-4f14-b6fa-56dc34c9ddde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5bc23dc-2150-4227-99e4-8deef960ff6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "560f43ef-b1ae-4c64-8757-9a7b0015603d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e58f69-6f80-460e-a9e7-9c39da604df6",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d661539e-90d2-411e-aed1-c5109fbe7209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06fe716b-0e85-408e-b8e6-73e543d6e18f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5acbdc8-1b32-4c73-969d-78a850e74c9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "378d9fba-4bc5-4dc5-9ca2-82703fb0eec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "334431fb-25d3-4611-89ad-e5f7e1ea4f0d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf2e9db1-c68f-4780-9a7b-5c29b6385bb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9895b71-07cd-4470-b4ac-11008716d6ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceca0bee-36f5-49fd-b7aa-eea6e3ad8ed1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "166ef62e-2ff8-4ed1-b1df-3b2462531cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73ef7ae-161f-45d5-b73d-f3903b875824",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba43393a-dda1-4e0a-82f9-7004e745980d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9986baa-0428-416e-a2b0-14c875c51c4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da187eb-24da-451c-a2a9-5f6c9e5635e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae09dbf-995b-47ae-b83f-c4b19fc47e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94ae1b5-6d8a-4cc9-b4a9-b2c86eea33da",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a7df9a-60cf-4bd0-9572-d63759971020",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10bdc275-9b9d-4a11-8791-41767e82505f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "803acd9b-eb8c-4fa2-8bb8-797150825b8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c23eea76-8e81-404d-b708-feb83e003d80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c0dffd-9ecf-4e04-9c47-83612761d4e8",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec0e3d0c-0655-46d7-9dee-c7caee869703",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14b54f0d-ee08-41a1-b1f4-44a1c20b669e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "160eed47-8c90-4f9e-baf6-4a857e31b740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea207a91-6790-4b00-9a61-569ff51577f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8791845a-895d-452d-8677-876655bd4582",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16fffafb-ddac-40e1-9c1f-a03c56b3f90b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6424177c-d080-451d-b544-f4cbc781442e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c0e7287-997d-4ecd-ba5d-28724a8227cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a844e74e-8c35-4543-8f06-f21576c52f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935ab070-3016-4e45-ad78-56fa7d0945b5",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7621781-9141-4dd5-b440-b8b3e727012e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cd0cabb-8db8-4634-bd0e-002d81280648"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a9b173d-37fb-4708-bc1e-db31769433ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba4ad26-c3da-4194-abdd-8854e18a7ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef1d405-2103-4a45-864f-6f9986799473",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4307338d-6ab1-4388-bea2-593e5fa76ebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed94f10f-a463-4e4f-ad7f-60a66b96123f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a749e5-2278-4cd9-981e-d266d7c7b09b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14633c26-a327-400a-9352-00d1b7a63fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32790ec2-9c5e-4087-8c02-f16f9927c611",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10611c88-1332-4f0a-b418-bf5c790e1e32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e147a8d5-499a-4418-9b95-6ade8468645d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "381f0717-358d-4bcf-9ad0-64ff4318fa1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd655ab0-c8d5-4a48-a0a0-e8212352301c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f6bc0d-28cc-4b9a-9a8c-2d7e2b2fb3f5",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efaefe19-0b7a-4dcc-8ca3-fce57d4c835b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90efbe15-563e-4ad5-a472-25eb4a66eecf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb3b83d-9f09-4dc6-9750-a5295049bdf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d97a8c0-78d7-408d-bf3b-29c2dc16ca81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f057bfeb-f2e8-4ecb-8b15-541ff4e99cd2",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1adf563f-c20e-4d5a-a52d-3eef71d32c10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed7e7347-26a5-4d40-8cc6-afcf597c6162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50cef70d-c24c-46b9-a6de-0c36a244cb95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f501d24c-f36e-46a6-b81b-9067554b67a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a63dd3e-10fe-4385-8cf6-7df6383c41ad",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee194f0f-ea2f-4d98-844a-296a6dc6d4a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43be029f-24e9-49b6-b99c-c95da338b080"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a6289f7-e0b0-4d61-9b3f-0dd2f7cb2ad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76352de4-7249-4556-8d99-f48892bcac25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da0dded-33c0-4e18-be29-e9df4105a36f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2b3022-a5e3-4a34-81e2-4b5a89c94d97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab5e4716-e105-4b12-b959-e640c1db2247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0585b245-8e5c-4e24-8411-aae613364907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7509075-d609-4869-b7e2-1deb3ae8b498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ef805d-c5bc-4165-872e-b6de223ddc98",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb33ffc1-3087-4512-9dbf-acc1b0af16da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "732a16a9-46ac-4524-af0a-2ac21c6c4204"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97bb8928-b974-44e0-802b-9f530cac991d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3783c624-caec-4ea0-ab8f-fee490beee17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ceb3ad8-de06-4216-bbbe-e33f8ff7885c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67643adf-9b9a-4f64-93c5-572b5396b18a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8728e78-808c-4786-b8a4-d48f3f766776"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6ea85d-0be4-454a-9302-0ba95195a5af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1148315-1bd4-47e0-9060-134955b935c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac1e82fe-d62c-46e1-be49-246912010131",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449429c2-1b9b-4840-9d1b-b03a811c6280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd75038c-ba49-4493-b372-8d7da1ab594e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1cf25d-7129-484f-985d-2202b436cba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e5f43ff-cdb4-4897-9ec3-a23acb94d00d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065735ce-07e3-40e4-a7b8-72ffeb9aff39",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a4be75-45cb-4502-bc49-6198fe55428c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b220b110-df62-4ef4-bf18-3299c977ae0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85479549-a77e-47ac-bf5e-9ce5fd8e53eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f64b2cc5-a3c4-46aa-8f23-986925ac6e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b5627c6-9652-47ca-8f0f-efa86b0bbfa4",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54046004-8176-4419-8423-264a0b8bbafe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "449c4129-c759-4aaf-a657-4f0d05c0d234"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "757e746e-e7bc-4f26-8ee1-8210df6cef96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "630619ab-731a-452e-a94b-111de07029a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ca7b97-d5af-4399-aaa4-55f57f9df674",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd70b742-6ea7-4377-b545-6f2b3985ca25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99a3f8c0-6111-4ee5-a0c4-4f91eca4e681"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd51de6b-dcce-4c2f-b8fe-f8e2a134f309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2148cba-740d-42f5-8f79-084a5158fb6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc0184f-6c52-4913-b554-f96ea8eef943",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de75226-264b-4d03-9c80-87b8f1081550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a51759d-a2a1-4f24-8815-e63e86812d0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eaea0df-3bd6-426d-a9f4-2bfa719ac152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54923f44-c291-44cc-88ec-8cc3f4bf6898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c721e1-5807-4ec7-9720-457928cd08b9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6106d1e5-1c1b-4c6b-9217-e4e2da7cb353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b5b19a-0a83-417c-8c77-f211839d04a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45713737-466c-48d1-8788-4986c164d348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3715b4d2-de26-4653-af18-dc784143ba4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dde661f-8cb6-4491-8508-498af8766ecd",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a19695-7401-4671-ac7a-6caddf70b1f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79feeaab-d042-41d6-948b-c984ad9a7478"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db55c48-c021-4deb-b039-1af4d299c03b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfbf5066-7bac-4308-8164-655391ca65a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e921a1b-e4be-41eb-9d9b-35b610f014e7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0b5f2b-753f-41c0-bc87-ec61b88ebb3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d04a4bf8-9d32-4848-ba66-f7e27b2f329b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "067ce9b1-3407-4ddc-a82a-01698f753a17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dc7480f-d745-4ca4-a09d-146a5df604ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89db91c0-4c5e-4304-8676-6614cbab3d10",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ef85b6-2cb3-422a-bea5-5a7e5bd21871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "037db5c2-d7a5-4723-bc50-94ae282707b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50aa1e93-98c8-421c-89f8-3b35680efbce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c16061df-6799-4f24-804e-98a9092bf356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f9cf4b-3d37-46ff-9ce0-82340c72de80",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7968b79c-85e5-4f58-afec-d6bff18502bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2774c95-bf61-42a4-a436-0062bd63b97c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66622f49-0d17-4ad9-ad64-06e20da70961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3834d6bb-bc17-4993-9112-40129092b946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7d718b-ac55-4d9d-af25-326e91be75ab",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da29196-76e8-4026-a827-298fa3eb47e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c7164b-a92f-4f52-9ca9-2b5e93aa3fe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d14706-8a7d-484b-b65b-be9d90219f33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3ff6503-3511-45b7-a163-253c01a69582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bda414e-40c2-4411-b941-940808f101c1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "020d8e39-8d1d-4032-b482-b242e5e303bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc8f56be-2ece-4e74-af3a-86ebc5c3672d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d27c73-e901-433d-a6da-b2e2c3624d37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aff70eea-3e71-46b8-96dd-5709616c2a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f489322-1e9f-42b2-bae6-fded1f69df79",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d6c39e-c742-4560-adbe-c972a97d28c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5096d309-3724-48aa-8ff8-06311e97532c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead64f55-a4fb-4e29-a36e-9c86258b6d6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cdc141a-0f65-495e-b9b5-8ee08c8f46bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb55860d-be9a-482c-a6f5-4e4501d6408e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e81b2263-8466-4ca7-984d-943ba277e7b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08ccc197-e9e2-466c-8e74-4a45d5973ba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "874a8c8c-d1ad-4cbd-8ca1-5d6d085bd4b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d9295a9-fca6-4b9d-857f-60ae84c066c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc900b4-17f1-413d-9bd5-8b045d93dbf8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c56eb5-dc49-430e-bcb3-895f4343bc22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "194f08b8-1151-4132-a34d-80c765627562"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be465b26-dad7-4665-ada3-2921325c09d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe30e0f-6249-4b41-aaf2-8c71c1d3258d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8132cb34-d6f1-46be-b21a-6a3840258896",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc369bc2-4c72-4d98-96d2-00207e317034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54dee211-f25e-447f-95bd-be9ea1dd2ece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0efb8cd0-ae5f-4781-8fd4-9f841363f9df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7332a231-d89c-42b0-86fd-a72f0a18762e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323b4db6-218b-4f2f-a5f7-91aadd0b9c62",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ecb0364-05ed-4bfd-a2a7-d856875840f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e6f2466-9bc4-4129-a4a7-fca3f4b89cbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27dd223-5496-4880-b4c2-3a5d6ec45c56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "627cd528-a802-4319-b01b-4ef90c025f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef7d938-3a69-4af6-b208-efb8a6fe5f37",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51e9902-a77d-4adc-9511-4a5291dc62ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b823770-8c66-4dfb-beb1-034f5e22d212"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de193d2f-c8c2-4570-a88e-c27929acead4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8b2d0fb-ec7d-4ea0-a26b-e4c6fa43dfd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e97c88d8-80c0-4b98-842b-3860eaee29f7",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1b5e50-81a2-463a-b442-4ccfc3d7ab07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89ff8457-71e2-404d-bb79-baf01fbf9035"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f263596-fea5-410b-8f1b-82009954d476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64f5ce43-5afc-44ab-829d-810b7a348b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5801d6-81b5-4a3a-8ec2-917862c7962f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be50dc9c-5fa7-4dbe-a047-8a82b7697005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93934d80-df76-43b5-9728-4295d8a26344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f164164-da81-4b14-a8cc-e52fd15557fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed768012-321f-4f12-9def-4ff3a5b34b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23de87e2-3341-42ed-a7c0-2cf0941c9596",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c2bc576-b9d5-4077-aef6-e9ecf1d57675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a9d9108-681f-46bf-8150-1626b3591c5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef633d44-23db-4f5f-8a88-b0574c7af444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "361006d2-a030-4683-ba1a-364e634bcc01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca70285-eb51-4d52-9024-2f9ef7c75860",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb0bae5-bceb-4429-8223-f2819e886d21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5db9298-6dc4-42fb-b0f4-52e0f5e93ebc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6850de6d-b08c-4334-81b8-689ffcf58fdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d38d29-ba54-4ba9-8ccd-56d3bb40c2ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a511ee-fe26-4b13-9ff8-f7d90f10efe9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0321a1dc-bdcd-4302-8c89-8c4e72e2685d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f2dff2e-4d95-47d8-ba01-f0105f69d3e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2169b873-7bea-462f-abeb-e723b120e494",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c560c029-a338-41aa-b71b-565d05c11793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4fd2d9-cb86-4787-a2f0-19f043c1c1d8",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08674b41-72f8-4dd2-b93d-2f63a7e93a88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "649e7cc6-a222-4f47-93f5-d40208d74d57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7067ddd-e3b9-468d-bac3-d0388304c7fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4572440-ba28-4314-a467-453fdb88c5c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7718c6d0-5c36-462c-b62c-eaa17f2d3639",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee20f172-deb4-4508-a026-df04e096767e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e453363-b422-4c42-adbe-c34da2c13572"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca50a2d9-dccc-421d-aada-78be34594ad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10b9f638-f8dc-4908-ada4-af5b80739c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144518fe-217b-4e2d-81eb-dc562dc3e76e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf82e555-2a3b-465d-a933-532fa232beb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0093d6b-2de5-43c6-91f9-91ae9a63f0a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92bdacba-778d-4890-b54b-b4bf06d4b1b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72f64524-0abb-4ca6-b398-33bd8ab25d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d77ecf-3591-4909-847c-434a870b7eea",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5a89b8-e8b3-446f-8354-c25099861398",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f632d4e6-b930-4251-9e06-5a8ca9131df1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88f2f87-fa3c-4825-9473-5215d03fb209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0bd2cf-0b8a-46e5-8df8-0000f298b00d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d717f21a-7619-4200-8a39-ec84fa4d9f9c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad45201-d392-42d0-b27c-a01bb9e96dce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e56df4b1-9785-4aff-8cff-4935a224fe41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2599c35d-54bf-4abd-b041-09cefde1f11a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b26f088-0139-406f-8447-3adba72a398c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35208844-76de-4d4a-920e-ece7179ca58a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2a6c62-aa48-4fd9-bfd5-55ae07904cf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac190755-60bb-4951-9265-08ecca951425"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc7844a-ea27-4dbe-ac4c-cc46a24d7599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1fececf-0688-4ccd-9983-e3df83a36aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d10c61-1388-4c2d-a96c-4170018ef91e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba59abed-7ae7-4ab0-bb88-49be4cf01ecb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12a42092-9b1f-45b9-8b9d-385b5252cba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8314b71b-aac6-4361-a5ed-c24fe53fbe3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e12b668b-7af0-47a2-af5a-073e47f76e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6375f9ae-e0c5-4f21-b5d0-3bb0b1cfab9e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5874542c-bf6d-49cf-ad22-cde682079b89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "647f91b6-9c38-4d08-bcfb-739f5f92c17e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f635b71-e168-4913-87aa-bc4d244e3ebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74babef4-8197-48d4-8d7f-91716a1afec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c783649a-b4b4-40cd-bfe3-6e5124137180",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6bdd5d-9fe9-4384-a60f-9d10bb6085cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0002e67c-d44f-48b2-af9f-a7eadc2ad645"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a371052-026b-48ee-88d6-f177ed21aa38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4b1549-74fc-409a-a132-c7ca4b5786c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a2337b-9e81-4e92-a7a6-d738791458aa",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e7d556-17da-4221-843b-1da5ae32a6e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f72d1e4-2310-4055-a1b0-e8f20e9cf0ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47985d91-6d05-4def-b724-af7efb4e66eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "193876a6-ce5b-4fdc-ad7f-2501e45bd3a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb5b0c5-e60a-417e-b440-5603d9986804",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "382ccc8c-0a4d-4e9d-95b1-0608c704cd6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2aaa6b3-e070-4326-947d-2ebea266bb53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2447d69-f2f0-4bce-a49e-8a75f4389883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eafc7b6-675b-4c14-9b10-6bc8234ec89b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca9e7b1-bb90-4040-901d-ca22cfa4947e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9ee6a0-5869-476d-8f02-2a4d2a6e0f2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea31f0e7-6d71-423c-a42a-7ddb6e3a2d58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24657c46-d0e0-47a6-b78a-16968b328062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c3ae4b-818e-4a75-ad55-0ca2f9b66b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ca682c-3df6-4026-9094-ff90d15ec3b9",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7705eba1-0555-48ec-bab9-84a16b9a7dff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4769a27-3f79-43fc-808e-6715ad99468d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44048054-cb5e-4504-b559-4136f3f73417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0a57089-2bad-480c-9619-0f78728ff987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00e9806-bee0-4fb8-b0f3-af32409e7440",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ad88d8-475a-492f-9ee5-a64ada22f110",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3926a36-0d7b-4a18-96b9-348e624064da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52095960-6034-4086-8097-a4733ff0b06f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "038bb1fa-21a0-4194-be2b-219b9f49c5c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f1b277-348e-4bab-9368-aade3558ce0f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c00da8-f525-417b-bc31-3b7ad6d1d1bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "900700db-ab1f-49a7-8add-4035fdc20632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31bab6b-35a2-465c-949d-f5eafc3b4591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c391fb2-2f80-44f6-ab6e-fe561b9785c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53590e73-196d-423e-92b9-1d4bb7887012",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64370b21-abac-476b-9bb4-28dcfb515f2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54da94a7-c514-4bda-9d2f-ad4e1b597445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "779b36af-2a31-49e5-ae34-79c5abda8f62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "593933b5-c5e2-4c30-b778-95ba6c61749b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe96531-40e4-4225-8ccd-1c6a96010ccb",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb708e7-5a30-4726-93e4-825021dfec64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f3cb54d-ccc8-4592-8a11-e761b098450f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f23335-7828-4766-ab4e-e8cb82d39c7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1769c68-c3d2-4e52-9fba-f3b0d5fba0b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ab61c9-e5cd-4f9b-8453-6d897142a4b2",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a2f573-2f9d-4ab2-af17-4ab07c672ba7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a79d9156-9f38-4166-852c-d1bb877790b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f78be0-eef3-45ba-996f-3d42638df551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f1ea1a8-9f50-4091-b0f5-34adeac89370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25ee16e-c6fa-4991-b85d-551d3e7314e7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43332131-4187-4130-a4e2-4e582257eb20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dca09a97-d05a-4489-806a-86f0b094de84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9bfa45-7d4c-47b8-b804-63458ac32884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75a7b032-865a-470e-8a8f-7b20a32f7c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6507c90c-4acf-477c-9c53-47dcee94aea4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48778a4f-819e-4595-9a74-368c8b4f3f15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8954dfb-d5e1-4900-8fea-9d4b39bd6ab7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1a66b7-5b12-4d15-ae6b-5d24f92bc363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cec3431-f862-4d24-b744-ed314aea0e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6153ad2-219a-463f-b06a-a5ce9b6a4062",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179a37f4-7170-4a51-a299-b1868498e9ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27153a2f-aa2e-4b56-9dee-d6e400c0011e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8310c372-a9d3-44c2-96a4-2ce4b1d46f43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be83958f-18b8-477f-ba0c-79fc98033a70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c305c72-4540-45d2-b90b-f22a2f2c950b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393a8a63-64e2-4043-9d87-48c70398bc39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55ae37e3-5486-404c-91f4-46c06826277c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b93cde-0a9e-43ff-a35c-496728f27b23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c8dc31c-35eb-4180-8274-a06e0ced6e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4975e48a-3bc9-45c3-aa53-a8c79bf3a9d0",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb55c139-0148-41be-b6f9-a42326b1b3a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed4cca46-bf91-40fb-a224-ad9f267f57d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c5ada8-0abd-478b-8437-dc886b54ef86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f3d4b73-6c97-429d-a08a-a349fad3c1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afcc0ccf-5afd-404e-a709-c19c2ff82b9a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8729464-44fd-453f-aadf-fb46eba27c5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff232c2d-d518-447d-9fb6-841be06d2ca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e1c5d7-34da-4e2a-a46d-d8cc907e6a0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f18fcb9a-3930-44de-944c-0c3273bb3919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4038b41d-f33a-4906-b08a-28a621085ac2",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578556ab-328f-4a50-8658-fa1e4d482c79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7eb03ca2-82d2-4c67-9758-c7ffe8af4b47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9894d4a2-dc35-4836-b1df-f016281c2afb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94f416a5-07d5-4df5-858a-65abed435198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "232c80b2-9347-498a-bdbc-91ca57fa86c8",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b5ccc66-c0cb-4047-b669-ec2cb92ab145",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34658b73-b8e3-4c5e-8edd-fc3de674c79e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9072e498-b01b-461f-a8d9-0fd12d62ba7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b512f69e-5b9a-4f2f-99a1-4862a48351b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d5ac61b-ffe6-4a32-a46b-146c30eea131",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e07268-43da-4683-a639-b603c5af0a55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6142dc68-7796-42e7-85f3-1a53aa7f86ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0639ba-b85b-45bd-ada9-1988913dd44a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5961c16-83ca-493c-b29c-2ac6e1433f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52d5b32-1f78-41b7-b550-fd2b436917eb",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e24b1af-eff3-4a2e-b93c-86c8b21fe8e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1be9871-414a-429d-afa7-949d4db510ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a608006f-84e1-45be-b6a4-c9c39a5eefce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "081ef26f-11de-4afb-a960-e5f15ea20189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c96b3c-975c-4cbb-810c-31567e9d4b86",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709ca30b-8149-4212-924f-b7edf7fd9bb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15db5ad3-e3b2-4dfe-8f76-fc8f297c028f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a29ed8-bd68-4f73-bfb5-bb463f7298e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b40a436a-9afa-4f40-a454-3c0ad152b5db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf69d177-1087-4585-8aa2-5ae118a9f0f2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea382688-62ec-45e6-b6f4-0daf2d5a6e3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad1e604c-6a5e-4b8b-aba6-70c7f5498321"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d1c90ac-e6f1-49f6-98c9-678f04974e1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c48f8f6b-0f1c-4e1c-99c4-68abb801f0a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ef48c0-fe81-4928-b1e1-5229bc7520c5",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b6048d0-1e60-42b6-8654-da60f8a45197",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c91dba38-e689-4199-b20d-618caee5d465"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad72fa4-55af-4426-b42b-f3f0459deb73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ad3c617-76d5-45a4-9561-e644d7f83a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd3c7d0-4337-44db-b96d-7faf3784e5d1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b612fe-4ccf-4b08-bd32-c78ad0f29060",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f692125-20c8-44e7-b9fc-f4c9024a29a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33b710f-1b1c-4268-9eaf-d5c985d31a94",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "001191dc-9997-4270-ae8c-3ffb4a7f3ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a14e63-ac24-45c1-b882-4f6ad2429273",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8437bc05-0002-41cc-8177-b038b8eb4758",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ba87970-7a6e-4dca-afe5-03dadcc11996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a5b71b-f888-42d2-b2ef-b7c5c8c864ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39fe13fc-f0ab-4861-a2f0-c055c86e40f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ae0ed1-ee9a-446d-87b0-0d20c94f133d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f956deb-a4a5-4e49-8d9e-2ffe362b48e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d88f8939-8a42-44f7-8649-845c813d61d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7381952e-d9f5-46b4-b36d-7be87cb8a946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8225edb9-7643-4733-bfa3-f38be01160a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c733ab2-9e8a-4b6e-8767-70f8662774b1",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f68bd46-61a7-49d1-b71c-ef3fbe123ffd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23f6d432-6026-4ab0-a3cb-c22729ea7f25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f638a9-37a8-4297-bb9a-0a5caf256c8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "162ec52f-1a18-4eba-b601-61ae7e33016f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8747b9b8-8584-4233-bd36-f5b2b5b2f0bb",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ee0e6b-dbda-4218-87ad-358c39d0d334",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3ee64bb-fe16-423b-b7ee-0b359710403e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a881d6-9269-48dd-9992-1ddfab2cf28e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbbe7749-36b8-49c4-afcd-2658270494fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec9e8bc-eff4-4048-a1ea-9fb1bffc557f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8165485d-5c23-41d4-b3bb-96c668f4ff39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "530e5421-c5cb-4e24-b8e4-9ee7dede76aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fdeec06-50d4-4164-a49d-3a803abceb43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe1c1443-70d9-4cc8-b8c8-27f979ff4102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdac8c39-45d4-4344-8324-79525af10fa8",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd18350-4e76-43ce-9412-065958d3330c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "677b4366-07b1-4dd1-8b0d-d4257aa11241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab21d491-d90f-4f43-a48c-bcf1b1fee4fc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cae1b7a-c665-4f07-b52c-e039f52c209f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "134b7cc3-2888-42c1-8bb2-c6e68ed428e9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a41f63b-00dd-4c41-88d0-9e2e79a40d25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d61dcfa-7676-4d7c-823d-be58aaa86106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8c83a1-ef43-4a08-abed-1dd24adda81f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76bea018-6e72-4dd6-8266-67aabecb7c6c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d42a263-7836-40cd-ab70-e3c8c8307438",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10e4247c-697b-4028-99eb-ea0f6412f465"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "83394ca2-63fe-486d-a3ec-786665a477f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "40f1a8d9-bd2c-4c8d-b7f8-d0771c0a3e7b"
                    }
                  }
                ]
              },
              {
                "id": "c9d7c977-e48a-4e3e-8573-3211398f9f06",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b0250529-cc32-4992-b0bb-6e2dc8d57dff",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e69be98-701d-479c-bde0-ec866f32e2d6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "50694c1a-790f-4425-bb06-3477e378bdd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5be2d4-8859-4d4b-a521-f327ad190b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f2cb48b-650d-4685-aa51-fad378d67d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3604698-a9db-4731-a2d3-12f4bc849ffa",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242df73b-ccf5-47dc-b812-547fe2fa9bdf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0ee8cf54-b999-440b-80df-45fde4d63df1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7efbc1df-3b1a-43ef-9c92-4788e025ddbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1218f3ff-21d3-4770-a515-51b113c4fbe5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4220caba-d9cb-40df-a77c-d8e92be16b6e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e8edbb3-19e5-4087-8ad2-d19bc2d12963"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd12b5bb-8153-4a4d-afc6-1152fea85b41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd71113b-e9b0-45ce-8d46-085e8b83bf19"
                    }
                  }
                ]
              },
              {
                "id": "392751c6-0dad-4c30-9b1f-2edda8085b87",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "bf9a154c-51a9-4b67-a24a-e95f4f310af3",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0067387f-1aff-425e-99c7-2c704933a133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9ce8faaf-33d6-4642-b34d-55d167bb8ecd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "379af2f2-8a0b-4e25-ae62-decbcbefb10e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c99b56b1-8acd-4250-b495-9bfa71be57a3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a64d13b8-0ef5-4c76-9371-5bc1e67f8391",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6be38fdb-0d25-4545-9a07-395da0648e9b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cdff067a-ff9e-412d-9ee4-d8b3df33634b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "72aadcaa-9f30-445f-9d99-f3801a03fe38"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6968fffb-2bcf-4d21-a595-ab713fea76e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5ca172f-0584-431b-ac2e-b56b802a165f"
                    }
                  }
                ]
              },
              {
                "id": "f6d31236-851d-4924-ab28-e3865ea68a83",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5daccdc-749e-44ef-bee6-623aa7c5c2dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "14280415-c6c5-42c4-a54b-5de1ddaa15ec"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5658ba96-929a-47e8-b36c-af3acc88ccfb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c15b3838-9bf3-4c3f-8b83-3940f96a5122"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30951b75-268e-4094-a17e-1d7b688b2d1c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "31e65b23-4dfb-401d-a6ab-fd8add5b19ed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76e423e6-d189-41b1-a4de-8fb6e13e7b57",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "48baee99-643a-4bf2-a7c9-400f22c04488"
            }
          }
        ]
      },
      {
        "id": "3017751c-f466-4768-bf4f-a16186d176ba",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0421dc5b-f8d7-45b6-8858-000c7c32add6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e11115de-9117-4098-b9a0-68404fdc5296",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3cd58837-c492-41c3-9c89-54a9b62708a9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47837d38-c63a-47c5-8fe6-0d2cfc109f14",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a3ffe7e9-eddc-46c3-8f01-53409fab5556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d84a1a-3985-4c2d-b372-56988e18b880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8101be3f-7cab-4845-8df4-8f0ea0143232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5f4f2e-82ed-45be-9974-309c441a5a81",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7d9fa4-f5f8-4e44-98a8-fe58682847b1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b8bae1c6-85f0-4620-a055-5b94cbb23e69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a92acc59-1e35-460e-aba8-b3f5ecfc5d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a60d39cb-d2bb-4372-a506-225bb0b41a64"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e100de4d-87cc-4483-9dd3-6271582e6e01",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90db37d3-2f92-49b7-a482-9ab67ab4b534"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b6accdb-b4e8-44b5-8bf2-0c43bc7b7fcf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce2193f5-a2c4-4d37-9c14-98624bf02e94"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9f2b0641-a902-44e0-94df-ea7c26433a0d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "74284dec-64ec-4d2d-874e-115a7ca684e4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "41e3fa68-0193-4591-a96d-6129d75bdd61",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d0101387-0c0f-4069-ba70-edc98a9a2916"
            }
          }
        ]
      },
      {
        "id": "1e10acb4-d866-4f5c-8e54-0ece804ccfc7",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "785aabf8-7337-4ee4-9409-5f426930523c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b8bd4930-f0ae-4227-b069-a770da3b63b2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5d2f2f28-8146-4925-a5c9-8a6c6f63dd28",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edaf779a-20a8-4267-82c5-b7d52de60c64",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "397307ec-6efb-418e-b009-30ea2fc8ca75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "301e9fc8-b2e8-4faa-ab9e-d08b3aa2cee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c6caba6-ffa1-4fe6-8dde-a1be311e121c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ccc4961-828d-4a4d-b6f0-cf1c835cd766",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc9aef3a-b41f-45b0-aae8-2ef0bf801ca1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "141c124d-96f8-482c-a920-e2e562be4228"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f06172-ddd8-4df4-a504-6ab6a9a42b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc72992e-06de-4cf5-8f8c-44d210c7f82b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "590ae32a-0325-423f-b564-c43c5672ce38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3edf4af6-3c80-4ca7-af38-76c2a989ebe9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9fdbd20d-2056-447a-82db-0cecf13fb5af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9113826-2fa7-4c46-8192-99ebc3993527"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d74f79ec-6456-4b06-a10a-d532e65bf6ab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3bff4a73-5f51-4a3b-9066-6921a4887ebd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "41ca537c-576d-404b-8e62-ebb28714b4c2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bfef1c5b-33ca-41a2-8241-4b69c44e44c6"
            }
          }
        ]
      },
      {
        "id": "5b2cfc05-b53e-4aa5-ae41-7e38ee716f31",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f7609af7-9517-4211-902c-650a32f7dffa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "92012526-641f-41df-897a-b88fa14bf6b5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9d8a50bf-0582-45a9-91c8-229eaf900eff",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad3a154-2032-488d-9108-69bcfde5a84e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f6f55fc7-dffb-452e-8f46-f35573dded14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "defff7b7-91b7-4df8-b11f-971c34439aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17bce250-7f12-403e-91a3-bcea9d71ccc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b86496c-2c27-4095-8fe5-b2754aa9712a",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a200cfe-7769-448a-bafd-acd43e2f4ecb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "acd94b14-2961-4daf-9fa6-a74ec88f2db5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3f0a0e-3da9-460d-b735-836c48ada6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f354b873-f091-4459-aff3-661c9abb55ea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a1ed8b4-c6e8-4c27-8aad-b32f3a9530f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f03de29-9d95-4330-abbb-e97d21f76174"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7756f56a-5074-4d10-928c-9688bbbfb781",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6df96e90-081c-44ee-8ec1-595fb3f564fe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67ed8832-570f-4561-97b7-c02f01e667ff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d77d2890-b341-4d19-bd9f-45a431801caf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a0bdfcc-4aeb-4981-b04b-3f1d2c6945ad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c937ee5b-2f93-429b-96d9-ad79aeef596c"
            }
          }
        ]
      },
      {
        "id": "5f876967-48d5-4b54-b753-96044499324c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a95c659-c066-4665-ac9a-5ae9856a4a33",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f7d0c450-228b-4ef4-8cb3-332a9817a669",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "946a7b8e-c6a7-4929-b1c3-dea19e9b3d66",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ead6e1d-e3a0-43f0-b65d-9ae05b6437af",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7f8f9d3d-c459-4d84-95fa-ce9b77290304",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 111.8854961832061,
      "responseMin": 14,
      "responseMax": 1015,
      "responseSd": 169.6165023847689,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1671410075950,
      "completed": 1671410116123
    },
    "executions": [
      {
        "id": "615a29c7-7826-4596-aab1-c2349c1a3247",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f26cfba4-e958-4f69-81c4-4a6c757b78b9",
          "httpRequestId": "0ec80294-7a5b-46f3-8c53-231567f75e00"
        },
        "item": {
          "id": "615a29c7-7826-4596-aab1-c2349c1a3247",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0b6ff72a-2bc9-4794-a76b-a09f966b810c",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 0
        }
      },
      {
        "id": "5ee091a7-ec68-4045-b500-5508e89ef982",
        "cursor": {
          "ref": "e44112d3-062d-427b-b69d-3761b1f94b7f",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "bf7fbff0-deb7-42c3-a0e6-40b7de70154e"
        },
        "item": {
          "id": "5ee091a7-ec68-4045-b500-5508e89ef982",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6977ceff-31b0-45be-a126-2b23e1158d93",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "495c52b1-dca4-4827-8661-8bbb95219799",
        "cursor": {
          "ref": "c4596afe-6088-475a-9e25-76d956581935",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "bd93926a-fa9c-46e8-82a4-900e2afa6d86"
        },
        "item": {
          "id": "495c52b1-dca4-4827-8661-8bbb95219799",
          "name": "did_json"
        },
        "response": {
          "id": "a67cca30-c582-4c0a-9ecf-b71fb8f385b5",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7b207e6-4a2e-41a2-a4a9-3486443d3ed6",
        "cursor": {
          "ref": "4fbf02d1-336d-42b0-95e5-9e1b2586d3fe",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fe0dcf18-46eb-4383-b7ff-57398d804bfb"
        },
        "item": {
          "id": "b7b207e6-4a2e-41a2-a4a9-3486443d3ed6",
          "name": "did:invalid"
        },
        "response": {
          "id": "db796fd4-95ad-45da-96ae-b82a03ae871b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7b207e6-4a2e-41a2-a4a9-3486443d3ed6",
        "cursor": {
          "ref": "4fbf02d1-336d-42b0-95e5-9e1b2586d3fe",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fe0dcf18-46eb-4383-b7ff-57398d804bfb"
        },
        "item": {
          "id": "b7b207e6-4a2e-41a2-a4a9-3486443d3ed6",
          "name": "did:invalid"
        },
        "response": {
          "id": "db796fd4-95ad-45da-96ae-b82a03ae871b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc32169-20fb-4aed-ac34-ee935765321c",
        "cursor": {
          "ref": "6fe72a25-d274-4c2b-94df-add3d2205246",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6c03ae6d-580b-4e1f-8d6b-1725430f6aec"
        },
        "item": {
          "id": "acc32169-20fb-4aed-ac34-ee935765321c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "65776e3a-3b88-42e4-bdc1-55394436b043",
          "status": "Not Found",
          "code": 404,
          "responseTime": 92,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb233168-963b-4eb9-8fe5-4e5d8723cc0d",
        "cursor": {
          "ref": "de55aa7e-7df9-48cd-906f-93da3f0226e4",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c2bb7a55-3f8e-44d4-a8b3-f38371dc53dc"
        },
        "item": {
          "id": "eb233168-963b-4eb9-8fe5-4e5d8723cc0d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b29e7edb-6c58-49cc-bce3-c2894d1e6046",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b1fa60-c31e-4676-a83e-5c6d54d55604",
        "cursor": {
          "ref": "bd468675-1a86-45f5-b261-1873fc7cc9ae",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "afdb3b74-b998-49f9-a711-093497f7bd42"
        },
        "item": {
          "id": "55b1fa60-c31e-4676-a83e-5c6d54d55604",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "49a5b47b-441f-4517-ab2c-dd3b14be4966",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b428b3b8-de32-4eab-b39d-d11b1e62afcf",
        "cursor": {
          "ref": "1c85cee1-99c5-4b14-a105-a8fa279b8320",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8d3d879e-0ffd-4166-91a4-1f5c09d2ae69"
        },
        "item": {
          "id": "b428b3b8-de32-4eab-b39d-d11b1e62afcf",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3383900d-fc83-4f51-b565-aa7ba2faaa5b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b428b3b8-de32-4eab-b39d-d11b1e62afcf",
        "cursor": {
          "ref": "1c85cee1-99c5-4b14-a105-a8fa279b8320",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8d3d879e-0ffd-4166-91a4-1f5c09d2ae69"
        },
        "item": {
          "id": "b428b3b8-de32-4eab-b39d-d11b1e62afcf",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3383900d-fc83-4f51-b565-aa7ba2faaa5b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a29030-f5fc-4e39-a8a9-2dcd8968bc0d",
        "cursor": {
          "ref": "650b62ad-954f-462c-9f4b-ce5da3374f3b",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e865ef68-2a11-4eec-b376-ba9c6e73d2d8"
        },
        "item": {
          "id": "88a29030-f5fc-4e39-a8a9-2dcd8968bc0d",
          "name": "identifiers"
        },
        "response": {
          "id": "f8e89b6a-1846-48ee-a85d-294aeefa6df6",
          "status": "OK",
          "code": 200,
          "responseTime": 451,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8779e7d-0353-44ac-af7c-c5823d19b6f0",
        "cursor": {
          "ref": "bf098b7f-0c0b-4f3d-97e9-e7c34c0a82d2",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3ba70f44-802b-4932-80c2-d7663ff0d04b"
        },
        "item": {
          "id": "b8779e7d-0353-44ac-af7c-c5823d19b6f0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0a068da9-228c-4d88-ad5e-801fe0f4fe9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8779e7d-0353-44ac-af7c-c5823d19b6f0",
        "cursor": {
          "ref": "bf098b7f-0c0b-4f3d-97e9-e7c34c0a82d2",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3ba70f44-802b-4932-80c2-d7663ff0d04b"
        },
        "item": {
          "id": "b8779e7d-0353-44ac-af7c-c5823d19b6f0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0a068da9-228c-4d88-ad5e-801fe0f4fe9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f2da5d-3c1a-429f-aa46-93a6e107c485",
        "cursor": {
          "ref": "90ac2c82-3910-4227-91b8-9510e290ab10",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "871bf02f-d88b-4c17-8dc7-660e5bde4ff9"
        },
        "item": {
          "id": "d9f2da5d-3c1a-429f-aa46-93a6e107c485",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b5c51e22-acfb-4179-820c-535ac33f5bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "517e448c-c647-485c-b60b-de054eb80a84",
        "cursor": {
          "ref": "cf0139a4-ba53-446a-a5ef-34e26eea2181",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "cf3603c7-6872-4af2-88bd-60ee3112d52d"
        },
        "item": {
          "id": "517e448c-c647-485c-b60b-de054eb80a84",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "8873e824-3d8c-46e4-b830-af60c6f42cdc",
          "status": "Created",
          "code": 201,
          "responseTime": 686,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "7caaf195-8311-451a-ab46-3649a2e35978",
        "cursor": {
          "ref": "e0794f3a-da6f-477b-8e4e-a72d0319c59e",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6da7cfa6-f214-41d3-a967-8acdcdf967d2"
        },
        "item": {
          "id": "7caaf195-8311-451a-ab46-3649a2e35978",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "43f52d6c-ef0d-4a45-a076-78cda2b9382b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bcd4981-4e88-4b52-9070-74e37517a009",
        "cursor": {
          "ref": "509f2dbc-9044-415d-bf11-0a4be2d30f6c",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "03b81f01-9635-429a-92af-33fafdfec418"
        },
        "item": {
          "id": "9bcd4981-4e88-4b52-9070-74e37517a009",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d426a5c7-87d5-4577-8738-b8f01b8dc5c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f13c9cc-5ac3-4a4e-b2b3-b0b69ec9ab05",
        "cursor": {
          "ref": "7a69de19-3d51-4f81-8c11-2c2111e0c1d3",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "05519e1a-57f6-4ec4-95ec-6e147a95e936"
        },
        "item": {
          "id": "6f13c9cc-5ac3-4a4e-b2b3-b0b69ec9ab05",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5e8af75d-3c85-4a41-b71a-d506fb4d1208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e3b040a-7113-4142-8c33-a695d23a98da",
        "cursor": {
          "ref": "01c382bb-d9ad-441b-9bad-f97287da2691",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "65a2a758-2ca7-40eb-9cb2-c026c49481e4"
        },
        "item": {
          "id": "7e3b040a-7113-4142-8c33-a695d23a98da",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "93722e09-ef9a-4acc-9928-49ba77a74931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c073241d-3bae-45a0-a03e-e2f9fe554f52",
        "cursor": {
          "ref": "5c16c3a0-aa86-4f54-b96c-9fcc46cef5c2",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5bff5f5d-a605-417d-86a2-4e835316e419"
        },
        "item": {
          "id": "c073241d-3bae-45a0-a03e-e2f9fe554f52",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "571723e3-98ab-45cf-9204-bda3be88f0fd",
          "status": "Created",
          "code": 201,
          "responseTime": 520,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "8ae0fab9-6972-4f8f-b66b-7711c7712250",
        "cursor": {
          "ref": "9dfa39bb-c379-499c-b5a8-d7b515cbcd33",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "110e5e58-ad5e-429a-ab66-4c7699b5d25d"
        },
        "item": {
          "id": "8ae0fab9-6972-4f8f-b66b-7711c7712250",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b2d6f5f8-a315-43cc-86c4-5c1e29187274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7df26d-39cc-4594-a551-970823e3e8ed",
        "cursor": {
          "ref": "e0061804-844f-4e14-9c4b-5e6d07115d50",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "699169e6-6a19-4327-8c1f-6421290fe937"
        },
        "item": {
          "id": "fd7df26d-39cc-4594-a551-970823e3e8ed",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "28352586-847d-46a2-873f-68715ab8f460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d57c433-4c54-4f0d-9462-227b52196d2a",
        "cursor": {
          "ref": "fdb6eab5-6982-49ce-a7b8-ee9aa895c535",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5bbbfc58-b3d0-40ac-960b-d529818e8856"
        },
        "item": {
          "id": "4d57c433-4c54-4f0d-9462-227b52196d2a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "376eebf3-b2c1-46d0-bc85-e2a9201d1e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e64be6e-4655-48c2-8317-42addddbb501",
        "cursor": {
          "ref": "05814dff-0cef-4444-bdaa-08f993813150",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1fde2449-25a2-4caa-beb4-ec8077c98575"
        },
        "item": {
          "id": "7e64be6e-4655-48c2-8317-42addddbb501",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2e454e82-8164-471c-9039-e87450badf5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f73cc821-211f-4f7b-bbcc-2e9f4b871d55",
        "cursor": {
          "ref": "bdb3acb3-390d-4c94-b21e-bbf51d41ef8b",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b6752607-a1cc-4dcd-ae0a-5c0c591ed94c"
        },
        "item": {
          "id": "f73cc821-211f-4f7b-bbcc-2e9f4b871d55",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "856bd728-b4a9-420c-a36a-ba1f22655729",
          "status": "Created",
          "code": 201,
          "responseTime": 564,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "e281f11f-467c-4aef-a217-9b1b5b720c4b",
        "cursor": {
          "ref": "a8155f94-7933-46a6-a3cd-1d84540f2fcc",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "69ef463b-e336-4257-b884-7e097c9c061e"
        },
        "item": {
          "id": "e281f11f-467c-4aef-a217-9b1b5b720c4b",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "403f6cf6-ad32-49a9-9534-37f54cbd463d",
          "status": "Created",
          "code": 201,
          "responseTime": 1015,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "62d932dc-965a-45ef-8132-65a9c7bab854",
        "cursor": {
          "ref": "21c5d611-a0aa-4b9f-8174-f2df0ee8de70",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ef5cc624-9e2a-46a2-a460-110bbbc178f6"
        },
        "item": {
          "id": "62d932dc-965a-45ef-8132-65a9c7bab854",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b99b6fe3-5590-4866-a6e0-b712a76c952a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b83ce87b-d11c-4828-9297-df2de0a0d736",
        "cursor": {
          "ref": "bf0c8311-25f8-4474-ad21-bc1a7ed52490",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6fcc046f-c2c4-49d6-b30d-232336923a60"
        },
        "item": {
          "id": "b83ce87b-d11c-4828-9297-df2de0a0d736",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3ad86fce-7332-4a7c-80af-970590012890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb87ab0-8fb9-4ef9-98ff-b7ba5742b57b",
        "cursor": {
          "ref": "655d45f3-fd99-44c7-b1c3-c3b48d1f3cc1",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "210ff304-e929-4691-a86e-e9c4f432a3c7"
        },
        "item": {
          "id": "3cb87ab0-8fb9-4ef9-98ff-b7ba5742b57b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "aa8280e7-3006-4d6d-b2ae-c978f1358aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae7bab7-8ecb-43fb-8609-1fb3ad6cbe42",
        "cursor": {
          "ref": "50bd86f5-3f06-4323-b0d4-85666c075724",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "755bcc5b-1e6b-475c-9f71-cd7b5a29813c"
        },
        "item": {
          "id": "9ae7bab7-8ecb-43fb-8609-1fb3ad6cbe42",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1c7a5036-94ab-41c6-afef-19df89fbdf20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "492ff678-fee8-48bc-abeb-e3aa3eb96a54",
        "cursor": {
          "ref": "feec9882-76ba-4cc1-b0db-bbbc9f6c833a",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "54260e2b-bb02-40dd-9c79-a63edd6320b6"
        },
        "item": {
          "id": "492ff678-fee8-48bc-abeb-e3aa3eb96a54",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d83c49ad-dbba-477f-9dde-abd1e1faf174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13042ba9-cf7b-442f-a7f5-ba82051f51b0",
        "cursor": {
          "ref": "3b947528-c438-4d58-a2db-50ca4927f056",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f30766ed-46bf-4b17-8371-47e4a7d33736"
        },
        "item": {
          "id": "13042ba9-cf7b-442f-a7f5-ba82051f51b0",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ee94c50e-da2e-40f6-96d3-d8e33d024a33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143a6dd6-9ee0-4a06-98b6-d395b8418f09",
        "cursor": {
          "ref": "1d029e66-27c9-4c9b-b478-3395525e4e04",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "12ea93ef-7fc4-4132-b62a-a054fa1ac92e"
        },
        "item": {
          "id": "143a6dd6-9ee0-4a06-98b6-d395b8418f09",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3885988a-cf2d-4c4d-a74b-b608e75274cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aacc1a95-b4b0-4de3-b55e-2b3ee34763cc",
        "cursor": {
          "ref": "504300d9-50f2-42a4-ba7b-39067dd0226a",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a1756ad3-1e92-4309-bc4a-2fc210c8802a"
        },
        "item": {
          "id": "aacc1a95-b4b0-4de3-b55e-2b3ee34763cc",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "48b9a7ed-9503-41b0-9442-6cd944746f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb21ed8-a6e7-4ee9-8257-4223b8b5cce7",
        "cursor": {
          "ref": "74122f6c-3b33-4172-8628-c00e652307e7",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "40bbc151-1691-4805-880c-5a7a738c0a23"
        },
        "item": {
          "id": "0fb21ed8-a6e7-4ee9-8257-4223b8b5cce7",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1130e439-eb61-4f7c-8acc-9a40abea81df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f84c6d7-c657-4d6d-b603-063f6b4fa55d",
        "cursor": {
          "ref": "1f688a9b-176e-470a-a6dc-a7a42b0f76b8",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "df99f171-09ca-4e3c-9324-843a5eb97667"
        },
        "item": {
          "id": "9f84c6d7-c657-4d6d-b603-063f6b4fa55d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "87bf8cf5-64bb-4853-bbbb-83fdbcc579d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621b5a52-3f83-4a3f-8e5c-b79427951e7d",
        "cursor": {
          "ref": "4686d52c-4731-458d-946c-8c1abc7f38f7",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "68bbd5d2-fc17-4e72-91e9-8483448ee693"
        },
        "item": {
          "id": "621b5a52-3f83-4a3f-8e5c-b79427951e7d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "984e72d0-ee15-4546-8c25-c24b0a9caad2",
          "status": "Created",
          "code": 201,
          "responseTime": 731,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "6fa1dfa9-2174-44d1-9e5e-5e95a0430134",
        "cursor": {
          "ref": "d49e789b-9597-45d2-b433-54268b3a9e6e",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "63ca62e8-41f2-430b-b208-dbe5b6052235"
        },
        "item": {
          "id": "6fa1dfa9-2174-44d1-9e5e-5e95a0430134",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "adee7d7d-d3f6-409b-ad68-4f7527d31662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80896de6-c367-4663-8ca4-8298427a07f4",
        "cursor": {
          "ref": "e1a092f8-1a75-48fc-9db7-69438480f920",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "754e5635-0f95-4b2a-87bb-76a02c4498af"
        },
        "item": {
          "id": "80896de6-c367-4663-8ca4-8298427a07f4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "07c3cc5f-b02e-46ac-b48a-be4be3527970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a374697-05a9-457b-82aa-44513deacb4e",
        "cursor": {
          "ref": "18e8e8b8-1e98-499d-aadf-c7abf61c14f8",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "dd5e0019-28c9-4cfd-8eac-e821c718842b"
        },
        "item": {
          "id": "7a374697-05a9-457b-82aa-44513deacb4e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "18c0271f-3b94-4508-a96b-4182cae1842c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a926afb-88fd-40a0-a5f2-a217a9e6108c",
        "cursor": {
          "ref": "2d612864-4a81-4a2c-b690-43f950d5c4d5",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a8df52cb-77f1-42a7-94c4-4dc9d6ac50d4"
        },
        "item": {
          "id": "5a926afb-88fd-40a0-a5f2-a217a9e6108c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "cf4dd227-5f23-483e-9aa2-745cbf26ef52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a856654b-4e0e-4897-bf04-8fc3000f678f",
        "cursor": {
          "ref": "f5f87763-47ac-483c-b164-57b3a89bf8e8",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "31e14d72-e77b-4eab-99ce-61d81082b0c0"
        },
        "item": {
          "id": "a856654b-4e0e-4897-bf04-8fc3000f678f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "30800f9d-288e-48a0-89b3-cba1216055a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7622608f-c2f4-4a04-a8e1-feb616a776c6",
        "cursor": {
          "ref": "874c1c80-c91e-4843-a8c3-a8e78d512fb0",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "bc5b7e48-0fa1-442f-a8d1-f3dc388eeed7"
        },
        "item": {
          "id": "7622608f-c2f4-4a04-a8e1-feb616a776c6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "1a92b6a1-3081-4518-8d7d-fb58c28fcc75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb63ef8-fc87-4300-b5b5-70bc37716efa",
        "cursor": {
          "ref": "5b853eb0-1ad7-4b87-909c-7b39ff3f0169",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b5e6d235-5cc6-41b5-ac3b-9cb76fadcf82"
        },
        "item": {
          "id": "efb63ef8-fc87-4300-b5b5-70bc37716efa",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8569a809-b80b-49cf-b49f-2f721d8dd86d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e4eede-c5de-4522-8578-03b4fa1bf888",
        "cursor": {
          "ref": "c1152514-1df8-4581-ab40-76b49872387e",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "956bfce0-9a7e-44b6-8550-89e0c1bff82d"
        },
        "item": {
          "id": "f9e4eede-c5de-4522-8578-03b4fa1bf888",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ddec30a1-085a-46bc-94ca-ce466b8f36cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91683afe-c335-4041-bdcf-e47da537d6ae",
        "cursor": {
          "ref": "81b9894b-ea0e-4c5b-af95-6944422fd0ea",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "22fc7245-1319-4fb0-8adc-df1ae7c4fd21"
        },
        "item": {
          "id": "91683afe-c335-4041-bdcf-e47da537d6ae",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "4157dceb-2fd3-4a42-904b-c49836dfc637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d48ac7ee-d468-4baa-8921-fb1e1e46e412",
        "cursor": {
          "ref": "8e40efc7-a187-450e-8423-c876ba0b6a8c",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b3ffefe2-3890-4d30-ac36-37a714f32ded"
        },
        "item": {
          "id": "d48ac7ee-d468-4baa-8921-fb1e1e46e412",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8bba57c4-ec8d-47b2-bd5a-f9ed3f33f574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6c5e74-07ec-49b2-a051-dd4aa6b2e37c",
        "cursor": {
          "ref": "565067b3-9aa9-43e8-8d31-37a8feccfcab",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a772097a-f03e-49c7-972c-8d14905a4013"
        },
        "item": {
          "id": "8c6c5e74-07ec-49b2-a051-dd4aa6b2e37c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "38d00c86-8e41-4e1e-abd2-6837d0211461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c20d4025-ea12-472a-ab63-f44ef5e09aab",
        "cursor": {
          "ref": "f4517947-cee5-4b66-9e25-d31b6d6e910f",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "99e8769f-883f-481e-9774-361630dec404"
        },
        "item": {
          "id": "c20d4025-ea12-472a-ab63-f44ef5e09aab",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "a89c6639-13ba-4e1e-b3bb-625c6314f2d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da392dd3-26b3-4e53-a7de-ed4a435fd18f",
        "cursor": {
          "ref": "e2ee436f-b036-4525-a6bc-00aba122c7e0",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f1e1408a-0329-4eb3-8c67-745e359bb7fb"
        },
        "item": {
          "id": "da392dd3-26b3-4e53-a7de-ed4a435fd18f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "db65d52f-a476-4901-a793-87fa31192196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 343,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "604041de-fa2e-4dac-ab04-a746494628f5",
        "cursor": {
          "ref": "6032cdf6-b382-45f7-8a13-d930d8fe3488",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "992907c1-ac74-4339-9370-8d652eafda56"
        },
        "item": {
          "id": "604041de-fa2e-4dac-ab04-a746494628f5",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d0474262-024f-4a6d-b061-196ef239ebc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534619c4-a0b3-4d08-89fc-7ca20928791c",
        "cursor": {
          "ref": "5638fb38-2335-428d-ac22-8d77ec7e810b",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9b55f395-33c9-46d9-926a-ea3b1017285f"
        },
        "item": {
          "id": "534619c4-a0b3-4d08-89fc-7ca20928791c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5acc3636-7d10-4731-a1ba-59486988c271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5f2ef0-f0f8-48ec-8d29-aa967e32af53",
        "cursor": {
          "ref": "7d028ef7-0859-4a59-95ef-72ad7a9de0f4",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2ca6d600-cbf5-4503-a27d-f067e1b0bb1c"
        },
        "item": {
          "id": "5d5f2ef0-f0f8-48ec-8d29-aa967e32af53",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "16338d24-8986-4503-8357-7917259a76b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f4001f7-8f32-42c3-ac01-f8a25447bdca",
        "cursor": {
          "ref": "81ddaf22-97ed-46b7-8a26-6c1885df50fc",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5440730f-de16-48a3-aee4-8b44fefbf527"
        },
        "item": {
          "id": "7f4001f7-8f32-42c3-ac01-f8a25447bdca",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e6f33974-eeef-4485-adf2-90cd0bfd22fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b90d1f-2b96-4946-9f50-53bf1fd3759f",
        "cursor": {
          "ref": "d750ecca-cdbe-449c-b63c-df3d5227c6ff",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "189c0b00-6b3c-4b83-81a3-4141234ed250"
        },
        "item": {
          "id": "83b90d1f-2b96-4946-9f50-53bf1fd3759f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "0d6e866d-f2fa-4741-921c-e0fc9ce0b22b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0faa006-a9ab-4e60-8e25-509971756e38",
        "cursor": {
          "ref": "2439c8f7-a075-464b-9783-4dfe7f7af9ab",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "fa2089c5-001a-4900-8c1b-3aaebfbde6ff"
        },
        "item": {
          "id": "e0faa006-a9ab-4e60-8e25-509971756e38",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b50988fe-fe69-4dbb-9d59-65e2b67175fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ef1bc7-fcbd-4b9a-b19a-e40ad4a2f17e",
        "cursor": {
          "ref": "9a25bbfc-ad48-4392-b0ba-c790ce6b4470",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "628d41a7-3043-471f-a5e1-af342e34a11b"
        },
        "item": {
          "id": "16ef1bc7-fcbd-4b9a-b19a-e40ad4a2f17e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4201e3d6-9e49-4922-81bc-cf9937fd892b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 352,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "e10f2b8d-dcb8-40b5-a5fa-2baf7d95ef63",
        "cursor": {
          "ref": "9ee754cd-0bec-42fd-bf8b-02954738ac1f",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b54036e2-c345-45d9-beec-1a7311ce8ee0"
        },
        "item": {
          "id": "e10f2b8d-dcb8-40b5-a5fa-2baf7d95ef63",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1d0704e7-ba5e-477c-9aee-3b4354669a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ce152f-f814-4f41-8539-2cc13e5e2dac",
        "cursor": {
          "ref": "e723ea67-994f-4410-851f-2475a2fbd63a",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7a7d0307-e241-4145-9551-41c5f88e5cb7"
        },
        "item": {
          "id": "87ce152f-f814-4f41-8539-2cc13e5e2dac",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "626acbac-05ba-441a-996b-1c7c3ab3eb5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f67fe451-8d58-4675-b4da-a8611760f7dc",
        "cursor": {
          "ref": "e774e8b1-eacd-4bf4-b5ea-af35ecafef71",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "61283807-3b51-4181-88c8-e6a55cc69c07"
        },
        "item": {
          "id": "f67fe451-8d58-4675-b4da-a8611760f7dc",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "02815151-410b-4d0f-9726-8d3997faec63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68386cfa-1853-474a-84f4-457d63d2c61f",
        "cursor": {
          "ref": "ac1b80c8-37f4-49dd-82ff-625d6fe60755",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "cb650b62-2720-42a9-a1ed-10278cab0fc9"
        },
        "item": {
          "id": "68386cfa-1853-474a-84f4-457d63d2c61f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1dd0c539-ab2b-4556-bd15-74cf080a5b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263bf9a0-ac36-410a-ab94-b35c53257dc9",
        "cursor": {
          "ref": "2c5a510f-633c-48ae-a3e1-01829ac7b02e",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "233f5b4d-0794-482d-9889-21497e2c20b2"
        },
        "item": {
          "id": "263bf9a0-ac36-410a-ab94-b35c53257dc9",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "51ca8739-3ab0-42cf-9d64-f7afd56488f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf2e0af6-bab2-4f2b-abcf-094ba30c3ea5",
        "cursor": {
          "ref": "a61825a3-a27c-4aa1-aaf2-d65127f970b8",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "58b3639a-67c6-40d8-9469-2e4594d5278d"
        },
        "item": {
          "id": "cf2e0af6-bab2-4f2b-abcf-094ba30c3ea5",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a6b86b75-9be1-4aa6-a048-8741452cc43b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a61caecf-1bc5-4a54-bbb2-aa3cf71cf8d5",
        "cursor": {
          "ref": "f00aec6e-5d60-45d0-96ca-8436d71ab222",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "deea326c-b719-4bbc-b3ee-91dee97e184e"
        },
        "item": {
          "id": "a61caecf-1bc5-4a54-bbb2-aa3cf71cf8d5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4e2ef339-8a99-488c-86e9-eab1e98964c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e1f4f18-b037-4d99-9b7d-54dc8ca6cbac",
        "cursor": {
          "ref": "25c4c52a-980f-47d1-a625-c757401b2235",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d47abc5e-11c3-4f62-8373-78bae44c7a79"
        },
        "item": {
          "id": "1e1f4f18-b037-4d99-9b7d-54dc8ca6cbac",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f7208445-1103-4e6f-9782-7293dab0a234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "524ad63a-5ad9-4a3d-89b2-1b990eb2e23c",
        "cursor": {
          "ref": "43c399c3-4d48-430c-aa1b-df5909550e1f",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0cffd8ed-7f63-4f00-bc1a-4e66aa4a3080"
        },
        "item": {
          "id": "524ad63a-5ad9-4a3d-89b2-1b990eb2e23c",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e522922e-1850-4faf-a02e-5727257c3b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be69473-38a3-4c61-a258-e499f4ac457f",
        "cursor": {
          "ref": "e4aea7d3-fb17-4cbf-84ba-43942bc59817",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "81c2414e-edab-41ed-b268-ed185f7021b1"
        },
        "item": {
          "id": "9be69473-38a3-4c61-a258-e499f4ac457f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6396a934-5358-46c1-8092-5002fbe8f6ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a54d628b-85c5-4b10-8e42-5dcbeb7eea5a",
        "cursor": {
          "ref": "33f8378d-663b-48e4-9293-16acc88d5669",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "cc62c768-0fa2-4977-ba97-dbe8630be34e"
        },
        "item": {
          "id": "a54d628b-85c5-4b10-8e42-5dcbeb7eea5a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0a935411-6b65-4dec-bd74-d443c9256f23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e74b08-9e4d-41bc-abef-e02bd562f530",
        "cursor": {
          "ref": "7cb38fdf-acf6-4bee-a4b2-e9e25c7cbb3e",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f401c91b-2dd5-4ee2-9705-475b6a3dedbf"
        },
        "item": {
          "id": "33e74b08-9e4d-41bc-abef-e02bd562f530",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5426c9df-52d2-48e9-ab22-18cae593a6c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a84e9aff-5bb8-4788-a85d-383c305036ac",
        "cursor": {
          "ref": "719dce8a-6103-42c5-b9a8-e4129b27d24f",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "06fbf918-f7b7-4e63-ac60-5e4fc69b7279"
        },
        "item": {
          "id": "a84e9aff-5bb8-4788-a85d-383c305036ac",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "51e44ce6-02b7-4bf7-a3e9-49dd61d00f03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c9dac3-54d7-4ef6-b4f5-e68f7a74ba57",
        "cursor": {
          "ref": "9a9feda4-0587-46e9-b955-6cddc24067a6",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b1bf74b3-94db-4186-bf0d-29c46e288f6e"
        },
        "item": {
          "id": "90c9dac3-54d7-4ef6-b4f5-e68f7a74ba57",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "8d14838c-baee-41f1-a63d-a0f6a79b53a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce3ac6a6-dc4d-439c-8350-332261371458",
        "cursor": {
          "ref": "a6f4d582-74f0-4377-9db6-22791a432303",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "47dcff27-8a80-4232-a0b0-9e35a6770c63"
        },
        "item": {
          "id": "ce3ac6a6-dc4d-439c-8350-332261371458",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c7561a5b-af17-4203-b35a-df68b078ebd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1db2aad-6847-48e4-83fb-2c1e11e20041",
        "cursor": {
          "ref": "0774fd99-0553-4447-a315-0ca545baa527",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c1657e4e-608c-40ca-a075-712910d6b68b"
        },
        "item": {
          "id": "d1db2aad-6847-48e4-83fb-2c1e11e20041",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a8bd9b34-81f5-4ff1-b330-5ae4fef0a127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eeed6ef-5991-46c7-abc6-0a80a5882feb",
        "cursor": {
          "ref": "61f85d4f-9143-416a-8b57-a02fddb1ebfe",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0e34bdfd-eaea-4518-9f59-0be3e6c1434d"
        },
        "item": {
          "id": "7eeed6ef-5991-46c7-abc6-0a80a5882feb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "426f54dd-2b14-492e-91b2-7b7fa1d9e526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c228f267-f18d-444a-8465-6007639849b6",
        "cursor": {
          "ref": "5e6b02c5-69da-4e4d-a919-33c84b841ac7",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "0275cd76-9de0-4c89-a347-a1924ca639af"
        },
        "item": {
          "id": "c228f267-f18d-444a-8465-6007639849b6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "30c1e537-717b-494f-bfd4-68c50ebd637d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79765d12-cb5b-4e15-a400-cddf9b436b7f",
        "cursor": {
          "ref": "105c8220-cfd7-4b2a-b05a-3d242f2822bc",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "cf37bcae-58c1-470a-bdf7-55c90f872100"
        },
        "item": {
          "id": "79765d12-cb5b-4e15-a400-cddf9b436b7f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bd730104-133e-4fcd-a769-a7b20be3bc42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9c6c0ee-cb31-4065-b223-82b8369b1f2e",
        "cursor": {
          "ref": "06d33d48-555f-4426-a124-3536b3f45bfa",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "7b656f24-62dd-406e-a26e-419615b361e1"
        },
        "item": {
          "id": "d9c6c0ee-cb31-4065-b223-82b8369b1f2e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c9190815-37a5-4d42-8e5a-008066de76ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "361f2b8f-68c2-4d12-8b26-2bdbfa8ba9af",
        "cursor": {
          "ref": "f172d0c7-e776-4b45-ae5d-e200b0d6aebd",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5f4ca4d5-8ce5-4106-8d6b-33bf09b41b36"
        },
        "item": {
          "id": "361f2b8f-68c2-4d12-8b26-2bdbfa8ba9af",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c3f63c86-de94-4734-8dba-8b01591ee97c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d98b39e2-ba2e-4a6f-8f10-de9fa598de96",
        "cursor": {
          "ref": "b300742e-921d-4df3-8e12-baf53be225f4",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "ebe04c7e-12c3-40e9-9ffd-ee597cfe28f2"
        },
        "item": {
          "id": "d98b39e2-ba2e-4a6f-8f10-de9fa598de96",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "dcbe5b25-5229-41eb-9993-101992f87c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6171b222-7ccb-4732-8873-de111ce77346",
        "cursor": {
          "ref": "2501bac4-a6aa-452f-b5c6-ccf18c8da16a",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "20270bb5-384c-4797-8dc5-29b371e31039"
        },
        "item": {
          "id": "6171b222-7ccb-4732-8873-de111ce77346",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6c978dbc-b101-443d-a1b0-51d8d9189cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f788fce-50a2-40c3-bc06-25f5b632779f",
        "cursor": {
          "ref": "b1424693-08cd-4715-9424-48f00f7181bd",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "75115793-fe40-443a-8f2e-6ef6a990317b"
        },
        "item": {
          "id": "1f788fce-50a2-40c3-bc06-25f5b632779f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "03d651d1-b934-4078-9ab1-eb324576dc2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f20649b0-a7e3-4f0a-ba37-f2aade0962e0",
        "cursor": {
          "ref": "4821d6d0-fd23-4613-b911-04d91efe0c76",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2f78cfc1-1d50-4e81-a1c7-e4ad32cef032"
        },
        "item": {
          "id": "f20649b0-a7e3-4f0a-ba37-f2aade0962e0",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a3ab0beb-6577-4946-9980-51b083a9ccbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "194396ef-26f6-42f4-aeaf-1cd8d0803986",
        "cursor": {
          "ref": "1bcac363-aae8-46a2-b50e-606d824d7b3b",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ffad92a6-6789-4c74-ba12-55816f40dd65"
        },
        "item": {
          "id": "194396ef-26f6-42f4-aeaf-1cd8d0803986",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "614c7b72-a695-4a44-9ce0-79a7defd7538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "099c46d1-f5b3-466d-b94a-c5fe21b848eb",
        "cursor": {
          "ref": "c02e1517-6dfc-434a-8bae-b58c7c0d22c5",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "17c6fd1e-17ee-4f78-9618-1253991206ea"
        },
        "item": {
          "id": "099c46d1-f5b3-466d-b94a-c5fe21b848eb",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5a825ec3-d5cc-4ceb-8034-314d02105832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddfd0f57-7f15-48dd-bf34-45743cda0b17",
        "cursor": {
          "ref": "0c31dba5-6db3-441d-bba3-7b74506c5895",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "05d3e074-7a06-4ea3-a559-7a0db4caea2c"
        },
        "item": {
          "id": "ddfd0f57-7f15-48dd-bf34-45743cda0b17",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "de58f46c-4e98-4bb8-9512-86168f47bd58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf009ed4-bb92-4337-8850-ad2caa82ac6f",
        "cursor": {
          "ref": "3653733d-9be6-44b5-88b4-0ef14d2dd9ff",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b766c0b1-f4d8-47e9-b1e8-f7548540cd06"
        },
        "item": {
          "id": "bf009ed4-bb92-4337-8850-ad2caa82ac6f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "53d88a9c-88a5-46d9-abfb-793874e96b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42fadbc8-e709-427b-b697-1a0a4eb6924f",
        "cursor": {
          "ref": "8440ed08-81fb-4f0a-81a0-b464ba2cbac0",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f32b99c3-aedf-4b53-855e-a31e6e8ab465"
        },
        "item": {
          "id": "42fadbc8-e709-427b-b697-1a0a4eb6924f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f028fd9b-5a52-4b90-9655-a3b99c563fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4534c8d1-4904-4cf3-b2b4-35c15013dad1",
        "cursor": {
          "ref": "008181b6-f6a0-465f-8d7f-aec9d2e004f2",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "24591802-bc97-44db-a7c4-0e45461decb5"
        },
        "item": {
          "id": "4534c8d1-4904-4cf3-b2b4-35c15013dad1",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d38664ed-43e0-4b2c-af11-46aa067bddaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 374,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec7787b-aff8-4508-889c-91966fe06a09",
        "cursor": {
          "ref": "1e4e1d49-aa90-4094-a0e1-0d85088e0672",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b16f1dbb-7b5d-47db-816b-e2db151f1c94"
        },
        "item": {
          "id": "7ec7787b-aff8-4508-889c-91966fe06a09",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ed4300b7-f6eb-4f73-bb9f-04e79702830f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32f2f66-1c14-491c-bd34-ed6e9d5707d6",
        "cursor": {
          "ref": "fee027f8-eea8-41f9-b1d5-2d66a12ebfeb",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c33dc498-7072-4733-ab56-fb590f41f79f"
        },
        "item": {
          "id": "b32f2f66-1c14-491c-bd34-ed6e9d5707d6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "78e232a4-37d8-4b1e-98ee-9e72c0651051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e97537-653d-4908-9c17-218359438c57",
        "cursor": {
          "ref": "624c5f2e-97a3-497b-8dd8-53f5037f4626",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7932248c-c939-4f2a-ac93-17cf1bc30711"
        },
        "item": {
          "id": "17e97537-653d-4908-9c17-218359438c57",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6fdb6354-fbfa-4b60-9155-1954a5327e9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "289d6006-de1d-4ef1-aff4-1fa5b3f8063d",
        "cursor": {
          "ref": "0f5a080a-5c79-4c6a-9b0c-bf99807c16fc",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c70296ac-9b2d-40c8-b729-b307646486de"
        },
        "item": {
          "id": "289d6006-de1d-4ef1-aff4-1fa5b3f8063d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "eafe5baf-0d14-49b3-9ebb-1cc7015487bc",
          "status": "Created",
          "code": 201,
          "responseTime": 668,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "69e4e8b9-cae3-44b0-b111-bd135ef7e9d4",
        "cursor": {
          "ref": "b6bf19b9-44da-4626-ac57-3a37d11145a3",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "1af7c286-69df-466d-95e4-07a9ce60743b"
        },
        "item": {
          "id": "69e4e8b9-cae3-44b0-b111-bd135ef7e9d4",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ef0f2ccf-2af4-4f49-98cd-339dddacb5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee39b596-d4ff-42ce-bc74-bdb7cb819932",
        "cursor": {
          "ref": "2e25ac63-bb45-40f4-a523-a145cd6ec2e3",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b59fa30f-8d31-40ff-aab7-d183c7fae434"
        },
        "item": {
          "id": "ee39b596-d4ff-42ce-bc74-bdb7cb819932",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "345c09d7-c247-4c5c-b2d4-6a52ec38003e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fc44216-4e27-4bdd-9bd4-799354458f45",
        "cursor": {
          "ref": "08c01788-d124-46dc-b718-1fc4bb57ec0b",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3804c64b-439e-4e32-b3f4-3b9518ccabad"
        },
        "item": {
          "id": "5fc44216-4e27-4bdd-9bd4-799354458f45",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "605b3597-a285-4f88-a146-943a7c5bc4db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46daef4f-630c-4035-8dcf-df22be2e8cb4",
        "cursor": {
          "ref": "a758905a-2ff7-426f-b9e9-2848c6b80fcb",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "fc76ce17-a34b-421c-93de-85f5cfb3cbdf"
        },
        "item": {
          "id": "46daef4f-630c-4035-8dcf-df22be2e8cb4",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "91cbbe3c-a9d8-4d2b-8288-97ac29fe00ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d3eb030-44ed-4f90-9be1-7d3483d2d8e6",
        "cursor": {
          "ref": "4298cd85-caff-419c-b717-c9c77dce7f94",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2d13e8d9-fef7-4874-9704-98fdbd24d581"
        },
        "item": {
          "id": "1d3eb030-44ed-4f90-9be1-7d3483d2d8e6",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "1eb33f19-6ec3-4706-99a6-809aedb63896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "560d1e3c-9a58-4b8a-b02d-4524eec7e9a0",
        "cursor": {
          "ref": "e9ab7c82-5571-43c2-ad81-45c6064411e0",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3875bea1-660c-43a7-8775-b116433cdfd6"
        },
        "item": {
          "id": "560d1e3c-9a58-4b8a-b02d-4524eec7e9a0",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "48d77962-1fc5-49dd-8795-717d498545c8",
          "status": "Created",
          "code": 201,
          "responseTime": 674,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "7ad2c330-2c87-4776-b6ab-2c4d1adc6b32",
        "cursor": {
          "ref": "ca288364-3742-4ad8-9147-303255f454c6",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "1976ec44-0208-487c-b88a-b841f0829696"
        },
        "item": {
          "id": "7ad2c330-2c87-4776-b6ab-2c4d1adc6b32",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a80b35de-6a48-4548-a170-786e45579d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d914aec9-1a73-4e9c-a6bc-d04cd0e2b477",
        "cursor": {
          "ref": "53fbfb95-2f8f-4c8e-ba59-669aacaf0acd",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c273df58-ef1c-4f94-ac93-3cff7c15fc4c"
        },
        "item": {
          "id": "d914aec9-1a73-4e9c-a6bc-d04cd0e2b477",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c8e19880-8df7-45f0-b911-5aa14951b3d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80fb2e45-65e3-431c-b92d-ecb2aca33bea",
        "cursor": {
          "ref": "daf71487-b3c7-4166-82c8-ab51f5ea0f28",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f63e5de5-afe9-4c51-89ec-74afef6bf0bb"
        },
        "item": {
          "id": "80fb2e45-65e3-431c-b92d-ecb2aca33bea",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e3e2e046-0569-4a15-9f93-6ea94376506b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f8089b-f3bf-4f9b-b848-1214daf908c5",
        "cursor": {
          "ref": "46c970d9-5288-4fd8-a23f-143587d580e4",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9637e2d2-df87-469e-9605-6f46c8fb7f4a"
        },
        "item": {
          "id": "b3f8089b-f3bf-4f9b-b848-1214daf908c5",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d70c3439-1c17-44d6-b97f-12e754ca890e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8bcb26-24de-43db-bf26-bcbc648531db",
        "cursor": {
          "ref": "91101fb4-1936-4f23-a28d-77ece4ddb434",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f83f64aa-5e87-4f6b-8ca2-1a313ee83eaf"
        },
        "item": {
          "id": "1b8bcb26-24de-43db-bf26-bcbc648531db",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7639d427-ce0a-43d7-bee0-a0ec101bc5f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46273cf7-9dde-4796-ab01-b0eb49ae42bd",
        "cursor": {
          "ref": "d79dd058-e7d4-4fb7-9388-825669599159",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "45db3c14-490e-452b-85fd-c2c92d911701"
        },
        "item": {
          "id": "46273cf7-9dde-4796-ab01-b0eb49ae42bd",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bbf666b6-d2fe-4937-8b7c-ad9ce4e20cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efcf7538-ba96-48d5-a97e-27b542b303db",
        "cursor": {
          "ref": "8e88d0ef-8eae-4bb3-84f2-bcb5f01eaacc",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ab8b8eed-df81-43fc-942a-1f328f371990"
        },
        "item": {
          "id": "efcf7538-ba96-48d5-a97e-27b542b303db",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "8c9db379-d77b-463a-a828-874f9bfda6e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c32193e8-c1df-4571-9146-5e5ffdca6e9a",
        "cursor": {
          "ref": "9c959d56-6542-404d-8525-85bf95eb2f71",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "04206d41-e542-43e0-b516-0ccce09f6d92"
        },
        "item": {
          "id": "c32193e8-c1df-4571-9146-5e5ffdca6e9a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "64c8504e-f913-4d70-a778-324ab8fe1f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fc5ec7a-3dbb-462c-bbe5-b1d062a0acb0",
        "cursor": {
          "ref": "d62f7575-db85-4ad6-af25-41495674879e",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "65628070-fc7a-4c83-b038-2257ca5e81e6"
        },
        "item": {
          "id": "6fc5ec7a-3dbb-462c-bbe5-b1d062a0acb0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c93d9bb8-e3a3-4889-9149-c905948d2eb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "b2f91c5a-57df-4f53-9836-6ebb123bd0cf",
        "cursor": {
          "ref": "31a2a067-829b-4b0b-8dc7-755813ac99d6",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "42911266-394f-40d4-9e39-68db4420f762"
        },
        "item": {
          "id": "b2f91c5a-57df-4f53-9836-6ebb123bd0cf",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "53f3d9e9-7035-4e38-8f32-90507a2668c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "7025fb9b-30eb-458c-b01b-7c9c9742cb78",
        "cursor": {
          "ref": "857c9ac1-787b-4fa9-a619-8675b0467303",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "fab00eeb-30d9-41af-af46-5b90efda91ab"
        },
        "item": {
          "id": "7025fb9b-30eb-458c-b01b-7c9c9742cb78",
          "name": "credentials_issue"
        },
        "response": {
          "id": "443bfee1-4c3f-408a-b413-f47e656c6972",
          "status": "Created",
          "code": 201,
          "responseTime": 637,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a5cb99-2bed-4d19-a9ec-fecab10eae0c",
        "cursor": {
          "ref": "71be7a81-82ce-4c60-974a-e251cc896aa1",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "647136f7-f31b-4897-bc62-dfdb7bf0c7a7"
        },
        "item": {
          "id": "d1a5cb99-2bed-4d19-a9ec-fecab10eae0c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9abf0474-08e3-4165-8569-c72682a843a7",
          "status": "Created",
          "code": 201,
          "responseTime": 683,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b6d63c-bf9a-4b53-9cea-ed2763ed1f6c",
        "cursor": {
          "ref": "d12576fa-cc79-4952-abd8-f52ea123f117",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "aa0ed7d9-ea71-4a81-9722-184e813779ea"
        },
        "item": {
          "id": "95b6d63c-bf9a-4b53-9cea-ed2763ed1f6c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "2f2d75c8-24b4-489a-82f3-f3e4805c7c0b",
          "status": "Created",
          "code": 201,
          "responseTime": 643,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76d65fd-c178-43c6-86f2-3ed43988e4ee",
        "cursor": {
          "ref": "ba5a5941-0d67-4731-8f29-ec22c2098e81",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c0691f44-3283-4a8d-bd5e-9a500677a786"
        },
        "item": {
          "id": "c76d65fd-c178-43c6-86f2-3ed43988e4ee",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "823c9373-470e-40b9-8469-20d298bcf58c",
          "status": "Created",
          "code": 201,
          "responseTime": 661,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e15607-5e52-49d8-b28d-ee9cb3a4e928",
        "cursor": {
          "ref": "b890b6a8-0b26-4049-96e5-e23b6e228f70",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "375214c6-22a2-40a8-a373-3cb12dc8704a"
        },
        "item": {
          "id": "78e15607-5e52-49d8-b28d-ee9cb3a4e928",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "25cc61dd-5023-4d39-b3cb-864b56eb529c",
          "status": "Created",
          "code": 201,
          "responseTime": 652,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9a265cb-50b1-4732-88fb-34fe19122ca3",
        "cursor": {
          "ref": "fe7faf60-b91f-47ea-b301-e74a13224bb0",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9bb63a04-4c94-48da-8c42-f3c0a9315973"
        },
        "item": {
          "id": "c9a265cb-50b1-4732-88fb-34fe19122ca3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8e484a61-6fb5-4442-9be8-a4a95bf068bc",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "c9a265cb-50b1-4732-88fb-34fe19122ca3",
        "cursor": {
          "ref": "fe7faf60-b91f-47ea-b301-e74a13224bb0",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9bb63a04-4c94-48da-8c42-f3c0a9315973"
        },
        "item": {
          "id": "c9a265cb-50b1-4732-88fb-34fe19122ca3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8e484a61-6fb5-4442-9be8-a4a95bf068bc",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "2e67053e-088b-4dfe-836a-3347c8a30210",
        "cursor": {
          "ref": "44302c53-6eb1-4c24-a374-e0322e0b94b0",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "88dc626c-1493-4a0b-a4e5-110e930eb95f"
        },
        "item": {
          "id": "2e67053e-088b-4dfe-836a-3347c8a30210",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "36d23c7b-efca-4c35-9c83-7b7381a4cc1e",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "c1f2ace5-3e4f-4d4d-a87c-360fa613cf73",
        "cursor": {
          "ref": "77e6d2de-ec5f-4786-9401-ad7c8da07428",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2e84aa8a-5559-40d9-b30d-2d6be6d81951"
        },
        "item": {
          "id": "c1f2ace5-3e4f-4d4d-a87c-360fa613cf73",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8d6d9e09-29ff-40eb-85d8-995786fdfc8b",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "8614b0dc-35c8-4c51-9b85-2e0a30f0864b",
        "cursor": {
          "ref": "8e0da1e9-200f-432f-9ea9-6c9534ef1232",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8c61449e-b01c-4c4a-a846-40d62e8ddb48"
        },
        "item": {
          "id": "8614b0dc-35c8-4c51-9b85-2e0a30f0864b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1dee62d8-318d-451f-b81d-5b96a3810064",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "ec83ca1f-e238-436b-9ad6-bceaf6255cc3",
        "cursor": {
          "ref": "566be1a9-7a0d-4367-b737-aa0f3eb54fae",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3d988d7e-8aa6-4107-bbd8-92ea230b8c8e"
        },
        "item": {
          "id": "ec83ca1f-e238-436b-9ad6-bceaf6255cc3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6ed2dec3-0977-4dfa-990e-41b829521bd2",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "96d0af55-bcdb-4d32-83b6-a2ba51292892",
        "cursor": {
          "ref": "8cb71854-958e-45c5-875e-17e696bab526",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6defe685-169e-4bee-b4b5-36b7da3ab593"
        },
        "item": {
          "id": "96d0af55-bcdb-4d32-83b6-a2ba51292892",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a65998dc-a36f-44a6-aa13-ab587e8ebb81",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "9307af85-179f-46f7-ab22-ed4fadad0bd7",
        "cursor": {
          "ref": "efd46b9f-c896-46ac-931f-f3eb53315739",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0e165bb7-2f05-4bdd-b07f-94d63f271522"
        },
        "item": {
          "id": "9307af85-179f-46f7-ab22-ed4fadad0bd7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "18bd1fbf-7a29-430f-8bbb-94bece69571f",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "3bb4cb30-525f-4c16-aca3-bd2d519e02a1",
        "cursor": {
          "ref": "1756b1c4-41ef-4713-b120-c08b2184e2b5",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "960f20b3-1e43-4a26-a2e5-59be6632d321"
        },
        "item": {
          "id": "3bb4cb30-525f-4c16-aca3-bd2d519e02a1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "71d60a45-036a-43c9-98b5-7f6a95e91a53",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "73d08476-8923-457d-8800-474fb18ad1b7",
        "cursor": {
          "ref": "071ced68-b385-4155-823e-ebb02326c47c",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ce87d1a6-485d-481f-adb6-f302b18f90ba"
        },
        "item": {
          "id": "73d08476-8923-457d-8800-474fb18ad1b7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "75fad9f2-409d-4d06-b56b-956ffc210db1",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "cb49b6a4-6b7b-469f-806f-eb116411e28b",
        "cursor": {
          "ref": "793c6e16-22cd-4c24-91f5-e814881a6dec",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1b6107d1-f2e9-47fc-99f7-17ba37d68ca1"
        },
        "item": {
          "id": "cb49b6a4-6b7b-469f-806f-eb116411e28b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3ab7e8eb-cced-4417-84be-054b17084bee",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "7403c2d4-6f05-4c72-9833-621513a7e915",
        "cursor": {
          "ref": "d5dfb905-d7ae-4f07-ac43-0347a19917a6",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "818005a2-a86b-4cac-aabf-a1f45554032d"
        },
        "item": {
          "id": "7403c2d4-6f05-4c72-9833-621513a7e915",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ea4e0f93-37f6-430f-b008-8d6b92b781bf",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "5ac23069-e360-4227-b81a-669238941797",
        "cursor": {
          "ref": "f03022f3-609c-420d-b815-8a6a213ce3d5",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d6e3efe7-a9d4-4576-a7e4-42eeb6a90ca4"
        },
        "item": {
          "id": "5ac23069-e360-4227-b81a-669238941797",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b4cb3c6b-86e0-40a1-a93f-bdef0f39a3d5",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "9deeca37-323d-4938-a7d0-a5ad1a2ca26f",
        "cursor": {
          "ref": "6b3bfbf4-eaf7-47ff-8028-9284856ea4e0",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c5898244-fe26-41ac-b079-26f2f3fe3ba8"
        },
        "item": {
          "id": "9deeca37-323d-4938-a7d0-a5ad1a2ca26f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1924e393-17c1-41d5-bd8c-c45ba6fd1be1",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "2d55781f-7ae1-45f1-a897-9c3ecd60ee0a",
        "cursor": {
          "ref": "b8ddf61b-ff7a-4913-95d6-0eba9fe960dc",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d5e15fbd-8227-4ca2-963b-59dd73759ab9"
        },
        "item": {
          "id": "2d55781f-7ae1-45f1-a897-9c3ecd60ee0a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "62b3ee9d-0ffd-403b-9c69-276efe98cdd2",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "c7600e0a-de72-4570-aea3-7280b1b8e869",
        "cursor": {
          "ref": "adb0f69a-3ccf-49e0-b971-90ae4780a645",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3ce50288-14fd-4727-995f-d458666fc32e"
        },
        "item": {
          "id": "c7600e0a-de72-4570-aea3-7280b1b8e869",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2fc3a384-90dc-4772-93ee-1ea54f9a4c5f",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "b97ee6a3-ac98-4189-bc82-d9d36d9059c6",
        "cursor": {
          "ref": "6422eb35-ef59-437d-91cf-7ef2b57745ad",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b4fbc10a-aab6-4456-974e-0fbda3234714"
        },
        "item": {
          "id": "b97ee6a3-ac98-4189-bc82-d9d36d9059c6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4b3499d6-fbce-4ef4-9cef-bec3cf5fa9a6",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "8fa17256-60f9-47fe-b05f-9eb6d09b2a89",
        "cursor": {
          "ref": "820d64bd-0b12-46c8-8c8d-f7de87a42bef",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8c3236e2-ab28-4662-9733-ca215df564e4"
        },
        "item": {
          "id": "8fa17256-60f9-47fe-b05f-9eb6d09b2a89",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "22b91ad8-5710-491c-b55c-0e67e3c7e78a",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "8f7ede40-e3cd-4f78-bc93-b8baed6807ae",
        "cursor": {
          "ref": "f3fb85b1-e703-4213-ac9d-666e60ef9fc0",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "fe82d553-5f6e-4f99-8ce8-e54a4dbbb0bb"
        },
        "item": {
          "id": "8f7ede40-e3cd-4f78-bc93-b8baed6807ae",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "95f619a9-d1ae-45e1-a659-5f9beff99cc1",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "051ad867-cafc-4045-9380-921c3ad96048",
        "cursor": {
          "ref": "a2874ed5-1d99-4679-aac2-6307fe6164b5",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6f72b917-10cc-4c58-afea-cf00f6e25cc8"
        },
        "item": {
          "id": "051ad867-cafc-4045-9380-921c3ad96048",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d87bd4e7-7092-435f-a4d2-59da18abfa81",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "7346cd2c-acef-4731-92de-369b56c5d211",
        "cursor": {
          "ref": "9545dd9c-5b60-4115-9986-9c22fa26c6ff",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "10d65352-1246-4829-a485-f5d5444f5ff5"
        },
        "item": {
          "id": "7346cd2c-acef-4731-92de-369b56c5d211",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c8131a47-9a6e-453d-ac88-c98fb2c1378d",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "a34e8e7b-85e1-4a20-9544-51b9fe31607d",
        "cursor": {
          "ref": "8c42b199-bac8-4584-8142-efcb21809919",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "dd794e06-fda9-454b-9958-0319a0c5a12c"
        },
        "item": {
          "id": "a34e8e7b-85e1-4a20-9544-51b9fe31607d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "44f4c153-4ed3-41b8-b5ed-010a69998960",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "90da74f0-ac82-48c7-9ee6-a2c01fbb5454",
        "cursor": {
          "ref": "bfebd658-5f53-444d-8845-50e08e4d805e",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "958bba9f-4fa3-48b9-b0dd-7ff86f09cee4"
        },
        "item": {
          "id": "90da74f0-ac82-48c7-9ee6-a2c01fbb5454",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e8b218da-360c-4b9e-a994-e2d6024baeb3",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "988d884b-945f-4b81-82cb-ca72dc482d75",
        "cursor": {
          "ref": "ad4975cb-a419-4373-afff-ecd621d5947a",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "90bc7945-9bf0-4134-aaba-6e96ddc6f30c"
        },
        "item": {
          "id": "988d884b-945f-4b81-82cb-ca72dc482d75",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b6f552f6-fdeb-4535-b5e8-510dc01a89a0",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "2930a229-9e9c-4624-bbd1-44c16358ddf3",
        "cursor": {
          "ref": "95dd6913-c0dc-4c7d-bf04-9e2017da0fce",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7a54ccca-d8dd-4cf4-9c78-fac91e0e09ad"
        },
        "item": {
          "id": "2930a229-9e9c-4624-bbd1-44c16358ddf3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bb20e6fa-8531-4493-b82a-2d168d3832fd",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "829d0707-37c6-4009-9c14-755f04d7747e",
        "cursor": {
          "ref": "e1f34767-59a1-4f58-bcdf-5f4d916a414e",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ba00fd3d-0f9b-42ce-a1d0-a50051ebf738"
        },
        "item": {
          "id": "829d0707-37c6-4009-9c14-755f04d7747e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3d014793-10ee-46a3-a074-6041a6a42e04",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "5b764650-1869-421c-9d55-b963b7a92475",
        "cursor": {
          "ref": "2cc9fb80-4f57-4538-855d-68d5d7358103",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fd7c81de-1628-4c92-8caa-e506e025bce6"
        },
        "item": {
          "id": "5b764650-1869-421c-9d55-b963b7a92475",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c47e46fa-b5db-41f8-9ed6-53eb379a6d0f",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "37608743-5e77-4474-b307-5f7e4b9f9965",
        "cursor": {
          "ref": "6f1d4503-62b6-4557-8e22-4624599dc7d8",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "acca6a4c-f38f-4ac8-9bd4-03ed3adb5e80"
        },
        "item": {
          "id": "37608743-5e77-4474-b307-5f7e4b9f9965",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3f6a95d5-3140-4eb7-a0ab-a2658c8eb929",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "5bebbd21-ab5d-4de2-843b-5ff6f525501e",
        "cursor": {
          "ref": "982980a0-c1a2-4f59-8819-808289a82ac3",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f8615a44-d25e-4db7-8e19-9cb9afd24f60"
        },
        "item": {
          "id": "5bebbd21-ab5d-4de2-843b-5ff6f525501e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c3d85a6d-f664-4c70-8d69-0336160bbbca",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "ef382667-50e6-4292-9f63-587c95adb12a",
        "cursor": {
          "ref": "14631bfc-cbc3-4ac2-9c9e-2c5850a4cfea",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e8f17d92-0e51-4fb0-be25-50ca65d68419"
        },
        "item": {
          "id": "ef382667-50e6-4292-9f63-587c95adb12a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "994241de-d583-47e2-af29-ceec8158fec6",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "76a3d542-3e93-4cd2-baf5-27d13887e034",
        "cursor": {
          "ref": "747b32da-dbd4-4254-99ef-066d7297ff1e",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "861832c0-0e97-47cc-a861-a85773ef6141"
        },
        "item": {
          "id": "76a3d542-3e93-4cd2-baf5-27d13887e034",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4231dced-eaf8-4bf1-ae17-d7721585eec2",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "9a14c96d-8d4c-4661-bd17-7e6ede4b00a6",
        "cursor": {
          "ref": "15a8102c-c443-420b-9d27-b5b9b9936158",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0b44ec87-34d9-4cc5-9710-d4616fcbb89d"
        },
        "item": {
          "id": "9a14c96d-8d4c-4661-bd17-7e6ede4b00a6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e502f82d-7b38-4857-8a8c-3e5f2101c7e4",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "15c645aa-e4db-4157-9797-7b9b10740167",
        "cursor": {
          "ref": "54e643fe-fde5-469d-b510-8fdfbe237b41",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a8a44f65-ea04-4d6d-b8a9-254445c60fc0"
        },
        "item": {
          "id": "15c645aa-e4db-4157-9797-7b9b10740167",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6e9344f1-d21b-44fd-87b0-8323c108786d",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "cb754890-071a-4573-9b5c-ba3d19b879d0",
        "cursor": {
          "ref": "db0f2e8f-f941-4ee2-9bb2-9800af1d82d9",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a133a2d2-9e95-4def-981d-b90f650ad82a"
        },
        "item": {
          "id": "cb754890-071a-4573-9b5c-ba3d19b879d0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4cfadf0a-3006-4458-a552-ed02076dfb7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3f8fdc2-c4cf-436d-8964-61748455f39d",
        "cursor": {
          "ref": "06ea0029-8086-4110-b135-88ae26e93602",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9b807f21-5670-4614-b622-0767c1614f41"
        },
        "item": {
          "id": "d3f8fdc2-c4cf-436d-8964-61748455f39d",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "67a4c1ae-3137-4c3c-856d-dd09c48faab8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f67a775b-610f-4f7c-9ecf-aafdc4fdceca",
        "cursor": {
          "ref": "064db4a6-8961-4d61-9d7e-6c53f876e4a4",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "92cae247-1701-46f8-a9c8-d91313a79e9e"
        },
        "item": {
          "id": "f67a775b-610f-4f7c-9ecf-aafdc4fdceca",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d3415de9-b760-4e0d-880b-995712548d1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f67a775b-610f-4f7c-9ecf-aafdc4fdceca",
        "cursor": {
          "ref": "064db4a6-8961-4d61-9d7e-6c53f876e4a4",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "92cae247-1701-46f8-a9c8-d91313a79e9e"
        },
        "item": {
          "id": "f67a775b-610f-4f7c-9ecf-aafdc4fdceca",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d3415de9-b760-4e0d-880b-995712548d1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867da8ec-f8e2-4eaf-9de0-8f37d24196b7",
        "cursor": {
          "ref": "3d2cc6a8-74d1-457f-aea7-10060c9e6bb4",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "705445d3-3d85-488f-b01f-9d4631700f9c"
        },
        "item": {
          "id": "867da8ec-f8e2-4eaf-9de0-8f37d24196b7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e5f348a7-7330-4ea2-90ef-271839f95039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b58db052-dd2a-46af-80df-81f67905bb2a",
        "cursor": {
          "ref": "d4fddbc4-cbe2-40d4-a612-9b5f7fd43990",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b36a6d2e-d98c-4ebc-afdd-80edf1b3effb"
        },
        "item": {
          "id": "b58db052-dd2a-46af-80df-81f67905bb2a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "649b04d4-1a49-4b8b-a2b9-85e3b35f24a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a14686-dea6-4d89-8a12-a6df9721f4c8",
        "cursor": {
          "ref": "25e2437d-4200-48c1-9005-92c77c7ad146",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4e8bf877-5077-4948-802c-33c43c4bec74"
        },
        "item": {
          "id": "e4a14686-dea6-4d89-8a12-a6df9721f4c8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "44bfd7ce-bab0-4b95-8cab-80ac04c3e7f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34fefc6-fc92-4f07-ab78-e88a17c643a2",
        "cursor": {
          "ref": "315ee7db-f5bf-4998-95d9-01a01095f9ef",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9ed61f6c-14e3-48bd-89df-50d6997f55f5"
        },
        "item": {
          "id": "e34fefc6-fc92-4f07-ab78-e88a17c643a2",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "23dd5db4-403b-4c0e-82d0-7b7b3b78cd6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ba0f3f-d06b-429f-b442-840079f24801",
        "cursor": {
          "ref": "39400888-f8b7-412a-bc34-8fdb09c60917",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7ff922be-feec-4cee-9bae-00f8b4ed0eed"
        },
        "item": {
          "id": "53ba0f3f-d06b-429f-b442-840079f24801",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a0407924-e51b-41fb-b243-459733e92e23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "364fd024-afa9-4c30-9f4a-719a4a4551d9",
        "cursor": {
          "ref": "0483fd63-ac97-4641-aeed-4c195bed12d2",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a42f8e89-f7fa-4280-a954-5f76a62db391"
        },
        "item": {
          "id": "364fd024-afa9-4c30-9f4a-719a4a4551d9",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a28f167f-d4b8-473f-ac1f-721d199717bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a632a2-cfd1-4f0c-84e6-503283a75d90",
        "cursor": {
          "ref": "9748e56e-ea87-4080-b16b-712fc92e700d",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "3f6bd3b0-1b24-44e1-997f-6c748543db43"
        },
        "item": {
          "id": "96a632a2-cfd1-4f0c-84e6-503283a75d90",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "868153bc-dfa2-434f-b82f-9bd5f7681353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e14bca-932a-4172-862c-2527900310d6",
        "cursor": {
          "ref": "3fab4f56-d201-408a-8fbd-f4e140a2e5e0",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "41cb3551-9c53-494b-a2f8-f70011d59696"
        },
        "item": {
          "id": "62e14bca-932a-4172-862c-2527900310d6",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "38513a65-5b7d-4682-9f90-42c884d4eb32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83cd73b9-6691-451d-9606-26993b2d7548",
        "cursor": {
          "ref": "ac3d2b3e-9a59-4400-a44e-728b21788695",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0468f064-5969-490d-9383-f2616e174843"
        },
        "item": {
          "id": "83cd73b9-6691-451d-9606-26993b2d7548",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ff0a4025-1d53-4341-9d32-818aa849bbf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "974f9377-ecf1-4659-add3-b67f88b88411",
        "cursor": {
          "ref": "fec06b9a-f4dc-46c7-bdc9-b0a5024d07f6",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "2b8fd581-b2eb-477a-8530-93c82f1eef00"
        },
        "item": {
          "id": "974f9377-ecf1-4659-add3-b67f88b88411",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a596cd83-c623-45f4-8da4-35fac015e59b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb606ab-a417-4937-bc67-4efc41ed57dd",
        "cursor": {
          "ref": "194d1792-2a8d-4b13-9e56-9a35ea4a2847",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4b8ed8cf-2cb7-4cac-8a46-5ee4b1905513"
        },
        "item": {
          "id": "dbb606ab-a417-4937-bc67-4efc41ed57dd",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "74b33ae0-1cc1-4e81-a5a7-5e42fccd8210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cf3c681-0924-4456-932c-b5ba78f1ab88",
        "cursor": {
          "ref": "d694b682-b163-487b-8b19-c20e0a080b36",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "576b501a-8adf-4352-a14e-ec34475d7e62"
        },
        "item": {
          "id": "0cf3c681-0924-4456-932c-b5ba78f1ab88",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "3c21884d-7e7d-466f-aa31-37bf6b819867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e3232f-ecdc-46d0-b1a0-6e4f3e32d2b2",
        "cursor": {
          "ref": "1d4408a9-492a-468b-9024-9ace238aed8e",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "617c8f54-b0ba-45d1-b916-d11c4649e6fb"
        },
        "item": {
          "id": "18e3232f-ecdc-46d0-b1a0-6e4f3e32d2b2",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0356dac8-d4e2-4a78-a55b-1fbbbcc0e638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "837724b9-c653-4e4f-9465-8df081a2f66b",
        "cursor": {
          "ref": "4d398e68-845b-4ae9-9a33-ebbdb59b26c0",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ed1a35fd-8481-4bf5-ad8f-19837c015d1b"
        },
        "item": {
          "id": "837724b9-c653-4e4f-9465-8df081a2f66b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "865b79e4-5b9a-4b65-ab38-4d955b63d3c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7520f3-8b87-4183-a673-302dcf0ed2a5",
        "cursor": {
          "ref": "9404f493-6649-4139-9a60-68dfe7156d8e",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "aa79a1a3-77b4-45a4-8ffe-acde30f417bf"
        },
        "item": {
          "id": "8a7520f3-8b87-4183-a673-302dcf0ed2a5",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f8a7133c-8e33-4d50-a6c7-c2c23e1e00ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25cbee8f-3a9b-44fb-8546-d4c2769a50cb",
        "cursor": {
          "ref": "c9206127-9090-4d48-8248-af9c35cfbae7",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "39c001d1-eefe-41cd-b0ea-f58993a680d7"
        },
        "item": {
          "id": "25cbee8f-3a9b-44fb-8546-d4c2769a50cb",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a7d51f03-fb50-4c78-82f4-542c61212381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4537da4a-9c5d-4358-bfc4-87fdabbc7621",
        "cursor": {
          "ref": "d4443b79-440b-4a59-bc14-575a46e317cb",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c59bef1c-eb50-41ba-89a4-e0c9e56cb4f2"
        },
        "item": {
          "id": "4537da4a-9c5d-4358-bfc4-87fdabbc7621",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "759270ac-1a20-422c-a15f-bb5725ab7c21",
          "status": "OK",
          "code": 200,
          "responseTime": 631,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "73937f59-202e-4f69-b7b5-a5e74e21554a",
        "cursor": {
          "ref": "74137f3d-c51b-4eeb-baa9-546234864e72",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e818cdfa-d590-40df-ae03-5890765cb260"
        },
        "item": {
          "id": "73937f59-202e-4f69-b7b5-a5e74e21554a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "93715eba-0ba5-45aa-a046-1d073d2174b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 311,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e12481aa-8a74-4fa2-974b-137a7fbdc2e2",
        "cursor": {
          "ref": "365237cb-cbc4-4363-b74f-20aa20729ec1",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "447be8d2-80d7-4d0b-8ff1-48578d68d05b"
        },
        "item": {
          "id": "e12481aa-8a74-4fa2-974b-137a7fbdc2e2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ef70a22f-1c10-4c3a-b7e1-41449f57223e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 463,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a3aaafe-cec3-4599-8b2c-e07bd1c79f1d",
        "cursor": {
          "ref": "4b8f1747-04b1-4623-a35f-497b422b75f2",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "76d9fc12-01a2-4a9d-9067-ec7bf8e6ebbd"
        },
        "item": {
          "id": "1a3aaafe-cec3-4599-8b2c-e07bd1c79f1d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "26ab91a1-c21f-4424-8cde-958ea551e24a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e58f69-6f80-460e-a9e7-9c39da604df6",
        "cursor": {
          "ref": "eaafa38e-3faa-494f-ad15-8fcd68298fdf",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "14a6f7a4-193e-4892-9401-bd32035d1769"
        },
        "item": {
          "id": "42e58f69-6f80-460e-a9e7-9c39da604df6",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "04011606-b9e6-4538-9160-e7bf5e28de8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "334431fb-25d3-4611-89ad-e5f7e1ea4f0d",
        "cursor": {
          "ref": "1b55b498-3ace-4069-97a3-293ef004c85a",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ae0ab04a-6aba-417f-ad0d-675cab8528ce"
        },
        "item": {
          "id": "334431fb-25d3-4611-89ad-e5f7e1ea4f0d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "65d01239-ce05-4075-942a-8e3cf9c8832f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73ef7ae-161f-45d5-b73d-f3903b875824",
        "cursor": {
          "ref": "33222a1d-13d6-4a2a-bb8f-6b5ff1b00ad8",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "feed840c-b93a-46ce-bf65-a5853b1450ca"
        },
        "item": {
          "id": "e73ef7ae-161f-45d5-b73d-f3903b875824",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "fe4e6768-a71f-4394-939e-c95b1b68b0c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94ae1b5-6d8a-4cc9-b4a9-b2c86eea33da",
        "cursor": {
          "ref": "437e6faf-5ad2-43bc-8641-caa1b654c73c",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f0196a7d-b3db-418e-917d-e19ce6160852"
        },
        "item": {
          "id": "e94ae1b5-6d8a-4cc9-b4a9-b2c86eea33da",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "61c71b86-878b-4598-97a4-f34c49296ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c0dffd-9ecf-4e04-9c47-83612761d4e8",
        "cursor": {
          "ref": "9cc2219f-3df5-4503-9fd4-a5e995590fcd",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f9d4d029-0778-4a6c-bc6e-e5f87fc42e7f"
        },
        "item": {
          "id": "81c0dffd-9ecf-4e04-9c47-83612761d4e8",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "022dc887-e15c-4eee-bcb7-fb45fdf092ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8791845a-895d-452d-8677-876655bd4582",
        "cursor": {
          "ref": "19c67580-36fa-4a66-a56f-e8dea503f0a8",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b87d2713-5fe3-45ac-a963-cf564ec28c95"
        },
        "item": {
          "id": "8791845a-895d-452d-8677-876655bd4582",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1870ea9b-c64a-4b5d-bbcb-f4229964925a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "935ab070-3016-4e45-ad78-56fa7d0945b5",
        "cursor": {
          "ref": "11ab799c-8694-45bb-9dda-64848d9c1f07",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "09d13730-c3f2-448c-a712-706228ca7d5c"
        },
        "item": {
          "id": "935ab070-3016-4e45-ad78-56fa7d0945b5",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8a2ed029-1349-49d5-b38c-9841f95339d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef1d405-2103-4a45-864f-6f9986799473",
        "cursor": {
          "ref": "56b418cd-32af-40ac-a750-9713e7ce5e2a",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "6bd59bcc-60f7-4474-a811-4010e36131a6"
        },
        "item": {
          "id": "eef1d405-2103-4a45-864f-6f9986799473",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8c80355c-8096-40f9-a786-a840bb9a16bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32790ec2-9c5e-4087-8c02-f16f9927c611",
        "cursor": {
          "ref": "c9f023f1-abb4-42ef-909c-55d0d9461d12",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "152bc41c-6bb4-44a5-a62a-a90955f48aa3"
        },
        "item": {
          "id": "32790ec2-9c5e-4087-8c02-f16f9927c611",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c137f508-8310-4e3b-900d-f98766a0a664",
          "status": "OK",
          "code": 200,
          "responseTime": 301,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "08f6bc0d-28cc-4b9a-9a8c-2d7e2b2fb3f5",
        "cursor": {
          "ref": "9168ee4d-2b00-4100-b650-46ac1473e9d2",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "241dab12-59b5-42f6-b852-43ae1a8eaf01"
        },
        "item": {
          "id": "08f6bc0d-28cc-4b9a-9a8c-2d7e2b2fb3f5",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7a881365-e55a-43b2-8505-fde65eafefd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f057bfeb-f2e8-4ecb-8b15-541ff4e99cd2",
        "cursor": {
          "ref": "2db11d11-83d2-4839-9d7d-de9e07770717",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f6b32990-c4a1-485f-bd3f-58029dfadebe"
        },
        "item": {
          "id": "f057bfeb-f2e8-4ecb-8b15-541ff4e99cd2",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "656403a3-ab03-4e7a-acf9-1c5dda30ea55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a63dd3e-10fe-4385-8cf6-7df6383c41ad",
        "cursor": {
          "ref": "d0a545e5-6013-4fdc-9077-43f5170b1c31",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "af994015-09d9-4484-b278-0d4cde40b2e7"
        },
        "item": {
          "id": "1a63dd3e-10fe-4385-8cf6-7df6383c41ad",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2cc9f398-7a29-4696-ba00-177ad7f7b050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da0dded-33c0-4e18-be29-e9df4105a36f",
        "cursor": {
          "ref": "7c642192-2c41-4fb1-8979-3720bb3810b2",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "917d838f-240c-483f-bba0-350442a5ab41"
        },
        "item": {
          "id": "5da0dded-33c0-4e18-be29-e9df4105a36f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "844cb89e-0de8-45f1-a6b9-e3a8279b6c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ef805d-c5bc-4165-872e-b6de223ddc98",
        "cursor": {
          "ref": "a8825bb1-48b7-4087-841b-46dcf5baec76",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e8b6302f-49f9-4c36-9117-b424694c7f1d"
        },
        "item": {
          "id": "36ef805d-c5bc-4165-872e-b6de223ddc98",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0b06dbd1-b033-442f-9936-78d28a246d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ceb3ad8-de06-4216-bbbe-e33f8ff7885c",
        "cursor": {
          "ref": "0c7e0a36-3616-4ba6-b4b5-ceea1d82a7bc",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "14e03a1c-d589-47eb-a99c-24ee91ec9fe9"
        },
        "item": {
          "id": "7ceb3ad8-de06-4216-bbbe-e33f8ff7885c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "482017c9-0b25-4c18-93bc-92f46b25d902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac1e82fe-d62c-46e1-be49-246912010131",
        "cursor": {
          "ref": "f8483051-d047-425b-a582-3f3638b03fb0",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5b2e103b-6729-4913-a5ce-16f009c26c81"
        },
        "item": {
          "id": "ac1e82fe-d62c-46e1-be49-246912010131",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "97495677-f812-44a1-8efd-a1d5acc12141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065735ce-07e3-40e4-a7b8-72ffeb9aff39",
        "cursor": {
          "ref": "716978bd-20e2-45d9-a4b6-af35976d3e03",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "8188cf1c-9e35-4f79-b840-15ca014f29c3"
        },
        "item": {
          "id": "065735ce-07e3-40e4-a7b8-72ffeb9aff39",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d171b5c8-3ee7-4dd3-b1e2-d4a44b7aba43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 397,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b5627c6-9652-47ca-8f0f-efa86b0bbfa4",
        "cursor": {
          "ref": "f62d689d-233c-48d7-9914-300f4e36bc37",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "46d54d76-1490-43be-a88c-9983aca75867"
        },
        "item": {
          "id": "2b5627c6-9652-47ca-8f0f-efa86b0bbfa4",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d63298d6-c59e-4c75-a725-eb3ceef1264f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 307,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ca7b97-d5af-4399-aaa4-55f57f9df674",
        "cursor": {
          "ref": "9cd967aa-2fa6-4227-9155-7d75fea1ec09",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a6d853f9-c744-4354-86cb-6943aa7ca3d9"
        },
        "item": {
          "id": "66ca7b97-d5af-4399-aaa4-55f57f9df674",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "481aa8b0-b040-401c-a3bc-130524d02a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 441,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc0184f-6c52-4913-b554-f96ea8eef943",
        "cursor": {
          "ref": "961572fd-684c-404c-84f5-7f9539ff7874",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e46b663f-750a-48c2-be19-4ae88f5d2320"
        },
        "item": {
          "id": "ecc0184f-6c52-4913-b554-f96ea8eef943",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e5ab8f15-e256-4b7c-b9e2-0a8c67698b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 286,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c721e1-5807-4ec7-9720-457928cd08b9",
        "cursor": {
          "ref": "042a4bda-3ee0-4f4b-b331-242f303e73d0",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e2fd181f-cd9a-4316-b44c-aa629ae8513c"
        },
        "item": {
          "id": "b7c721e1-5807-4ec7-9720-457928cd08b9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ad0d3709-5994-4cfa-8e17-a84fb278713b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dde661f-8cb6-4491-8508-498af8766ecd",
        "cursor": {
          "ref": "ccdb5070-b63d-45b3-9081-78463415fec2",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "73949fd0-a557-4c4c-8988-4a8aa577f953"
        },
        "item": {
          "id": "4dde661f-8cb6-4491-8508-498af8766ecd",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "25e1ccad-148f-4c1c-b2ae-36f4272c74dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e921a1b-e4be-41eb-9d9b-35b610f014e7",
        "cursor": {
          "ref": "3f416725-105c-4dec-ad80-c2a27f47074f",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "03616bc0-8450-4279-b850-a0aef4aad3c1"
        },
        "item": {
          "id": "0e921a1b-e4be-41eb-9d9b-35b610f014e7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "edd3b98b-40c2-4665-99e6-1e31372d24cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89db91c0-4c5e-4304-8676-6614cbab3d10",
        "cursor": {
          "ref": "e91677be-6aae-4f7d-b25b-4df762633d43",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "68de8b4e-bc58-4dab-a85a-b9c0e2dfcf97"
        },
        "item": {
          "id": "89db91c0-4c5e-4304-8676-6614cbab3d10",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3db57a29-b766-4b62-acfc-fc08752975eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 286,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f9cf4b-3d37-46ff-9ce0-82340c72de80",
        "cursor": {
          "ref": "182f04fc-1ac2-43a0-88f2-a853a1104986",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "6b5cf3eb-a1e7-46dd-8923-a671e6be09a5"
        },
        "item": {
          "id": "19f9cf4b-3d37-46ff-9ce0-82340c72de80",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4fc03cd8-c173-499f-8550-9bfedc75d39b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 298,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7d718b-ac55-4d9d-af25-326e91be75ab",
        "cursor": {
          "ref": "ddc78a01-9f72-4f95-8dcb-0096def4900d",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9d1a6359-564a-4988-9dc2-6640a438ffe8"
        },
        "item": {
          "id": "fd7d718b-ac55-4d9d-af25-326e91be75ab",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "643958cd-5793-4df4-a374-8256e73335cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bda414e-40c2-4411-b941-940808f101c1",
        "cursor": {
          "ref": "6e00d882-9f2b-4328-a51d-c8f42f5c4cb3",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f86454da-1305-4e0d-867e-f510de874615"
        },
        "item": {
          "id": "9bda414e-40c2-4411-b941-940808f101c1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "96ae95f7-bfc4-4070-bf22-dbf837710948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f489322-1e9f-42b2-bae6-fded1f69df79",
        "cursor": {
          "ref": "63708850-3e2f-4f99-90c8-2a30d3a8c187",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b36f4b6b-6424-4246-bf9d-36d5fafd2981"
        },
        "item": {
          "id": "5f489322-1e9f-42b2-bae6-fded1f69df79",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8a6d47eb-ce73-4781-8883-eee86c6b8e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb55860d-be9a-482c-a6f5-4e4501d6408e",
        "cursor": {
          "ref": "6599dafd-f738-456e-89a2-f413f987fd18",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0a63db34-38de-4aba-99e9-b133d3ebe29b"
        },
        "item": {
          "id": "eb55860d-be9a-482c-a6f5-4e4501d6408e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7e34ae40-14e7-41ce-af94-3842485cddef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc900b4-17f1-413d-9bd5-8b045d93dbf8",
        "cursor": {
          "ref": "15abd912-5b3c-4e8e-8d43-d5cf3b4990a1",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8dd38db1-d8a5-4a47-8c4d-791d1cc7b1fd"
        },
        "item": {
          "id": "dcc900b4-17f1-413d-9bd5-8b045d93dbf8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5b065b8f-54c5-4449-99cd-ba57b3d8d8d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 340,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8132cb34-d6f1-46be-b21a-6a3840258896",
        "cursor": {
          "ref": "3dadebeb-0273-4473-bcaa-42dde0d3c818",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "51370504-f404-45b9-a2a1-6b7e78c0bf2d"
        },
        "item": {
          "id": "8132cb34-d6f1-46be-b21a-6a3840258896",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5a145c11-92ab-4e40-a6b8-302405c75f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 284,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "323b4db6-218b-4f2f-a5f7-91aadd0b9c62",
        "cursor": {
          "ref": "a33e9d0b-d62c-48bf-8497-2c6f40aa2705",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "bd3668f2-a951-4c8d-bb82-a2afe3c6bec7"
        },
        "item": {
          "id": "323b4db6-218b-4f2f-a5f7-91aadd0b9c62",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5759a32d-5583-49fd-8ad1-96da5189e60d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef7d938-3a69-4af6-b208-efb8a6fe5f37",
        "cursor": {
          "ref": "d448f8eb-eb93-4ea8-8895-be64908da1dd",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6a356354-6b4f-44e8-a268-0a1dd2f715b9"
        },
        "item": {
          "id": "cef7d938-3a69-4af6-b208-efb8a6fe5f37",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "3179ba51-7dfb-49d5-9d13-6d352974fdf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e97c88d8-80c0-4b98-842b-3860eaee29f7",
        "cursor": {
          "ref": "2e8c67fe-dfce-4249-9b53-db36fa274cd8",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5087fb29-1da1-4bd2-b4f0-43fb6939dc97"
        },
        "item": {
          "id": "e97c88d8-80c0-4b98-842b-3860eaee29f7",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7f63ab78-a46e-4429-b30d-a54e270ef9c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe5801d6-81b5-4a3a-8ec2-917862c7962f",
        "cursor": {
          "ref": "a9711faa-7068-4e53-b23c-799a05ec4cff",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1b30d429-e8b8-4420-82f0-668428df9e59"
        },
        "item": {
          "id": "fe5801d6-81b5-4a3a-8ec2-917862c7962f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e9e5b1e7-83d1-4577-815e-8fd158958839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23de87e2-3341-42ed-a7c0-2cf0941c9596",
        "cursor": {
          "ref": "ee9dd593-f360-4664-b4e8-d06b29ab283b",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "bfda89d8-b97f-4f09-91ec-c20b4a022b40"
        },
        "item": {
          "id": "23de87e2-3341-42ed-a7c0-2cf0941c9596",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "371038dc-27a5-4d9a-9505-de810f6ef061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca70285-eb51-4d52-9024-2f9ef7c75860",
        "cursor": {
          "ref": "a570ed2e-a2a7-4be9-918f-5366a63fbf69",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "fe9c9f0d-9148-4dd4-a20c-95a8dd3688f4"
        },
        "item": {
          "id": "2ca70285-eb51-4d52-9024-2f9ef7c75860",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "80c00ffa-a427-41ea-b319-2d237d3b5d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 279,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a511ee-fe26-4b13-9ff8-f7d90f10efe9",
        "cursor": {
          "ref": "9338d782-31d7-41ba-ad18-56c327dd816f",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3357c63b-7877-40e3-ab42-00b84e32e7b3"
        },
        "item": {
          "id": "a1a511ee-fe26-4b13-9ff8-f7d90f10efe9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "391fa5c1-dd5b-41bc-9c33-e2f8b27d17f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4fd2d9-cb86-4787-a2f0-19f043c1c1d8",
        "cursor": {
          "ref": "b2bb621f-d944-4434-808c-7287d9d57770",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0f4f481a-af60-4033-8ed1-c6c092a8dcb8"
        },
        "item": {
          "id": "ef4fd2d9-cb86-4787-a2f0-19f043c1c1d8",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b74bdb28-0428-466f-8ca2-b2376c6fcf76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7718c6d0-5c36-462c-b62c-eaa17f2d3639",
        "cursor": {
          "ref": "8718f8e1-536a-4c73-8f57-972ce2c0f0b6",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "69ab54e6-9a4f-43d9-a10c-f37ab555c8f5"
        },
        "item": {
          "id": "7718c6d0-5c36-462c-b62c-eaa17f2d3639",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1f3be738-2855-4e75-8d2b-4bb86cd9a238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144518fe-217b-4e2d-81eb-dc562dc3e76e",
        "cursor": {
          "ref": "16b58a11-4549-444d-90ee-7c9220983c58",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "74ea6874-85ca-46f6-b20b-3aea6f2a0cae"
        },
        "item": {
          "id": "144518fe-217b-4e2d-81eb-dc562dc3e76e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "3684b8c4-994f-41b2-9938-2816179e8e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2d77ecf-3591-4909-847c-434a870b7eea",
        "cursor": {
          "ref": "f0082d87-1727-4747-b7d0-b1bdce7e6e86",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9c836b52-c185-41c5-ba02-c767353d7a62"
        },
        "item": {
          "id": "d2d77ecf-3591-4909-847c-434a870b7eea",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1de68184-b3d6-40c5-95ef-d50a47d01d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d717f21a-7619-4200-8a39-ec84fa4d9f9c",
        "cursor": {
          "ref": "e0023491-2c59-46df-a63c-d9a02d4458a5",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "799a1e26-1029-4385-8e4d-c2788a637f17"
        },
        "item": {
          "id": "d717f21a-7619-4200-8a39-ec84fa4d9f9c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d0f4b5c3-cfc9-4304-a5d9-5dc51bae1a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35208844-76de-4d4a-920e-ece7179ca58a",
        "cursor": {
          "ref": "d1f2b7e4-34db-4ceb-9c34-8cb7483f9730",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "15dd60af-aa51-4e19-91c9-59b790c4a70a"
        },
        "item": {
          "id": "35208844-76de-4d4a-920e-ece7179ca58a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "31857aeb-c31e-4844-9d06-81f9945ce218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d10c61-1388-4c2d-a96c-4170018ef91e",
        "cursor": {
          "ref": "5a173ca4-a266-48f4-bfdf-f01172125f96",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "11c980d4-7e0b-4dfd-8111-77685f6f3568"
        },
        "item": {
          "id": "16d10c61-1388-4c2d-a96c-4170018ef91e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "02b1cf51-aa0d-4697-89b6-99d4a67a066c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6375f9ae-e0c5-4f21-b5d0-3bb0b1cfab9e",
        "cursor": {
          "ref": "aa24100a-385d-4592-a947-be060304ed61",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d07b6ca6-436b-4a46-b325-070e6b3e2e1c"
        },
        "item": {
          "id": "6375f9ae-e0c5-4f21-b5d0-3bb0b1cfab9e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "3528665d-63a4-45fa-99d9-f144c016c4af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c783649a-b4b4-40cd-bfe3-6e5124137180",
        "cursor": {
          "ref": "e5155d01-3097-481b-ad24-ff6ea7876c44",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ec54d9dc-ab96-436a-b525-20d09f919cce"
        },
        "item": {
          "id": "c783649a-b4b4-40cd-bfe3-6e5124137180",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c3b89cdb-a4b0-41e7-884a-91ec38c33592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4a2337b-9e81-4e92-a7a6-d738791458aa",
        "cursor": {
          "ref": "8c8b220c-b397-477a-9668-61a3d6758a5d",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "38b07599-3132-4ef7-a48f-b1ae76ec7082"
        },
        "item": {
          "id": "a4a2337b-9e81-4e92-a7a6-d738791458aa",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "47a8a218-6031-4ab9-842e-c5812fc1c388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb5b0c5-e60a-417e-b440-5603d9986804",
        "cursor": {
          "ref": "0f468d48-68d9-44ea-85af-163466f670b2",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3a0a3afd-46ba-41a3-98df-22b4f68c423e"
        },
        "item": {
          "id": "bdb5b0c5-e60a-417e-b440-5603d9986804",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7376f9fb-8836-4b17-a848-60ad3b2e2abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca9e7b1-bb90-4040-901d-ca22cfa4947e",
        "cursor": {
          "ref": "5951f41c-16cd-47eb-924c-29872102da50",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "86a869d1-086d-4209-9ac5-861e8f953752"
        },
        "item": {
          "id": "9ca9e7b1-bb90-4040-901d-ca22cfa4947e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "69338034-36b6-4941-bf1e-3130856975b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ca682c-3df6-4026-9094-ff90d15ec3b9",
        "cursor": {
          "ref": "2d0342a5-e56d-436c-8c89-23c0c2493a2f",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bff685b9-558d-4394-aa06-e44cd43fdecf"
        },
        "item": {
          "id": "d6ca682c-3df6-4026-9094-ff90d15ec3b9",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a75c7bc0-021b-4158-bec8-7d9b59fe63ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e00e9806-bee0-4fb8-b0f3-af32409e7440",
        "cursor": {
          "ref": "51c8a6f1-1b3e-4696-9e1a-d98a21a0ec9c",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7dd84fc7-24fe-40f8-bc8b-85aa4b872785"
        },
        "item": {
          "id": "e00e9806-bee0-4fb8-b0f3-af32409e7440",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0d5d34ad-d0c5-4b00-b720-ce8471e2f787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f1b277-348e-4bab-9368-aade3558ce0f",
        "cursor": {
          "ref": "4d19d77a-430a-41a3-b5c8-f0f3916a03fd",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "69525574-dc30-4221-b170-89c8b9a14d99"
        },
        "item": {
          "id": "94f1b277-348e-4bab-9368-aade3558ce0f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "726eb8e4-f822-4c0e-a018-701449e4d5a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53590e73-196d-423e-92b9-1d4bb7887012",
        "cursor": {
          "ref": "049298a4-db75-4eaa-ad0f-275e78ed7dfa",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "daca12b6-2a52-4c63-a31f-8c396c9efba3"
        },
        "item": {
          "id": "53590e73-196d-423e-92b9-1d4bb7887012",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "73c35d20-29d2-47ba-9a75-c81f1e59cca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffe96531-40e4-4225-8ccd-1c6a96010ccb",
        "cursor": {
          "ref": "fa0f2ffc-8856-4f56-bd7c-e134406e6741",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "7c99f688-f81e-49ba-9c47-a5cd778bb879"
        },
        "item": {
          "id": "ffe96531-40e4-4225-8ccd-1c6a96010ccb",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "cc910b64-4bbd-4e9f-83d2-c18360a9a620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ab61c9-e5cd-4f9b-8453-6d897142a4b2",
        "cursor": {
          "ref": "59f1e594-5159-4efc-ac4b-d9a707062163",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3b8e89e3-a960-456f-9d8d-392795d3e8f6"
        },
        "item": {
          "id": "62ab61c9-e5cd-4f9b-8453-6d897142a4b2",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d43b7471-e602-49f0-b490-98ea679e91cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25ee16e-c6fa-4991-b85d-551d3e7314e7",
        "cursor": {
          "ref": "8e034de8-fcc8-46be-857b-d48982b29601",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "19d42c33-04d5-453e-a145-82a813751e09"
        },
        "item": {
          "id": "c25ee16e-c6fa-4991-b85d-551d3e7314e7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "084d150d-7d32-42cf-9948-71344e571345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6507c90c-4acf-477c-9c53-47dcee94aea4",
        "cursor": {
          "ref": "bfe16b77-2306-43cb-9402-3f0b4fba92c2",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1a9fc6b6-c238-4f96-b43f-ea4395ca34c5"
        },
        "item": {
          "id": "6507c90c-4acf-477c-9c53-47dcee94aea4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "786351ee-1ed8-4141-9aae-3b4c3fc94cbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6153ad2-219a-463f-b06a-a5ce9b6a4062",
        "cursor": {
          "ref": "72e183b0-e851-43d3-bbc1-886431718ce5",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b1cf45a0-6154-4597-a5e0-c768d7a08ce6"
        },
        "item": {
          "id": "f6153ad2-219a-463f-b06a-a5ce9b6a4062",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "cba55935-0980-4b88-88dc-f1635642eff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c305c72-4540-45d2-b90b-f22a2f2c950b",
        "cursor": {
          "ref": "5844ea16-1d49-4956-a706-032138cb6846",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "f9ace3af-1d48-4fc9-bbdf-a349d122e29d"
        },
        "item": {
          "id": "0c305c72-4540-45d2-b90b-f22a2f2c950b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "fd659a3c-ec1b-4805-8da2-059476dee2af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4975e48a-3bc9-45c3-aa53-a8c79bf3a9d0",
        "cursor": {
          "ref": "a92e99b9-36df-460e-831d-048ab091a234",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "45b3c6f3-d84a-49b1-954c-2fd170805d7b"
        },
        "item": {
          "id": "4975e48a-3bc9-45c3-aa53-a8c79bf3a9d0",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5e727f8d-80ce-4fd1-af88-6a0af3b5a169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afcc0ccf-5afd-404e-a709-c19c2ff82b9a",
        "cursor": {
          "ref": "28e687d9-38be-42b8-b5ae-91ed711a22dc",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "24b1ae3b-bd7d-43cd-a9a7-38c054df68b7"
        },
        "item": {
          "id": "afcc0ccf-5afd-404e-a709-c19c2ff82b9a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e2872c05-5d32-4885-865b-b6ae26af0517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4038b41d-f33a-4906-b08a-28a621085ac2",
        "cursor": {
          "ref": "29770bdb-1393-4cc5-affd-4c56e364a575",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3b733899-1736-4c05-80cb-9703bbdcbba3"
        },
        "item": {
          "id": "4038b41d-f33a-4906-b08a-28a621085ac2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "dd2a041e-cd9d-497e-b257-3e8603dcef15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "232c80b2-9347-498a-bdbc-91ca57fa86c8",
        "cursor": {
          "ref": "f53d52c5-ce07-4c86-8812-7a9acc192604",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3282c696-243f-4059-8830-9e9d9898f445"
        },
        "item": {
          "id": "232c80b2-9347-498a-bdbc-91ca57fa86c8",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c32bcda4-8f48-47fa-94c7-ed792e5af93c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d5ac61b-ffe6-4a32-a46b-146c30eea131",
        "cursor": {
          "ref": "43b0c067-df34-464d-8a0a-71bfc883e543",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f97fbe9a-fa35-47ad-8ebd-9dbc3bd957b8"
        },
        "item": {
          "id": "6d5ac61b-ffe6-4a32-a46b-146c30eea131",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b465aaba-b471-4f91-a515-a42bc3d6e8ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e52d5b32-1f78-41b7-b550-fd2b436917eb",
        "cursor": {
          "ref": "fd77c891-5e80-48a9-873f-e8e58f7842f2",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3da300a5-f3bf-49ba-981c-f31324454b1e"
        },
        "item": {
          "id": "e52d5b32-1f78-41b7-b550-fd2b436917eb",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "8dab8cf2-e14f-4cac-9753-6b8512f2df36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c96b3c-975c-4cbb-810c-31567e9d4b86",
        "cursor": {
          "ref": "92f70714-049d-4f0b-a9ac-fcbbcc53942f",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ab48ed2e-852e-464c-9b2d-43978a5d2d46"
        },
        "item": {
          "id": "63c96b3c-975c-4cbb-810c-31567e9d4b86",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "dc17cc0e-2a24-47ea-9758-b724f924b353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf69d177-1087-4585-8aa2-5ae118a9f0f2",
        "cursor": {
          "ref": "0a68a62e-cbec-4cba-9c02-bbcbbe07ed71",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "72abca6c-e16e-4817-b140-5d8e32adbded"
        },
        "item": {
          "id": "bf69d177-1087-4585-8aa2-5ae118a9f0f2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "10dd1c73-72d3-411f-9e4e-675264aca87e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ef48c0-fe81-4928-b1e1-5229bc7520c5",
        "cursor": {
          "ref": "abf1f0db-d3fb-4576-b21b-bfb82149420a",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e394bf93-47bf-42ab-845b-cc408f08e167"
        },
        "item": {
          "id": "e4ef48c0-fe81-4928-b1e1-5229bc7520c5",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7d0a5c89-6b3f-49f7-9d5e-b5e07e4d61bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd3c7d0-4337-44db-b96d-7faf3784e5d1",
        "cursor": {
          "ref": "7cb3b624-15c3-406e-ab21-383b58a4044e",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c5c72de7-6b65-44ee-a736-e26f693f9097"
        },
        "item": {
          "id": "0dd3c7d0-4337-44db-b96d-7faf3784e5d1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "cfdb0a06-c895-48b3-b3f8-53b0105f7a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a14e63-ac24-45c1-b882-4f6ad2429273",
        "cursor": {
          "ref": "0b3c04c9-34b4-43e6-9463-da4a601f0eb5",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ca0df7b9-11ce-4d00-a074-2ce3a605cbc3"
        },
        "item": {
          "id": "99a14e63-ac24-45c1-b882-4f6ad2429273",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "cfc981af-b1ec-4e18-aea6-e77382787489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ae0ed1-ee9a-446d-87b0-0d20c94f133d",
        "cursor": {
          "ref": "3e01895f-c9ef-40ef-9bc9-b50f598c7d42",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8f0c32bd-c40b-4377-8644-dfc5514e6808"
        },
        "item": {
          "id": "33ae0ed1-ee9a-446d-87b0-0d20c94f133d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "646cd75b-712d-4aad-bd78-4c1bc4ed173f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c733ab2-9e8a-4b6e-8767-70f8662774b1",
        "cursor": {
          "ref": "eac40893-3757-41d0-8550-16cb404553ca",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "44651a56-e247-4618-8bb9-061a671d2b89"
        },
        "item": {
          "id": "2c733ab2-9e8a-4b6e-8767-70f8662774b1",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "19a190e5-3497-45c1-af49-e3a562b01434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8747b9b8-8584-4233-bd36-f5b2b5b2f0bb",
        "cursor": {
          "ref": "dd09c839-8b3f-4f9d-99ca-1fdf2424e08f",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5fd3a3cd-5f95-4a77-8762-763d5105d0f1"
        },
        "item": {
          "id": "8747b9b8-8584-4233-bd36-f5b2b5b2f0bb",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "8bf9d7db-14ce-4374-bb27-eed0ffa02c90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec9e8bc-eff4-4048-a1ea-9fb1bffc557f",
        "cursor": {
          "ref": "c09826bf-6fed-429e-aff7-2bf72ee75743",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8df1a196-7316-4cf6-92a0-9d5debde01f2"
        },
        "item": {
          "id": "eec9e8bc-eff4-4048-a1ea-9fb1bffc557f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "cd92f90d-731e-40e1-95ab-bb574cd4dc4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdac8c39-45d4-4344-8324-79525af10fa8",
        "cursor": {
          "ref": "d84ce3f0-0095-48c1-828c-6f8ac3efb560",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ed2470a2-9d98-4fd7-9370-7015e03483bc"
        },
        "item": {
          "id": "fdac8c39-45d4-4344-8324-79525af10fa8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2cdf3567-5245-4dc5-8157-9ebd5c341b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "134b7cc3-2888-42c1-8bb2-c6e68ed428e9",
        "cursor": {
          "ref": "32ffdf8e-5812-47f9-9d80-27072f28decd",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f9cd48f3-cffb-4908-bae6-3e5fcbdc1786"
        },
        "item": {
          "id": "134b7cc3-2888-42c1-8bb2-c6e68ed428e9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d9241a7b-f0a6-44ee-82e5-55d5d9edc54d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0250529-cc32-4992-b0bb-6e2dc8d57dff",
        "cursor": {
          "ref": "a6a02626-a1f1-413c-bc53-b86669bbc471",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5ba948a6-02e6-43e1-9f73-c4f769571573"
        },
        "item": {
          "id": "b0250529-cc32-4992-b0bb-6e2dc8d57dff",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f58feb58-a8eb-42db-a4dc-b89057345782",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3604698-a9db-4731-a2d3-12f4bc849ffa",
        "cursor": {
          "ref": "71d3f198-150d-42a5-8341-0e39ae53749d",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "257eff10-816c-42ef-b992-8241bdda224b"
        },
        "item": {
          "id": "f3604698-a9db-4731-a2d3-12f4bc849ffa",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "ef1a6082-f624-46df-ab20-7ffa79bd3455",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 30,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9a154c-51a9-4b67-a24a-e95f4f310af3",
        "cursor": {
          "ref": "f28df2db-40ba-44bf-a70d-2375f7dec073",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "13e18fd0-0a1d-4a4a-a3bd-ac9d46cc9cc0"
        },
        "item": {
          "id": "bf9a154c-51a9-4b67-a24a-e95f4f310af3",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "4a71497e-023e-4af0-b7c8-8b4931ce226f",
          "status": "OK",
          "code": 200,
          "responseTime": 237,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be38fdb-0d25-4545-9a07-395da0648e9b",
        "cursor": {
          "ref": "4021617d-ab20-4e19-89d2-af763b20eb2b",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fd1f811d-9bb7-433d-96dc-c65c3fdd4ceb"
        },
        "item": {
          "id": "6be38fdb-0d25-4545-9a07-395da0648e9b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f3072ec3-68a6-452e-ae1d-45feae31189e",
          "status": "OK",
          "code": 200,
          "responseTime": 593,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d31236-851d-4924-ab28-e3865ea68a83",
        "cursor": {
          "ref": "7e3f4d49-30e7-425b-8dbf-8177b6a0fe0b",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a2926408-b41a-496c-aa00-1a1c4e785747"
        },
        "item": {
          "id": "f6d31236-851d-4924-ab28-e3865ea68a83",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "89fd7186-7dfb-4a83-b367-c57da1249ada",
          "status": "OK",
          "code": 200,
          "responseTime": 606,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd58837-c492-41c3-9c89-54a9b62708a9",
        "cursor": {
          "ref": "2bd426c9-ae83-4d72-b369-bbed7c2845d1",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0e4c1b86-2a8b-49c6-8489-9644a780c6e5"
        },
        "item": {
          "id": "3cd58837-c492-41c3-9c89-54a9b62708a9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a75245fd-fdbf-46b6-9c4d-b01e47d8c79c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd58837-c492-41c3-9c89-54a9b62708a9",
        "cursor": {
          "ref": "2bd426c9-ae83-4d72-b369-bbed7c2845d1",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0e4c1b86-2a8b-49c6-8489-9644a780c6e5"
        },
        "item": {
          "id": "3cd58837-c492-41c3-9c89-54a9b62708a9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a75245fd-fdbf-46b6-9c4d-b01e47d8c79c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd58837-c492-41c3-9c89-54a9b62708a9",
        "cursor": {
          "ref": "2bd426c9-ae83-4d72-b369-bbed7c2845d1",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0e4c1b86-2a8b-49c6-8489-9644a780c6e5"
        },
        "item": {
          "id": "3cd58837-c492-41c3-9c89-54a9b62708a9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a75245fd-fdbf-46b6-9c4d-b01e47d8c79c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5f4f2e-82ed-45be-9974-309c441a5a81",
        "cursor": {
          "ref": "04ef16e5-2790-44c1-ab11-1dbb1c98f9a2",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9b4bcd3b-6d2f-4bc1-9a65-a0e6c2f9b248"
        },
        "item": {
          "id": "ff5f4f2e-82ed-45be-9974-309c441a5a81",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "007f3835-7530-4d76-802e-0b16411caa2d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d2f2f28-8146-4925-a5c9-8a6c6f63dd28",
        "cursor": {
          "ref": "c2245264-fd24-42bb-9082-78f372934c0d",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "09825a86-d370-4d0c-8fbb-bcda724ea160"
        },
        "item": {
          "id": "5d2f2f28-8146-4925-a5c9-8a6c6f63dd28",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e1055b5e-546f-464f-b69d-055c9906401a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "5d2f2f28-8146-4925-a5c9-8a6c6f63dd28",
        "cursor": {
          "ref": "c2245264-fd24-42bb-9082-78f372934c0d",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "09825a86-d370-4d0c-8fbb-bcda724ea160"
        },
        "item": {
          "id": "5d2f2f28-8146-4925-a5c9-8a6c6f63dd28",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e1055b5e-546f-464f-b69d-055c9906401a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8ccc4961-828d-4a4d-b6f0-cf1c835cd766",
        "cursor": {
          "ref": "af296581-80a3-4aac-a2d4-0c1799019627",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f7bb345d-6fb9-462b-a303-9ae6767d55c3"
        },
        "item": {
          "id": "8ccc4961-828d-4a4d-b6f0-cf1c835cd766",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "d8132dfe-fc59-4fe6-b5ab-3aa5289abea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "9d8a50bf-0582-45a9-91c8-229eaf900eff",
        "cursor": {
          "ref": "7a370204-2892-453c-9738-f507d4b9ca1e",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ffa1682a-718d-4853-8914-ee069603f62d"
        },
        "item": {
          "id": "9d8a50bf-0582-45a9-91c8-229eaf900eff",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "40d8d518-797a-4470-8d7c-ad428481bad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "9d8a50bf-0582-45a9-91c8-229eaf900eff",
        "cursor": {
          "ref": "7a370204-2892-453c-9738-f507d4b9ca1e",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ffa1682a-718d-4853-8914-ee069603f62d"
        },
        "item": {
          "id": "9d8a50bf-0582-45a9-91c8-229eaf900eff",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "40d8d518-797a-4470-8d7c-ad428481bad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "9b86496c-2c27-4095-8fe5-b2754aa9712a",
        "cursor": {
          "ref": "fbb393d0-24ca-468d-8313-b12d4024788c",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a947633b-8746-4309-b645-6e2d488b89e2"
        },
        "item": {
          "id": "9b86496c-2c27-4095-8fe5-b2754aa9712a",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "aecb5e10-9a41-4019-80bf-adee503d1056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}