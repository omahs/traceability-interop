{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "516d5817-f18a-4008-99b8-06c0c5860255",
        "name": "Clear Cache",
        "item": [
          {
            "id": "20110df3-9c1e-4448-946e-0179eb686e7f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e79f00a9-d280-496a-a37d-2bc745bb6ca7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f1764827-65f3-4391-9515-ceea20eb0370"
                }
              }
            ]
          },
          {
            "id": "8f36817e-98f8-436e-8759-b4b9a5a667f7",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7d242057-5b0b-4bdf-b283-f14d8785dae5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "df5c99ea-45d4-495c-9263-3be53f245cde"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c058490d-3dc0-43be-90c0-0e788d004092",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9101d1ef-ce3d-40af-ad18-f7c8e76709ed",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7d41fd01-f9f8-41b5-b48e-3f7eeefeecc3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a7b7327-142d-4469-bad9-cb1ffd279e52",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a2a8e159-9f53-44a3-b8a5-83f863d177e9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bf81c681-9ddf-48a1-9eaf-f448ad38caa9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c6a1490-1ab1-4d70-8c65-bda2eaa7c2e8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9fcf3690-5b07-4e28-848a-227bd52fb046",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3c7c3d1d-ca63-4740-8ba1-651f1ffa8520"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9df82d2a-1a34-4fbe-8234-1a1b6f1ac420",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c283a558-aa35-4e9e-9b14-ce0ac52b0a23"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "508f2a23-8ca0-4ed7-98f8-3bcf5ac0edba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4cfca3b1-8f60-49c5-8ccb-e342acbc6d65"
            }
          }
        ]
      },
      {
        "id": "d4260e0c-9191-4134-a9ad-9b74230962c0",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "741eb5f5-3c7b-4f8e-a2d3-b67f9b607857",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c8ce3e82-8602-4980-bfc2-8e0dd3fb9f07",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4f7d992b-c50a-4ab9-9c8d-f6892d8be16b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04948e9d-d64a-4eea-a2f8-67b492bf51f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46e13c7f-7663-4d5f-b720-6f336308f273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21847190-2ef8-4ae9-add3-6e9c40ceec28",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "900a2c11-790a-4748-9dd0-1ab508ccc9bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b5137c4-c87e-49d5-9327-29923ef32d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c957802-198e-427e-8a7c-3dbcf2ad8e7f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "767972f5-bf7a-419c-affd-7878e33a0ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c752ac57-00f7-488b-9927-7d4045630d04"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "86e4b203-d748-460d-93aa-3a270042d3d5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6bcebecc-3fd0-47bf-950c-bb741d1acbc3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1306e3-e669-4c30-afe9-a7f99c9b02e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "efb46ec4-fe56-457e-8fb4-b73045084b2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f1c967-de55-4b66-829d-205f2965dd64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b08f639-2976-472c-a8ae-e76bca808388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "622f2aa2-3ed0-4188-abe2-7bb3c4fbeba5",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea6b4f2-7498-46ad-a060-a44cbc7eb108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d6e998d-c097-46c8-8e39-6a573877f59e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753e2e77-3dcd-4f56-98f1-88173e2f81c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "2f289e85-351c-4da8-b64e-f6a6c313e151"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "184289de-5c06-4c90-8d91-2d3f499ca10e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1611f49a-08b7-4898-83fb-f524ed909629",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a28fea00-64ef-4a7a-b7c0-fdf4810daf65",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d5824ce4-8cee-4965-9375-856aa03e1244"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "df25261b-027c-40ac-8287-a48a8283b1f5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "6869fc18-6f57-4f50-aec3-dde15896f22b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "de5ba6b3-d412-443d-9e94-5bae511ae331",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9ee7f143-84c3-41f0-9788-fbc956320f10"
            }
          }
        ]
      },
      {
        "id": "48599697-3e71-4974-b670-82700fbbf29c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "8bafaea3-c43c-4617-a116-3fa8ec4caae2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0458dd81-b399-4fc7-a72f-fad610649294",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9850af6d-6cf8-4e11-bb2f-66a6ac139e58",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e159e0f-9017-4716-aac3-a6c59d4ac18a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88c169e8-f886-4467-bed4-7228a0d84405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c73550be-a1fd-47fe-bc92-7a5ff61d4c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2e9a9a5-713e-4668-9d80-ca5637a37a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84c9cc64-6ff2-4cc6-8a70-9123ec04819f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e1b8ce7-ea69-49eb-b06b-e4363ce417db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc8fa85-753a-4518-b09f-f273c9f54b10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d01079b-bb20-4e4d-8d24-04549fa075a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55c39eeb-be49-471b-bc86-203f7550eadb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f22be6-37da-4be8-9d11-0cb8d9b95509",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7126c49b-6fff-40c0-a098-a0c62fadf419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d6d7b96-174f-4d50-b8ee-2886e3f221b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8007f09d-4c21-4dd1-8528-ea42794c1a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "022a8eff-66d8-4fbd-828f-c4eaf3221f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd2b9a97-fd74-42a9-bfcb-97be58aa15b8",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "838d7cec-cae9-4f65-8d0c-9242273fff58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b8c2b9-1f71-4773-9966-a8a77aa0f919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d431475a-f210-453c-9b20-908b527fe5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18a29380-ac6b-4b34-b5ce-35c0e2255d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323134db-e031-4eef-bb43-9deb57dd941f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85efc9b0-c80d-47cd-afb8-daa6d50ee3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "004e7cb0-628e-4814-be8c-c55c03388fa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac539c7-b4c2-4a72-bb80-5090d17704aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "487ad092-2e5c-43bf-8379-97d0d3fbca74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f0144b6-78c4-4569-95d5-02a59c346cb0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4471a6a-59f3-4c8f-a9b9-090be283af5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49b9bac4-12c3-44a5-985f-337b9a304ad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db795c02-0b42-49f9-a788-15d1d2cebb32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f82d8bd-ab35-4110-816b-fc20b27ae100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1523049c-7d4a-4a1f-9c74-767802a68a5c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "621ed727-b25e-4212-ba09-12c5735fa070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "624f6db0-ce09-47d0-b937-1aeb496ce833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6962ae1e-2187-468a-8cec-af1105cff36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37cdb746-07ff-4328-a5c7-873c82538229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05fa3e28-d17c-46ef-abeb-5eb05990b162",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e27c5f8-d479-4eec-9817-b6de329eda66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea473c8-a7b7-48d4-8894-9c6e3fdd9286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a9ff3ed-9cb1-40b8-ba5f-6faebffb9200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4a957d7-1659-4d83-89a3-5406bfd763e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cdebf51-288a-418b-a3db-d8face9ef6ed",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a399b426-fc42-4dda-b80e-58573228dd69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bea50538-fd2c-48dc-b180-284f4afd5ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f06e57-2ebe-44d4-aeaa-f7f9d94bac86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57d989c7-fcdc-40fe-92f9-66d59f97a8a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6ccab0-1776-474a-93b1-b97a9b183258",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fbeb622-f7bc-470a-9835-7b885f084a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b198b47-ac7c-4103-a7b1-b0b386412426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894b0286-681e-4238-8f1f-77aa7a11d919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0af00d0-de3a-41b3-9c62-ef04d48bde05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7999946e-9009-4ca1-b899-909cb9862350",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef34386-fac3-468a-b1f5-06591901d2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9431f198-26be-40b3-b38e-c180d387b74a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68f930c1-19a0-4473-9fa3-762fc119610d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fefe959c-f78c-4f63-836f-d0bc0ef06b42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4423a7-3ff0-4471-962b-6e270ea1ac5b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "784bf83c-b9a3-4499-95ce-8c781e304c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "272a27df-4d9b-4fa8-9fb0-bb55e2699217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9acb8b7d-6432-4c6f-848f-2b21203bfbee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79426777-396f-43b4-a90a-96a935a5a6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "526f29a5-331c-4129-875a-26f303e288be",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf08815-3abc-424d-ab90-f2210a8d0605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df50d3bd-d66a-499b-8bc0-10a15fe1b17b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f73258-a9e4-47fc-adea-ae27d5dfbd07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0310670-a206-48f1-b4f3-46f18c5ef0dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0ada76-c7d7-44c9-826c-3cfdf524e8d6",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77609e4a-2e88-4336-9791-b831739b5d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b57b7782-c8f7-40a8-877b-5138e8ce1139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae16ec6c-87ed-423f-a36b-0cf085605c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "8358f168-11a5-4d63-9674-e779450e9a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2aaa2f4-5ead-458b-ab74-04f41f07185c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "927f93cd-20d3-4dbc-a44a-8101d7968135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40fe6aff-ccf1-4620-b4a5-d37c86b23a7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32dff756-4dac-4ec7-aff6-64e071e4ff02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69b0f4a1-ac97-408c-81ac-fcf3ffea3cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932c11ec-95df-432b-9669-aaf7ea027921",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2794d775-4bfc-4c36-92c2-05d46cdc350f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0547e2ac-3c49-4475-b101-e5d35ced1a7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dece29f-6100-469e-b37e-1d330fd97a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e4d7604-3625-40b3-be81-4d72a0fb7902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca48ca4-1efa-45a4-817b-a28d620e31fb",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea14ed44-737e-4579-849c-12fa9192aa33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c0d7e64-a288-4327-9925-a7ef18555727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4262b5-192f-45c1-9f5b-efb301919a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b13d2996-09c3-4a08-a09c-2ec24e009ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746ad530-ea16-46e4-94f9-bfaf13e21d7d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e473f69-fd10-46f6-8e97-a8954378236b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "883cf70c-bba8-4aef-9d77-0a852e390ea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5a9f23-e824-4220-b71b-e71c72fde50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75bcc423-19b9-411d-8b77-9411ad8a3e30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf74643e-05a1-4bb4-b8b6-9d82c84252da",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f634809-458c-4a3e-8df4-e507b3ebcc1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd3037d2-4d04-4139-8f4d-bc3897870a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a546a292-8f2c-4c5b-bec0-b16a42bde519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aafe42a8-020b-4bac-9e72-92a07acdda2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e1fd42-3ed5-436c-b480-4b2599bc470d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84df8bc1-2df9-47ea-9f59-74e52e22be2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e60070a-2567-4183-b5eb-8dc3957d799e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52846fcc-dd01-4014-8a2d-06991728d8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed44c5d2-451d-4774-91da-fdb4c7d463f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "172527d5-999f-4ae9-999b-95da99cb79ca",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8c8716-08b2-428f-a251-560e1247f0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0574ff2e-ecf1-4863-b034-2cd6595cc0db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e44748-1be0-4edc-9de3-3041f6d42f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "79dd5738-2e1a-4c27-81ea-864561c86f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "062c45af-ce86-44b5-bcc6-9aa751920cfb",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da45a984-f1e3-46ba-b4a5-7590c0f205cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c96ab957-35e6-4306-bcbb-d39d794230d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff6032cc-ad9a-4445-af47-829f501dca82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "afe6908f-2337-46de-a001-59c1732a0588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52aca8a3-253e-4762-9a42-17807b124c5b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5118d92-607e-4b5a-bcda-8e8ba923a545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e63647be-e66c-49e0-a155-9127fbf761a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a35d4eb-d5ca-469c-9a4e-aff3e1ccb729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75c6a6df-7f4b-430d-afd3-2d69b908d40d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621fdd55-2976-4bb8-98bd-7b40c9253b1f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fb7e3ff-4d60-40a5-a882-ff7e0a621d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c54d6d6b-5c47-48e3-afcb-dd2e2d94437a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eac25a3-fa65-48b5-b8d4-f5172344d35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "881220b4-92c9-4cb0-9fd0-576c792c78ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a8e80a-9ecb-4175-add8-d2c21e893040",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "150b01cf-e4f8-4328-8977-514fc3016c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95ad74ac-10ad-4f88-bcea-39c5153e0b2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93769bba-e9cd-48f9-8a44-06b5611f8c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4eb66669-2922-4ae8-bbe6-ba268773dcbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3bc533-3f8a-46e0-a812-dc41c3c57a0b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15cf5be4-8cf6-4a73-91a9-f9dd3d41d95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "713cfb32-4824-497a-9c53-a1a53528b6f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e76dd569-1d12-4f87-8a1b-69216ff89b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "54806622-f662-4255-a235-a9222262a36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e39196-77f2-47f9-90ca-1475c2196995",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d70a688-b46c-43c2-a909-0c668e78d758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "038c50b6-8ff7-48ea-aba3-1b8333d1b770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ec316c-d129-46a7-8225-eae13f59a4e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d12d76f2-ec21-4fc5-a1ef-2f59d7dbdcb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d123d7ad-5e97-4f2b-a784-3ce680a7b6af",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e057147-c741-4642-9c32-4f7aadfa22aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f45d909-1479-4fbb-b716-cf7b12568590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a74cd8-ad08-45bb-9c11-80fc2d804bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cdb9372-5ee6-40c3-91a5-6afda06ba79c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae039ba-0f95-41ab-a8d4-46dacb5fbdb3",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf8b77d-acb3-4f39-a894-6060ed691ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "913b2e2a-2f3d-4a8b-bb56-ac8a2e777eb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e64aa97-e8f8-4e07-8b97-c64cdf8197be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "420d12b8-82c7-4a80-887c-50ba16f85181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f579ba1-4bfe-424c-bd28-77c9fe1462b4",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3233186-ca59-4842-8bd2-156e99def3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3716bfe-02e1-45d4-9c2a-effc723c78e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73fc7936-be17-4237-9bf4-f3ef7b5c6535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5256c57e-a6f6-410b-b34d-f166a4bf69c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7558e99-779d-4574-aa6f-3f93fe435559",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a056c19c-81f4-46be-b017-616c21047a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34d0c516-31ff-4080-9a88-f0f1cefd2b0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04eb39e-3754-4c26-b04a-473b1759477b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e97f983-ec44-4776-9183-659b32be9c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd49a11-9bf6-4a24-80ce-5f1c70175a95",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3c616e-8bb3-4b72-9e60-2243831f8572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a0f7a25-eae4-48f6-9717-52d42bbd6b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7797014-0da5-43e1-8ba0-d6c620ff4447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d40d4cfd-e937-43f0-8405-c1964b55fdd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93cbf3c2-80d4-4cd1-b97c-bfc55d9fdc80",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f40feb-a63f-41e0-9516-c456c12b28f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1814f17-0739-4ef8-a112-26d0c9b1cb3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3275732a-c657-4779-b643-dd3704f5e684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "afde3c10-f3ef-408b-92fd-788e79d65037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be854f04-b711-4fcf-9315-5fed616c4754",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f72b97ee-5d40-4991-9291-3f19f53b26d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6315bae8-dcf9-4149-8191-abbfdbea0744"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "522d8ff6-d597-4fd1-a668-bdec494ce67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d9fbbd1-b312-4d07-99c5-15fde608add9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a0558d7-eeca-48ea-ac53-6cb1bf090a9e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a75ef36-31a2-470c-afe2-c45ce50e8201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ddeeb5-456f-4d1b-a6f2-5a067758f8ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1a7aae-324b-47ed-9e2c-48acd348c12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d327e74-b0b3-4dea-921d-ab92a0083c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096d7400-080e-4777-bbe0-799298da9bb1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef4c4015-ec9c-4da2-81dc-270f87147d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be84dd6-e9c1-4930-8865-0627af314a25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc3f4e0-3b05-48bc-b5c3-b5d427fdb347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "df2d676b-9d6e-461a-8dff-7d4607578e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f288998a-6c0b-4840-a94b-a1fd82ef5013",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e580ec-6175-46f6-bdb6-b6d3437a3dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1754752-7fe8-4ec6-97a3-1050bc9d319d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86ec5aa-4f53-40ba-82d1-ed4b5ef04733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "953fbea7-07d6-4637-981a-2e3d81b93944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7729335d-2144-42d5-b227-4b252b3dbce7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c28ce02-d8a5-4db9-85ba-af1442568674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87b844da-8814-4fb3-a76b-157c366f088c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b18383-9eea-4c6e-8cdd-720260afc365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4a173e16-146a-44ed-bcd7-9bce2fbd86d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359cd928-894e-4df9-9d7e-255d3886a53e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aa42389-5d70-4183-937e-99df185a4f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbfc37e1-baf9-485d-81e8-14ec2aca1d33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f4d2aed-8d35-4587-a56a-b3eefeac3a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e910679-f09b-4a50-9cc3-62b91bd7200a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143a29f3-10ec-407a-9107-41f33488c86a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2f9764-b50d-4ef4-8637-13dea61c64b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e684e4b2-ef63-428a-a1e4-2246f4f2b789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f5274b-eb39-4c26-be4c-a913752d4819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5e85829-d1c2-4277-8b2c-fc2ffe48052b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aec8c9d-c15f-443b-8d55-f9bee10eeb9f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbddc8d2-61c3-488d-bc3f-3bd07c48bdc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f281e21-2308-4b2a-a849-974c92404d8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa4a9ff-0928-48a9-bfc3-4b52b55e42bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "24fbc7a1-fb06-4a80-b080-44a9f87ac68e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8393d642-ec4a-4c10-b704-76205f691f86",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd41518-5409-4382-85d5-b1f9cdc1e381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f165e7c3-b488-4df7-aa87-85fd7ec72d9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07335953-1147-45a2-9f03-230c739addbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce083455-a780-4a1e-ba07-dfc58b43b059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71784ac2-c7c4-4448-a5fa-57d63bfc2bae",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2da456-00af-49a8-9e1d-043386ad586e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d167e34-862c-4821-91db-55d55b133193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb18964-7cdb-4716-b24a-d7a60a7741a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bebeeb1b-1e4e-435a-82d1-e3abf90780f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7f4cbf-8e86-47e7-a5bd-fc56ad94458d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07fa768b-6500-4f7f-ac2d-58d5db1c3f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae674d54-7ab2-4bf1-9006-c22fab0cda23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82246aba-97c3-43cd-b1b1-91236841167d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f62e74ce-81c7-4302-8f41-893af7777a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38efe6d7-9088-4fb2-ba23-663028edfbde",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b60b761-b2dc-44a3-9165-caec2bfc8c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6368c91b-8e81-4c26-8b96-cb8abe5a2534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f2e530-3dda-46f9-9a4f-833d8d8fe734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8d68376-f67b-4dac-855c-2f0f1710902f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b9369f-c6ca-4b2a-a20f-caa8a2afbab9",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "083c1606-ce4d-41c8-a50f-6e8a853ae7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32302607-1299-400c-9d23-14c4fca57686"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b08199-8686-4e86-a692-1bfc9f7ee378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ed25a7-b03b-453b-8cee-ad930a54f50d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab47aee-b506-45df-a391-60df60b9a01f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b68755f-e1c0-4df3-be45-85af42d22eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c75d60c-e676-489f-9ed5-69f6f7e9f237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc835dd-0e36-443e-bc98-673b72c18d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c659b352-8725-4b67-8d2b-68267f5db1b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b631a24-ab61-4f44-895d-e36b66e3d6ba",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe0d7f5-9725-4d1c-b6e8-d11537d4483d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0caf150-5d96-4036-b9f4-f2ec15914aa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a372d7-5cb8-41f3-b991-3b6a110567c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "525710c4-e93f-4850-aa1e-2b8aac39eac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de1fa2e-e236-4178-bec6-ad2d8c3e6c81",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e3f7aa-cb0a-487a-907e-613ee4875295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa63cff3-17bc-4337-9573-ea3c07d1feb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcefe0e4-65c2-4c02-98b8-a2c62eeed64c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92281007-9061-4af3-8aad-639f954f219d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9058a643-7602-4376-b00e-c679474f07de",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "997faa27-4754-461d-8f1b-e3421f0cbbe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e957004-3f76-469c-b5ce-54ef16c84bab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee58ca4-ee20-4727-9078-312c33589a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2790d6b-2d14-4c10-b787-7ef5e9a0094c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913a6f7a-397d-4767-9cf8-ba1a6e75c21e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f87427-2105-4e66-a61a-611c6dcbad95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be911d68-052e-4cca-9db1-d34703d0b601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897fe5e1-c11e-4a16-95b1-3cd47fb4e9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "68c1789a-f5eb-4d47-be89-83a4fb0918f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822bc9d7-2f98-4c0f-9a54-aab1ff6cbed9",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5163ee20-cf16-4316-adb9-b0cc2b2f4dc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad85780f-2f3f-4b6f-9ee2-8e84ba24d148"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410f409f-95f1-4aa6-8755-13bd440b47e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d60fdb-a039-4e85-8c04-58a9f2bc88cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb21341-4249-4a9c-ab9a-81b0606c9ea6",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6556f75-3d16-444a-af6c-01cb1f3b59c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02fc23e1-9646-4e35-a35a-9be3e2ef09bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "478cc142-6c2c-4684-8f62-3edeafc9e57f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd172b2f-c7ad-4d8f-a571-943cf7dde139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0036738d-accd-4782-9f52-5a042422c8d0",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd715a89-6317-4205-8637-2144159f2039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94c77703-b58c-43cf-b43c-954726647831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6c12446-e299-4f11-8bee-5bfbf3ed8899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a36ffb36-0d40-4c51-a829-228f9c2c821e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ef4515-3322-48e9-8c54-d9b1d8bcfa49",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "596fb3f6-2975-4814-8a00-f32c74e6396f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0e2d74f-4603-488f-b625-584f4df5277f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e2e3a2-9898-4187-9343-987d1c33b7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd694580-42b8-4a12-90de-b30d97e37e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ab515d-0a90-4d02-9213-40b5e34cbfb6",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "609499aa-2504-4410-a041-4468bd81b289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "012dfa71-8ccc-4ec9-8ece-935e784dd28c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2548edc1-4dd6-4a63-9189-d5fdec514d26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af28e0c4-49d6-468a-869b-d8298791e948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be62e8cb-8abd-444c-8471-82a67e9c0473",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd0df8ff-55be-4005-8537-067079467b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dd2bbde-4a71-4c98-8f9b-bb7fc7d44146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a886470-d207-4638-99d6-27b46804a311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "84b6eea9-e99e-4719-a33a-5ffeb0be9d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072bf417-28e1-4840-b043-c1f4e9b131a4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d1bfde-ed44-40ad-877a-372a66b744d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4613496-3b6c-41bf-b667-e775dad8a271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06cd88c1-b153-4e43-ac27-18c782fa4a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a7006d-d8b5-498a-944a-1616fd38eaba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c8bf0e-e185-414f-b95f-dbce0a4ab033",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5127e0d-8433-46c7-9174-fd477ba36112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b698d6b4-7252-42a4-baf9-436180467e79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93101c0f-0aac-491a-b887-486f1e7ded47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "28e7aecf-aae3-4884-9629-547f3e69b182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b38b92-902f-434e-b099-06193849113c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fec276e-32c0-4c18-837b-1ef1363ea9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c5cdc4-5861-4a58-9a78-777233c77638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf17284-2365-4917-952d-df39342034c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8a153cb-494c-4bf7-8bf9-9585099ef156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f44e46e-0fe0-445f-aa8d-a627470e083b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40a1ab1-4a9a-4fd3-a944-bfeb896baca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "660374e0-f06e-4cbc-b108-433fd4f9f17a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd38e932-f204-43fe-912a-9ad3f61c06ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b91e1a0-17d8-4d3e-8ca5-fe1b91495929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "241b6fed-7185-4229-a950-bb9abe825637",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "428a05c6-c025-4c15-a6f7-97950eecf2c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f8cb6d1-10f6-4b94-b761-7b205d5aef03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f10c4a-71f9-4774-b06c-c5f263e0797a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "07e69f3c-c58c-45ff-8cae-7c1da3d17d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e79f380-fe60-498f-8cee-f6dad86140e0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf08a9c-bbac-4c92-8a90-c4323c41514e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16c4c626-d4b3-4b8d-a7a4-77bb12fb3aeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40e27a1-05f1-4797-a537-64f0a562483b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "df6f6352-d51b-450a-8821-c4e19dcb3388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d80495-3674-4f75-b8d8-afeb765e439d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7966f1-edd4-4ac3-adf0-94a7efeb7a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afbc978f-23fe-4c12-befe-98f58ac20fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8141867a-6358-4604-a356-1f6aaed44bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0b6eca2-592b-4491-9412-63e0d890ef1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d025a2-32ea-4de0-9534-617c4db16ab9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65dfbb37-a3e2-474f-8d9a-4af5f601a04a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a0a30b7-c568-45f8-8dc6-d77371ab5850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7374f5a-2aee-4160-84b7-71205095a747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a34aa38f-ca94-40bf-bffc-f0d630eeed15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf9f5f6e-164c-43eb-8188-d7d8ef99926e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d6eccd-1785-4023-91d9-751c4417010e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a2356e0-91eb-45d6-ab07-8090e0717cc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5609143b-960b-4596-bad3-b555089eb25d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c3de6e5-2ee6-4da9-9923-96370b7754f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ca1a97-f2c7-41ef-a8b2-f36a4e63407e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f16c99e-e81f-4189-b4a2-3d30f0e9d541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb60531a-58dc-428a-a132-6c0f23706c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2edd7d6-855d-4f03-8524-8e9cc2759838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7266e91-4440-47f1-a989-3b66bb9f177f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc28add8-4f3d-4edc-b42b-c350e93b741b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "499502e5-e30b-4460-b564-3aa686c876a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e36b5f44-e7e6-4f3a-8f03-6d716169605e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b657b4-d327-4e2c-a562-deec0c90c899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d363a43-78e0-4de0-bcf5-e3aa8e5a46f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86feb71b-9fcd-4beb-b151-7fec5d9a3818",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "556a55fd-693a-4699-87bd-d7347432434e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d365aa53-a628-4215-9693-1a35e9ca531e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4446f22-5fdf-45fc-bf80-5e3e689a26b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "631054a7-332a-4648-8d68-1b415a078e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5503ae3a-6366-4631-b5f4-694eca06bee8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a2f6e47-81f6-4f44-b722-5f6447edc1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08cadd06-22c6-4584-a564-9d7c8b261c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e266e93-05c9-4e89-bd49-b718711666b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a27e374-d476-45ef-b97f-c284ccb287ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a774ff0a-fa1a-4793-828a-9cbee2664004",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "325c2d45-b2ec-4ad9-8f7f-33250cfb2e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb047e8-fa11-426a-8be0-4b6045989dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f249fed9-b8bb-47b4-aa42-86f49781108d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6cddff7-c5fd-4322-8519-2ba52ad2d537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d1e9f32-7a63-4de3-8d9f-2834e5d65511",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95af9ecb-8ade-4f02-8ac1-157e2e286ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eec385a-95e9-42fc-ac88-038f1df45436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b81c640-c1d7-449d-bcf8-2998093a0fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c69fd31-6104-49ea-9c2d-6cad12858610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22bafbd-596d-46b9-9031-605b5e45d1e7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66010f3c-27c6-4109-b032-eb9a71ce8e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0430dd0-d250-4e4c-ad4a-26850df77624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24bfccf9-611c-4712-a151-aea0ccd5163a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a14a808-b137-4e3c-ac3c-34a787a04084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0917072-00a9-44be-8533-ef9bf0b22336",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e76419b-6963-4998-b022-341bb4e26d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49e323e5-bf6c-4c2c-8db4-c5662960a090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe191576-f6c2-4c83-9b07-77af7ecf2b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "575ab0ec-c119-438c-b1c0-79754d5ad2c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04fb78f4-d893-4480-bc5d-757f6d4d84f4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668d4799-9213-4941-a2cc-0ee6315c31c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "216f7588-7011-437f-b1fa-b1a83213ffec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c14b274-8ce2-4270-9ed4-5c541fb58b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4842011-8156-4fed-826e-4dbee72ffa48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5202ba91-c4c8-4861-826d-1b3ee1f8ec4f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd58acb-8693-4737-8539-55a4cf151810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89abc7e2-ac22-44a8-a1cf-9d7623d04ae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61123eb8-d529-49e2-a269-fc0c21dd05dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b7363d1-fe35-4c19-a498-dc0edafc487f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a6101b-8cd3-40cc-9f0c-ce6b21423cdc",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e0979e-3535-4ddf-afce-e06b51145b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "181c26ad-44c2-4066-909f-c90c594e15f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f38d5da3-f1b2-4c2d-81e7-4c1da791607c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "23021618-5d3c-4186-8221-f3c09f369c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f2c210-66bc-4343-b93c-245c1eba0fd6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "095cd7c1-823b-4436-bf12-f5b6546c371c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5efc54a2-7e65-49a8-bd57-5f49b92429fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c8a967-7685-4aa7-af9a-93310807b7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98b20efe-3fe8-42d0-a6e8-491a631a1aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2261ddbc-a261-40c4-87a3-ed0a76dd79e7",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "271c00cc-958c-43ac-9d11-11826585037f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8674efd-1bda-4700-884f-f916f9da7b20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410aec32-4a72-477a-b539-197403dab04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecdec9a7-54e5-4afa-aa87-7bdca27a05a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a35b4ec-4346-4d2e-85d7-4c87068e6cb4",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70a6733-832b-4f07-adf6-a8b23adec80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a94ebe4f-1bb8-49da-9e98-07dce916c9ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea6e2bb-6c58-4b86-b286-056ff0cd2fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ebe7ae2-706b-451f-8b89-f22a7d8fd436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c8e381-7dee-4d59-bbe4-e2d8b16dd5ea",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c38fb3b-ffe4-4ce0-8235-7d53eb63c21b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb4d8178-95e9-4d31-9b8e-4e251b3c5e91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39eaeb65-4c8c-4f3a-b4c3-0a835b24b023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "285972ff-1a23-4e50-8235-7e3f22bab83b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07645fe-adac-49d2-8fb0-832921e63a48",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8ad024-5a6c-493e-b29a-a9e3ae368b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfd1fd90-a3df-48a8-8b6a-1ad97326e867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a98634-53a0-472d-9268-68e0da8fcc1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5f93d629-481c-499d-afc1-12b0e78d91fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d4e619-107f-443e-806b-1e86df05558a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "291d8b8c-19be-4ff1-b1ce-8f12c091cbb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c387f8b2-c16a-45ea-8b84-c8947a87bd65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6910b31e-ff60-41bc-a9c8-aee8aef7a303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd3150f1-1706-41e2-a8a2-43f82ebfd01c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596b3b74-194e-46b6-903c-01680941e5a1",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce18ee2f-b753-446c-a11f-4f489585e0c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e347199f-d148-4f15-a88b-c90b5609f6bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c135c52-205f-426b-9b7d-bcaad2eb7548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "950e9baf-cfc6-43bd-aa6a-2066dd4cbe19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07642327-9560-499d-813a-f566b83c061f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26919456-a9bf-47a2-9a49-8f7a2660f72a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15bf895d-150c-453e-9a7e-6051debac25a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9cbd0ec-42d0-4987-8e60-7b9640e94141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6550795-492c-4f0e-9f09-5bf04d9980f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9046dda7-377f-4e38-a339-1182ded2567f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b957d3-4f8c-4029-baec-87eff9ae6800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0665833-5c2a-4ca8-b884-cc1f577365b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a025f2-05cd-4cb8-b458-a11679df793d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e99ec256-4bb7-460f-bd00-788f3c46fc95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0722ef-1354-4e1d-8e5e-12862454a272",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8780f968-6dbc-4140-ae47-d58ee55014e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dddd738-9016-4376-9f4a-49219bd271a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a20700d-1e40-41b0-8308-2c1252bc29c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "74fcf0c8-33d1-4716-af4b-5e7d38ed32d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9edcd82f-f6c5-4b84-814c-6c25d208c08e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a1d153-ca9a-4abe-92fb-f93aee91aa4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be974c78-36fe-47a4-b05e-b485b35620fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee069a12-b880-4a20-a584-373034d48185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1ed1d2a-604b-4b2b-94e2-0fcb1166ae1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b971452-1428-440d-8288-b90a960c6e57",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd76c349-8cc4-40a7-ba1b-6c920afe15a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b5c1000-1352-4cd1-b5d3-2434e30cf670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8baa5c56-4647-4199-b0eb-3a44f7c3f42f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "41f95edd-6cc8-467c-8e90-62d49f8068c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c73760d-c4c5-4e25-8628-f7ac98037ff6",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "604d10bb-f39d-4b4d-9736-48879f3de0d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bfcef88-1e8a-4b8c-8730-dd3e8b0d77ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21237cc6-7140-4208-a01b-3c7274e31c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c77804b-728a-488b-8b3a-8eacd84e4258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a82468ea-2000-45a7-921c-1800b38cf3f6",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4dd8a7-ddfd-4a7e-b315-1e7204f636b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d64dcfe4-b4c0-47f0-bfaa-4e140c48d3ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f302db-fc19-4d2e-aa15-69e0d687495a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e540d69-7501-45b1-bfdb-16fd83ea6ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd55e9a7-e0b7-4fd8-9de1-e62ba8482881",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac90648-7e6c-4dfe-8e39-07a4050815d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fce2897-0e85-402f-9415-2a5fe6be85d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c2b6df5-96bf-432a-a9be-91a002b46a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "85190b5f-17df-469b-96b5-49a4ca9d297f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3139c0a-a6b9-476d-a16b-9b1beb7782a4",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc7917b-e072-479c-a4d5-24b21b0b0a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcdb4ab6-0ab5-4291-8f2d-5e6ec8390057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1429dcbd-d44f-4405-b6f3-5dcee1ea7cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "594ca7f9-28fb-4656-b095-f84e568f0374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a17db6a-dc5e-4baf-9ee0-5d367c4235cd",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e6a48a-b677-4355-9158-bf608ff3b52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "26c171b4-0ff5-49a7-8a51-5189a56eeb71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e6b585-7f58-4f48-94a6-7f59d3d2cf95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fea37ab2-4a58-4f2d-899c-10c17db094cc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8299284f-2d85-4727-a418-cca3437a1b55",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f7f98dfb-f3c8-4679-9f9e-a8f32f9699ba",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8008a85e-2688-46c3-9620-ed87328dd986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c650755f-f527-4099-b027-ce403c53a618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ebc617d-ad61-4855-9e92-0bb1a4687715",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "73b47509-3b69-4821-b52c-589c081710b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68dd40c5-5e94-4e0d-9d72-fe01756610bc",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9318089f-dec4-48eb-b38a-cc8b0babaf7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10fc7ea2-5823-4523-9187-4e1d6c7764fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069a29ca-5dda-4c39-b0a8-0ef517324aba",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "90dcb59a-4549-47e9-81b9-36d52d9f85b9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f194c6ea-5a50-4146-bc7f-8ee3554c9467",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "078ba963-94f4-49ea-8f82-d215aa0fbd5f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "886a3dd6-aef7-4455-aba8-4f019fe7b8b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "daaacc1e-a021-427f-b3a9-df5df46247a0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9fdb93d2-6450-4ce6-abca-34b64abe0ef6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c0a4b6b7-94e1-47ad-8c04-fbbbe873e7cb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7368540c-f68f-4cd3-9f9c-c453c608952a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b7b7081d-dcd8-42bc-a945-df1f419d0f23"
                }
              }
            ]
          },
          {
            "id": "622e7854-0c1e-4330-b518-c2dd12db21dd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a2537d92-8b1d-4eb3-83a2-b59d4ff9f70f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "288c20be-a7a6-4563-bfad-5049b189b8f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9ad0e969-7fb8-46b7-a004-6bf5616d449f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2abef5e2-e079-4db3-9138-aed29465e8ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dd21fc60-0239-4f80-a280-5120ec6425b2"
                    }
                  }
                ]
              },
              {
                "id": "e3e7a4aa-6733-4822-89c9-0a124e399ce4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bfdbd338-f312-49e9-bccd-7c344e2381f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "63a9a28b-160c-47c5-84b7-8e3e3b05f24b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1f127b3-eae2-48cf-a868-03a78809c48a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c1cb9955-7cb7-4eaa-965e-692763766187"
                    }
                  }
                ]
              },
              {
                "id": "ba14d13c-ebc0-41f7-9563-2813349793dd",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c99766f1-abe4-4964-9192-afb179497c5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bf374f66-cf9c-49d2-8191-46752fbb30e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33a96037-0c3e-4bc3-9929-edc46f1191d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "3362a609-3c10-4148-81f5-8c243492e8c1"
                    }
                  }
                ]
              },
              {
                "id": "d32dabfd-d43c-433f-bcc4-0de9bcdb2c46",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4bbe7765-1767-4a25-9163-16f7abc6f3a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f8e817b6-5cd5-41f4-a3a0-4e11858c990f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f9ff273-ffac-4335-8622-7389d8bedf1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5a0d3027-e518-4e0a-b422-2cc47f974b3f"
                    }
                  }
                ]
              },
              {
                "id": "128cbe62-f3b3-4189-a03d-adb3c25a6691",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ba663d1-ad13-4729-9e34-994102566457",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "42b5ae07-c6cb-4f40-be4f-2652b5ac3ec6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "528a7279-b43a-4502-a75e-df1a61b9a4ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "442c865c-2a34-4541-baa9-379dfe5d67ac"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c138a8fc-c1fb-42f0-8a83-7d8d27c10d26",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a0173af1-7384-4b3f-a0e7-0dfc69f1345d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "49df205d-8c42-494d-8b13-4022b3185df9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "02269929-3ca4-4f2f-8024-968b4d725736"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "217f3a48-a67d-461f-98ac-af1836fccb23",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2d96c378-8130-4537-8815-6ee134b03b5e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34d718c6-ae4e-4dd5-9eab-3f0ae82fbb63",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b6e11906-4bab-4e90-bd1c-8b097a8e5378"
            }
          }
        ]
      },
      {
        "id": "3ba59860-3762-4964-b9f0-6c4f5065a35e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1472047f-01ff-425e-8388-a346c00901e8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "72c1fda7-7127-4f34-a845-f647060a7c62",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "65a8623f-83c0-479c-8b60-1b4538058578",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de87184b-8a3d-466f-af37-1883b1f9382c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52449c06-750a-4d0e-94d1-1c7b5252ac13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef39f34-ce37-4d03-b805-4e2ecfdb2237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac57902c-e657-4c2d-98c9-ecda8b4c4610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8024ab9-0c65-4496-8db8-cf6b58a5b623",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7afff7f4-3d09-43a1-86ad-8061020f5d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adec849b-aa2d-4e48-ab78-bd5151851802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a35e6e-7d62-40af-876e-8d90ea711f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4345c3a7-0246-4331-9294-ecf1f28aed12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c5818f2-f6cf-4185-b446-0ee6595bdfa2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4bcd291-56f9-42fc-99e4-17e738993e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24b955a2-8ed8-4bbf-8797-13ec81fd7de2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60cf2741-a424-4671-865e-13c9de2a5b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1feb2b1-9353-4405-9fbd-c075fe7de94d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad49a5a5-97b3-4bf3-8e1a-cbeefde37790",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "681b9791-0073-4917-bbff-d2d473264795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e2d4dd2-5f85-4d7b-931f-06ea5e4430a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "983d5594-62fd-4a93-84d8-2852062f9938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "48e0d9e0-3be8-4883-b10d-1defa2d7447e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e350f6-0d3c-4320-8952-538ecbe26544",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a422c03-6fbd-45ab-a5bd-161761f665b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e429de8b-2af5-4344-8193-40493b0b03ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0f63ed-01b6-468f-a4fd-e0b59c186c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0278fa7c-43aa-4553-aa33-b5d0b9b7ee64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962f6f56-5b53-45d5-ae9e-c6eff8ba2897",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34f3aa8-65e1-4058-92d0-7ec2236c1309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a65b1114-1a27-4d1e-92dc-a56f2b5a216c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0534fa73-059e-425e-8a13-74f1727ee7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ab49c9-c722-4d7b-b0cb-84eece75d42c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8baa943-261e-4bf1-8643-182bdd9e71c4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad942b5-9469-4104-80a0-e153e51f31a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53290cbc-285c-41f9-bca5-790f54040382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10489c7f-f584-4ed7-a32b-d1cc06f8258e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c6ddbac-47f3-48c9-a59f-e7f371620429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aff9b17-b34a-43cc-850b-a06883918795",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12c46f7-5384-45a9-8187-cd49450a9b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccece14d-265e-41cf-b54f-90ae19f812f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f77696a7-2676-4d60-9db3-b8dea65c286a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "704a3ba0-40ee-4c3c-a243-8aa9304ea21d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c46ccc-e6b7-4c39-8b34-c6eeede89c34",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85b7087-6971-45b7-8b67-0305811c03ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9b93bcb-b000-46ea-a2eb-6f87fb3eae06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14230ba5-fda7-401d-a8a8-4d3cd02e0f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff043fda-8508-489c-9305-ee6ef760592a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92de9792-eb73-45f2-87ef-03cedda81c41",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e3a86a-2916-44e8-b730-635a7a142c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f71bef0e-152f-4498-9a4e-18318c66224c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3492843-4b15-485f-8b45-ca5fca199725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfdce793-4a14-498d-9f55-29722e99aa09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2988f572-82f0-4ae6-9925-97d3c6a6a64c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "116a6422-9d08-4921-be3d-fd0d7b499a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d78d6297-5d5d-49cc-9ec9-7142cf74f1cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8f7448-2b31-4ab9-b6fa-c646c0cd0d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "963e6891-965a-4331-8a17-9d5a1c0b8f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f96e37-d891-4d02-8e50-5840e703eda6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c6c32ce-2e00-45ba-80e4-26416169dfef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0880b2f2-b588-42fd-8976-6cfdea56bd46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a5e354-9090-415f-9944-89f035e42cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "988c15fd-6a62-426e-a615-31e2d7374f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "168fbfd6-5921-476e-a596-f68c09d5fdb3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe29b31-1c19-45a1-972c-9db1b07b16b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f93be186-3f07-4064-b2d9-5c37ac1af302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf00c80-c646-423d-8c49-7c4f3d21fb8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5184ccea-f0ba-4218-8b52-07c05faaa1cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e676cc-2c3a-482d-aa6e-bd15256f46aa",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6703cb6e-2c4e-458e-a279-61064532787c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "609066bd-770a-4fdc-add4-0095939b7167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b8a7a1-440e-4d57-8343-9e0cd0fc9f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfed969f-a4ff-45c3-af5b-89047b850766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9fa6af3-5ef4-4b34-9e1c-0973f33787ab",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0db544c-ad43-4fb6-b81b-c77df16277e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f61dce47-94e6-468c-bebd-868e43c7eff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7164a3-0412-441e-9acd-39662e60e5ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8110f2a8-2613-4bd8-b741-16e228e61e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90725dbe-a4f3-4832-b789-a4e0d2837103",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa7f9fb-93da-4fb3-8e6e-860b2be38c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ff7f808-dfda-4462-97b0-ea34ac9a9ee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8afde29-c02d-4c04-aaa0-b1964acd2de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbff38c1-9393-4d56-ad70-98254ac60411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf6ecfca-2fb4-419d-8ee5-87e3c8a49f95",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9ff468-2721-4368-9114-b1b61e7249bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54e54414-7ffc-4294-b749-6397b2d2f813"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f904462c-462a-4ead-94f1-51f3a6ded5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "88636383-70b1-4bb6-bdf7-9233d68824a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c09da9b-ab4b-44c1-9b83-d43bac6e6df8",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41cc1c85-9724-4692-89a2-cee187d5c38c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f113f8f-bf94-4b08-9330-30595e5d6c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acfdf451-f2d7-4298-b985-bec1f57ae2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "03d6682c-9149-4881-9f2c-c0de0ddb2557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa5b6c7-cf28-455d-b9d5-8b1136b9ae44",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c0af4a-1e50-4c24-832e-f70a61c27fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0374258-1731-4c43-9b37-01f88fed6c44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc9edcd-00dd-4789-a511-1df260b78108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3c3bdde-0901-4717-8ccd-10e60195c353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01eb7528-e3ef-4352-a803-ef1c158014f0",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b92166a-68c7-449a-bdff-22da66b6ba06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "195f758c-dc6a-49bf-87e0-2769b7977f2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de18e0f-0ce3-4121-8f8e-5b1b9c0934ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60266c20-3a99-4412-8ec0-304a1922c4d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d88a83-061c-48ff-8ebe-1599dad413f8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da113aa7-d9b0-4400-9031-1f9c3ad2ca5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa8b98f4-132e-4d91-b9ec-63e0b420efcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "244fc44c-5cd1-4675-bf50-9ecd919e13be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bb043ec-a2a9-43d6-8b3b-28d43b3f89bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4abe5e20-6e4f-49e0-aaef-b12c3a10ac27",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf988e5-4671-431c-b620-4129809ce18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f8a458-959e-475a-9c99-37101e03cc03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a03354-5a28-4e05-a554-0a7f1f883741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "094b1cc7-5089-4cc8-80a9-997841bce65a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6574f27c-ec7f-430c-ba18-303e707917fe",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa31e4a-26b2-4717-80bd-c5aaf60f1370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ead68b3-fa68-4ec4-8760-b31ff8c79fd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6333ec2-82fe-4007-b519-d4f9bc1ebb89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92dce042-edce-4751-bd04-d306332be0a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f8f2be0-c7e4-4b2b-a924-216259652a76",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3139ba54-8546-47a5-bf5d-6a9b0e487e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27e96f1e-d3df-49c0-ad88-714a14a4c0d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec7ed06-e501-41d5-a01f-17ea7ad5a2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a73d3006-fcb0-434f-bc43-bbc9208d1c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412f7bf0-158c-4aae-b7ae-21c84e016db9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b5330c-e582-4ece-b8b7-0da823a12489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f4e312a-cc90-48d6-b613-1042193f0496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afcdf2f4-a4d0-46fb-9b7d-5a3cfa43d0a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c7e8692-e705-4708-9446-40968a4b9491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a0300a-898c-45e2-995f-db0ceab154a0",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eadabfd1-05d3-4f0b-8e4b-02bbeb17c36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e0484b6-9754-461a-8a17-4cd84672f8a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ac4cd6-a627-466a-abcd-cb6c6fa73d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "915661a0-3397-4350-8938-56648760fe44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3b1615-c155-429e-85e4-7205ca51fb20",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ef7833-6509-4455-af1b-450dd8b5b25e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "923ad8e9-0c8c-46ba-83f9-bc7a2cf624a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad033a5-c290-4d20-a5d7-209f40cfc354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5e9d698-f395-462c-99d8-cbbffaf40fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f822b8b2-5bba-45cb-bf80-0658267c9bdf",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6efc23ba-304a-4ce8-bd00-9ff6faf53aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45a2b3ca-e7e1-4755-aba8-f13fb3c6523c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad8a274-5bca-4324-b371-b0ec3c95a5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0aa7d0d7-1a36-45ac-9f8a-6f2e0f014d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b8e6c8-89e5-49a0-848f-acc4d3a6c61a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed820ce-78f2-41ce-90e1-10c9e74900f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bb55704-12e8-4dea-bbc7-e7934a5ba8d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "338d54c8-1f3f-463c-bf9e-6edc9ba0bc71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca718b0e-1a33-4b11-af2c-5570d8905dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38845b2a-8cca-47d4-91d1-c007960f8dc5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df94ee6c-6165-4081-89f2-ef76d0a382f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1987dd26-8cc3-44df-838d-bdda9b90363e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63495663-e345-4b15-bd09-4d5dc332abfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98e0fb48-27cc-4923-862d-ac1668cd8d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7208bfe8-8f54-4207-bf50-688306ca60c6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c61ab03d-0549-4738-94dd-63f16f24a403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf3cb92-0c2b-472e-8119-25be03d2513f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0cd2a8-b1cf-4b10-9a98-984bbffd0f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d83b4a5a-2e65-460f-8131-590967c11ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbd35c5-77c0-407e-a243-49c6ad5b20fb",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda2ac27-1b26-4096-ad2c-bc64e1f22768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c674969-83cc-42b6-86b6-9e503d41435d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92341c27-700e-4f4b-92a4-17859634f54c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34b2ab69-cc3a-48e0-b42b-428355e86327"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4d848bf1-2215-40b6-9a31-3d1307829044",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "58c52292-9d3a-42d4-b762-8c03a614822c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b95616-4b80-4f7e-8d0d-a4ff43553c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b4d593f-fd0f-4cc4-9db5-c515ae6c683f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe3aa43-44fb-486a-b9c0-df29f14e69b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cad2caa1-5d1a-458b-bea1-e2c110c207e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a48696-3768-4463-9e49-cdcafc2ac1ca",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3edc8ec5-6763-4ddc-89b3-73f382a27ced",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "ede66f9a-71a7-4cc0-a7f5-853fdf89eab0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb6e43c-1924-454d-b97b-42fa8270a4ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "559542e1-e6aa-473f-b218-29de10b56ff1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "704b37c3-211c-4892-892f-babebe2d4e9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e42e8c2c-404f-40d5-bef7-fc73507a47b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e39b4ec-a147-49df-892a-5abb64ad46bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "573f5d06-92d9-4670-a9b8-bd4d11f62f7a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0ff2e564-7f2e-44b1-9607-4a4ecd6b0942",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "07e0db4c-da31-483e-b26c-ab3fe22ed0f1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8262d971-daf8-419b-bb00-d49e73253a66",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "29ed638f-daa0-4e6a-bb68-5d1b9fdee366"
            }
          }
        ]
      },
      {
        "id": "fed72ab2-b96b-4caa-83ed-e0175ddea33c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "baec80dd-1e5f-4601-9be0-0f7abc92ec56",
            "name": "Negative Testing",
            "item": [
              {
                "id": "95ac9f5e-fd38-405f-824f-02259990dcc8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bc13acb9-ab4b-4675-b71d-548dcb531ff0",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "915205c5-a8cf-44b7-813f-306611960356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ebf9106-03e1-417c-af4e-ece3c9384296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc9b6cf-4d9f-43c8-8bd7-6446ecd0f6fa",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b8b6fa0-3759-42b7-98c7-a25d4ce4187e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e9f9028-bc7f-4513-8309-0993f979fa0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfba53cf-632b-41dd-b3af-16b80a9b4183",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d95abb0-3915-4bab-a08b-fb646d70cc99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f1104e1-08e3-4962-a452-05ee874ac136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67dee268-3273-4984-aa3d-c73ff1e32b09",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "616fd868-f107-4d99-9633-97be2a9dffe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e35d44ba-3af8-4592-aaf1-33a95f17c9ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee93ebfc-b257-4965-ba48-2f5c87021f78",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24420ec3-d25d-4d77-afa2-58d051162c0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92f87da3-f7c2-4379-94e6-f7cf2d3fc50b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad3054c-7bea-44f4-8c7f-0ae8b9b2bd42",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fafe344-7746-4e19-8a68-aea37d7a4ea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb3edf73-1d4b-4618-8b4e-2943d6319351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bad546a-7a08-4209-8833-02948dcbb2b1",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c299057f-9f12-4d1e-9c15-fd334bd3a340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13bed977-6e7c-420e-8f08-73dccd23050c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48cef75-9e12-4241-975b-d087acc819d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e103dbed-66e9-4969-9884-e042746ec66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3053f40d-3e0f-4e93-ace9-6342adfbd146",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4906f7e-5e0b-4838-a0c6-c7763ecb04f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "778722c8-8eff-48b3-915a-8c64f18c1238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bcc8068-8837-4a5d-8b43-69988415dc43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c56817ec-0af9-4169-8bbf-24fbefde9377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a880d6a-0387-483f-8404-b5e800d73db1",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a64c195-ed18-434d-8212-736083399194",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b4d5ec4-5d0e-4a2d-8077-a2bfa6b99747"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "803ca0df-7c72-4007-9e8f-b481dc299677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e979a39d-3477-4de7-b964-3872ee98f1a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e07854-4f8e-4671-9102-3dd7e63fb783",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8bf179-cbb8-4dbe-9906-ab6e13e2ea52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "477ccbe8-f889-45ec-88f0-20e78e10d209"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7d150a-1d0b-4127-8590-e1ee584639e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f767acdf-fe34-471a-8361-3e04f428690a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9a828b-58ef-4922-8f93-7e02f2c11086",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c2d5f6-a5bb-4dc5-aa92-8aaf969c2cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4991709f-cc51-4fd5-b9a5-12e706d03b1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f496aa3-52f9-4dc0-b6c7-440f0cfe7d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "037eb6ad-2ed6-4f7b-8238-3f9057723495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d1f1c3-3983-4597-93a0-ba0841aa2f66",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9809b951-494f-42b1-bfb2-558b966c7e31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d8cc6f3-b306-4f2b-8f64-54d6f93c847a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74705c48-0eca-47b6-a881-d99b7ccdd7a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e086821a-83f2-4ef2-810c-bb0aba6af124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355da712-5e9d-416c-9ce3-fd30e8bcff7f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceca43a3-a150-4d68-ae8b-ff3fe4355db2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6842b08-1047-46c1-adb5-0904d863f630"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1bff14c-ea16-4169-885b-3941859ee484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39585685-1e22-40fc-bf3c-49306115944b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb97a7e-840d-4cbf-b727-d06556db636a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feffb29d-caf5-4e55-947a-8e6188e9bcd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ae62d80-a2d5-4bee-a8a2-93feaeacc6bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "decf630b-243c-496d-9932-7a48ce720097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d92eb26-d4d9-4957-907a-cb0c7445f274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1570923b-c181-4592-b0f4-27f853a067d3",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c92528-d574-488d-adde-fde70a777b61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b83ea3b-8aa5-4879-bfe4-96a4115c6abf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e992bf95-bf6d-43df-a128-2a0835ad6f5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d706df-3c89-45f7-aaef-fd3bc84be294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e1ef68-9901-49eb-b8b1-2390a2cf9722",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8db6145-d8b2-4567-885f-68c706013d40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "343e2448-6f1e-4788-b7a2-5d0b92307c24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c15d062-c629-494e-b71c-87bb5c5d426f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dc43e3a-b105-4266-bfa3-922d46afed3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5507e6-df0a-40b5-870b-e56ad923e0d7",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d55058-40cb-4279-8314-6a25071df396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43a334cd-32bf-4bc7-8bf8-48a4ef379e7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc122891-35ca-414f-b128-925a2b0011e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7fb94a1-043b-482f-bf37-d81968894d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c4e0f65-554a-4154-b3a5-91cafccefb77",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3340b59e-3e4c-4764-ac34-1f4ec8edbd7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c56556c-679b-4dab-bd6b-0a75e0a2ffd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6877f085-4f15-4d49-9fa7-6091e697aade",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bea6d1c-36dc-441d-8d92-dd16fbd95f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e72fc6-1eab-413e-83f4-eca83ce8875c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f885b128-0789-4b75-bfe2-ff2f0b3624bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0f10736-dcd3-4160-a611-dd37a05d858f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f0e0a1-b9c7-495b-8e13-52784b95830f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97629101-173c-4f1c-86c8-ed3b875c0e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f422fb2-ba3d-4b22-9c2f-f5e05a987415",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a16c10-9ec8-4642-9ed0-8468697b3550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af1ad03c-7973-4acd-b48d-28618c1e7d06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d094a7-5644-4c95-a907-ff80b3e39cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceed74bb-c807-4940-bd46-bf52b98ae754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5498580-e657-4501-bac0-fc793cf61aaf",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d858c233-dd74-4eea-b257-5e6d209dfc79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70d064de-ddae-4cf8-bca9-f363d5933de4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1015f461-d39d-4206-852c-5f50c9ed532d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b33b494f-5670-4b3a-92ce-26b77b3155ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce7a1ad2-8d38-4189-a267-73c40ace4efe",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d3dca8f-ab1d-40a6-b8c2-7cf65c207b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d522756-3c0d-4a5d-9bfc-d58eed1e5919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61358dbb-3699-4e05-96d8-f6f5a1b77e56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7fe5f02-308c-4508-a194-60447405b413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bacabf3-aca8-4048-8442-81a3ed3659d2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266509da-4324-4398-a136-8ee0708e01b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b9590cf-8fd6-4a81-80fb-7ea7a1b88ebe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef91b95-44ef-4ced-95fa-a8ee41496641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12289f83-d35e-4931-87d6-d935109cde2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d7c3ec-aade-4e26-a9c3-8461b01900d0",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c398101f-f82b-476d-8c66-9bb28474ac4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd3fd3c-938f-4870-8760-0f1134763827"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94911488-6e3a-4c86-b349-85ea53dfb596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d765e486-9746-447a-86be-a69d1b59d505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e366c93-bcdb-4e8b-a176-64ff07efa2c0",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c88d12-d73d-49ee-9071-fe842e10940a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf227d16-f4d9-4977-8d4f-aa1fc9de0ae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33c27bd7-906f-489b-a7db-892793c10071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c64ce6ed-2075-4ce4-b471-de5070cdcc0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99728763-c241-4a13-b075-ed8d76a7c654",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e12a491-2e42-4baf-9bed-bc51675bd053",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb1161db-0bed-49fa-ab6e-eafc1efd1d6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13146a44-61dd-47a6-b957-1448d09c798c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c28e18de-3ea0-4f32-94ac-549ea12f4073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "affd13de-0de0-4522-b4ac-9fd0796cace6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d261f0-e658-4cdc-b130-730f481a19fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "257c7057-3a80-47eb-97b2-2346b414af9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12143e88-a9c5-4c35-8860-f6f6498586ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "249b1828-ccbf-4151-acb3-4393ea6448c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a44c62c-a214-492b-8cc4-67eeb0e47fdc",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae484152-5488-4447-b59d-d143c5c89be5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86b9e882-d7f2-4448-81fe-c9f25fdedf3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d04c897-9c01-4f94-9ec4-ea96714b6881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f92986d9-bb09-415f-9a6c-4d80e6abc226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98f5731-ee00-4619-b0cc-a1d6126f9e91",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ecd180-bfd3-4919-9a5c-31cdd6cd341b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17c5ecd5-6316-420c-be81-daa5d3e450e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7bce923-0827-4ea3-b7b4-0f17d447370a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a5e3c6-e577-40ea-9c84-249078dca1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c12a1c41-6123-4dc0-bf15-9b1682c6e9d6",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b7d12c-df65-49c2-9407-e6f06560cd1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c14b7564-7f7c-429c-b75f-b7ac4de7c0f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48343f5-3845-4b7c-869e-3f8cca51f2ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf664250-f478-4294-b4d6-c43e22f9f943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9162b3d-ea39-4dcd-be41-07640d4b562f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d47093aa-a38e-45f4-a367-aba9feb98eaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "044ddab1-a188-4b9d-b9f6-711a79ce0c39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "898da2c7-e32d-4828-abf6-6d6c0ef63781",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c99d947-66e4-444a-9163-36ca2b4d6402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ace725-d2d7-4427-ae55-ac101ad6ff26",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3984c06-fcf6-4787-b4f6-6e88d2774162",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f5144b4-0c95-45a5-87f9-37ea3a11ed94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ed50e3-f5b7-4644-b623-36ff6526a933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a09aadf-4e3c-49ca-be1e-0e50e6fa8de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a65b929f-8739-4a4d-969e-60dc4e667095",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171d1ade-15d7-445f-bff5-3be5234faf25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1357fdb-3f42-423c-a56c-e8aebf8873e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fedf091-6768-4a03-b414-571787d4b5d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c35d3de-cd6b-4188-bfb1-cdce08d241ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27bfe508-ef1b-401c-a0f3-50b77c2f5762",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8c7c4c-f540-4002-8ae6-f06f80152135",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dc5ca89-a088-4b15-a19c-54b2387a42b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ac7c79-5f7a-424a-90b1-bdcc631dec00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53fa6383-c2aa-4496-be61-d791e61dd418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b6fe99e-883e-4ac9-bb35-4a55ccbc49ba",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b51c649-b991-4ee9-92de-c1397ae149bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff9a4e29-e48f-4ce1-b906-a9e4099f9c5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc87ddb-e277-48a4-a208-8c8451bd04fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1663756-c57a-46fa-9f6f-8b8e7d5bf867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c37a3f6c-0a50-466b-b926-a577b095e4f9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f595f78-cca2-45ce-8631-25912f5116b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2a0e563-b7bd-4946-9faf-825459c6acee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "244f56ed-ee11-41d7-beff-afc4bae8c61a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e75ab7a-b890-42b9-a1cf-f03febf8ec0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dfca745-fb6d-48aa-8d86-fe7f18d5df99",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8cc90d3-6788-457b-90c5-b234c95438e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5a1095-1a27-4929-b948-b1d4c9479877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "209ffa2a-cb1f-4c1a-b569-e3c9590053cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6aa7c2d-8ba9-4abd-9074-6d73486bac9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66db494e-702a-4827-b997-bf5d2ffbb127",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "043870ca-602c-49b8-a0d4-69dc486ab851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "852507a8-3a51-4e73-993a-435c5356d1ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88054a2-983d-4eb5-bea6-069a4f9f040e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "534641a7-2be5-4385-8735-adb90db1ce5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "525c1c9d-e1ea-4380-a0ad-28a46d871bcb",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e972e7c7-b0d5-4f1f-8c50-e5593beddff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9528e7dd-a53d-43e0-aaa3-2997d5762753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04831baa-cd71-432e-b382-25ef861cb957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f554f0c-ad07-4526-ad1c-f102f8dfe023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59339347-9b96-4c78-91da-07953a7d1ea1",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff94d8e-154a-423e-a5d4-a943b95183ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bcde4c9-9bc7-43ad-9c35-811157b09f06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59b4efd-54fe-45ef-aa76-d430eb672fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "162d7081-2727-4d1f-9fa8-c84e1164b2d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f8976bd-4695-4e2d-a409-f9abaf5ee7bb",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da97311c-0348-4bcf-8075-092e767674a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e8c6a29-b10e-4aa5-ae5a-deef6764768e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13742dcb-376b-416f-b6d8-514087f28876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "931e4aa0-9d74-472d-8f9a-0c34c87701d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f47d4bb-ce0c-4a24-b465-c9af4a1297d4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869d1b9c-a6ac-4e37-be84-fc7904e50e49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b2a297a-add0-4f71-b738-4a8e00106076"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5238760-d9f4-4487-a9f8-edf6192f8348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3a03e3b-0ede-46b2-a18b-b11e8eb6851e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4437297e-f6e5-4643-9e00-c786e4d3a178",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e24d3e-9ab7-4891-a6ec-7d13af7f89c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a58f8471-2211-4b0e-966f-ecaadd51ac30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab08f6a-c917-413f-845d-ec58712d4b0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cbb4762-2b6d-46b7-a31f-196240f4288f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6edac9-96d2-49c4-90ec-b679b4e51d2d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a53e03-ccd2-4797-bed6-e5081209d07b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26f2cf59-08af-4b20-a862-eb746178dd31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3dd9ce-0bc7-4829-9645-f2246e4573db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1650992-b8f3-46a3-a4bf-49ffe0188f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b0c5f4-56a1-44a3-940b-e2e2bcf7af14",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045a826a-4aa7-43ee-be0a-d6e295c2cfab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03f660a0-9f84-49b3-8e8f-7f8dfcee4175"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fcad523-266f-4652-92f9-8cbf73981fcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d12d0e70-ae98-47d2-ab63-994a23e81062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8f4a97-ff37-4e8c-abb9-39e29c5f0394",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d280cbe4-04d1-4109-98d2-5a70d3e60860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceeb4095-6f71-486d-90cb-f4a4dbd174bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab3118e-74e8-4267-9370-16b4c9943e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69e4dc99-fbfa-4562-a291-b8b23491b931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ff8939-95f2-410e-85f5-4a09aa775e6a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d18887-3e81-4ce1-9bd1-fc448008a33a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "821018a7-8433-41c1-87c5-1233208f2f4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a47c9b-26bd-4086-88f8-74cf9a2ee690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9e6dde9-7c5f-4b37-aee5-e868d0e2fec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66756ec6-0a07-45d1-8aa2-fb9a5fdee6c9",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6756a91d-3692-42b6-adf1-a872aae12fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ffa70ba-467d-44af-9539-9ef4e9090bfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5ee5f7-5a4a-403c-b76a-6096d8ca0786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d18479c-9b6e-4d4a-859e-000593b2f93d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c002ae-d223-43fe-9f4d-e3aceeb6710b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caaa3729-d59e-434e-b086-9efd04d7e5e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b06f0f09-3d91-4804-b176-f4abe5de21fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abdef23c-bfb2-4e6b-825b-b4937e16f6f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f8265cb-119d-4f86-885e-916194367326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "509b93b3-b683-43de-8f45-6d6cdd7bb1f9",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08107317-3766-42d0-9c8b-901c6f1ac98b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f121511-5871-46cd-8031-d43fb4830343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95863fc-30b9-40c2-90ae-b44c4d44e854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "515c89e2-5ab3-4eb6-879f-eaad2c51c01a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859d3900-5f18-42ca-b2b4-2055051772dc",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae46230e-0093-4fdd-9898-8e1916991fa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42d2ff6c-1d96-4ab8-bde9-68db30f6d7f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4194dda9-e034-4c50-8c95-203943ca46a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6970f8c-03f4-4293-94d3-81c982342c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f45836-045a-4d08-8c13-9a721e56d3d6",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24abed04-1bc3-4c09-99c1-81e3780b1f9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04622531-95f2-467f-af33-50a481be4e9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8492e945-aa7f-409c-92a8-1bd81f1d4fb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ba3938b-b7dd-44d1-9e48-2f4c744b8a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97288f2d-06dd-424d-ab2c-307decf738c3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5fdcfa-5610-4be3-a23f-45a8fc59383f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dea3a626-5251-49fb-8995-cd33dcc6c884"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7587f5c-547d-4bc5-8aab-348c9830cac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbab8718-aaa6-4582-8420-3ca35a5c6f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee7f3bd-ee0f-4696-b559-9ccd6a5bba03",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b803c5-702c-46ee-97a3-6372290c4e79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e26a7f8-6a17-40cd-9efa-c3baf6775d5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b701f4-6030-4397-bb68-05983674de0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c94d9586-2f08-475f-bbfd-811e44386ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb35c333-d657-4324-bfb6-058ab4e5bb1c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c40e88-224c-44e9-82af-4a788b572ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e914b1f-34e8-4ea0-9f3d-68c1cf918b59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39850bc1-9ba7-450b-9a77-c2df0292ddab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b49e8745-3e22-45ae-ba3d-0e2fa69ad717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8afd7dc5-1679-4d7e-913a-74e03f0b3552",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd49bab7-0467-47f8-b10e-3bc15f9546b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ab8ad00-a180-476a-b111-7740bed0e572"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa31ae5-a1ca-48e1-a549-2f47b316c591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3cf3f2f-8d13-4daa-8669-dba2b6b16706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d714f10-2364-4fee-afaf-0b22057a6457",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad43db53-1d18-42c7-843b-7615084a8d2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22578118-29f3-478f-8a17-c0d67356189d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33afed73-0ea2-4a0b-bdd9-7f151eccad69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4bafbac-495a-4f5e-8b4c-e72fb3678de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7c1d18-0d04-4032-8c33-ce6f07e571d5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b62cf09-f76c-4f43-90ad-7cc7ca9aaec3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f060962-f95b-4290-ad38-5dc4e3f62a96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "055f8f28-54d4-45b7-ae0d-bb953821177a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0166fd77-bafc-4159-8f4a-3124af0c3ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f037d1-4337-47df-88da-5fca3f856585",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e3612b2-f0de-490c-9481-b134b8be9cec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba7b12b4-af53-4ad9-963e-957a1ccbaee2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed5bfae-56e5-4ee8-bdb2-76ec8857f9ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6afb625a-bbd4-4e99-bef7-40952cdc80a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a47625-655e-4abc-b41a-51228cbdcae6",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b92df4-1935-4947-831d-2c7170b2648a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4f4a6f5-e61a-40c0-a261-62ba7010d8a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f88c73b-6ea9-40d5-ac55-29777a8a6f3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3968944-9f80-465e-a00c-a1a1489fcc13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5546f018-4a53-4796-be46-44c5b97ee7bf",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3a2658-e34e-4173-afc6-c21aaf967e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1246a161-121e-4315-b871-86553121e305"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7436a8-d5e5-4a6e-8616-efca06953966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e82a8abb-2c15-4562-aed8-72ad763d2807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf3968b2-153e-48f3-9ed1-19fd8f6dc614",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4fb4a3e-b165-4882-813c-cd0d3ce556f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1abd65ae-5596-4aef-bd56-1b8f45781649"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7d79f3-c183-426f-a13b-c0db2243cf7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71ffc88e-101b-403c-9b7d-74c14debe9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cea53f1-5860-4098-abfb-268e7b728361",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae220c39-6e30-4594-a4c0-843d2cb5d43f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f252cb2d-0e9a-4a3c-9962-c179c2434c71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5179250-a43d-4b20-80f6-13ca0cd028c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07a11d3e-6767-4edb-a4bf-c08898c8cfe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d849359b-9e0b-488d-a74b-e159e720243d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc388de-23e0-47c9-b973-927814a42486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e53b52-f843-4ce4-a699-b9095a228eee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95934d37-5a13-4e93-934a-15a424b71c07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a4d5918-37e3-4d5b-bda3-269e3da4da8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc649780-75ee-4fb1-bd2a-f296d06fc136",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f71380-d71b-4992-af04-edb39723d6ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4795f62e-f56f-4449-8a25-a9888857339c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1331fce2-a85c-4c2b-be55-985a2f816a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "990d74e2-1949-40dc-89f7-ef0d75fc2124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ffccb3b-7338-45df-bc08-6a81a93ab6a1",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe726b88-c777-4670-a594-340ff5be41fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da3ee3e1-a577-420d-bee5-da8ed043f6ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0c71fc-0102-4918-98ab-c57a49ba8fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "537e2083-7908-4bc8-a7b7-78cb695db115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4865c9-6861-4a06-a3ec-91d8d54e2e54",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0adf3868-8e7c-48c5-92bf-388e5278ef83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a85fe2e8-cfad-4f02-adfa-ba8f1d1ad284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0286d95b-8675-4a37-93ee-17b8861a0a78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31903ff1-364c-4753-856b-491f9c6e6a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce507d3-94e7-43c2-88b9-ee17fa065845",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d83b70c-e766-4731-966d-b00af09f11fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b83ac75-c213-4b7e-ab36-e772c154745d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8736b644-813e-4b67-8325-fd386579de76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08bc5ba8-490b-4e74-a87a-c8b30c5e62cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078f432d-5bdf-418c-80f1-0b69d23fe465",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "230a5f24-be9c-4868-a0cf-0ab8672cefd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8966c35-f0cd-464e-8687-105b919276d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da02cbb-8233-4941-b229-d6d5cac9abaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f82a010a-a6d5-4ced-a974-12ebb82d83d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb475c13-5128-45fd-bfd0-c9f096f461af",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2e9e11-a262-4e44-94cb-76c21eb3fcd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcc3593f-50d7-4990-a9cc-59e96418ad37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33ed280-7cd2-42be-9303-4ec1977010f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41bb5002-6a78-423a-8159-55aa518bf336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e3eaf1-9fb2-4045-ae11-ee2fc4012f66",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36854a3d-04d4-4101-8237-f0ee5218ca47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d7556f0-663f-454c-9830-14c1bcd7af57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b519e80-2fb3-44cb-8d60-d601dd7383e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20f1cf67-ae93-4b19-b7a0-038834a4702f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea508289-ecbc-46e5-952f-206a762b5831",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1967b0f-c7d1-469c-afdb-8676e6d16f54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d422e28-44b6-4426-af12-f75d9e87b519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2a2136-082c-40e3-8d77-82df92758388",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b181d48-0597-4398-b061-2cb1a2456193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb74d41-724f-4cac-87f6-5502e1d4017a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51cf5308-ae48-48af-a991-248c9bdd5c4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69979f09-78ce-4213-b5cd-f751576d16c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04960483-1f12-4045-b01d-8e43300851fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91c01d84-0492-42a5-a13c-5b807791bc29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1dcfb43-e16b-499a-ad63-46e4a37fdc5d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7081ac40-40ff-4a82-9441-66f4c486afa7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cb5c580-b7f6-4f01-a3b9-fb9d2a374a11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b627ebb6-3f1d-4626-bd6f-273884ca1ce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d45a7b22-5af0-44ae-95ae-7b6d42cf47da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1214ccba-8141-4308-890d-b521cc6de6af",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be37583d-2d92-4c4f-ba70-d19401aa927c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d05baab2-c56e-43e4-bddf-de6fdd0a8143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bff3068-fa8b-4b5f-b407-67ba54f298b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c609232-7559-441b-8fc9-dc9e71a04c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ac005c-21c5-415e-8d69-ea0b04a2fb70",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa451e48-6eeb-434d-8877-456ea902cf9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d50a3dce-7d49-4bcb-a7f5-a103d0be1aaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "936766b8-4d08-4622-be08-2883163fa284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "074cf6f1-32a2-4463-b2cd-42be79212e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81da28d1-51cc-4aab-9a75-78bed862d088",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce0902e9-2441-41ae-90be-e65ea40edc8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cba3ec04-4e61-47d2-abe0-bac8b4ae37fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e269be04-846d-4f4a-a93d-3249e805c72e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65fabe4d-3bc2-402b-a4ec-9fd26aafea22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4194264-3aea-4a4c-8b87-e4d01bd3a544",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2019703-1100-4b9d-8d92-ee8bea2d9e4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5faca9a1-491c-4425-8f49-709542f7ef28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "421e411c-0249-4042-96a3-836e199c9889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87f51140-b402-4672-874c-a7479858225c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59429cb-9d8b-4c5f-9664-5ab62ae25806",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf4fbfe-da48-40d1-af01-ff79ded8941b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92004ca6-bf52-4fe3-921d-9ed89c318837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa58c38-8652-49aa-bd22-e495f21fd8b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fda469a6-d1b1-488c-b6b0-2b5becc6a373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "005726a5-ae54-434a-83b3-5faebf71e931",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95446ca9-f807-45d5-b70e-dc24fc4b38f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a50cd912-47dc-472f-81bf-2d7b0d47ddde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de9ed1f6-1f45-4121-9fd2-a0775f6e5b41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d547e00-3c26-41ef-9169-fc76b96e526c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bdefca7-a09c-4779-b2fe-a23b9026c2f3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592bbb2a-f551-4c69-a055-5475782a6194",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "525267c9-8e76-4112-937e-61487986db3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e51b1b3-beec-4bbc-b4ee-076dd01d4afe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7d24611-96b6-4bd9-b848-dcd47b979081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494fb7be-9a51-4e69-a404-a2dac275e02f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3808291-1124-435b-95ae-60804ff8da35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0125f721-ee8d-469a-be70-05aa76de7722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea169d0-44d0-4687-b9ea-57910d7a1d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00f2c791-011b-4a87-acd7-4e16405e7d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de6a97b0-2a84-4cc9-a7f3-94d2ae3b48e2",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e947628f-51de-4a62-b57e-aa4a6f3b7adc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5df7e90c-4b71-42e8-a41d-47782fba5f7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12da893-6a61-4f83-ae8c-253553c909b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37347751-85bf-4d70-bfa3-039ed7f4adb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c519b017-a3fa-4453-9e17-1748c6052989",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a57041-13ee-4bf9-bf80-7d2d92f5149c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50ede2e7-23f4-4749-98b0-37214e7e0b5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45eec30a-e6f7-4361-ac50-56165933e303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd3f7cf3-583a-480e-81f0-6a73df42788a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85cef6a0-deca-4769-b2a5-88236bcf413d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a11e46-4fbf-4f8b-99d5-63713981b4b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0aef1933-4f51-4544-82d2-360a1a339f32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d25ea5-cf80-4a35-acf0-5e5c831c8aaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b4f1a82-60e4-40e1-b302-1a5395be97c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e345caaf-9e19-4c43-9422-e542b38aa847",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8adad0f-3e25-43b7-802b-fb3e57956726",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8534240-631d-4c88-9445-08e8a5ce14a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "239876f7-53cf-40b7-9486-f02c4e7077be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34d9fefc-b3db-4af0-a02b-61f95a4b1f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f0df86-2c2e-44c3-9a64-d8cba5edc702",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "351305ee-e7b9-46a3-bbae-bb2bced31919",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91a804d7-ae5f-450c-ab6b-1625d2dc96fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "043d5d80-e7ba-444a-bccc-e9f0c56d64e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfcc0dfb-7676-4268-bb77-006b49e10b8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b7f07b-bfee-44ee-ab87-9123fd7b436a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf4d99c-3699-4c33-bb85-90cfb603ea96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c262157-22d6-4c88-9372-f94c8a1d9f1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79420e32-a019-4800-83d9-be6ab5710fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1171416-c696-4c6a-80bf-66050a0219f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d5ed46-07e8-4fe8-b74b-ec6af13b1f0b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb3f772-5fe7-486d-a0f8-fd5e31d89836",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a93939d-de93-4f2e-8043-895085622b73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "262d0eae-08f1-4ef1-a50c-28a73b308647",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c21a04c-0cf8-4da6-b5f7-5f75a0795b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988aa51d-cb3f-4ed3-bdd1-0f600c145509",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d52b807-1d4d-4d23-b6da-3d4126f5624c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f49bdcd4-668f-409b-bb00-f7611eec31d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b4f76e-23ae-4984-b282-5d82b14b6628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a04b9007-7396-4d80-b504-e03215202047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5272da03-d8f4-48f2-ae46-6d799e13a20e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e04e19-0d17-40d9-9dfc-9d46ef60de55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29ff7fe5-83ae-4686-8c55-28ec93b1c78d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7645692d-3623-46c8-87b5-83bd1558966b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8994a85-fa98-4443-b913-8d05decd885c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4abd06-94e7-4a1f-aa5e-f81029468920",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a4332c-f11e-40b1-b2bb-e822947e7f25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ea6fbc8-6bf9-4833-833d-fe628e95a89b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c29c0e-74a7-4139-8255-596fcb2f1211",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75aee796-b97a-4354-b23d-2b0d433e91e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "047c98e3-3a26-4544-a783-2ca4db41b8ef",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb86f2bf-2913-4c72-a537-f2c54dd940d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10e1964c-7b28-4638-b232-3174d6e8d70b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec0fe51-952b-44aa-8419-6c877803b57a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30fd6746-99a2-47fc-9c9a-861d65e56635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715916ea-df1e-4e70-8faa-3e5e5ff04009",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78333bff-05db-45ab-b381-642cad82fc93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dce95e1-7027-4f75-9d2e-04aef60ecefa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa90881-4a88-4c88-b228-8c51a8b3cece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "352a846a-ac45-4662-8a11-ac8414d0599e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb289546-3f3c-4ffc-8fd7-6776300174bc",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fabb02a-6785-4f92-96c4-8a8e22afb8cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26d17e59-8aa0-415e-9d06-8ffba1426ee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0635e3a4-f6be-43bc-80b9-5406962bae8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0f7ac85-dfd7-4e2c-aa65-feade04c8043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff38621b-94b3-4099-9f9b-23e75f5bfccf",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "454f247d-4be0-47ea-a83e-0a320991115b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5855c2bd-af7f-4830-a256-c47e7ead76ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79491092-6c4e-4e6d-8ac7-07fb0253fb89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dbaaf8c-8c6c-4fb7-8e33-9d3719bc87f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4efcb1bb-e07f-4835-ae02-5253e76cb5b8",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798c5219-3ff1-4437-8243-ef1a80efea84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1014e99d-c352-434e-b869-0dd2d6d32f6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43978eb5-3b17-41c6-8170-6bebae3ddbe1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7df88f93-7753-4e10-82b9-bc4d1e6a8510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0727ac-3f42-431a-aa9b-33b4e053fbd1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bbb0f0b-336b-4ff6-8ed1-79ed2b5059f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7ada855-113d-4a01-81bd-43a857181f65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be0abcb9-b099-4f01-98d7-8716c4c7027c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8665908-c734-414a-ad4a-37666af7565b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe722509-248c-4534-a111-edc0fcfa6417",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78a0aa99-5201-4932-852c-d79259c4ed5b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "22250462-98e4-4e8c-9f5e-e360b840092f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4c76645e-f40f-4a6a-a854-08b9bfc936c9"
                    }
                  }
                ]
              },
              {
                "id": "332d01b5-1a64-4fb8-acb2-1930b2adb98d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7f466792-2512-4bee-a7f4-78caf0cbe6dd",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8eef08e-f793-4c03-9648-d0a148bc61a7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0cb22a34-ba0d-4b94-b7ca-980d93fa8d6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60222816-f90f-49fb-8389-c60309154dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1caa9df-554a-4b5a-b575-49ce447d48bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc378249-1fe8-47a8-9138-ebbbd2e5075d",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ff1228-7965-448c-8f1f-0789169ecd07",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e5bbfb33-8728-4253-90f0-d65302cdb05e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd68814e-3739-444e-a0a8-298d7432b036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad142453-fbe4-4598-83f8-dd5a43727497"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd5ac5a7-c124-4454-b518-3329c3468a92",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5dbb84be-1e1f-4479-833b-5540c40acfca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2ea89a6-eebc-49e9-91f7-5cb1fa9309bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d537219-e442-4d75-aa88-3eb9ce15c7c6"
                    }
                  }
                ]
              },
              {
                "id": "71f0db35-e5b2-412c-9753-da75f470acfc",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "bee6f47e-dc48-4ceb-b99f-424ab9343f17",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b82725d7-da9f-4c8f-9bf7-8972963202f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "eccc4c28-f2c2-4ccc-837f-b60d9de66ed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f98782-1192-4e2a-8727-d38e975fa4f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77b7cb61-d72f-4365-88a6-7a9d581da4be"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2d781799-a2c6-4511-9bd4-fe6fcdb26572",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4fc05a97-d0bc-4320-ab2d-f5dac8511725",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f473672e-7099-4d54-84f2-be4491c1e10a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b5ada3fe-73b2-4673-bd03-d6bccb1de4ea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ebdf69d4-b582-40a6-8dab-f0856afa08dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb7443b3-bf99-4ccb-a90b-ac4b4e1bdfa2"
                    }
                  }
                ]
              },
              {
                "id": "98764975-de54-443a-93c2-6080aa9f803c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc8a586a-1d61-4224-b977-a4ec2b9ba2b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "711c9a7d-3d77-4403-9554-42c56c7b1d69"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5016fe13-3a86-45e4-825b-d7b3aa218e32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "adf993af-8e13-41b3-a2ad-03554988956a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8ee68569-6da0-46d2-8079-c85e509885e8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b981444d-d3ac-4f0c-af6d-5ee60f1da004"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "90ed1d7e-2f6c-4033-962b-ed12999ee147",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "df5ff33b-d98b-41cb-8513-57277f64da14"
            }
          }
        ]
      },
      {
        "id": "42244985-3a64-4d86-ab52-fbe583623668",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "36a924a4-07fd-4c29-b390-6eac486f2983",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4e8fd1ae-7d48-4086-aa1b-212d8427a006",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4f306025-30bc-406f-be43-8cd88347236f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812dfe76-1f4d-4904-a36f-b0bfe3cae142",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "29daf8bd-fe3c-468c-8d6f-d69c7465fe56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13883e35-f5ce-4ceb-ac03-8bc579747515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c630f52-b90d-4d2d-aeaa-c4372782798d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784d80f6-1396-4f59-be35-7af610eb3a58",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef70586-4f37-413f-b8cd-260b65cd37f6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0eb6698f-63c1-44e8-857e-5d535c605fc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "329ad4e4-2fc9-4831-a9d8-d7ad3c4852e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "807c3ab6-cce3-42e7-86c8-e7f33d4d9ca4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec4ddab9-805e-41cc-8375-cb875d95a5cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70ddbf06-1b1d-4be8-8339-010140269d05"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "305ca102-3f16-48dd-990c-b99f80bd28ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbd329b6-904a-40b3-9557-8c49ad75623f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1fa5808c-8f0a-4bf1-a7f4-c74224a668f6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "de3e8ef2-6838-4090-b1ad-1fe9175c5c12"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f4aada17-cc23-41a2-be81-08c5d33c0604",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ba54595a-fd3c-453b-bb7e-90ae0551a640"
            }
          }
        ]
      },
      {
        "id": "aef94034-b1b8-44a9-91f2-843b09116855",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "49852ed6-caaf-427a-bef8-c7a32f8c3024",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7897d604-67f4-4b20-99cd-dac35e181584",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f4e50263-6b33-4565-9a11-592d9304b8c5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ebda29-cc14-4931-8a79-78ff567fbacc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "09ad2d26-637e-4004-bb37-dc378feb26a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b279ee3-211a-42bb-af27-2f7530c37cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "14935176-949a-45fe-aac7-3ee2bb06a6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2b7e13-6050-42ac-a886-762d0b62000d",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf499ae9-1943-4f35-96d8-3413fbeacb97",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "34c75fc8-afff-4e9c-b34b-149aca13158c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4202920c-876f-4904-83d7-d7596200333f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c89c46f-01f0-4007-a80b-d06077700975"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4554c48d-7186-40ea-97d3-a428f1aa21d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af17aed6-3c15-453f-95c5-cb8c05b6fffd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a80e3ac-6dc8-4143-98f1-7038edd00466",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2311107e-5f2c-448d-a6bd-fbe89440e26e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c98b7a0-59c7-44e8-8cf8-9bf7c1778451",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "224286b4-344c-4aa3-98d6-480219b1b155"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dba490bf-ee28-4678-b47e-f09e2b7a006e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "796e7b52-8672-4045-a99c-27b7f54b6921"
            }
          }
        ]
      },
      {
        "id": "0287e2af-a5b4-4dee-8000-49a051896436",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0296c024-4960-4b45-aa04-64a145950fbf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f44174fe-e525-4fae-afc2-3f65d75b4bf5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3406627d-f6d0-47a7-8aa1-2228dd2c3549",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61f7d1c-b688-4018-9f1d-8c4297b587f6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bf94ed71-fef3-496f-94c3-00c042901362"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4f35b1-8ecc-4771-be51-4e4bd2a325ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23c7b334-667c-4375-ad87-5d6c9cdab807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c4b6a4-f9f7-4457-91ca-41d08edf72ed",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b7ed9d-c360-45a2-b6e6-3dc1ec8ad633",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "aba9e540-0938-41c2-b0eb-efab9f0b00bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d7c328b-8f46-4063-8491-f7bbea1ff11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a59471c-848c-480f-b6ea-8440a3cd0a0b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b35f2255-8615-450c-b696-cfe522340a98",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "495d3fbb-7df6-4b5d-8601-797e39c15f65"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "03da61da-5a73-4a95-ab04-39f2f4414517",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d48c781f-3a66-4752-87ac-2371bf8687ce"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f8ef907-c487-4f3c-8c20-1fde65c4ac23",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b2b3fe4c-3c91-495d-a943-ae70554e52e3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0c6c6c41-d322-4e5d-bc71-b3fbd85c65f1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b129cff8-d8bb-4ed9-a0db-801f46a2fc91"
            }
          }
        ]
      },
      {
        "id": "63564bcd-8047-41e6-8d6e-7c119f0fec88",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d4ce4b6e-13cd-46b7-81d4-1b7b1c2b2c06",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6e7a0ceb-2bfa-4d06-b948-0c8f6163b440",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e75b5137-85d1-4a21-a7b2-d0bfcd53f1ff",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8657d501-3c16-4bbc-a0c5-b8b41bdf5ca6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9b6fe15a-a0cf-4f2c-a89f-77ff91887955",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 405,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 465
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 318.12486299192244,
      "responseMin": 7,
      "responseMax": 7018,
      "responseSd": 1219.2664992684452,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1672187833734,
      "completed": 1672187972612
    },
    "executions": [
      {
        "id": "20110df3-9c1e-4448-946e-0179eb686e7f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "68fb27e2-ac43-4a70-a74d-3f1884af0b4a",
          "httpRequestId": "727c2c97-ecf6-4552-80da-d47da41bd794"
        },
        "item": {
          "id": "20110df3-9c1e-4448-946e-0179eb686e7f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "26713f60-916b-4b69-b4df-02aebaf14a60",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 0
        }
      },
      {
        "id": "8f36817e-98f8-436e-8759-b4b9a5a667f7",
        "cursor": {
          "ref": "5cde07ee-d2fc-46fd-88b2-2ca1969e91b5",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1eaa5c14-8926-4a51-b179-4a1e9d6709c9"
        },
        "item": {
          "id": "8f36817e-98f8-436e-8759-b4b9a5a667f7",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6931a3fc-0424-4374-bee0-a85d8d58833f",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "7d41fd01-f9f8-41b5-b48e-3f7eeefeecc3",
        "cursor": {
          "ref": "4e565803-0d01-48c3-aae6-dc22953f2e46",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c7f49f58-6c9a-432d-b7ff-d1b6eaf3c0ff"
        },
        "item": {
          "id": "7d41fd01-f9f8-41b5-b48e-3f7eeefeecc3",
          "name": "did_json"
        },
        "response": {
          "id": "e6d550ff-53f3-48ca-a74c-597352e801fd",
          "status": "OK",
          "code": 200,
          "responseTime": 376,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f7d992b-c50a-4ab9-9c8d-f6892d8be16b",
        "cursor": {
          "ref": "42f7a3b9-ee00-4c0e-9ddf-4e1adee1e626",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a051f06a-0464-42e4-a220-312dad49c7da"
        },
        "item": {
          "id": "4f7d992b-c50a-4ab9-9c8d-f6892d8be16b",
          "name": "did:invalid"
        },
        "response": {
          "id": "94c0b87a-fdc2-46bd-9ba1-d43d46d232cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f7d992b-c50a-4ab9-9c8d-f6892d8be16b",
        "cursor": {
          "ref": "42f7a3b9-ee00-4c0e-9ddf-4e1adee1e626",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a051f06a-0464-42e4-a220-312dad49c7da"
        },
        "item": {
          "id": "4f7d992b-c50a-4ab9-9c8d-f6892d8be16b",
          "name": "did:invalid"
        },
        "response": {
          "id": "94c0b87a-fdc2-46bd-9ba1-d43d46d232cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21847190-2ef8-4ae9-add3-6e9c40ceec28",
        "cursor": {
          "ref": "457590bf-f9b2-4105-b7b2-3ca6347c7f37",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6ee00c79-6074-4a42-bee0-05faa9a433fc"
        },
        "item": {
          "id": "21847190-2ef8-4ae9-add3-6e9c40ceec28",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a81c133a-0dc1-4be6-80f3-fb1a2ddd65be",
          "status": "Not Found",
          "code": 404,
          "responseTime": 313,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c957802-198e-427e-8a7c-3dbcf2ad8e7f",
        "cursor": {
          "ref": "c49f72a7-1b57-45a3-8007-acba2dde1797",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b7942e26-8d41-474e-8228-7bd7b7f7f76a"
        },
        "item": {
          "id": "5c957802-198e-427e-8a7c-3dbcf2ad8e7f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "1ffed8e3-9aeb-4c04-a078-21cf758a5eff",
          "status": "Not Found",
          "code": 404,
          "responseTime": 35,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bcebecc-3fd0-47bf-950c-bb741d1acbc3",
        "cursor": {
          "ref": "a035eeec-8a0a-4072-bdc1-ffbb87a3e6ad",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e638ac10-5dfd-4f7c-af12-9cb17bf2e986"
        },
        "item": {
          "id": "6bcebecc-3fd0-47bf-950c-bb741d1acbc3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4c324fd1-c77b-432c-b0ec-8b59e936dfd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "622f2aa2-3ed0-4188-abe2-7bb3c4fbeba5",
        "cursor": {
          "ref": "6bd2fe6f-4541-4005-8e68-4e246704c304",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "94b7c1b4-c7c6-48b8-ba2b-3eede4888f58"
        },
        "item": {
          "id": "622f2aa2-3ed0-4188-abe2-7bb3c4fbeba5",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "65bb88f8-cdc3-4b5e-879e-2f898ca26b8b",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "622f2aa2-3ed0-4188-abe2-7bb3c4fbeba5",
        "cursor": {
          "ref": "6bd2fe6f-4541-4005-8e68-4e246704c304",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "94b7c1b4-c7c6-48b8-ba2b-3eede4888f58"
        },
        "item": {
          "id": "622f2aa2-3ed0-4188-abe2-7bb3c4fbeba5",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "65bb88f8-cdc3-4b5e-879e-2f898ca26b8b",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "1611f49a-08b7-4898-83fb-f524ed909629",
        "cursor": {
          "ref": "d16af2d8-b6f7-4a40-9edf-323b5916ab1a",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0004dd37-4627-4f75-a882-b4e0b480b8c0"
        },
        "item": {
          "id": "1611f49a-08b7-4898-83fb-f524ed909629",
          "name": "identifiers"
        },
        "response": {
          "id": "81406cd5-b1ad-4b33-a802-057c5e038eb1",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9850af6d-6cf8-4e11-bb2f-66a6ac139e58",
        "cursor": {
          "ref": "42af6011-6ba4-4104-b980-e79aa6fc593a",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e19346b9-5070-4630-bebb-657ee5df673c"
        },
        "item": {
          "id": "9850af6d-6cf8-4e11-bb2f-66a6ac139e58",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a5ed6ca9-1bdd-4f34-bd37-b7ff243f0d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "9850af6d-6cf8-4e11-bb2f-66a6ac139e58",
        "cursor": {
          "ref": "42af6011-6ba4-4104-b980-e79aa6fc593a",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e19346b9-5070-4630-bebb-657ee5df673c"
        },
        "item": {
          "id": "9850af6d-6cf8-4e11-bb2f-66a6ac139e58",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a5ed6ca9-1bdd-4f34-bd37-b7ff243f0d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "84c9cc64-6ff2-4cc6-8a70-9123ec04819f",
        "cursor": {
          "ref": "e53ac660-66a1-4dd2-bce1-4df5227d289c",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3f561df5-8218-4063-99a7-05a8f88b5660"
        },
        "item": {
          "id": "84c9cc64-6ff2-4cc6-8a70-9123ec04819f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6ab912f0-095a-49a0-a76c-f7fb426d5260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "41f22be6-37da-4be8-9d11-0cb8d9b95509",
        "cursor": {
          "ref": "dced8741-d913-4d1d-9520-6d2cd091b7fd",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1faec1d4-66ae-48b9-b6e3-5c801d77a699"
        },
        "item": {
          "id": "41f22be6-37da-4be8-9d11-0cb8d9b95509",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "df5d110a-c444-4ccc-b101-5132760fa970",
          "status": "Created",
          "code": 201,
          "responseTime": 111,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "bd2b9a97-fd74-42a9-bfcb-97be58aa15b8",
        "cursor": {
          "ref": "cc6a0aa5-05bb-428c-ae39-a22f30f6b4ec",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7f5c87f6-3f1c-4b39-b19f-f9668d597b66"
        },
        "item": {
          "id": "bd2b9a97-fd74-42a9-bfcb-97be58aa15b8",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "37148fde-fb97-4f0c-b679-4cb6e7a0e29b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "323134db-e031-4eef-bb43-9deb57dd941f",
        "cursor": {
          "ref": "c32f57b4-32a9-4beb-abd9-68329d2019e6",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "02ce6046-f867-4c23-9fc3-ba09501f6316"
        },
        "item": {
          "id": "323134db-e031-4eef-bb43-9deb57dd941f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "cae267f4-9ec9-4309-9e14-fff1ae0d1beb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "2f0144b6-78c4-4569-95d5-02a59c346cb0",
        "cursor": {
          "ref": "1a7806ab-60e8-459b-8395-f12dddb05f99",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b8b10b4f-19a2-4b43-b40c-f95146556955"
        },
        "item": {
          "id": "2f0144b6-78c4-4569-95d5-02a59c346cb0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "69df2d3e-2923-445b-80ad-524f3c9c139d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "1523049c-7d4a-4a1f-9c74-767802a68a5c",
        "cursor": {
          "ref": "609908fc-51a5-4a56-9227-27e43fc13d75",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4f7a6880-2cc3-4232-8503-988fa39b593c"
        },
        "item": {
          "id": "1523049c-7d4a-4a1f-9c74-767802a68a5c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b7b1065b-ec66-4d0a-b598-0c7f77eeb40e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "05fa3e28-d17c-46ef-abeb-5eb05990b162",
        "cursor": {
          "ref": "d0634f67-6f98-4434-865d-50dd34c9f0b4",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "344546fd-b50c-46b8-b361-952ecc359c74"
        },
        "item": {
          "id": "05fa3e28-d17c-46ef-abeb-5eb05990b162",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f6928ac8-768f-497b-8fde-88d9ffd7cd7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "7cdebf51-288a-418b-a3db-d8face9ef6ed",
        "cursor": {
          "ref": "01433766-ffce-49e4-8727-0c57ed1ec65a",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d0b9dc71-fac2-442f-a97b-0cc8450589e6"
        },
        "item": {
          "id": "7cdebf51-288a-418b-a3db-d8face9ef6ed",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "94d07e49-1a6c-4aab-b2e8-3334929282ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "9b6ccab0-1776-474a-93b1-b97a9b183258",
        "cursor": {
          "ref": "74172009-cf3b-41ef-83a2-7e57199cf5aa",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1af56cc8-356b-41d2-899b-641fb5dcbe0b"
        },
        "item": {
          "id": "9b6ccab0-1776-474a-93b1-b97a9b183258",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "674e60ff-0c72-4ea8-90b4-cde7ee0e4e63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "7999946e-9009-4ca1-b899-909cb9862350",
        "cursor": {
          "ref": "8818e917-94c7-4930-834f-75b3e8929941",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "81356007-5f39-4d95-a976-728cf078e087"
        },
        "item": {
          "id": "7999946e-9009-4ca1-b899-909cb9862350",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "19a892d9-5800-4eeb-bf16-293ba0716f81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "0e4423a7-3ff0-4471-962b-6e270ea1ac5b",
        "cursor": {
          "ref": "09dad6a6-035a-4cd0-a391-03cdf6e8218a",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8b233ab5-e01d-4b49-a37c-6efc0f203da0"
        },
        "item": {
          "id": "0e4423a7-3ff0-4471-962b-6e270ea1ac5b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f8bf7cd0-735f-44fd-a20e-28f9bb02412c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "526f29a5-331c-4129-875a-26f303e288be",
        "cursor": {
          "ref": "0dbb02b6-d86c-401c-b906-75c68f830abe",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "691e9351-47a9-4256-9520-c7645c91a93c"
        },
        "item": {
          "id": "526f29a5-331c-4129-875a-26f303e288be",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "07789623-f2f2-4f68-9e10-6e7778318002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "ab0ada76-c7d7-44c9-826c-3cfdf524e8d6",
        "cursor": {
          "ref": "eb1a2ace-3ba6-4fd6-9bd3-44f485516063",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "167e2b65-5e14-4de8-912a-711e655daeb4"
        },
        "item": {
          "id": "ab0ada76-c7d7-44c9-826c-3cfdf524e8d6",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "9253e561-861b-4ff9-bb55-a1759cb7f51d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "d2aaa2f4-5ead-458b-ab74-04f41f07185c",
        "cursor": {
          "ref": "94b3ca0d-b0fc-484d-8b7b-941cb07c4331",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "928ad674-d1b8-4660-8a44-953bbeb2b4d2"
        },
        "item": {
          "id": "d2aaa2f4-5ead-458b-ab74-04f41f07185c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5d97dd94-dfb7-41c5-985b-fee15b24e2b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "932c11ec-95df-432b-9669-aaf7ea027921",
        "cursor": {
          "ref": "3d58ea62-1486-41b5-8808-f9f609d91aa8",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "78068cec-586f-4a5a-b0d0-eb074356717e"
        },
        "item": {
          "id": "932c11ec-95df-432b-9669-aaf7ea027921",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e658769f-dd76-45b5-874b-42849d57b6c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "aca48ca4-1efa-45a4-817b-a28d620e31fb",
        "cursor": {
          "ref": "531af738-13cb-4e97-9022-ba61a0627bc7",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "574ba636-8b68-4859-9eb7-a2101f887542"
        },
        "item": {
          "id": "aca48ca4-1efa-45a4-817b-a28d620e31fb",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "551e0fcd-416f-43be-b31f-ac939588047e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "746ad530-ea16-46e4-94f9-bfaf13e21d7d",
        "cursor": {
          "ref": "02114778-0c7f-424e-b74a-fccf6eabcb70",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d658fcec-0ab4-4588-ba64-fd3db2e6b36c"
        },
        "item": {
          "id": "746ad530-ea16-46e4-94f9-bfaf13e21d7d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5c2f180f-df9a-4c4e-9c0a-a8c978701017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "bf74643e-05a1-4bb4-b8b6-9d82c84252da",
        "cursor": {
          "ref": "f2869fef-db8b-499c-906c-38e6f1c66ceb",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "df6e210f-ca7b-43b9-a305-a5ded022ad32"
        },
        "item": {
          "id": "bf74643e-05a1-4bb4-b8b6-9d82c84252da",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "96e6b9ec-7dc3-448a-b9fc-650109b8838e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "27e1fd42-3ed5-436c-b480-4b2599bc470d",
        "cursor": {
          "ref": "897dc20f-1e33-47d1-8554-9aaf35ded9ea",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "65b66e5f-424e-4c78-b353-e5f450995366"
        },
        "item": {
          "id": "27e1fd42-3ed5-436c-b480-4b2599bc470d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ecb79e76-1b1a-4934-9c8b-ac043076f3ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "172527d5-999f-4ae9-999b-95da99cb79ca",
        "cursor": {
          "ref": "39fabded-591b-48b2-a83e-c1c3c414e3a5",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "dc657be7-cc76-47d4-abd1-cc73f9080bac"
        },
        "item": {
          "id": "172527d5-999f-4ae9-999b-95da99cb79ca",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4832af6e-e15c-4fd8-aa06-8ef903ee49a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "062c45af-ce86-44b5-bcc6-9aa751920cfb",
        "cursor": {
          "ref": "9a2581b4-5b9c-4770-9e51-6eeb7db49ccd",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "87c778e4-75ad-41d7-a759-b7d1542be47e"
        },
        "item": {
          "id": "062c45af-ce86-44b5-bcc6-9aa751920cfb",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e41ebe74-cdf1-437a-83ce-a25da0f8c48e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "52aca8a3-253e-4762-9a42-17807b124c5b",
        "cursor": {
          "ref": "f67b651c-cf9d-4ab1-bb61-1164c41e6000",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7cbc3e53-c783-427a-b7f6-048c5efe28cd"
        },
        "item": {
          "id": "52aca8a3-253e-4762-9a42-17807b124c5b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "64de893e-99a1-4451-b5bb-ba40ac81fbf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "621fdd55-2976-4bb8-98bd-7b40c9253b1f",
        "cursor": {
          "ref": "ea63a0bd-b393-440e-8d3a-69582ec199c0",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "25528eab-3526-4324-a1b2-24b443f5abe9"
        },
        "item": {
          "id": "621fdd55-2976-4bb8-98bd-7b40c9253b1f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "265588a0-6f58-4115-b421-3566d6165132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "15a8e80a-9ecb-4175-add8-d2c21e893040",
        "cursor": {
          "ref": "313ca9a3-1742-4b0f-9026-a6f552b882be",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bf3fd209-fd71-4668-9097-fc89c0a64656"
        },
        "item": {
          "id": "15a8e80a-9ecb-4175-add8-d2c21e893040",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "dbaeb4c9-1b3c-4c9a-8a19-a3e5dcb5b272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "2f3bc533-3f8a-46e0-a812-dc41c3c57a0b",
        "cursor": {
          "ref": "814efff5-0b3c-4414-a124-4f39798cd303",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6811652a-0811-4425-addf-6bd3bb58fb9f"
        },
        "item": {
          "id": "2f3bc533-3f8a-46e0-a812-dc41c3c57a0b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6c4be83b-43b4-4a40-ae17-09e03f85cd10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "e9e39196-77f2-47f9-90ca-1475c2196995",
        "cursor": {
          "ref": "4324528f-877a-4fcb-ae89-45f720a7b5c8",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9823074b-271a-4e7a-b1ec-06950d8449ec"
        },
        "item": {
          "id": "e9e39196-77f2-47f9-90ca-1475c2196995",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ab809675-ee3d-445a-b7a3-44ec0ad03e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5001,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "d123d7ad-5e97-4f2b-a784-3ce680a7b6af",
        "cursor": {
          "ref": "12a462a5-2c39-44fb-b9bc-9e08d8dafec6",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "893a9537-e9a5-4e76-9d64-4a863a86883b"
        },
        "item": {
          "id": "d123d7ad-5e97-4f2b-a784-3ce680a7b6af",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "389659d8-ba88-4958-abf1-57a5c6a584c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4753,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "0ae039ba-0f95-41ab-a8d4-46dacb5fbdb3",
        "cursor": {
          "ref": "5ebb29ee-ef3e-4b56-a792-b784240232c2",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f19876c2-c548-41c3-87de-4d76a25b280a"
        },
        "item": {
          "id": "0ae039ba-0f95-41ab-a8d4-46dacb5fbdb3",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "73ae4ff9-411c-43f3-84fc-30b57c1b4aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5952,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "1f579ba1-4bfe-424c-bd28-77c9fe1462b4",
        "cursor": {
          "ref": "68ff3497-589d-4f2d-9739-e769fe05a936",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e1f65171-cf74-483f-9637-4abf9fb8ac19"
        },
        "item": {
          "id": "1f579ba1-4bfe-424c-bd28-77c9fe1462b4",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e794c3e7-8c48-4dfa-92e1-a76241b09aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5540,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "c7558e99-779d-4574-aa6f-3f93fe435559",
        "cursor": {
          "ref": "8d8fcac4-dda2-4e46-a4dc-0328af8368bf",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4f182db5-0ae7-4e4a-83d3-2e83091ca05f"
        },
        "item": {
          "id": "c7558e99-779d-4574-aa6f-3f93fe435559",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7f138474-0b67-4a6c-a6c3-5c0a8d23b201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6648,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ebd49a11-9bf6-4a24-80ce-5f1c70175a95",
        "cursor": {
          "ref": "e044e50d-2273-4cec-91b0-0b0ad460bd05",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7960af82-8a15-43f7-9e32-76ab5d0395ea"
        },
        "item": {
          "id": "ebd49a11-9bf6-4a24-80ce-5f1c70175a95",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c54222ac-ae35-4aa3-b186-81ec8cd67de8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 382,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "93cbf3c2-80d4-4cd1-b97c-bfc55d9fdc80",
        "cursor": {
          "ref": "f2581392-78c9-4ed1-b921-9bf7bc6256fc",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "90fc408e-ca7b-4f63-9c2c-a2ee48285621"
        },
        "item": {
          "id": "93cbf3c2-80d4-4cd1-b97c-bfc55d9fdc80",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8c676d10-2fd9-48e0-8895-e1fe177e5ed1",
          "status": "Created",
          "code": 201,
          "responseTime": 4429,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "be854f04-b711-4fcf-9315-5fed616c4754",
        "cursor": {
          "ref": "f737b233-bcab-4e8b-a385-14ddb1b4e57b",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "cc5b45aa-4f3f-4a30-be29-8d9ae69db94c"
        },
        "item": {
          "id": "be854f04-b711-4fcf-9315-5fed616c4754",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9ef40af7-bfc8-4fa0-a885-23550b74fa2b",
          "status": "Created",
          "code": 201,
          "responseTime": 5921,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "0a0558d7-eeca-48ea-ac53-6cb1bf090a9e",
        "cursor": {
          "ref": "af1dcc2f-8b47-48bc-b66c-d1e26bb5d5b5",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4a23e99c-1432-47a1-8b86-c02f9362d852"
        },
        "item": {
          "id": "0a0558d7-eeca-48ea-ac53-6cb1bf090a9e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ffe01e37-f6dd-4b0e-8fdf-45abe3d76105",
          "status": "Created",
          "code": 201,
          "responseTime": 6142,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "096d7400-080e-4777-bbe0-799298da9bb1",
        "cursor": {
          "ref": "66510a0a-93ad-4ac7-92fb-43068ca8330d",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "431c3a1d-e0f7-4052-8d84-8faabff0d2d5"
        },
        "item": {
          "id": "096d7400-080e-4777-bbe0-799298da9bb1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "bc82d4f0-1d66-445d-a241-40b1cf07931b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f288998a-6c0b-4840-a94b-a1fd82ef5013",
        "cursor": {
          "ref": "05db6678-938d-4350-b43b-545dbdb90555",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9884ba95-d48d-42af-8ed6-ea1cb3a5a308"
        },
        "item": {
          "id": "f288998a-6c0b-4840-a94b-a1fd82ef5013",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1a3c14fc-7887-4d91-bcb4-004a8cf82712",
          "status": "Created",
          "code": 201,
          "responseTime": 4723,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "7729335d-2144-42d5-b227-4b252b3dbce7",
        "cursor": {
          "ref": "af64664d-7df7-4499-9580-fabadfb5dbf3",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a8fe588e-0f66-487f-b475-2469c3ee2adb"
        },
        "item": {
          "id": "7729335d-2144-42d5-b227-4b252b3dbce7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "81ad969c-ef09-4c9b-b1c9-3b264f0b35da",
          "status": "Created",
          "code": 201,
          "responseTime": 4899,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "359cd928-894e-4df9-9d7e-255d3886a53e",
        "cursor": {
          "ref": "41b931a4-27fa-43e0-8eaf-8ea94810360d",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "032f8536-8b9f-4770-a9cb-b6661e03c748"
        },
        "item": {
          "id": "359cd928-894e-4df9-9d7e-255d3886a53e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "104f3b9a-41d2-47a4-8a3d-dfe3aaf8e9c5",
          "status": "Created",
          "code": 201,
          "responseTime": 6566,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "143a29f3-10ec-407a-9107-41f33488c86a",
        "cursor": {
          "ref": "6003f2a1-9ea0-4e3b-a8ba-55760674e3e9",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2c8469ac-b176-4644-8b75-61a0fe34977b"
        },
        "item": {
          "id": "143a29f3-10ec-407a-9107-41f33488c86a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d76ebfbd-718f-4c04-a5b1-627ab8376fc3",
          "status": "Created",
          "code": 201,
          "responseTime": 7018,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "0aec8c9d-c15f-443b-8d55-f9bee10eeb9f",
        "cursor": {
          "ref": "63ebfb12-6017-4a09-948c-2c18fc7180cc",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a0973b2e-00a6-4b96-8531-49d9604750fd"
        },
        "item": {
          "id": "0aec8c9d-c15f-443b-8d55-f9bee10eeb9f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "669a0b86-f6de-4028-9a69-94aef496d4df",
          "status": "Created",
          "code": 201,
          "responseTime": 4333,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "8393d642-ec4a-4c10-b704-76205f691f86",
        "cursor": {
          "ref": "24049c3b-e156-40a9-b7ab-4c9d606d2315",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e50211d3-f907-4720-8627-fd8e76516b37"
        },
        "item": {
          "id": "8393d642-ec4a-4c10-b704-76205f691f86",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9f7af375-d202-45ef-9e6e-a4b55e17240b",
          "status": "Created",
          "code": 201,
          "responseTime": 4348,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "71784ac2-c7c4-4448-a5fa-57d63bfc2bae",
        "cursor": {
          "ref": "44dc268e-28fb-403b-a461-278fe1358d68",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "cffd7022-da47-473e-90d1-8e83c91acf30"
        },
        "item": {
          "id": "71784ac2-c7c4-4448-a5fa-57d63bfc2bae",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c17667c9-17d9-47d3-8c67-34a9e6b4d928",
          "status": "Created",
          "code": 201,
          "responseTime": 4251,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "2a7f4cbf-8e86-47e7-a5bd-fc56ad94458d",
        "cursor": {
          "ref": "52b5fc95-1b26-43d6-900b-83ad5454c9cc",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ab2965e2-d1b0-4b01-80fa-6af914ee233f"
        },
        "item": {
          "id": "2a7f4cbf-8e86-47e7-a5bd-fc56ad94458d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "0eee621f-c995-4945-b7ce-d97449eb11f8",
          "status": "Created",
          "code": 201,
          "responseTime": 4309,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "38efe6d7-9088-4fb2-ba23-663028edfbde",
        "cursor": {
          "ref": "2f2c4edc-d9ce-4a69-8390-ff7335b7ce7d",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a972b7b4-7785-4923-b453-540d1c2ee8cb"
        },
        "item": {
          "id": "38efe6d7-9088-4fb2-ba23-663028edfbde",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2fa20362-1434-4137-a4b6-c1bd785a1f94",
          "status": "Created",
          "code": 201,
          "responseTime": 4558,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "00b9369f-c6ca-4b2a-a20f-caa8a2afbab9",
        "cursor": {
          "ref": "11ddeac4-5dc9-426e-b0ca-17b2f1114a97",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3e3e5aa7-896e-4298-aef6-32ad848d991f"
        },
        "item": {
          "id": "00b9369f-c6ca-4b2a-a20f-caa8a2afbab9",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "529cb46e-ea54-4ccd-8f54-fc3b26c3e892",
          "status": "Created",
          "code": 201,
          "responseTime": 5322,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "3ab47aee-b506-45df-a391-60df60b9a01f",
        "cursor": {
          "ref": "c010cd2b-8456-422a-aff7-b08994e2b86f",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "bbc988fd-07fb-40cf-8bd2-f0e51401adcd"
        },
        "item": {
          "id": "3ab47aee-b506-45df-a391-60df60b9a01f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4ee4684c-a02b-4d1d-85f2-362544cc0227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 437,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "2b631a24-ab61-4f44-895d-e36b66e3d6ba",
        "cursor": {
          "ref": "aae97b1c-8b10-46db-ae4e-450d260d7d8b",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "282eb4b3-27a1-4ec9-a308-5051b86680c7"
        },
        "item": {
          "id": "2b631a24-ab61-4f44-895d-e36b66e3d6ba",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a6f0fe42-da41-4b3b-815a-d4535103c699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 439,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "2de1fa2e-e236-4178-bec6-ad2d8c3e6c81",
        "cursor": {
          "ref": "397bad9a-dde3-4ecf-b25c-1091b3d4d74d",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "359a9ce1-6663-4403-bd88-b564fa153216"
        },
        "item": {
          "id": "2de1fa2e-e236-4178-bec6-ad2d8c3e6c81",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a4c4b2f3-d3ba-4e4f-97db-2dbc9a85f79d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "9058a643-7602-4376-b00e-c679474f07de",
        "cursor": {
          "ref": "5e3a33b3-9927-4083-8c81-66355c42b602",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e364c2be-6e8b-4958-8854-a31ab09e49d5"
        },
        "item": {
          "id": "9058a643-7602-4376-b00e-c679474f07de",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b0379a32-90fe-4a01-a809-5810d6331ef1",
          "status": "Created",
          "code": 201,
          "responseTime": 4494,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "913a6f7a-397d-4767-9cf8-ba1a6e75c21e",
        "cursor": {
          "ref": "440e33e3-a6f5-4fa4-b7f5-48f7184b8eb7",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "fe5c5bbf-7f27-43c2-9de4-230b434cb6fc"
        },
        "item": {
          "id": "913a6f7a-397d-4767-9cf8-ba1a6e75c21e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "3ebf1f8b-1276-46c4-b3ce-98bcddba2952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "822bc9d7-2f98-4c0f-9a54-aab1ff6cbed9",
        "cursor": {
          "ref": "531e065a-0b63-4f34-a28d-5939b68ddade",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "84f9732e-7330-43c7-a145-ad99fec922c9"
        },
        "item": {
          "id": "822bc9d7-2f98-4c0f-9a54-aab1ff6cbed9",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9262eda4-9a96-4245-9c57-a8b248efb4cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "beb21341-4249-4a9c-ab9a-81b0606c9ea6",
        "cursor": {
          "ref": "6e8a574f-966c-48ac-812b-d70b1cdb9606",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f35d9291-b27a-4430-9d25-37a770fc29e9"
        },
        "item": {
          "id": "beb21341-4249-4a9c-ab9a-81b0606c9ea6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "785ca887-a48a-45df-8262-02e8655b03ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "0036738d-accd-4782-9f52-5a042422c8d0",
        "cursor": {
          "ref": "00560ff2-02a3-4582-bcf8-df082d71c61b",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3af232c6-c8b7-4f4c-b9dd-ce133a5ebf4d"
        },
        "item": {
          "id": "0036738d-accd-4782-9f52-5a042422c8d0",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3d8d6879-e3d3-48b5-a413-efe29225bcb4",
          "status": "Created",
          "code": 201,
          "responseTime": 6897,
          "responseSize": 709
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "14ef4515-3322-48e9-8c54-d9b1d8bcfa49",
        "cursor": {
          "ref": "8db87e1c-1282-4576-89f7-c91a3ffe4cbd",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4e125af6-c26a-4b66-808b-261721724095"
        },
        "item": {
          "id": "14ef4515-3322-48e9-8c54-d9b1d8bcfa49",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "67fa8547-5969-4900-8d05-18dcaf486366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 74
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "23ab515d-0a90-4d02-9213-40b5e34cbfb6",
        "cursor": {
          "ref": "84ee9089-ad5f-4b3a-ab99-5e1a90463d77",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d243a943-92aa-47e9-b522-487a8c723f8d"
        },
        "item": {
          "id": "23ab515d-0a90-4d02-9213-40b5e34cbfb6",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ea49e835-d978-4b27-8ab2-8046524353a3",
          "status": "Created",
          "code": 201,
          "responseTime": 4805,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "be62e8cb-8abd-444c-8471-82a67e9c0473",
        "cursor": {
          "ref": "94f7b52b-dd3f-4776-bccc-85c3bb99b716",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b5c1d1e7-dc13-4522-8fb3-285dfced2fa4"
        },
        "item": {
          "id": "be62e8cb-8abd-444c-8471-82a67e9c0473",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a8e1f552-acec-4546-a580-2d2c3300411c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "072bf417-28e1-4840-b043-c1f4e9b131a4",
        "cursor": {
          "ref": "db0ea675-284a-4b35-8dcb-451f720b0f56",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c53e395f-7d9f-434f-a759-4f468b9374df"
        },
        "item": {
          "id": "072bf417-28e1-4840-b043-c1f4e9b131a4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f9399106-a77f-4b2e-a9fa-17bb270ddd60",
          "status": "Created",
          "code": 201,
          "responseTime": 5377,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "e7c8bf0e-e185-414f-b95f-dbce0a4ab033",
        "cursor": {
          "ref": "525f0ed6-bca1-4f62-96d8-c38572c42f57",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a5747474-03ed-470c-b366-78ec6f7db0c1"
        },
        "item": {
          "id": "e7c8bf0e-e185-414f-b95f-dbce0a4ab033",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "485ba47c-4b5a-427f-ba90-1d034945c790",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 280,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "65b38b92-902f-434e-b099-06193849113c",
        "cursor": {
          "ref": "0579821c-7e8b-482e-9038-8db0b9261239",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ab78e58d-7acd-4ff4-8e60-be3fd20215b9"
        },
        "item": {
          "id": "65b38b92-902f-434e-b099-06193849113c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1b1f6876-e1c7-44c3-8361-5543d3219dc4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "4f44e46e-0fe0-445f-aa8d-a627470e083b",
        "cursor": {
          "ref": "6e1da611-c002-4bd1-942c-7a286a55ec3b",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a1e65c33-607d-47aa-92fd-88af3d8f240b"
        },
        "item": {
          "id": "4f44e46e-0fe0-445f-aa8d-a627470e083b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "dda10775-935c-4803-88b7-40ce6845283d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "241b6fed-7185-4229-a950-bb9abe825637",
        "cursor": {
          "ref": "8e6e1a93-6c7c-4f04-aad0-63be4428e94b",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "80483b40-cc6c-46e3-8a71-57f97ac010d2"
        },
        "item": {
          "id": "241b6fed-7185-4229-a950-bb9abe825637",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d70d7a88-4ab6-4bcd-9024-caf88fb8fa29",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "8e79f380-fe60-498f-8cee-f6dad86140e0",
        "cursor": {
          "ref": "36b1f539-eff6-4fe4-bd90-54a30230be5f",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "53ec654a-7cff-4ed6-9aa3-ded3b9285ee1"
        },
        "item": {
          "id": "8e79f380-fe60-498f-8cee-f6dad86140e0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2abba4e8-d690-4e8e-8c31-d2df10711acb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "f5d80495-3674-4f75-b8d8-afeb765e439d",
        "cursor": {
          "ref": "be19279e-fa76-4a80-b778-1bba8a85b8e7",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9c852deb-63f7-4352-96a9-ce832e406bd8"
        },
        "item": {
          "id": "f5d80495-3674-4f75-b8d8-afeb765e439d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f0a8afb5-fb9d-4660-9fcc-87704a9aa8c5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "32d025a2-32ea-4de0-9534-617c4db16ab9",
        "cursor": {
          "ref": "019f47f4-3630-4144-95d5-99a0e12d3cee",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c7ae876c-fd9b-4ea0-9930-091fb1f6a65c"
        },
        "item": {
          "id": "32d025a2-32ea-4de0-9534-617c4db16ab9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d588d8f1-fa05-4cbf-9682-5028bdddb90d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "cf9f5f6e-164c-43eb-8188-d7d8ef99926e",
        "cursor": {
          "ref": "411bbfb5-862e-41e8-9ef6-924074d04cad",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "588610cf-58a2-4514-923e-3f5176bc34b6"
        },
        "item": {
          "id": "cf9f5f6e-164c-43eb-8188-d7d8ef99926e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f94a66ba-425d-49e8-aa95-dd9356c53c4d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "19ca1a97-f2c7-41ef-a8b2-f36a4e63407e",
        "cursor": {
          "ref": "7d89331e-6e71-4654-a898-39c75c903d43",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "cdc12d84-c582-41ca-aa25-9633c82205ac"
        },
        "item": {
          "id": "19ca1a97-f2c7-41ef-a8b2-f36a4e63407e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "42ffbf6d-579b-430a-8e05-6ee21e4ac566",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "dc28add8-4f3d-4edc-b42b-c350e93b741b",
        "cursor": {
          "ref": "91f8e349-6bc5-40ce-8b86-1491ec80121f",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b8388c48-a621-4e34-8e07-10ada5885b57"
        },
        "item": {
          "id": "dc28add8-4f3d-4edc-b42b-c350e93b741b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "5908d7fa-fefe-465b-a677-45cdb0b0a8ea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "86feb71b-9fcd-4beb-b151-7fec5d9a3818",
        "cursor": {
          "ref": "c9e8ea21-ac58-4680-91f9-8c2504c9af8d",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "75f15f1e-6559-4b7d-a98f-82dc6b9cc4fa"
        },
        "item": {
          "id": "86feb71b-9fcd-4beb-b151-7fec5d9a3818",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "25167b57-3b2e-484f-8847-b1e605a7a952",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "5503ae3a-6366-4631-b5f4-694eca06bee8",
        "cursor": {
          "ref": "2ffa4b11-8f5f-432e-ac0c-2da9bfa25925",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "75c0fbbf-5851-4a27-8d97-e59fbe2f56db"
        },
        "item": {
          "id": "5503ae3a-6366-4631-b5f4-694eca06bee8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5eabb6eb-f82b-422d-86eb-b131162664e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "a774ff0a-fa1a-4793-828a-9cbee2664004",
        "cursor": {
          "ref": "f1df6fbc-1699-4583-9843-7a3beb6451eb",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8614708a-d777-4151-a8ca-1a31ec106728"
        },
        "item": {
          "id": "a774ff0a-fa1a-4793-828a-9cbee2664004",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "80ccf942-c83c-4132-895e-4603c98430d6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "2d1e9f32-7a63-4de3-8d9f-2834e5d65511",
        "cursor": {
          "ref": "5e028f5d-5811-461e-bfa6-287c2bd9775b",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3e071009-c20b-4eb8-bf9f-cfef86112095"
        },
        "item": {
          "id": "2d1e9f32-7a63-4de3-8d9f-2834e5d65511",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6ae30b1c-b933-4c99-8f09-62012129dcac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "e22bafbd-596d-46b9-9031-605b5e45d1e7",
        "cursor": {
          "ref": "b1d5211d-ec1a-466d-bfdf-ae86d9b6792c",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "daf9e7e6-3a65-4884-b2f6-941dab949e65"
        },
        "item": {
          "id": "e22bafbd-596d-46b9-9031-605b5e45d1e7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "de813826-2f38-4d39-a090-aff681da8e62",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "e0917072-00a9-44be-8533-ef9bf0b22336",
        "cursor": {
          "ref": "39bddc33-fe93-4039-ba7d-81383ecf9eb2",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "04259abc-23c6-4ffa-aed4-b21310f2578c"
        },
        "item": {
          "id": "e0917072-00a9-44be-8533-ef9bf0b22336",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8be5bcd6-025d-4c2b-8ae2-f63a8505aafe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "04fb78f4-d893-4480-bc5d-757f6d4d84f4",
        "cursor": {
          "ref": "f17847f2-2439-4954-a02d-a8275b36522b",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "10f3a3ee-ff10-4fd4-aacd-9f9eff56715c"
        },
        "item": {
          "id": "04fb78f4-d893-4480-bc5d-757f6d4d84f4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ef64b2bf-9e71-48e1-b9a8-ed3bc9947a2b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "5202ba91-c4c8-4861-826d-1b3ee1f8ec4f",
        "cursor": {
          "ref": "d451162c-1760-4aaf-8faa-6c427ede87a5",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e9cc4006-f5c1-4f6c-af32-648c877d676a"
        },
        "item": {
          "id": "5202ba91-c4c8-4861-826d-1b3ee1f8ec4f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4d472309-b118-4b29-8c17-6d570756c246",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "c3a6101b-8cd3-40cc-9f0c-ce6b21423cdc",
        "cursor": {
          "ref": "cb0ba677-8812-4487-a744-8de4b6f3e97d",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d7eb8fc0-d55f-4b5c-90b2-6883992ccdee"
        },
        "item": {
          "id": "c3a6101b-8cd3-40cc-9f0c-ce6b21423cdc",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f68ba3e5-e55c-4b9d-a017-55eb25efb23a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "92f2c210-66bc-4343-b93c-245c1eba0fd6",
        "cursor": {
          "ref": "8d887b6a-b33a-4103-80b5-db3106956bf1",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f285a920-7066-443b-a8b6-b1a79c1d6a0c"
        },
        "item": {
          "id": "92f2c210-66bc-4343-b93c-245c1eba0fd6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "16e77b0d-c731-45a8-99ee-52e0c521b113",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "2261ddbc-a261-40c4-87a3-ed0a76dd79e7",
        "cursor": {
          "ref": "6f28381e-f7de-4a23-a98c-c6491266b532",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f0ca37c2-fbd0-4367-be3d-428913ffc09f"
        },
        "item": {
          "id": "2261ddbc-a261-40c4-87a3-ed0a76dd79e7",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "29b66733-4b44-405f-99da-fcb8ec46e7de",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "8a35b4ec-4346-4d2e-85d7-4c87068e6cb4",
        "cursor": {
          "ref": "fd7dc3ae-3bb9-4876-914f-eaf42b23133d",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e65563fa-57d9-4ed7-ae62-377c9d0afe94"
        },
        "item": {
          "id": "8a35b4ec-4346-4d2e-85d7-4c87068e6cb4",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "06b5d77a-eb04-4ca4-9e27-71f2b887913d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "53c8e381-7dee-4d59-bbe4-e2d8b16dd5ea",
        "cursor": {
          "ref": "5d948296-6ea2-470c-9071-494df710d9b0",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9106015e-6fdf-49be-8caf-6da969058242"
        },
        "item": {
          "id": "53c8e381-7dee-4d59-bbe4-e2d8b16dd5ea",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "6c6ebcc0-ed59-48a4-ae26-0229aeb8ac1c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "d07645fe-adac-49d2-8fb0-832921e63a48",
        "cursor": {
          "ref": "35ba195c-f131-4ff3-9edf-2f0a28adb1ec",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "74248db8-97d2-43d1-bde3-87310ada506d"
        },
        "item": {
          "id": "d07645fe-adac-49d2-8fb0-832921e63a48",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0374ac3e-dd67-4819-ad20-7c0d65c147ff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "78d4e619-107f-443e-806b-1e86df05558a",
        "cursor": {
          "ref": "0fb1c61e-0cc8-4ba3-86d4-0b222a983c09",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "36bfdc8a-59ec-4677-b784-845959854903"
        },
        "item": {
          "id": "78d4e619-107f-443e-806b-1e86df05558a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ff2c6094-1c8e-4280-b563-2a9ca427bfed",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "596b3b74-194e-46b6-903c-01680941e5a1",
        "cursor": {
          "ref": "f55af1f7-df69-446b-b34a-e7731796f2b4",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "4c7300d5-5fa2-4240-bb17-48e9a5de651a"
        },
        "item": {
          "id": "596b3b74-194e-46b6-903c-01680941e5a1",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "55823765-c0f4-4e8f-ad28-78f5dccbb3f0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "07642327-9560-499d-813a-f566b83c061f",
        "cursor": {
          "ref": "356d1e43-57c0-427e-ac20-536ff7fc28da",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d149145c-10fd-4d62-b445-51b7d4607418"
        },
        "item": {
          "id": "07642327-9560-499d-813a-f566b83c061f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "cb093ce2-18bc-4044-b4d3-383d592ac60d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "9046dda7-377f-4e38-a339-1182ded2567f",
        "cursor": {
          "ref": "c5a592e4-e870-40f7-9b6c-817cbac621ac",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d9510ea8-318d-4bb2-ac83-ceb0fe5a2f1c"
        },
        "item": {
          "id": "9046dda7-377f-4e38-a339-1182ded2567f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "55b46e31-5e90-427a-8bea-505c16b73971",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "1c0722ef-1354-4e1d-8e5e-12862454a272",
        "cursor": {
          "ref": "90c1dcc8-9f92-45da-aaa6-3d2b86b0db8d",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fbed3da2-e477-468b-98ba-687d579b6606"
        },
        "item": {
          "id": "1c0722ef-1354-4e1d-8e5e-12862454a272",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "21ecf853-7580-4064-b145-9c7ea17a98b5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "9edcd82f-f6c5-4b84-814c-6c25d208c08e",
        "cursor": {
          "ref": "6f4a9fc0-f1cd-4fb2-94fe-54ca6a9ab179",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6525eb19-4793-4f69-9e02-f2991e76cdb8"
        },
        "item": {
          "id": "9edcd82f-f6c5-4b84-814c-6c25d208c08e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ce442b71-0920-4ab6-b95a-f522a8312df9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "6b971452-1428-440d-8288-b90a960c6e57",
        "cursor": {
          "ref": "9dc4ea33-17fc-48a6-a847-8948bb16df56",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "25767a0d-59a2-4134-b8d5-b90d48486025"
        },
        "item": {
          "id": "6b971452-1428-440d-8288-b90a960c6e57",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "17c23381-19dd-4a98-856d-03f93fd44017",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "4c73760d-c4c5-4e25-8628-f7ac98037ff6",
        "cursor": {
          "ref": "5b319d9b-62b6-40e6-b7d2-3db395b9914e",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f0111c09-b2b8-4864-a1ba-b550f2487afe"
        },
        "item": {
          "id": "4c73760d-c4c5-4e25-8628-f7ac98037ff6",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9f745269-a6d2-4e9b-8e60-a9510f0c7afa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "a82468ea-2000-45a7-921c-1800b38cf3f6",
        "cursor": {
          "ref": "85e5665a-db1f-4972-8b5e-2ea8921f2d3f",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2fae9dfa-605f-47a7-88b4-6f79633f6e6d"
        },
        "item": {
          "id": "a82468ea-2000-45a7-921c-1800b38cf3f6",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "74e53bff-40f7-4e9e-98dc-6265bc3b8a75",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "bd55e9a7-e0b7-4fd8-9de1-e62ba8482881",
        "cursor": {
          "ref": "f0acb367-861b-4711-a2fb-0ef8ba3bcfde",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "eedd4fdb-c08c-414d-bdee-b6840c10e733"
        },
        "item": {
          "id": "bd55e9a7-e0b7-4fd8-9de1-e62ba8482881",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bc2407f3-9689-47ad-8cf8-75a608e76c00",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "b3139c0a-a6b9-476d-a16b-9b1beb7782a4",
        "cursor": {
          "ref": "b161a297-06a8-444b-82b9-69bfeb905243",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "23188cbd-1447-400d-aa4a-6e0766bbe8f4"
        },
        "item": {
          "id": "b3139c0a-a6b9-476d-a16b-9b1beb7782a4",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "47b25961-1e87-4041-9a3c-b1c322f64141",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "3a17db6a-dc5e-4baf-9ee0-5d367c4235cd",
        "cursor": {
          "ref": "039b9a21-b934-486b-bef2-11b747510a58",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "cad4ae3b-8673-40f9-afcf-d72da2fa3d68"
        },
        "item": {
          "id": "3a17db6a-dc5e-4baf-9ee0-5d367c4235cd",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "053667ac-443c-49dd-b955-acd908bf2ecc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "f7f98dfb-f3c8-4679-9f9e-a8f32f9699ba",
        "cursor": {
          "ref": "c4a343d4-99da-4a31-a83a-dc5093ac8c58",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c264f351-a308-449c-8272-b791924b17af"
        },
        "item": {
          "id": "f7f98dfb-f3c8-4679-9f9e-a8f32f9699ba",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fe3995d6-e1f2-4d62-9cc1-750b1ce6faa0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "68dd40c5-5e94-4e0d-9d72-fe01756610bc",
        "cursor": {
          "ref": "a205ab9e-4240-4fb8-ad85-1910825924e9",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "411dfbd0-b144-4eae-b75e-6808e4362fa5"
        },
        "item": {
          "id": "68dd40c5-5e94-4e0d-9d72-fe01756610bc",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "12471d6c-874e-4ea8-97ba-2b5059c606c5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "a2537d92-8b1d-4eb3-83a2-b59d4ff9f70f",
        "cursor": {
          "ref": "5f0467a9-b1b5-4707-92f1-33e1d87f3f5e",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a8130b28-574a-4d24-8359-23c849402c24"
        },
        "item": {
          "id": "a2537d92-8b1d-4eb3-83a2-b59d4ff9f70f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b88740ec-83bf-4617-bbd3-128ffdc8792c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "e3e7a4aa-6733-4822-89c9-0a124e399ce4",
        "cursor": {
          "ref": "6632c753-ece7-4c0b-b530-d4a58f1d1987",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "bf688684-5742-4f2f-821b-d08f5c306042"
        },
        "item": {
          "id": "e3e7a4aa-6733-4822-89c9-0a124e399ce4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "40173e1f-7983-4a77-bf84-9cbab4673be9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "ba14d13c-ebc0-41f7-9563-2813349793dd",
        "cursor": {
          "ref": "a0ba9dde-1dcf-47aa-b428-a9593c234626",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "ee7ae48f-58ab-4854-a52a-8df09ab5f9b1"
        },
        "item": {
          "id": "ba14d13c-ebc0-41f7-9563-2813349793dd",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7604ad66-c4e7-48ef-9288-5343e8dff12b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "d32dabfd-d43c-433f-bcc4-0de9bcdb2c46",
        "cursor": {
          "ref": "2436a690-7940-4042-ba5d-09f5d47db4f8",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "04b407d5-80fc-44e4-bf00-1b42a195fd8c"
        },
        "item": {
          "id": "d32dabfd-d43c-433f-bcc4-0de9bcdb2c46",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "266354a1-89e6-4b48-986b-cc70fae99493",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "128cbe62-f3b3-4189-a03d-adb3c25a6691",
        "cursor": {
          "ref": "206a1586-f035-463f-b5c5-1c99f07845b8",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "49b1aed0-0528-45bc-9b47-c6b8fdf3403c"
        },
        "item": {
          "id": "128cbe62-f3b3-4189-a03d-adb3c25a6691",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0cd00809-9085-43c3-871c-ab1dde56e80e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "65a8623f-83c0-479c-8b60-1b4538058578",
        "cursor": {
          "ref": "55df0430-c530-4f8a-94bc-e07fbb1f1327",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "672f221d-899f-4574-b53a-e080fb8a0e8c"
        },
        "item": {
          "id": "65a8623f-83c0-479c-8b60-1b4538058578",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c706870d-620e-487a-abdb-770bc00c8e2d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "65a8623f-83c0-479c-8b60-1b4538058578",
        "cursor": {
          "ref": "55df0430-c530-4f8a-94bc-e07fbb1f1327",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "672f221d-899f-4574-b53a-e080fb8a0e8c"
        },
        "item": {
          "id": "65a8623f-83c0-479c-8b60-1b4538058578",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c706870d-620e-487a-abdb-770bc00c8e2d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "a8024ab9-0c65-4496-8db8-cf6b58a5b623",
        "cursor": {
          "ref": "70758022-1737-410d-badf-33752a235f4a",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d53d8e93-bf90-40e7-a875-4f53ee2fd776"
        },
        "item": {
          "id": "a8024ab9-0c65-4496-8db8-cf6b58a5b623",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "eec7bdfe-2fea-4324-9308-a5958a384b4c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "a8024ab9-0c65-4496-8db8-cf6b58a5b623",
        "cursor": {
          "ref": "70758022-1737-410d-badf-33752a235f4a",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d53d8e93-bf90-40e7-a875-4f53ee2fd776"
        },
        "item": {
          "id": "a8024ab9-0c65-4496-8db8-cf6b58a5b623",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "eec7bdfe-2fea-4324-9308-a5958a384b4c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "8c5818f2-f6cf-4185-b446-0ee6595bdfa2",
        "cursor": {
          "ref": "e706f219-898c-4fa5-b230-7501231ecf14",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "95eebf53-3cc1-41ed-8de6-056bd000b173"
        },
        "item": {
          "id": "8c5818f2-f6cf-4185-b446-0ee6595bdfa2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0f9ad820-eec2-4392-b308-b7f46d5bc5e4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "8c5818f2-f6cf-4185-b446-0ee6595bdfa2",
        "cursor": {
          "ref": "e706f219-898c-4fa5-b230-7501231ecf14",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "95eebf53-3cc1-41ed-8de6-056bd000b173"
        },
        "item": {
          "id": "8c5818f2-f6cf-4185-b446-0ee6595bdfa2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0f9ad820-eec2-4392-b308-b7f46d5bc5e4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "ad49a5a5-97b3-4bf3-8e1a-cbeefde37790",
        "cursor": {
          "ref": "df38b86c-cbd3-4b83-98da-6e47f0df17fd",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "67164b90-8536-4504-90bb-b86856dcf4db"
        },
        "item": {
          "id": "ad49a5a5-97b3-4bf3-8e1a-cbeefde37790",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "33b841b3-0c38-4731-9b7e-79884b3965e3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "ad49a5a5-97b3-4bf3-8e1a-cbeefde37790",
        "cursor": {
          "ref": "df38b86c-cbd3-4b83-98da-6e47f0df17fd",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "67164b90-8536-4504-90bb-b86856dcf4db"
        },
        "item": {
          "id": "ad49a5a5-97b3-4bf3-8e1a-cbeefde37790",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "33b841b3-0c38-4731-9b7e-79884b3965e3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "d2e350f6-0d3c-4320-8952-538ecbe26544",
        "cursor": {
          "ref": "11b8278e-21e8-4b7d-a9d7-9af9af72b315",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a3d812c6-79d5-4fa0-9c51-3d63838d17ae"
        },
        "item": {
          "id": "d2e350f6-0d3c-4320-8952-538ecbe26544",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3f30cb1b-6dae-4204-ac5b-257e66ffd9d5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "d2e350f6-0d3c-4320-8952-538ecbe26544",
        "cursor": {
          "ref": "11b8278e-21e8-4b7d-a9d7-9af9af72b315",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a3d812c6-79d5-4fa0-9c51-3d63838d17ae"
        },
        "item": {
          "id": "d2e350f6-0d3c-4320-8952-538ecbe26544",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3f30cb1b-6dae-4204-ac5b-257e66ffd9d5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "962f6f56-5b53-45d5-ae9e-c6eff8ba2897",
        "cursor": {
          "ref": "77ef2492-9667-4c32-92fa-6dcbb9b70bc6",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e52ac09f-c9c4-4692-af9d-73630415cd36"
        },
        "item": {
          "id": "962f6f56-5b53-45d5-ae9e-c6eff8ba2897",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1ee6d87d-d730-4305-8363-aa5b3f1badc9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "962f6f56-5b53-45d5-ae9e-c6eff8ba2897",
        "cursor": {
          "ref": "77ef2492-9667-4c32-92fa-6dcbb9b70bc6",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e52ac09f-c9c4-4692-af9d-73630415cd36"
        },
        "item": {
          "id": "962f6f56-5b53-45d5-ae9e-c6eff8ba2897",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1ee6d87d-d730-4305-8363-aa5b3f1badc9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "c8baa943-261e-4bf1-8643-182bdd9e71c4",
        "cursor": {
          "ref": "c7574b83-9b80-47d2-a143-5dac5da6bb9a",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "dd9735e7-b4e3-43b3-bb00-82d6f6cd8fbc"
        },
        "item": {
          "id": "c8baa943-261e-4bf1-8643-182bdd9e71c4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5cadedde-ebc0-4a47-80a4-af9a612943a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "c8baa943-261e-4bf1-8643-182bdd9e71c4",
        "cursor": {
          "ref": "c7574b83-9b80-47d2-a143-5dac5da6bb9a",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "dd9735e7-b4e3-43b3-bb00-82d6f6cd8fbc"
        },
        "item": {
          "id": "c8baa943-261e-4bf1-8643-182bdd9e71c4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5cadedde-ebc0-4a47-80a4-af9a612943a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "6aff9b17-b34a-43cc-850b-a06883918795",
        "cursor": {
          "ref": "bae656ae-ca8f-4566-bcfb-4e636bc594ff",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "25a735d0-d57a-4d5b-afe4-60353eb79c31"
        },
        "item": {
          "id": "6aff9b17-b34a-43cc-850b-a06883918795",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4cbe0d47-ec1a-47c9-8d9f-6f7ddb8cecb8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "6aff9b17-b34a-43cc-850b-a06883918795",
        "cursor": {
          "ref": "bae656ae-ca8f-4566-bcfb-4e636bc594ff",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "25a735d0-d57a-4d5b-afe4-60353eb79c31"
        },
        "item": {
          "id": "6aff9b17-b34a-43cc-850b-a06883918795",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4cbe0d47-ec1a-47c9-8d9f-6f7ddb8cecb8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "b5c46ccc-e6b7-4c39-8b34-c6eeede89c34",
        "cursor": {
          "ref": "75ae9009-1ca3-4a72-adf1-afbc9ffb7c35",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4b6edf80-5e1d-4b1c-8699-a8d26b3dafd6"
        },
        "item": {
          "id": "b5c46ccc-e6b7-4c39-8b34-c6eeede89c34",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "626ed756-e382-40af-b8b9-0d6d21d3035b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "b5c46ccc-e6b7-4c39-8b34-c6eeede89c34",
        "cursor": {
          "ref": "75ae9009-1ca3-4a72-adf1-afbc9ffb7c35",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4b6edf80-5e1d-4b1c-8699-a8d26b3dafd6"
        },
        "item": {
          "id": "b5c46ccc-e6b7-4c39-8b34-c6eeede89c34",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "626ed756-e382-40af-b8b9-0d6d21d3035b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "92de9792-eb73-45f2-87ef-03cedda81c41",
        "cursor": {
          "ref": "6f8960ec-0ab3-4d81-967c-44ebcd9213c7",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2884cb70-48be-4d85-bdd1-afdd531ec386"
        },
        "item": {
          "id": "92de9792-eb73-45f2-87ef-03cedda81c41",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "33c68e18-24cb-4dae-8e6c-66219a0e40a8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "92de9792-eb73-45f2-87ef-03cedda81c41",
        "cursor": {
          "ref": "6f8960ec-0ab3-4d81-967c-44ebcd9213c7",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2884cb70-48be-4d85-bdd1-afdd531ec386"
        },
        "item": {
          "id": "92de9792-eb73-45f2-87ef-03cedda81c41",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "33c68e18-24cb-4dae-8e6c-66219a0e40a8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "2988f572-82f0-4ae6-9925-97d3c6a6a64c",
        "cursor": {
          "ref": "5c1468e3-5f32-481e-9b6b-4ceb50d917c7",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2e3f0cec-e42f-469c-a778-2e63c9d23c77"
        },
        "item": {
          "id": "2988f572-82f0-4ae6-9925-97d3c6a6a64c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "97ebe167-1908-4d23-9ffe-06a778333fcc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "2988f572-82f0-4ae6-9925-97d3c6a6a64c",
        "cursor": {
          "ref": "5c1468e3-5f32-481e-9b6b-4ceb50d917c7",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2e3f0cec-e42f-469c-a778-2e63c9d23c77"
        },
        "item": {
          "id": "2988f572-82f0-4ae6-9925-97d3c6a6a64c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "97ebe167-1908-4d23-9ffe-06a778333fcc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "26f96e37-d891-4d02-8e50-5840e703eda6",
        "cursor": {
          "ref": "35667344-fa90-4652-ac94-ddf4c654ace2",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "08c6f174-cc60-4263-a99d-01d3cc50bfe2"
        },
        "item": {
          "id": "26f96e37-d891-4d02-8e50-5840e703eda6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4b7ac769-e78d-4738-b203-81d01c241bdf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "26f96e37-d891-4d02-8e50-5840e703eda6",
        "cursor": {
          "ref": "35667344-fa90-4652-ac94-ddf4c654ace2",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "08c6f174-cc60-4263-a99d-01d3cc50bfe2"
        },
        "item": {
          "id": "26f96e37-d891-4d02-8e50-5840e703eda6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4b7ac769-e78d-4738-b203-81d01c241bdf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "168fbfd6-5921-476e-a596-f68c09d5fdb3",
        "cursor": {
          "ref": "c2d19bac-8351-433c-8f40-877b431d5e3f",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7a370493-830b-425f-9718-b1c9c81118b3"
        },
        "item": {
          "id": "168fbfd6-5921-476e-a596-f68c09d5fdb3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a2bf96e9-56f2-4a9a-bb6e-d92e280e0bb3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "168fbfd6-5921-476e-a596-f68c09d5fdb3",
        "cursor": {
          "ref": "c2d19bac-8351-433c-8f40-877b431d5e3f",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7a370493-830b-425f-9718-b1c9c81118b3"
        },
        "item": {
          "id": "168fbfd6-5921-476e-a596-f68c09d5fdb3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a2bf96e9-56f2-4a9a-bb6e-d92e280e0bb3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "33e676cc-2c3a-482d-aa6e-bd15256f46aa",
        "cursor": {
          "ref": "08247ee2-8165-4bca-a7e9-71f4f62869fa",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8401d30a-eeb8-4dba-a2d7-7c60482cf680"
        },
        "item": {
          "id": "33e676cc-2c3a-482d-aa6e-bd15256f46aa",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a462056b-b6bf-4934-a808-d552e0b57ee4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "33e676cc-2c3a-482d-aa6e-bd15256f46aa",
        "cursor": {
          "ref": "08247ee2-8165-4bca-a7e9-71f4f62869fa",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8401d30a-eeb8-4dba-a2d7-7c60482cf680"
        },
        "item": {
          "id": "33e676cc-2c3a-482d-aa6e-bd15256f46aa",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a462056b-b6bf-4934-a808-d552e0b57ee4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "d9fa6af3-5ef4-4b34-9e1c-0973f33787ab",
        "cursor": {
          "ref": "3e306354-bbc6-4916-b0fa-9a6167540758",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d2fa3025-8e78-40ce-a9ea-e0595bbf2407"
        },
        "item": {
          "id": "d9fa6af3-5ef4-4b34-9e1c-0973f33787ab",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "922c3930-666d-4039-bcdb-9826f952ad3a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "d9fa6af3-5ef4-4b34-9e1c-0973f33787ab",
        "cursor": {
          "ref": "3e306354-bbc6-4916-b0fa-9a6167540758",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d2fa3025-8e78-40ce-a9ea-e0595bbf2407"
        },
        "item": {
          "id": "d9fa6af3-5ef4-4b34-9e1c-0973f33787ab",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "922c3930-666d-4039-bcdb-9826f952ad3a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "90725dbe-a4f3-4832-b789-a4e0d2837103",
        "cursor": {
          "ref": "c7115b4f-ec4a-4c11-b138-1cc9430f2005",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4050ce12-3037-47f8-bd7c-6f9efba6313d"
        },
        "item": {
          "id": "90725dbe-a4f3-4832-b789-a4e0d2837103",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "fb1e21df-534e-4cc4-a29d-0c7c21f46c40",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "90725dbe-a4f3-4832-b789-a4e0d2837103",
        "cursor": {
          "ref": "c7115b4f-ec4a-4c11-b138-1cc9430f2005",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4050ce12-3037-47f8-bd7c-6f9efba6313d"
        },
        "item": {
          "id": "90725dbe-a4f3-4832-b789-a4e0d2837103",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "fb1e21df-534e-4cc4-a29d-0c7c21f46c40",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "bf6ecfca-2fb4-419d-8ee5-87e3c8a49f95",
        "cursor": {
          "ref": "8a999265-9598-492c-9ac7-fa5c2e2f3132",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d6c4318e-373e-4ba6-853f-875d75e589fc"
        },
        "item": {
          "id": "bf6ecfca-2fb4-419d-8ee5-87e3c8a49f95",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1b37e482-dbae-4bc8-8ba5-fd70260e6532",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "bf6ecfca-2fb4-419d-8ee5-87e3c8a49f95",
        "cursor": {
          "ref": "8a999265-9598-492c-9ac7-fa5c2e2f3132",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d6c4318e-373e-4ba6-853f-875d75e589fc"
        },
        "item": {
          "id": "bf6ecfca-2fb4-419d-8ee5-87e3c8a49f95",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1b37e482-dbae-4bc8-8ba5-fd70260e6532",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "3c09da9b-ab4b-44c1-9b83-d43bac6e6df8",
        "cursor": {
          "ref": "6a91f5c9-b055-422e-9a46-fa6623d85d0f",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f1565f08-01e2-4d1a-b917-917ec86b6f24"
        },
        "item": {
          "id": "3c09da9b-ab4b-44c1-9b83-d43bac6e6df8",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "060afec8-bf16-4e77-9085-e423c0bf17df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "3c09da9b-ab4b-44c1-9b83-d43bac6e6df8",
        "cursor": {
          "ref": "6a91f5c9-b055-422e-9a46-fa6623d85d0f",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f1565f08-01e2-4d1a-b917-917ec86b6f24"
        },
        "item": {
          "id": "3c09da9b-ab4b-44c1-9b83-d43bac6e6df8",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "060afec8-bf16-4e77-9085-e423c0bf17df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "9aa5b6c7-cf28-455d-b9d5-8b1136b9ae44",
        "cursor": {
          "ref": "f7bb54f5-6a93-4c72-8867-00d078fb6bf6",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "43315501-b511-4c17-9111-90b9790028d2"
        },
        "item": {
          "id": "9aa5b6c7-cf28-455d-b9d5-8b1136b9ae44",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6a411d18-741b-4ceb-92ef-71796f9f007c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "9aa5b6c7-cf28-455d-b9d5-8b1136b9ae44",
        "cursor": {
          "ref": "f7bb54f5-6a93-4c72-8867-00d078fb6bf6",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "43315501-b511-4c17-9111-90b9790028d2"
        },
        "item": {
          "id": "9aa5b6c7-cf28-455d-b9d5-8b1136b9ae44",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6a411d18-741b-4ceb-92ef-71796f9f007c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "01eb7528-e3ef-4352-a803-ef1c158014f0",
        "cursor": {
          "ref": "8d81026d-f22c-41d4-a671-ca93067986bc",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "9c51250d-3d37-4af3-a34c-c11d913d53b2"
        },
        "item": {
          "id": "01eb7528-e3ef-4352-a803-ef1c158014f0",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "bd2b1795-3fd4-4dbc-ba30-41ca4b6682f8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "01eb7528-e3ef-4352-a803-ef1c158014f0",
        "cursor": {
          "ref": "8d81026d-f22c-41d4-a671-ca93067986bc",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "9c51250d-3d37-4af3-a34c-c11d913d53b2"
        },
        "item": {
          "id": "01eb7528-e3ef-4352-a803-ef1c158014f0",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "bd2b1795-3fd4-4dbc-ba30-41ca4b6682f8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "73d88a83-061c-48ff-8ebe-1599dad413f8",
        "cursor": {
          "ref": "47869e9a-b03d-41f4-84fa-26538d742f73",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "768234af-f3d3-4a93-86b7-50bbbeba1af8"
        },
        "item": {
          "id": "73d88a83-061c-48ff-8ebe-1599dad413f8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d9c30eae-b043-42a7-803d-a8f95c2c9121",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "73d88a83-061c-48ff-8ebe-1599dad413f8",
        "cursor": {
          "ref": "47869e9a-b03d-41f4-84fa-26538d742f73",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "768234af-f3d3-4a93-86b7-50bbbeba1af8"
        },
        "item": {
          "id": "73d88a83-061c-48ff-8ebe-1599dad413f8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d9c30eae-b043-42a7-803d-a8f95c2c9121",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "4abe5e20-6e4f-49e0-aaef-b12c3a10ac27",
        "cursor": {
          "ref": "bd56376d-b0b5-44dd-8172-4f51f2fd1c00",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "789105dc-9f40-421d-a3da-6ba9eb175420"
        },
        "item": {
          "id": "4abe5e20-6e4f-49e0-aaef-b12c3a10ac27",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3afa0b3c-2fd4-46af-8e69-a304ddb53ff4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "4abe5e20-6e4f-49e0-aaef-b12c3a10ac27",
        "cursor": {
          "ref": "bd56376d-b0b5-44dd-8172-4f51f2fd1c00",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "789105dc-9f40-421d-a3da-6ba9eb175420"
        },
        "item": {
          "id": "4abe5e20-6e4f-49e0-aaef-b12c3a10ac27",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3afa0b3c-2fd4-46af-8e69-a304ddb53ff4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "6574f27c-ec7f-430c-ba18-303e707917fe",
        "cursor": {
          "ref": "8dcfb803-ad1c-47ed-84b0-02ed91d08094",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1666e1d9-5cf7-493a-b20b-c21cfd6f20af"
        },
        "item": {
          "id": "6574f27c-ec7f-430c-ba18-303e707917fe",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2981afef-fffc-4a7c-aae9-fe3b4ea1e69c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "6574f27c-ec7f-430c-ba18-303e707917fe",
        "cursor": {
          "ref": "8dcfb803-ad1c-47ed-84b0-02ed91d08094",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1666e1d9-5cf7-493a-b20b-c21cfd6f20af"
        },
        "item": {
          "id": "6574f27c-ec7f-430c-ba18-303e707917fe",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2981afef-fffc-4a7c-aae9-fe3b4ea1e69c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "3f8f2be0-c7e4-4b2b-a924-216259652a76",
        "cursor": {
          "ref": "8717ea84-3b51-4570-acae-96ab75dd9bb1",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "84aedd88-4c4d-4004-8ea6-1cda19446ea9"
        },
        "item": {
          "id": "3f8f2be0-c7e4-4b2b-a924-216259652a76",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "253191ea-2ea7-4f24-b8d1-0df4cf5c3548",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "3f8f2be0-c7e4-4b2b-a924-216259652a76",
        "cursor": {
          "ref": "8717ea84-3b51-4570-acae-96ab75dd9bb1",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "84aedd88-4c4d-4004-8ea6-1cda19446ea9"
        },
        "item": {
          "id": "3f8f2be0-c7e4-4b2b-a924-216259652a76",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "253191ea-2ea7-4f24-b8d1-0df4cf5c3548",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "412f7bf0-158c-4aae-b7ae-21c84e016db9",
        "cursor": {
          "ref": "9d377f62-1114-4ad1-96e6-00a44dad203f",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0c154ad2-7b20-40e1-846c-f98c31449a64"
        },
        "item": {
          "id": "412f7bf0-158c-4aae-b7ae-21c84e016db9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f37d2723-2168-4b38-94a4-8bf0c71e30d2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "412f7bf0-158c-4aae-b7ae-21c84e016db9",
        "cursor": {
          "ref": "9d377f62-1114-4ad1-96e6-00a44dad203f",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0c154ad2-7b20-40e1-846c-f98c31449a64"
        },
        "item": {
          "id": "412f7bf0-158c-4aae-b7ae-21c84e016db9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f37d2723-2168-4b38-94a4-8bf0c71e30d2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "07a0300a-898c-45e2-995f-db0ceab154a0",
        "cursor": {
          "ref": "96e2555c-2d7a-479e-bf9e-966d7c12813c",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "704e2350-b555-4954-8634-6fe72e70c0c2"
        },
        "item": {
          "id": "07a0300a-898c-45e2-995f-db0ceab154a0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "df345369-a439-44b6-b91b-398835e6c53a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "07a0300a-898c-45e2-995f-db0ceab154a0",
        "cursor": {
          "ref": "96e2555c-2d7a-479e-bf9e-966d7c12813c",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "704e2350-b555-4954-8634-6fe72e70c0c2"
        },
        "item": {
          "id": "07a0300a-898c-45e2-995f-db0ceab154a0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "df345369-a439-44b6-b91b-398835e6c53a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "6d3b1615-c155-429e-85e4-7205ca51fb20",
        "cursor": {
          "ref": "efdd2d8d-889a-424d-9f3e-8e0ab5848f0e",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "39595495-21dc-420d-b5c0-17cdc6f13733"
        },
        "item": {
          "id": "6d3b1615-c155-429e-85e4-7205ca51fb20",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2d864a85-4e72-400d-9e01-bd164c3a34cf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "6d3b1615-c155-429e-85e4-7205ca51fb20",
        "cursor": {
          "ref": "efdd2d8d-889a-424d-9f3e-8e0ab5848f0e",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "39595495-21dc-420d-b5c0-17cdc6f13733"
        },
        "item": {
          "id": "6d3b1615-c155-429e-85e4-7205ca51fb20",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2d864a85-4e72-400d-9e01-bd164c3a34cf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "f822b8b2-5bba-45cb-bf80-0658267c9bdf",
        "cursor": {
          "ref": "7643b950-33f3-4894-a125-e7a215328238",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "55ebb1ee-2287-4e7c-963d-3416e59851b4"
        },
        "item": {
          "id": "f822b8b2-5bba-45cb-bf80-0658267c9bdf",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4df07acc-84cb-432c-9732-144afc23f399",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "f822b8b2-5bba-45cb-bf80-0658267c9bdf",
        "cursor": {
          "ref": "7643b950-33f3-4894-a125-e7a215328238",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "55ebb1ee-2287-4e7c-963d-3416e59851b4"
        },
        "item": {
          "id": "f822b8b2-5bba-45cb-bf80-0658267c9bdf",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4df07acc-84cb-432c-9732-144afc23f399",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "26b8e6c8-89e5-49a0-848f-acc4d3a6c61a",
        "cursor": {
          "ref": "f7476e63-db83-4c8e-9af3-1792f16614c9",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b104d602-bb42-4248-8bc2-883ad32ca079"
        },
        "item": {
          "id": "26b8e6c8-89e5-49a0-848f-acc4d3a6c61a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "295760e9-d4d6-4092-ab77-53cd87902806",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "26b8e6c8-89e5-49a0-848f-acc4d3a6c61a",
        "cursor": {
          "ref": "f7476e63-db83-4c8e-9af3-1792f16614c9",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b104d602-bb42-4248-8bc2-883ad32ca079"
        },
        "item": {
          "id": "26b8e6c8-89e5-49a0-848f-acc4d3a6c61a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "295760e9-d4d6-4092-ab77-53cd87902806",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "38845b2a-8cca-47d4-91d1-c007960f8dc5",
        "cursor": {
          "ref": "aa23b30f-d71a-45e1-8352-22ea4bf43f3b",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "286a24e7-6712-46b5-927f-561247023d12"
        },
        "item": {
          "id": "38845b2a-8cca-47d4-91d1-c007960f8dc5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "fb20b469-ba4f-40b3-9cd8-f6b335061167",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "38845b2a-8cca-47d4-91d1-c007960f8dc5",
        "cursor": {
          "ref": "aa23b30f-d71a-45e1-8352-22ea4bf43f3b",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "286a24e7-6712-46b5-927f-561247023d12"
        },
        "item": {
          "id": "38845b2a-8cca-47d4-91d1-c007960f8dc5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "fb20b469-ba4f-40b3-9cd8-f6b335061167",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "7208bfe8-8f54-4207-bf50-688306ca60c6",
        "cursor": {
          "ref": "cfb0c740-7050-4038-b2ee-997fcbaba926",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "fb2f7fca-fbfc-4652-a77f-7ff7e42bfbd9"
        },
        "item": {
          "id": "7208bfe8-8f54-4207-bf50-688306ca60c6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "cbee6795-da55-4277-a5b2-f1d5ff3c15f7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "7208bfe8-8f54-4207-bf50-688306ca60c6",
        "cursor": {
          "ref": "cfb0c740-7050-4038-b2ee-997fcbaba926",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "fb2f7fca-fbfc-4652-a77f-7ff7e42bfbd9"
        },
        "item": {
          "id": "7208bfe8-8f54-4207-bf50-688306ca60c6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "cbee6795-da55-4277-a5b2-f1d5ff3c15f7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "6cbd35c5-77c0-407e-a243-49c6ad5b20fb",
        "cursor": {
          "ref": "d6622e5a-03f5-49bd-8fa9-6010c5a7835a",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5ba38861-6382-46fd-a588-0c134cd49fac"
        },
        "item": {
          "id": "6cbd35c5-77c0-407e-a243-49c6ad5b20fb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b4d58fa2-037b-4929-85f7-173a5ea77897",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "6cbd35c5-77c0-407e-a243-49c6ad5b20fb",
        "cursor": {
          "ref": "d6622e5a-03f5-49bd-8fa9-6010c5a7835a",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5ba38861-6382-46fd-a588-0c134cd49fac"
        },
        "item": {
          "id": "6cbd35c5-77c0-407e-a243-49c6ad5b20fb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b4d58fa2-037b-4929-85f7-173a5ea77897",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "58c52292-9d3a-42d4-b762-8c03a614822c",
        "cursor": {
          "ref": "9fe5a4ba-2ff3-4662-a9df-508b887da163",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "abeca38e-0536-43e5-b16d-379437d00245"
        },
        "item": {
          "id": "58c52292-9d3a-42d4-b762-8c03a614822c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c091dab7-b534-49bc-b231-a9b906dc827e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "58c52292-9d3a-42d4-b762-8c03a614822c",
        "cursor": {
          "ref": "9fe5a4ba-2ff3-4662-a9df-508b887da163",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "abeca38e-0536-43e5-b16d-379437d00245"
        },
        "item": {
          "id": "58c52292-9d3a-42d4-b762-8c03a614822c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c091dab7-b534-49bc-b231-a9b906dc827e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "d3a48696-3768-4463-9e49-cdcafc2ac1ca",
        "cursor": {
          "ref": "efc72f64-35ea-41a9-9304-3a07916689f5",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4fd8c691-1920-4e4d-8d06-2eaf64d876af"
        },
        "item": {
          "id": "d3a48696-3768-4463-9e49-cdcafc2ac1ca",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "162f4706-d8a7-4e96-bc6e-92374f1d9f3c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "d3a48696-3768-4463-9e49-cdcafc2ac1ca",
        "cursor": {
          "ref": "efc72f64-35ea-41a9-9304-3a07916689f5",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4fd8c691-1920-4e4d-8d06-2eaf64d876af"
        },
        "item": {
          "id": "d3a48696-3768-4463-9e49-cdcafc2ac1ca",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "162f4706-d8a7-4e96-bc6e-92374f1d9f3c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "bc13acb9-ab4b-4675-b71d-548dcb531ff0",
        "cursor": {
          "ref": "ecfbc462-df62-418e-8ed7-9c51548d1795",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "01756eb7-7e4f-4a29-8776-d2d2b2708457"
        },
        "item": {
          "id": "bc13acb9-ab4b-4675-b71d-548dcb531ff0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c1a7226c-ebad-4845-8c3f-d803687cb781",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "bc13acb9-ab4b-4675-b71d-548dcb531ff0",
        "cursor": {
          "ref": "ecfbc462-df62-418e-8ed7-9c51548d1795",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "01756eb7-7e4f-4a29-8776-d2d2b2708457"
        },
        "item": {
          "id": "bc13acb9-ab4b-4675-b71d-548dcb531ff0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c1a7226c-ebad-4845-8c3f-d803687cb781",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "0bc9b6cf-4d9f-43c8-8bd7-6446ecd0f6fa",
        "cursor": {
          "ref": "2a929100-dd1e-4bb1-8029-4bd1eb74dca3",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4ea0aca9-4ae7-4647-b18d-07acdbfa2707"
        },
        "item": {
          "id": "0bc9b6cf-4d9f-43c8-8bd7-6446ecd0f6fa",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2571ec7a-9627-44a9-b648-80d64048b247",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "0bc9b6cf-4d9f-43c8-8bd7-6446ecd0f6fa",
        "cursor": {
          "ref": "2a929100-dd1e-4bb1-8029-4bd1eb74dca3",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4ea0aca9-4ae7-4647-b18d-07acdbfa2707"
        },
        "item": {
          "id": "0bc9b6cf-4d9f-43c8-8bd7-6446ecd0f6fa",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2571ec7a-9627-44a9-b648-80d64048b247",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "bfba53cf-632b-41dd-b3af-16b80a9b4183",
        "cursor": {
          "ref": "a405df62-eaf9-4c83-b5e9-38a7e4d206db",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6d84790e-19fb-4ce8-977b-df61a9cdb8ca"
        },
        "item": {
          "id": "bfba53cf-632b-41dd-b3af-16b80a9b4183",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8459b9af-1205-4377-b44f-3954229f9cc9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "bfba53cf-632b-41dd-b3af-16b80a9b4183",
        "cursor": {
          "ref": "a405df62-eaf9-4c83-b5e9-38a7e4d206db",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6d84790e-19fb-4ce8-977b-df61a9cdb8ca"
        },
        "item": {
          "id": "bfba53cf-632b-41dd-b3af-16b80a9b4183",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8459b9af-1205-4377-b44f-3954229f9cc9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "67dee268-3273-4984-aa3d-c73ff1e32b09",
        "cursor": {
          "ref": "1a4ca8c4-a40e-40f7-bc73-c6f70d7a441b",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "85587e9c-428a-44e8-9c71-86fea1d346c6"
        },
        "item": {
          "id": "67dee268-3273-4984-aa3d-c73ff1e32b09",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f075357c-fde6-437a-87ae-d6bef20ec912",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "67dee268-3273-4984-aa3d-c73ff1e32b09",
        "cursor": {
          "ref": "1a4ca8c4-a40e-40f7-bc73-c6f70d7a441b",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "85587e9c-428a-44e8-9c71-86fea1d346c6"
        },
        "item": {
          "id": "67dee268-3273-4984-aa3d-c73ff1e32b09",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f075357c-fde6-437a-87ae-d6bef20ec912",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "ee93ebfc-b257-4965-ba48-2f5c87021f78",
        "cursor": {
          "ref": "170777a3-70a3-4d0d-99f5-92159fe1ce09",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "64d23157-7e90-4aef-bf06-e53d079b5ac1"
        },
        "item": {
          "id": "ee93ebfc-b257-4965-ba48-2f5c87021f78",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "37277eb6-a8a7-4dd2-8563-a4406ec4b557",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "ee93ebfc-b257-4965-ba48-2f5c87021f78",
        "cursor": {
          "ref": "170777a3-70a3-4d0d-99f5-92159fe1ce09",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "64d23157-7e90-4aef-bf06-e53d079b5ac1"
        },
        "item": {
          "id": "ee93ebfc-b257-4965-ba48-2f5c87021f78",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "37277eb6-a8a7-4dd2-8563-a4406ec4b557",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "2ad3054c-7bea-44f4-8c7f-0ae8b9b2bd42",
        "cursor": {
          "ref": "160d3460-729c-4a30-8f2b-f9f75c4c2c90",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1edc2468-31c1-4a3e-b0a9-44ede26bd547"
        },
        "item": {
          "id": "2ad3054c-7bea-44f4-8c7f-0ae8b9b2bd42",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9c0ea2ea-88e9-439f-8b33-32fb23a61358",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "2ad3054c-7bea-44f4-8c7f-0ae8b9b2bd42",
        "cursor": {
          "ref": "160d3460-729c-4a30-8f2b-f9f75c4c2c90",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1edc2468-31c1-4a3e-b0a9-44ede26bd547"
        },
        "item": {
          "id": "2ad3054c-7bea-44f4-8c7f-0ae8b9b2bd42",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9c0ea2ea-88e9-439f-8b33-32fb23a61358",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "0bad546a-7a08-4209-8833-02948dcbb2b1",
        "cursor": {
          "ref": "8826319c-9143-4684-bac0-be4f07f010fb",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "48cc7162-da98-4e02-9ae8-bae3016d1340"
        },
        "item": {
          "id": "0bad546a-7a08-4209-8833-02948dcbb2b1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9cda5608-7af2-4210-a0f4-8cf9bf3c1def",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "0bad546a-7a08-4209-8833-02948dcbb2b1",
        "cursor": {
          "ref": "8826319c-9143-4684-bac0-be4f07f010fb",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "48cc7162-da98-4e02-9ae8-bae3016d1340"
        },
        "item": {
          "id": "0bad546a-7a08-4209-8833-02948dcbb2b1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9cda5608-7af2-4210-a0f4-8cf9bf3c1def",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "3053f40d-3e0f-4e93-ace9-6342adfbd146",
        "cursor": {
          "ref": "c67ee6ba-ca25-40d9-87b9-3188b9546606",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "70febc3f-59ca-4ca7-8525-3b39a9794a61"
        },
        "item": {
          "id": "3053f40d-3e0f-4e93-ace9-6342adfbd146",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a4438687-fae4-472f-84f7-48109e55f076",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "3053f40d-3e0f-4e93-ace9-6342adfbd146",
        "cursor": {
          "ref": "c67ee6ba-ca25-40d9-87b9-3188b9546606",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "70febc3f-59ca-4ca7-8525-3b39a9794a61"
        },
        "item": {
          "id": "3053f40d-3e0f-4e93-ace9-6342adfbd146",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a4438687-fae4-472f-84f7-48109e55f076",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "8a880d6a-0387-483f-8404-b5e800d73db1",
        "cursor": {
          "ref": "688f8f32-c44b-44e4-930f-8e6e292b2cdb",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ce5bd697-e05e-4ffd-917b-e431b1637988"
        },
        "item": {
          "id": "8a880d6a-0387-483f-8404-b5e800d73db1",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "12bbfd9d-d414-4e73-ad9e-d9723c3745cb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "8a880d6a-0387-483f-8404-b5e800d73db1",
        "cursor": {
          "ref": "688f8f32-c44b-44e4-930f-8e6e292b2cdb",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ce5bd697-e05e-4ffd-917b-e431b1637988"
        },
        "item": {
          "id": "8a880d6a-0387-483f-8404-b5e800d73db1",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "12bbfd9d-d414-4e73-ad9e-d9723c3745cb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "d5e07854-4f8e-4671-9102-3dd7e63fb783",
        "cursor": {
          "ref": "e8671ac0-7379-4723-a05b-4735f0ce5f68",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "60fbc466-b83c-4977-929a-5629a5395886"
        },
        "item": {
          "id": "d5e07854-4f8e-4671-9102-3dd7e63fb783",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "fb8221ea-da9d-4d48-924e-e76a286adca4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "d5e07854-4f8e-4671-9102-3dd7e63fb783",
        "cursor": {
          "ref": "e8671ac0-7379-4723-a05b-4735f0ce5f68",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "60fbc466-b83c-4977-929a-5629a5395886"
        },
        "item": {
          "id": "d5e07854-4f8e-4671-9102-3dd7e63fb783",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "fb8221ea-da9d-4d48-924e-e76a286adca4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "3a9a828b-58ef-4922-8f93-7e02f2c11086",
        "cursor": {
          "ref": "cbfd9895-ae5e-4077-b69b-4728e7f3b435",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a53c7c36-c801-42b4-aadc-704dc2ed6c89"
        },
        "item": {
          "id": "3a9a828b-58ef-4922-8f93-7e02f2c11086",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "aa9d776b-bb3f-44e9-a98e-5efaa1186e0c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "3a9a828b-58ef-4922-8f93-7e02f2c11086",
        "cursor": {
          "ref": "cbfd9895-ae5e-4077-b69b-4728e7f3b435",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a53c7c36-c801-42b4-aadc-704dc2ed6c89"
        },
        "item": {
          "id": "3a9a828b-58ef-4922-8f93-7e02f2c11086",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "aa9d776b-bb3f-44e9-a98e-5efaa1186e0c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "82d1f1c3-3983-4597-93a0-ba0841aa2f66",
        "cursor": {
          "ref": "066c9791-1189-406b-91ff-eeb4b64dfb65",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8c77edeb-0b5c-4692-8852-3ed57cd25355"
        },
        "item": {
          "id": "82d1f1c3-3983-4597-93a0-ba0841aa2f66",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2c9506ce-5975-4203-aacb-4f93b5c5ff68",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "82d1f1c3-3983-4597-93a0-ba0841aa2f66",
        "cursor": {
          "ref": "066c9791-1189-406b-91ff-eeb4b64dfb65",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8c77edeb-0b5c-4692-8852-3ed57cd25355"
        },
        "item": {
          "id": "82d1f1c3-3983-4597-93a0-ba0841aa2f66",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2c9506ce-5975-4203-aacb-4f93b5c5ff68",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "355da712-5e9d-416c-9ce3-fd30e8bcff7f",
        "cursor": {
          "ref": "7513ebc6-0dc5-466a-b62e-c3be3c9d8a73",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "363c0b9a-d8cd-47e0-95e1-82c8d6a6f8f4"
        },
        "item": {
          "id": "355da712-5e9d-416c-9ce3-fd30e8bcff7f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2e669aae-dc97-4915-a693-65c693af0296",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "355da712-5e9d-416c-9ce3-fd30e8bcff7f",
        "cursor": {
          "ref": "7513ebc6-0dc5-466a-b62e-c3be3c9d8a73",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "363c0b9a-d8cd-47e0-95e1-82c8d6a6f8f4"
        },
        "item": {
          "id": "355da712-5e9d-416c-9ce3-fd30e8bcff7f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2e669aae-dc97-4915-a693-65c693af0296",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "dcb97a7e-840d-4cbf-b727-d06556db636a",
        "cursor": {
          "ref": "ce404572-d8fc-4df1-8caf-c7fa44504a6b",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "5d2cf77f-9dab-4ca3-93df-14548f3d0d78"
        },
        "item": {
          "id": "dcb97a7e-840d-4cbf-b727-d06556db636a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "6447cd46-106b-4532-9c45-e8a54e71aeaa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "dcb97a7e-840d-4cbf-b727-d06556db636a",
        "cursor": {
          "ref": "ce404572-d8fc-4df1-8caf-c7fa44504a6b",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "5d2cf77f-9dab-4ca3-93df-14548f3d0d78"
        },
        "item": {
          "id": "dcb97a7e-840d-4cbf-b727-d06556db636a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "6447cd46-106b-4532-9c45-e8a54e71aeaa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "1570923b-c181-4592-b0f4-27f853a067d3",
        "cursor": {
          "ref": "4d3d1f69-faef-44b7-8b8c-cf21a407362a",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e580349c-6097-45c1-9815-acfec8a4dbe5"
        },
        "item": {
          "id": "1570923b-c181-4592-b0f4-27f853a067d3",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "81d0c11b-eabb-44e5-a770-924b2c1e0c3c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "1570923b-c181-4592-b0f4-27f853a067d3",
        "cursor": {
          "ref": "4d3d1f69-faef-44b7-8b8c-cf21a407362a",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e580349c-6097-45c1-9815-acfec8a4dbe5"
        },
        "item": {
          "id": "1570923b-c181-4592-b0f4-27f853a067d3",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "81d0c11b-eabb-44e5-a770-924b2c1e0c3c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "d9e1ef68-9901-49eb-b8b1-2390a2cf9722",
        "cursor": {
          "ref": "52b1b95c-0b26-4ed3-be87-ce9b8f47df6a",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3cec510e-f2bf-41d1-95c0-a325827633b3"
        },
        "item": {
          "id": "d9e1ef68-9901-49eb-b8b1-2390a2cf9722",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "140fca09-ba11-4367-a802-9b87560b5573",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "d9e1ef68-9901-49eb-b8b1-2390a2cf9722",
        "cursor": {
          "ref": "52b1b95c-0b26-4ed3-be87-ce9b8f47df6a",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3cec510e-f2bf-41d1-95c0-a325827633b3"
        },
        "item": {
          "id": "d9e1ef68-9901-49eb-b8b1-2390a2cf9722",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "140fca09-ba11-4367-a802-9b87560b5573",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "8a5507e6-df0a-40b5-870b-e56ad923e0d7",
        "cursor": {
          "ref": "a79de7e1-e14d-4bdb-bef0-77a0ebc55e95",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "55a784a8-ad25-467d-abd9-e4b63ab90b97"
        },
        "item": {
          "id": "8a5507e6-df0a-40b5-870b-e56ad923e0d7",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "0d7de74f-d24d-42c3-acfa-a076bf1084b3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "8a5507e6-df0a-40b5-870b-e56ad923e0d7",
        "cursor": {
          "ref": "a79de7e1-e14d-4bdb-bef0-77a0ebc55e95",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "55a784a8-ad25-467d-abd9-e4b63ab90b97"
        },
        "item": {
          "id": "8a5507e6-df0a-40b5-870b-e56ad923e0d7",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "0d7de74f-d24d-42c3-acfa-a076bf1084b3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "5c4e0f65-554a-4154-b3a5-91cafccefb77",
        "cursor": {
          "ref": "18581412-0be1-43f2-bb75-491dacd1c7c2",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "36aa8077-60c7-4ede-8b97-5765cd49141f"
        },
        "item": {
          "id": "5c4e0f65-554a-4154-b3a5-91cafccefb77",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "3750731c-92f8-4d08-b259-91d45fb3b974",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "5c4e0f65-554a-4154-b3a5-91cafccefb77",
        "cursor": {
          "ref": "18581412-0be1-43f2-bb75-491dacd1c7c2",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "36aa8077-60c7-4ede-8b97-5765cd49141f"
        },
        "item": {
          "id": "5c4e0f65-554a-4154-b3a5-91cafccefb77",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "3750731c-92f8-4d08-b259-91d45fb3b974",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "48e72fc6-1eab-413e-83f4-eca83ce8875c",
        "cursor": {
          "ref": "695e2f81-a42b-4879-b392-8768446b7634",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "bb3caf6d-dfad-4160-9899-739fe8bea177"
        },
        "item": {
          "id": "48e72fc6-1eab-413e-83f4-eca83ce8875c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "392218b4-1582-43a8-b571-db6cdccc9201",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "48e72fc6-1eab-413e-83f4-eca83ce8875c",
        "cursor": {
          "ref": "695e2f81-a42b-4879-b392-8768446b7634",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "bb3caf6d-dfad-4160-9899-739fe8bea177"
        },
        "item": {
          "id": "48e72fc6-1eab-413e-83f4-eca83ce8875c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "392218b4-1582-43a8-b571-db6cdccc9201",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "4f422fb2-ba3d-4b22-9c2f-f5e05a987415",
        "cursor": {
          "ref": "fdcdb765-b6f0-4422-87d3-151dbb3fc271",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b6a166ec-ad1c-4aa4-a080-097652c05164"
        },
        "item": {
          "id": "4f422fb2-ba3d-4b22-9c2f-f5e05a987415",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "89dae1b3-8f05-4041-be7d-75edda455c0c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "4f422fb2-ba3d-4b22-9c2f-f5e05a987415",
        "cursor": {
          "ref": "fdcdb765-b6f0-4422-87d3-151dbb3fc271",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b6a166ec-ad1c-4aa4-a080-097652c05164"
        },
        "item": {
          "id": "4f422fb2-ba3d-4b22-9c2f-f5e05a987415",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "89dae1b3-8f05-4041-be7d-75edda455c0c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "e5498580-e657-4501-bac0-fc793cf61aaf",
        "cursor": {
          "ref": "5764acba-82bd-438a-8de2-ef903988680e",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ea5db144-31e1-4f51-a345-ec7f99c558cb"
        },
        "item": {
          "id": "e5498580-e657-4501-bac0-fc793cf61aaf",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1bf2ca26-6911-44c6-916a-4cace848da70",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "e5498580-e657-4501-bac0-fc793cf61aaf",
        "cursor": {
          "ref": "5764acba-82bd-438a-8de2-ef903988680e",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ea5db144-31e1-4f51-a345-ec7f99c558cb"
        },
        "item": {
          "id": "e5498580-e657-4501-bac0-fc793cf61aaf",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1bf2ca26-6911-44c6-916a-4cace848da70",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "ce7a1ad2-8d38-4189-a267-73c40ace4efe",
        "cursor": {
          "ref": "fddd878d-a6b1-45a8-864d-6d2727451137",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "176e68ee-2001-4ddd-a7f2-ba1bf5cb7c49"
        },
        "item": {
          "id": "ce7a1ad2-8d38-4189-a267-73c40ace4efe",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8865014c-9e3c-4c45-b581-e239f3a13d5a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "ce7a1ad2-8d38-4189-a267-73c40ace4efe",
        "cursor": {
          "ref": "fddd878d-a6b1-45a8-864d-6d2727451137",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "176e68ee-2001-4ddd-a7f2-ba1bf5cb7c49"
        },
        "item": {
          "id": "ce7a1ad2-8d38-4189-a267-73c40ace4efe",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8865014c-9e3c-4c45-b581-e239f3a13d5a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "1bacabf3-aca8-4048-8442-81a3ed3659d2",
        "cursor": {
          "ref": "5b6716ee-419d-4fb7-96a2-9310e63b173c",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ca09807f-12e8-4400-8df5-ccd3def05ba1"
        },
        "item": {
          "id": "1bacabf3-aca8-4048-8442-81a3ed3659d2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "130faa91-20ad-450d-975e-14c5aca68976",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "1bacabf3-aca8-4048-8442-81a3ed3659d2",
        "cursor": {
          "ref": "5b6716ee-419d-4fb7-96a2-9310e63b173c",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ca09807f-12e8-4400-8df5-ccd3def05ba1"
        },
        "item": {
          "id": "1bacabf3-aca8-4048-8442-81a3ed3659d2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "130faa91-20ad-450d-975e-14c5aca68976",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "d9d7c3ec-aade-4e26-a9c3-8461b01900d0",
        "cursor": {
          "ref": "210ac202-5e55-4a2b-8b1d-ed74fa7501ef",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0958f003-7974-4a08-af5f-5006ea1c3383"
        },
        "item": {
          "id": "d9d7c3ec-aade-4e26-a9c3-8461b01900d0",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7d77c22d-964f-41e4-a118-782861abc0d2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "d9d7c3ec-aade-4e26-a9c3-8461b01900d0",
        "cursor": {
          "ref": "210ac202-5e55-4a2b-8b1d-ed74fa7501ef",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0958f003-7974-4a08-af5f-5006ea1c3383"
        },
        "item": {
          "id": "d9d7c3ec-aade-4e26-a9c3-8461b01900d0",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7d77c22d-964f-41e4-a118-782861abc0d2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "7e366c93-bcdb-4e8b-a176-64ff07efa2c0",
        "cursor": {
          "ref": "339b681f-18ba-4c9a-a832-b6b7e746239b",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d87b5024-0ae8-4bb9-9d53-dddefc2fd061"
        },
        "item": {
          "id": "7e366c93-bcdb-4e8b-a176-64ff07efa2c0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "201fb82c-f95b-4cbb-a8b6-ad71b3cfa88d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "7e366c93-bcdb-4e8b-a176-64ff07efa2c0",
        "cursor": {
          "ref": "339b681f-18ba-4c9a-a832-b6b7e746239b",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d87b5024-0ae8-4bb9-9d53-dddefc2fd061"
        },
        "item": {
          "id": "7e366c93-bcdb-4e8b-a176-64ff07efa2c0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "201fb82c-f95b-4cbb-a8b6-ad71b3cfa88d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "99728763-c241-4a13-b075-ed8d76a7c654",
        "cursor": {
          "ref": "b491152a-d7f8-4398-b0bf-08be50ee3c0c",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f6b2607e-4af7-4157-b65a-b97c72b4b76b"
        },
        "item": {
          "id": "99728763-c241-4a13-b075-ed8d76a7c654",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "86951554-3fb3-4eea-8d6e-3a0adea7234c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "99728763-c241-4a13-b075-ed8d76a7c654",
        "cursor": {
          "ref": "b491152a-d7f8-4398-b0bf-08be50ee3c0c",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f6b2607e-4af7-4157-b65a-b97c72b4b76b"
        },
        "item": {
          "id": "99728763-c241-4a13-b075-ed8d76a7c654",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "86951554-3fb3-4eea-8d6e-3a0adea7234c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "affd13de-0de0-4522-b4ac-9fd0796cace6",
        "cursor": {
          "ref": "5028ba8a-9cfa-4637-8af3-5e0e014a9427",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c8566133-2dba-493d-8113-a58b1ff0cc72"
        },
        "item": {
          "id": "affd13de-0de0-4522-b4ac-9fd0796cace6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "85cfe9b3-7255-44d3-a0f3-935f7a464482",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "affd13de-0de0-4522-b4ac-9fd0796cace6",
        "cursor": {
          "ref": "5028ba8a-9cfa-4637-8af3-5e0e014a9427",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c8566133-2dba-493d-8113-a58b1ff0cc72"
        },
        "item": {
          "id": "affd13de-0de0-4522-b4ac-9fd0796cace6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "85cfe9b3-7255-44d3-a0f3-935f7a464482",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "6a44c62c-a214-492b-8cc4-67eeb0e47fdc",
        "cursor": {
          "ref": "07952664-2709-4ada-bdbe-b5f448220536",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c0c59ed0-d48b-4ebb-b5c3-abb0a3b70476"
        },
        "item": {
          "id": "6a44c62c-a214-492b-8cc4-67eeb0e47fdc",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3f2266e6-1b70-4b08-8f0f-710549753b84",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "6a44c62c-a214-492b-8cc4-67eeb0e47fdc",
        "cursor": {
          "ref": "07952664-2709-4ada-bdbe-b5f448220536",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c0c59ed0-d48b-4ebb-b5c3-abb0a3b70476"
        },
        "item": {
          "id": "6a44c62c-a214-492b-8cc4-67eeb0e47fdc",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3f2266e6-1b70-4b08-8f0f-710549753b84",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "b98f5731-ee00-4619-b0cc-a1d6126f9e91",
        "cursor": {
          "ref": "f1800031-6a54-49c8-b4e8-2cfb40b4c206",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8028551f-b253-48ef-800c-499293fe9e8d"
        },
        "item": {
          "id": "b98f5731-ee00-4619-b0cc-a1d6126f9e91",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1e26fc5b-847c-4eab-b22e-72e3f2fb49b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "b98f5731-ee00-4619-b0cc-a1d6126f9e91",
        "cursor": {
          "ref": "f1800031-6a54-49c8-b4e8-2cfb40b4c206",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8028551f-b253-48ef-800c-499293fe9e8d"
        },
        "item": {
          "id": "b98f5731-ee00-4619-b0cc-a1d6126f9e91",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1e26fc5b-847c-4eab-b22e-72e3f2fb49b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "c12a1c41-6123-4dc0-bf15-9b1682c6e9d6",
        "cursor": {
          "ref": "c48bc161-d662-4e31-8b52-ac8dd8d4f75f",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b95ea7d0-9665-455e-bf13-b4b243d8be85"
        },
        "item": {
          "id": "c12a1c41-6123-4dc0-bf15-9b1682c6e9d6",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "cc46f429-acb6-4841-b70b-6ad4e9e509a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "c12a1c41-6123-4dc0-bf15-9b1682c6e9d6",
        "cursor": {
          "ref": "c48bc161-d662-4e31-8b52-ac8dd8d4f75f",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b95ea7d0-9665-455e-bf13-b4b243d8be85"
        },
        "item": {
          "id": "c12a1c41-6123-4dc0-bf15-9b1682c6e9d6",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "cc46f429-acb6-4841-b70b-6ad4e9e509a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "e9162b3d-ea39-4dcd-be41-07640d4b562f",
        "cursor": {
          "ref": "6748dbfb-88cd-4a05-901b-54b6bf55d4d8",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "629c21f4-cacb-43a6-9dfe-6a67f76f03a4"
        },
        "item": {
          "id": "e9162b3d-ea39-4dcd-be41-07640d4b562f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "de1d16d9-9555-4ca8-86ca-67b0e05a32ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "e9162b3d-ea39-4dcd-be41-07640d4b562f",
        "cursor": {
          "ref": "6748dbfb-88cd-4a05-901b-54b6bf55d4d8",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "629c21f4-cacb-43a6-9dfe-6a67f76f03a4"
        },
        "item": {
          "id": "e9162b3d-ea39-4dcd-be41-07640d4b562f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "de1d16d9-9555-4ca8-86ca-67b0e05a32ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "80ace725-d2d7-4427-ae55-ac101ad6ff26",
        "cursor": {
          "ref": "aa06f777-0b61-4869-8aaf-1bfff270b5bb",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "1192fe00-952d-4522-b9bf-dfcea3b6566c"
        },
        "item": {
          "id": "80ace725-d2d7-4427-ae55-ac101ad6ff26",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9934406e-3daa-43c5-b831-a7638209e0f2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "80ace725-d2d7-4427-ae55-ac101ad6ff26",
        "cursor": {
          "ref": "aa06f777-0b61-4869-8aaf-1bfff270b5bb",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "1192fe00-952d-4522-b9bf-dfcea3b6566c"
        },
        "item": {
          "id": "80ace725-d2d7-4427-ae55-ac101ad6ff26",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9934406e-3daa-43c5-b831-a7638209e0f2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "a65b929f-8739-4a4d-969e-60dc4e667095",
        "cursor": {
          "ref": "34b6b3f8-bcf4-4451-9fbf-c5df2b2db9e4",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f42e64b1-80a4-4ab1-87d0-db03eadba92c"
        },
        "item": {
          "id": "a65b929f-8739-4a4d-969e-60dc4e667095",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9216a620-b745-4370-bf1a-4b05a96fc787",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "a65b929f-8739-4a4d-969e-60dc4e667095",
        "cursor": {
          "ref": "34b6b3f8-bcf4-4451-9fbf-c5df2b2db9e4",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f42e64b1-80a4-4ab1-87d0-db03eadba92c"
        },
        "item": {
          "id": "a65b929f-8739-4a4d-969e-60dc4e667095",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9216a620-b745-4370-bf1a-4b05a96fc787",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "27bfe508-ef1b-401c-a0f3-50b77c2f5762",
        "cursor": {
          "ref": "64ec110b-f048-4440-8c4e-c6722f356384",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a1c25c56-d415-43fd-99f4-6f7e5000ce75"
        },
        "item": {
          "id": "27bfe508-ef1b-401c-a0f3-50b77c2f5762",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e97bd062-39dc-4163-9e04-0a5ccd23824c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "27bfe508-ef1b-401c-a0f3-50b77c2f5762",
        "cursor": {
          "ref": "64ec110b-f048-4440-8c4e-c6722f356384",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a1c25c56-d415-43fd-99f4-6f7e5000ce75"
        },
        "item": {
          "id": "27bfe508-ef1b-401c-a0f3-50b77c2f5762",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e97bd062-39dc-4163-9e04-0a5ccd23824c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "0b6fe99e-883e-4ac9-bb35-4a55ccbc49ba",
        "cursor": {
          "ref": "dccd1df3-7028-46b3-a5f7-c3aacd773fa8",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e9374241-f326-432d-8142-7c498ed227ce"
        },
        "item": {
          "id": "0b6fe99e-883e-4ac9-bb35-4a55ccbc49ba",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "efebea4e-7fe5-43b9-b3de-f4e0f78e09e3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "0b6fe99e-883e-4ac9-bb35-4a55ccbc49ba",
        "cursor": {
          "ref": "dccd1df3-7028-46b3-a5f7-c3aacd773fa8",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e9374241-f326-432d-8142-7c498ed227ce"
        },
        "item": {
          "id": "0b6fe99e-883e-4ac9-bb35-4a55ccbc49ba",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "efebea4e-7fe5-43b9-b3de-f4e0f78e09e3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "c37a3f6c-0a50-466b-b926-a577b095e4f9",
        "cursor": {
          "ref": "ae87bdee-63e8-46ff-a4b0-0ab503df5bbb",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "05ffbd01-ba71-453b-bac3-1b03185fa351"
        },
        "item": {
          "id": "c37a3f6c-0a50-466b-b926-a577b095e4f9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4ac6ed03-75a4-4762-9d6b-2643493846f6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "c37a3f6c-0a50-466b-b926-a577b095e4f9",
        "cursor": {
          "ref": "ae87bdee-63e8-46ff-a4b0-0ab503df5bbb",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "05ffbd01-ba71-453b-bac3-1b03185fa351"
        },
        "item": {
          "id": "c37a3f6c-0a50-466b-b926-a577b095e4f9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4ac6ed03-75a4-4762-9d6b-2643493846f6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "1dfca745-fb6d-48aa-8d86-fe7f18d5df99",
        "cursor": {
          "ref": "3bc94196-8023-4352-92db-ebb5f629ed00",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "99148952-2a61-458f-b62c-ba110c215cc5"
        },
        "item": {
          "id": "1dfca745-fb6d-48aa-8d86-fe7f18d5df99",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0f74cde0-9afb-410b-9183-b8e03f9b6b51",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "1dfca745-fb6d-48aa-8d86-fe7f18d5df99",
        "cursor": {
          "ref": "3bc94196-8023-4352-92db-ebb5f629ed00",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "99148952-2a61-458f-b62c-ba110c215cc5"
        },
        "item": {
          "id": "1dfca745-fb6d-48aa-8d86-fe7f18d5df99",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0f74cde0-9afb-410b-9183-b8e03f9b6b51",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "66db494e-702a-4827-b997-bf5d2ffbb127",
        "cursor": {
          "ref": "74fd9810-d791-4fd0-97f7-80d0fe53f1b4",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f647300a-8429-4190-9c95-4023e08cee0b"
        },
        "item": {
          "id": "66db494e-702a-4827-b997-bf5d2ffbb127",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ff2e33a5-31bf-46c1-801e-54fca3c35570",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "66db494e-702a-4827-b997-bf5d2ffbb127",
        "cursor": {
          "ref": "74fd9810-d791-4fd0-97f7-80d0fe53f1b4",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f647300a-8429-4190-9c95-4023e08cee0b"
        },
        "item": {
          "id": "66db494e-702a-4827-b997-bf5d2ffbb127",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ff2e33a5-31bf-46c1-801e-54fca3c35570",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "525c1c9d-e1ea-4380-a0ad-28a46d871bcb",
        "cursor": {
          "ref": "2c728c89-f752-44d2-bf97-08f3afb1a675",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "eee4fec6-f1d7-4762-8209-c45c5e9402fc"
        },
        "item": {
          "id": "525c1c9d-e1ea-4380-a0ad-28a46d871bcb",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e5e61d45-a0a9-446a-8b1a-4b86a89a6787",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "525c1c9d-e1ea-4380-a0ad-28a46d871bcb",
        "cursor": {
          "ref": "2c728c89-f752-44d2-bf97-08f3afb1a675",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "eee4fec6-f1d7-4762-8209-c45c5e9402fc"
        },
        "item": {
          "id": "525c1c9d-e1ea-4380-a0ad-28a46d871bcb",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e5e61d45-a0a9-446a-8b1a-4b86a89a6787",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "59339347-9b96-4c78-91da-07953a7d1ea1",
        "cursor": {
          "ref": "06ff60a2-1de3-47e5-929d-2de1b2b53031",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2625dbef-ffe2-4c50-b4eb-4dcb5d827a1b"
        },
        "item": {
          "id": "59339347-9b96-4c78-91da-07953a7d1ea1",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "51f9dc47-9c3e-450b-9180-d8fce0e0409d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "59339347-9b96-4c78-91da-07953a7d1ea1",
        "cursor": {
          "ref": "06ff60a2-1de3-47e5-929d-2de1b2b53031",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2625dbef-ffe2-4c50-b4eb-4dcb5d827a1b"
        },
        "item": {
          "id": "59339347-9b96-4c78-91da-07953a7d1ea1",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "51f9dc47-9c3e-450b-9180-d8fce0e0409d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "3f8976bd-4695-4e2d-a409-f9abaf5ee7bb",
        "cursor": {
          "ref": "0249d5fa-bad4-4d08-b9fd-c296adcf31cf",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "82d32d3c-cd05-43fa-a4ad-001f46767ff3"
        },
        "item": {
          "id": "3f8976bd-4695-4e2d-a409-f9abaf5ee7bb",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "37c45f24-0df7-40eb-9d3c-d19168460a6f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "3f8976bd-4695-4e2d-a409-f9abaf5ee7bb",
        "cursor": {
          "ref": "0249d5fa-bad4-4d08-b9fd-c296adcf31cf",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "82d32d3c-cd05-43fa-a4ad-001f46767ff3"
        },
        "item": {
          "id": "3f8976bd-4695-4e2d-a409-f9abaf5ee7bb",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "37c45f24-0df7-40eb-9d3c-d19168460a6f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "0f47d4bb-ce0c-4a24-b465-c9af4a1297d4",
        "cursor": {
          "ref": "a4dc815e-762a-404f-87d1-c0dbdd73352a",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e2cda5f4-b53f-4f13-9bb5-8ca0633fe498"
        },
        "item": {
          "id": "0f47d4bb-ce0c-4a24-b465-c9af4a1297d4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4ebc6a3f-a1c6-42b7-889f-e3c308ab6098",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "0f47d4bb-ce0c-4a24-b465-c9af4a1297d4",
        "cursor": {
          "ref": "a4dc815e-762a-404f-87d1-c0dbdd73352a",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e2cda5f4-b53f-4f13-9bb5-8ca0633fe498"
        },
        "item": {
          "id": "0f47d4bb-ce0c-4a24-b465-c9af4a1297d4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4ebc6a3f-a1c6-42b7-889f-e3c308ab6098",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "4437297e-f6e5-4643-9e00-c786e4d3a178",
        "cursor": {
          "ref": "d3200825-2546-42b4-bd6b-df826864ad93",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e3bfa1c1-3859-47a3-9c5e-2d8ad2d28afb"
        },
        "item": {
          "id": "4437297e-f6e5-4643-9e00-c786e4d3a178",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d4e98cb0-a5d8-4b10-9807-5357e60f3db2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "4437297e-f6e5-4643-9e00-c786e4d3a178",
        "cursor": {
          "ref": "d3200825-2546-42b4-bd6b-df826864ad93",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e3bfa1c1-3859-47a3-9c5e-2d8ad2d28afb"
        },
        "item": {
          "id": "4437297e-f6e5-4643-9e00-c786e4d3a178",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d4e98cb0-a5d8-4b10-9807-5357e60f3db2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "6f6edac9-96d2-49c4-90ec-b679b4e51d2d",
        "cursor": {
          "ref": "b3c9a227-9b77-487d-9c23-54947ee1fe8a",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ce398249-3a89-43d6-9b50-811004fe6f69"
        },
        "item": {
          "id": "6f6edac9-96d2-49c4-90ec-b679b4e51d2d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "0af52f09-e1ea-4b36-a704-0f417e5d55ab",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "6f6edac9-96d2-49c4-90ec-b679b4e51d2d",
        "cursor": {
          "ref": "b3c9a227-9b77-487d-9c23-54947ee1fe8a",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ce398249-3a89-43d6-9b50-811004fe6f69"
        },
        "item": {
          "id": "6f6edac9-96d2-49c4-90ec-b679b4e51d2d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "0af52f09-e1ea-4b36-a704-0f417e5d55ab",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "c1b0c5f4-56a1-44a3-940b-e2e2bcf7af14",
        "cursor": {
          "ref": "8c6e50ec-499c-477a-9eeb-ac90114faeab",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "5f105c61-077d-48d7-bbb2-d9814080d1ab"
        },
        "item": {
          "id": "c1b0c5f4-56a1-44a3-940b-e2e2bcf7af14",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "172f35d0-c2d7-4c92-9531-f3377f0c3bcd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "c1b0c5f4-56a1-44a3-940b-e2e2bcf7af14",
        "cursor": {
          "ref": "8c6e50ec-499c-477a-9eeb-ac90114faeab",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "5f105c61-077d-48d7-bbb2-d9814080d1ab"
        },
        "item": {
          "id": "c1b0c5f4-56a1-44a3-940b-e2e2bcf7af14",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "172f35d0-c2d7-4c92-9531-f3377f0c3bcd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "6a8f4a97-ff37-4e8c-abb9-39e29c5f0394",
        "cursor": {
          "ref": "01b47e1b-56ba-48bb-a62a-981487bec422",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "99ee6a8d-9246-44a7-b21d-d98a5b1ae8be"
        },
        "item": {
          "id": "6a8f4a97-ff37-4e8c-abb9-39e29c5f0394",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d3b1dd8f-0701-4807-8687-5655b668a355",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "6a8f4a97-ff37-4e8c-abb9-39e29c5f0394",
        "cursor": {
          "ref": "01b47e1b-56ba-48bb-a62a-981487bec422",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "99ee6a8d-9246-44a7-b21d-d98a5b1ae8be"
        },
        "item": {
          "id": "6a8f4a97-ff37-4e8c-abb9-39e29c5f0394",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d3b1dd8f-0701-4807-8687-5655b668a355",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "c6ff8939-95f2-410e-85f5-4a09aa775e6a",
        "cursor": {
          "ref": "ae8a52ee-a6f4-4c0c-bd70-9aa08e8444b0",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d668e673-a7ec-484a-9c94-7cee0066662c"
        },
        "item": {
          "id": "c6ff8939-95f2-410e-85f5-4a09aa775e6a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ef614b4d-56bb-475f-b7a8-6713b5c806d8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "c6ff8939-95f2-410e-85f5-4a09aa775e6a",
        "cursor": {
          "ref": "ae8a52ee-a6f4-4c0c-bd70-9aa08e8444b0",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d668e673-a7ec-484a-9c94-7cee0066662c"
        },
        "item": {
          "id": "c6ff8939-95f2-410e-85f5-4a09aa775e6a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ef614b4d-56bb-475f-b7a8-6713b5c806d8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "66756ec6-0a07-45d1-8aa2-fb9a5fdee6c9",
        "cursor": {
          "ref": "42063db1-9274-4b21-89f3-82b8594d92fc",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9349ec33-e291-4be4-a6aa-3f45a04890bd"
        },
        "item": {
          "id": "66756ec6-0a07-45d1-8aa2-fb9a5fdee6c9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c67b0066-2b6b-4a33-b766-9da08151143c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "66756ec6-0a07-45d1-8aa2-fb9a5fdee6c9",
        "cursor": {
          "ref": "42063db1-9274-4b21-89f3-82b8594d92fc",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9349ec33-e291-4be4-a6aa-3f45a04890bd"
        },
        "item": {
          "id": "66756ec6-0a07-45d1-8aa2-fb9a5fdee6c9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c67b0066-2b6b-4a33-b766-9da08151143c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "36c002ae-d223-43fe-9f4d-e3aceeb6710b",
        "cursor": {
          "ref": "432c8d70-3729-4428-9113-c44b52463539",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7f4f3620-f751-497b-bc12-94e959d0e398"
        },
        "item": {
          "id": "36c002ae-d223-43fe-9f4d-e3aceeb6710b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e04c8ca2-13b3-43e2-8892-daa9745ee41f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 31,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "36c002ae-d223-43fe-9f4d-e3aceeb6710b",
        "cursor": {
          "ref": "432c8d70-3729-4428-9113-c44b52463539",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7f4f3620-f751-497b-bc12-94e959d0e398"
        },
        "item": {
          "id": "36c002ae-d223-43fe-9f4d-e3aceeb6710b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e04c8ca2-13b3-43e2-8892-daa9745ee41f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 31,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "509b93b3-b683-43de-8f45-6d6cdd7bb1f9",
        "cursor": {
          "ref": "e18e2bfd-8d80-40e2-83d0-6619db059d41",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9284088a-6c8c-41ee-a1fb-a034cab3ca68"
        },
        "item": {
          "id": "509b93b3-b683-43de-8f45-6d6cdd7bb1f9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c0d1fc7b-1f98-46d1-846e-f28239c12958",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "509b93b3-b683-43de-8f45-6d6cdd7bb1f9",
        "cursor": {
          "ref": "e18e2bfd-8d80-40e2-83d0-6619db059d41",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9284088a-6c8c-41ee-a1fb-a034cab3ca68"
        },
        "item": {
          "id": "509b93b3-b683-43de-8f45-6d6cdd7bb1f9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c0d1fc7b-1f98-46d1-846e-f28239c12958",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "859d3900-5f18-42ca-b2b4-2055051772dc",
        "cursor": {
          "ref": "4beae8c5-8e1a-4f0a-b2a7-3bc547f63d6f",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "946165d7-c1c9-4412-8bf6-9287d112db02"
        },
        "item": {
          "id": "859d3900-5f18-42ca-b2b4-2055051772dc",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bddc8158-4b2a-4932-811e-27ff82c57fca",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "859d3900-5f18-42ca-b2b4-2055051772dc",
        "cursor": {
          "ref": "4beae8c5-8e1a-4f0a-b2a7-3bc547f63d6f",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "946165d7-c1c9-4412-8bf6-9287d112db02"
        },
        "item": {
          "id": "859d3900-5f18-42ca-b2b4-2055051772dc",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bddc8158-4b2a-4932-811e-27ff82c57fca",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "51f45836-045a-4d08-8c13-9a721e56d3d6",
        "cursor": {
          "ref": "2afbdde8-a7f0-4301-bd44-18db1d364f7e",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ce77261c-161f-4657-a428-c1b8c19c1e25"
        },
        "item": {
          "id": "51f45836-045a-4d08-8c13-9a721e56d3d6",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "bb45e49f-5b8b-4860-a479-43fd952133e0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "51f45836-045a-4d08-8c13-9a721e56d3d6",
        "cursor": {
          "ref": "2afbdde8-a7f0-4301-bd44-18db1d364f7e",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ce77261c-161f-4657-a428-c1b8c19c1e25"
        },
        "item": {
          "id": "51f45836-045a-4d08-8c13-9a721e56d3d6",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "bb45e49f-5b8b-4860-a479-43fd952133e0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "97288f2d-06dd-424d-ab2c-307decf738c3",
        "cursor": {
          "ref": "7a20f47a-9836-4a5d-ade4-b796f20132f7",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "926a717e-e581-47a3-917a-89520b3bd5ea"
        },
        "item": {
          "id": "97288f2d-06dd-424d-ab2c-307decf738c3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c683fe25-90be-4b32-851c-1f76d017a351",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "97288f2d-06dd-424d-ab2c-307decf738c3",
        "cursor": {
          "ref": "7a20f47a-9836-4a5d-ade4-b796f20132f7",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "926a717e-e581-47a3-917a-89520b3bd5ea"
        },
        "item": {
          "id": "97288f2d-06dd-424d-ab2c-307decf738c3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c683fe25-90be-4b32-851c-1f76d017a351",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "8ee7f3bd-ee0f-4696-b559-9ccd6a5bba03",
        "cursor": {
          "ref": "829dd254-206b-439b-87db-b6efb0cd5420",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "06df42d9-791d-4d96-b6c4-cc3b1bd95624"
        },
        "item": {
          "id": "8ee7f3bd-ee0f-4696-b559-9ccd6a5bba03",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "fa7be889-6451-4d94-af4b-760abc6f029a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "8ee7f3bd-ee0f-4696-b559-9ccd6a5bba03",
        "cursor": {
          "ref": "829dd254-206b-439b-87db-b6efb0cd5420",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "06df42d9-791d-4d96-b6c4-cc3b1bd95624"
        },
        "item": {
          "id": "8ee7f3bd-ee0f-4696-b559-9ccd6a5bba03",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "fa7be889-6451-4d94-af4b-760abc6f029a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "fb35c333-d657-4324-bfb6-058ab4e5bb1c",
        "cursor": {
          "ref": "e9f135f3-c666-4ce4-a8fc-c526563b493c",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f9a3e79f-6c58-400f-ad10-53e1fb9c7baf"
        },
        "item": {
          "id": "fb35c333-d657-4324-bfb6-058ab4e5bb1c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a042a4b3-7738-43f1-8410-600e84773a9e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "fb35c333-d657-4324-bfb6-058ab4e5bb1c",
        "cursor": {
          "ref": "e9f135f3-c666-4ce4-a8fc-c526563b493c",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f9a3e79f-6c58-400f-ad10-53e1fb9c7baf"
        },
        "item": {
          "id": "fb35c333-d657-4324-bfb6-058ab4e5bb1c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a042a4b3-7738-43f1-8410-600e84773a9e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "8afd7dc5-1679-4d7e-913a-74e03f0b3552",
        "cursor": {
          "ref": "7606325e-c3f6-4d16-931c-16a6138c78d8",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a9d15aaf-1425-48f8-bd0b-65882ae6827d"
        },
        "item": {
          "id": "8afd7dc5-1679-4d7e-913a-74e03f0b3552",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d3bc5ef0-5bb4-40e0-a16f-e80cde7ea989",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "8afd7dc5-1679-4d7e-913a-74e03f0b3552",
        "cursor": {
          "ref": "7606325e-c3f6-4d16-931c-16a6138c78d8",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a9d15aaf-1425-48f8-bd0b-65882ae6827d"
        },
        "item": {
          "id": "8afd7dc5-1679-4d7e-913a-74e03f0b3552",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d3bc5ef0-5bb4-40e0-a16f-e80cde7ea989",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "3d714f10-2364-4fee-afaf-0b22057a6457",
        "cursor": {
          "ref": "62e2a6c1-2d5b-4f26-98ae-c49fad6baf84",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d6d01d18-870c-4361-9f1e-a4801491bf4a"
        },
        "item": {
          "id": "3d714f10-2364-4fee-afaf-0b22057a6457",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f5ec341f-04f9-407c-87ca-6ac683e1cb8e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 28,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "3d714f10-2364-4fee-afaf-0b22057a6457",
        "cursor": {
          "ref": "62e2a6c1-2d5b-4f26-98ae-c49fad6baf84",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d6d01d18-870c-4361-9f1e-a4801491bf4a"
        },
        "item": {
          "id": "3d714f10-2364-4fee-afaf-0b22057a6457",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f5ec341f-04f9-407c-87ca-6ac683e1cb8e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 28,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "7f7c1d18-0d04-4032-8c33-ce6f07e571d5",
        "cursor": {
          "ref": "1710263f-2e68-40c6-9cf3-2e179cbfbbf5",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7c6a6d83-a766-4fdf-9db6-a9bda81658ad"
        },
        "item": {
          "id": "7f7c1d18-0d04-4032-8c33-ce6f07e571d5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8594fd79-1fd3-4762-a8b5-3c619900c0cf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 35,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "7f7c1d18-0d04-4032-8c33-ce6f07e571d5",
        "cursor": {
          "ref": "1710263f-2e68-40c6-9cf3-2e179cbfbbf5",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7c6a6d83-a766-4fdf-9db6-a9bda81658ad"
        },
        "item": {
          "id": "7f7c1d18-0d04-4032-8c33-ce6f07e571d5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8594fd79-1fd3-4762-a8b5-3c619900c0cf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 35,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "65f037d1-4337-47df-88da-5fca3f856585",
        "cursor": {
          "ref": "6a55764b-c20a-49ab-9c46-4107cbacf77d",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f4c2597c-fb07-4181-9e8e-14935f815f93"
        },
        "item": {
          "id": "65f037d1-4337-47df-88da-5fca3f856585",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "bc40a7cd-6056-4227-aee1-d39566e5d5b5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "65f037d1-4337-47df-88da-5fca3f856585",
        "cursor": {
          "ref": "6a55764b-c20a-49ab-9c46-4107cbacf77d",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f4c2597c-fb07-4181-9e8e-14935f815f93"
        },
        "item": {
          "id": "65f037d1-4337-47df-88da-5fca3f856585",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "bc40a7cd-6056-4227-aee1-d39566e5d5b5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "d7a47625-655e-4abc-b41a-51228cbdcae6",
        "cursor": {
          "ref": "47cadafb-6cd0-4978-adab-c7e60a9743ab",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c5c5bb25-0ba5-448e-8c65-923df89cb61c"
        },
        "item": {
          "id": "d7a47625-655e-4abc-b41a-51228cbdcae6",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b029ed8d-cfa6-45b4-842e-b7febd0c1b23",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "d7a47625-655e-4abc-b41a-51228cbdcae6",
        "cursor": {
          "ref": "47cadafb-6cd0-4978-adab-c7e60a9743ab",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c5c5bb25-0ba5-448e-8c65-923df89cb61c"
        },
        "item": {
          "id": "d7a47625-655e-4abc-b41a-51228cbdcae6",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b029ed8d-cfa6-45b4-842e-b7febd0c1b23",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "5546f018-4a53-4796-be46-44c5b97ee7bf",
        "cursor": {
          "ref": "58bae827-d0f4-4cda-a72a-3f03fb01656f",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "20914630-385c-4664-8242-6a4ff150369a"
        },
        "item": {
          "id": "5546f018-4a53-4796-be46-44c5b97ee7bf",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9f8e708c-ba15-4dc5-9822-24b583462674",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "5546f018-4a53-4796-be46-44c5b97ee7bf",
        "cursor": {
          "ref": "58bae827-d0f4-4cda-a72a-3f03fb01656f",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "20914630-385c-4664-8242-6a4ff150369a"
        },
        "item": {
          "id": "5546f018-4a53-4796-be46-44c5b97ee7bf",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9f8e708c-ba15-4dc5-9822-24b583462674",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "cf3968b2-153e-48f3-9ed1-19fd8f6dc614",
        "cursor": {
          "ref": "cbddeacb-6cf4-4a89-a916-abf8da334cac",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "85213fbe-0999-4479-839e-b1ae59ffdfc0"
        },
        "item": {
          "id": "cf3968b2-153e-48f3-9ed1-19fd8f6dc614",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b38af060-5c33-414d-b3dd-9623eae94903",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "cf3968b2-153e-48f3-9ed1-19fd8f6dc614",
        "cursor": {
          "ref": "cbddeacb-6cf4-4a89-a916-abf8da334cac",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "85213fbe-0999-4479-839e-b1ae59ffdfc0"
        },
        "item": {
          "id": "cf3968b2-153e-48f3-9ed1-19fd8f6dc614",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b38af060-5c33-414d-b3dd-9623eae94903",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "9cea53f1-5860-4098-abfb-268e7b728361",
        "cursor": {
          "ref": "ceedf639-787c-4a6f-b362-bf46aebdc34d",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "854c25ff-2f45-4375-b5ae-4e6d84b9654b"
        },
        "item": {
          "id": "9cea53f1-5860-4098-abfb-268e7b728361",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "adf796f9-16ff-4b67-a640-b1bc325731cc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "9cea53f1-5860-4098-abfb-268e7b728361",
        "cursor": {
          "ref": "ceedf639-787c-4a6f-b362-bf46aebdc34d",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "854c25ff-2f45-4375-b5ae-4e6d84b9654b"
        },
        "item": {
          "id": "9cea53f1-5860-4098-abfb-268e7b728361",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "adf796f9-16ff-4b67-a640-b1bc325731cc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "d849359b-9e0b-488d-a74b-e159e720243d",
        "cursor": {
          "ref": "67f3c7cd-a048-49d2-b0b5-6d4c2e6f963a",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b2d354c2-f4cb-408a-a844-6635e5185854"
        },
        "item": {
          "id": "d849359b-9e0b-488d-a74b-e159e720243d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "95694091-49cf-45ed-9774-6c12125f27ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "d849359b-9e0b-488d-a74b-e159e720243d",
        "cursor": {
          "ref": "67f3c7cd-a048-49d2-b0b5-6d4c2e6f963a",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b2d354c2-f4cb-408a-a844-6635e5185854"
        },
        "item": {
          "id": "d849359b-9e0b-488d-a74b-e159e720243d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "95694091-49cf-45ed-9774-6c12125f27ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "dc649780-75ee-4fb1-bd2a-f296d06fc136",
        "cursor": {
          "ref": "a9bd1038-bda7-42d6-aff4-efad2bd7ae6b",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e7ecd20a-8bb9-4257-959f-d0099fe760f9"
        },
        "item": {
          "id": "dc649780-75ee-4fb1-bd2a-f296d06fc136",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5ef6776f-b5d3-42ff-9b93-8ebf70272fbb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "dc649780-75ee-4fb1-bd2a-f296d06fc136",
        "cursor": {
          "ref": "a9bd1038-bda7-42d6-aff4-efad2bd7ae6b",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e7ecd20a-8bb9-4257-959f-d0099fe760f9"
        },
        "item": {
          "id": "dc649780-75ee-4fb1-bd2a-f296d06fc136",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5ef6776f-b5d3-42ff-9b93-8ebf70272fbb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "2ffccb3b-7338-45df-bc08-6a81a93ab6a1",
        "cursor": {
          "ref": "a747c2e7-64fe-421e-8dd3-11b07cce49ec",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a55fe5c9-8b67-4a55-ba9f-c92b70b499c5"
        },
        "item": {
          "id": "2ffccb3b-7338-45df-bc08-6a81a93ab6a1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "104a642f-e9a6-4816-a648-47355810beec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "2ffccb3b-7338-45df-bc08-6a81a93ab6a1",
        "cursor": {
          "ref": "a747c2e7-64fe-421e-8dd3-11b07cce49ec",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a55fe5c9-8b67-4a55-ba9f-c92b70b499c5"
        },
        "item": {
          "id": "2ffccb3b-7338-45df-bc08-6a81a93ab6a1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "104a642f-e9a6-4816-a648-47355810beec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "ad4865c9-6861-4a06-a3ec-91d8d54e2e54",
        "cursor": {
          "ref": "4d3121c4-c6ea-4d14-93e4-67a7c472ed42",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3775c9e2-ca91-4f23-a9b0-2911c67b16bb"
        },
        "item": {
          "id": "ad4865c9-6861-4a06-a3ec-91d8d54e2e54",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "531f06d4-1661-4d20-9227-a856be0b09dc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "ad4865c9-6861-4a06-a3ec-91d8d54e2e54",
        "cursor": {
          "ref": "4d3121c4-c6ea-4d14-93e4-67a7c472ed42",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3775c9e2-ca91-4f23-a9b0-2911c67b16bb"
        },
        "item": {
          "id": "ad4865c9-6861-4a06-a3ec-91d8d54e2e54",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "531f06d4-1661-4d20-9227-a856be0b09dc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "1ce507d3-94e7-43c2-88b9-ee17fa065845",
        "cursor": {
          "ref": "9ffa2086-eb06-4895-b3ab-223a7a746561",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "002e5007-f706-457d-a07d-35c1d97927c4"
        },
        "item": {
          "id": "1ce507d3-94e7-43c2-88b9-ee17fa065845",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "80d6fc1a-9012-48b0-90ae-2ab443ed25c8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "1ce507d3-94e7-43c2-88b9-ee17fa065845",
        "cursor": {
          "ref": "9ffa2086-eb06-4895-b3ab-223a7a746561",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "002e5007-f706-457d-a07d-35c1d97927c4"
        },
        "item": {
          "id": "1ce507d3-94e7-43c2-88b9-ee17fa065845",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "80d6fc1a-9012-48b0-90ae-2ab443ed25c8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "078f432d-5bdf-418c-80f1-0b69d23fe465",
        "cursor": {
          "ref": "65aa772f-89fe-4e0c-a7dc-f8dc369be27c",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f078f258-78f3-4723-b704-5e6fe00868a4"
        },
        "item": {
          "id": "078f432d-5bdf-418c-80f1-0b69d23fe465",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c0311cc4-c80f-4420-85c7-34bbde9f5079",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "078f432d-5bdf-418c-80f1-0b69d23fe465",
        "cursor": {
          "ref": "65aa772f-89fe-4e0c-a7dc-f8dc369be27c",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f078f258-78f3-4723-b704-5e6fe00868a4"
        },
        "item": {
          "id": "078f432d-5bdf-418c-80f1-0b69d23fe465",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c0311cc4-c80f-4420-85c7-34bbde9f5079",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "eb475c13-5128-45fd-bfd0-c9f096f461af",
        "cursor": {
          "ref": "7f6974f4-1bfb-4d11-9174-f21242a9ed70",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "52a1b330-dbf1-4ecd-9cdd-d45fddc4a27d"
        },
        "item": {
          "id": "eb475c13-5128-45fd-bfd0-c9f096f461af",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "60e7531b-8e21-4def-89aa-f936c70cdda1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "eb475c13-5128-45fd-bfd0-c9f096f461af",
        "cursor": {
          "ref": "7f6974f4-1bfb-4d11-9174-f21242a9ed70",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "52a1b330-dbf1-4ecd-9cdd-d45fddc4a27d"
        },
        "item": {
          "id": "eb475c13-5128-45fd-bfd0-c9f096f461af",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "60e7531b-8e21-4def-89aa-f936c70cdda1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "71e3eaf1-9fb2-4045-ae11-ee2fc4012f66",
        "cursor": {
          "ref": "0d50771c-46bc-496d-9078-1bba7ae4d7ab",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "50a7f5b7-82b4-47a0-8fd1-8effb40b9b5f"
        },
        "item": {
          "id": "71e3eaf1-9fb2-4045-ae11-ee2fc4012f66",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "bde0b2f8-92a8-4768-ad35-8c828731585a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "71e3eaf1-9fb2-4045-ae11-ee2fc4012f66",
        "cursor": {
          "ref": "0d50771c-46bc-496d-9078-1bba7ae4d7ab",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "50a7f5b7-82b4-47a0-8fd1-8effb40b9b5f"
        },
        "item": {
          "id": "71e3eaf1-9fb2-4045-ae11-ee2fc4012f66",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "bde0b2f8-92a8-4768-ad35-8c828731585a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "ea508289-ecbc-46e5-952f-206a762b5831",
        "cursor": {
          "ref": "eee97849-b102-45d7-be2e-71df2b0442bd",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7bf9456a-9d3e-42f7-984d-0aa5fbed3df1"
        },
        "item": {
          "id": "ea508289-ecbc-46e5-952f-206a762b5831",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b5d974e0-c982-44b9-8808-964b25ffcd68",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "ea508289-ecbc-46e5-952f-206a762b5831",
        "cursor": {
          "ref": "eee97849-b102-45d7-be2e-71df2b0442bd",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7bf9456a-9d3e-42f7-984d-0aa5fbed3df1"
        },
        "item": {
          "id": "ea508289-ecbc-46e5-952f-206a762b5831",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b5d974e0-c982-44b9-8808-964b25ffcd68",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "4eb74d41-724f-4cac-87f6-5502e1d4017a",
        "cursor": {
          "ref": "70926224-3222-4a77-bdd7-07aafec3fb83",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e07a6332-44ce-4161-9431-b30146ae13c0"
        },
        "item": {
          "id": "4eb74d41-724f-4cac-87f6-5502e1d4017a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "02ce2447-7052-48f4-8c7a-7ba93e5e7b75",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "4eb74d41-724f-4cac-87f6-5502e1d4017a",
        "cursor": {
          "ref": "70926224-3222-4a77-bdd7-07aafec3fb83",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e07a6332-44ce-4161-9431-b30146ae13c0"
        },
        "item": {
          "id": "4eb74d41-724f-4cac-87f6-5502e1d4017a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "02ce2447-7052-48f4-8c7a-7ba93e5e7b75",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "b1dcfb43-e16b-499a-ad63-46e4a37fdc5d",
        "cursor": {
          "ref": "d6646abc-af3b-47d3-8206-960c68cd6ce5",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "bc53f307-6061-47fa-84d5-dd0e9ce11886"
        },
        "item": {
          "id": "b1dcfb43-e16b-499a-ad63-46e4a37fdc5d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e61712c2-df2b-43ba-9e08-65d842aa1d5a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "b1dcfb43-e16b-499a-ad63-46e4a37fdc5d",
        "cursor": {
          "ref": "d6646abc-af3b-47d3-8206-960c68cd6ce5",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "bc53f307-6061-47fa-84d5-dd0e9ce11886"
        },
        "item": {
          "id": "b1dcfb43-e16b-499a-ad63-46e4a37fdc5d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e61712c2-df2b-43ba-9e08-65d842aa1d5a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "1214ccba-8141-4308-890d-b521cc6de6af",
        "cursor": {
          "ref": "c9ab0b16-a180-4143-820c-82a7b0d95cbb",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f66ffe4b-8a53-4719-b447-0f3ed75f2e47"
        },
        "item": {
          "id": "1214ccba-8141-4308-890d-b521cc6de6af",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "adf0ab0a-970f-4b5f-ad71-21beec4b2bbc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "1214ccba-8141-4308-890d-b521cc6de6af",
        "cursor": {
          "ref": "c9ab0b16-a180-4143-820c-82a7b0d95cbb",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f66ffe4b-8a53-4719-b447-0f3ed75f2e47"
        },
        "item": {
          "id": "1214ccba-8141-4308-890d-b521cc6de6af",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "adf0ab0a-970f-4b5f-ad71-21beec4b2bbc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "72ac005c-21c5-415e-8d69-ea0b04a2fb70",
        "cursor": {
          "ref": "0de9e6f1-f09d-4924-bdce-a153853d772a",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1027205e-3453-4875-874e-ce3019e76886"
        },
        "item": {
          "id": "72ac005c-21c5-415e-8d69-ea0b04a2fb70",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "74d75e45-0c21-46c5-9050-60281674e525",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 28,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "72ac005c-21c5-415e-8d69-ea0b04a2fb70",
        "cursor": {
          "ref": "0de9e6f1-f09d-4924-bdce-a153853d772a",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1027205e-3453-4875-874e-ce3019e76886"
        },
        "item": {
          "id": "72ac005c-21c5-415e-8d69-ea0b04a2fb70",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "74d75e45-0c21-46c5-9050-60281674e525",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 28,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "81da28d1-51cc-4aab-9a75-78bed862d088",
        "cursor": {
          "ref": "fa8b597c-21be-420a-aaf8-173d0093b872",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "23b34bc1-ede9-4a79-b99f-f2ac3390b924"
        },
        "item": {
          "id": "81da28d1-51cc-4aab-9a75-78bed862d088",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "77c8b7ec-2b96-4bca-bfe5-fb0364da7236",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "81da28d1-51cc-4aab-9a75-78bed862d088",
        "cursor": {
          "ref": "fa8b597c-21be-420a-aaf8-173d0093b872",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "23b34bc1-ede9-4a79-b99f-f2ac3390b924"
        },
        "item": {
          "id": "81da28d1-51cc-4aab-9a75-78bed862d088",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "77c8b7ec-2b96-4bca-bfe5-fb0364da7236",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "a4194264-3aea-4a4c-8b87-e4d01bd3a544",
        "cursor": {
          "ref": "e4194853-1d1f-40b7-9aea-0432726eb964",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6fd76c5a-7285-4a8f-a2d3-cd4c2e976fd7"
        },
        "item": {
          "id": "a4194264-3aea-4a4c-8b87-e4d01bd3a544",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2d086a38-154c-466f-bc00-3b6927e59680",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "a4194264-3aea-4a4c-8b87-e4d01bd3a544",
        "cursor": {
          "ref": "e4194853-1d1f-40b7-9aea-0432726eb964",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6fd76c5a-7285-4a8f-a2d3-cd4c2e976fd7"
        },
        "item": {
          "id": "a4194264-3aea-4a4c-8b87-e4d01bd3a544",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2d086a38-154c-466f-bc00-3b6927e59680",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "d59429cb-9d8b-4c5f-9664-5ab62ae25806",
        "cursor": {
          "ref": "7c8e7d54-97dd-46b4-b6db-02df307c1ea0",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b46a9edc-7ff9-4a5b-8327-f791e36eab8f"
        },
        "item": {
          "id": "d59429cb-9d8b-4c5f-9664-5ab62ae25806",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e28b6bff-9f0d-4401-a450-d71b873bfacd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "d59429cb-9d8b-4c5f-9664-5ab62ae25806",
        "cursor": {
          "ref": "7c8e7d54-97dd-46b4-b6db-02df307c1ea0",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b46a9edc-7ff9-4a5b-8327-f791e36eab8f"
        },
        "item": {
          "id": "d59429cb-9d8b-4c5f-9664-5ab62ae25806",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e28b6bff-9f0d-4401-a450-d71b873bfacd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "005726a5-ae54-434a-83b3-5faebf71e931",
        "cursor": {
          "ref": "45f02b96-768f-4bd6-b09e-610fd883774b",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8f58a807-428b-4c22-b532-575ff54c9872"
        },
        "item": {
          "id": "005726a5-ae54-434a-83b3-5faebf71e931",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1de73770-0110-4383-9aab-34cfb04ffceb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "005726a5-ae54-434a-83b3-5faebf71e931",
        "cursor": {
          "ref": "45f02b96-768f-4bd6-b09e-610fd883774b",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8f58a807-428b-4c22-b532-575ff54c9872"
        },
        "item": {
          "id": "005726a5-ae54-434a-83b3-5faebf71e931",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1de73770-0110-4383-9aab-34cfb04ffceb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "9bdefca7-a09c-4779-b2fe-a23b9026c2f3",
        "cursor": {
          "ref": "769d62b6-4a7c-48a4-900a-6afea7c96bbf",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "61fff4b7-b7c4-4318-bb75-6566498a4aee"
        },
        "item": {
          "id": "9bdefca7-a09c-4779-b2fe-a23b9026c2f3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3e397a80-273b-4d55-a151-f0068ecdb833",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "9bdefca7-a09c-4779-b2fe-a23b9026c2f3",
        "cursor": {
          "ref": "769d62b6-4a7c-48a4-900a-6afea7c96bbf",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "61fff4b7-b7c4-4318-bb75-6566498a4aee"
        },
        "item": {
          "id": "9bdefca7-a09c-4779-b2fe-a23b9026c2f3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3e397a80-273b-4d55-a151-f0068ecdb833",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "494fb7be-9a51-4e69-a404-a2dac275e02f",
        "cursor": {
          "ref": "b0b31328-b25c-4393-a794-603ab568019a",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "85a2f1aa-f951-4106-bb46-21b0229491ef"
        },
        "item": {
          "id": "494fb7be-9a51-4e69-a404-a2dac275e02f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f0b7699c-ee56-4a91-be36-7586416074a6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "494fb7be-9a51-4e69-a404-a2dac275e02f",
        "cursor": {
          "ref": "b0b31328-b25c-4393-a794-603ab568019a",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "85a2f1aa-f951-4106-bb46-21b0229491ef"
        },
        "item": {
          "id": "494fb7be-9a51-4e69-a404-a2dac275e02f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f0b7699c-ee56-4a91-be36-7586416074a6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "de6a97b0-2a84-4cc9-a7f3-94d2ae3b48e2",
        "cursor": {
          "ref": "cae4726e-61f4-4e18-be87-d3e3ce5efb8f",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "73f285ed-6195-4484-8a84-2bdda00547a5"
        },
        "item": {
          "id": "de6a97b0-2a84-4cc9-a7f3-94d2ae3b48e2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d61b46da-2738-4571-9c67-5054536db5df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "de6a97b0-2a84-4cc9-a7f3-94d2ae3b48e2",
        "cursor": {
          "ref": "cae4726e-61f4-4e18-be87-d3e3ce5efb8f",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "73f285ed-6195-4484-8a84-2bdda00547a5"
        },
        "item": {
          "id": "de6a97b0-2a84-4cc9-a7f3-94d2ae3b48e2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d61b46da-2738-4571-9c67-5054536db5df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "c519b017-a3fa-4453-9e17-1748c6052989",
        "cursor": {
          "ref": "072c22fc-6f66-40c8-ab09-117f00639c4d",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "860e87ba-b29f-45ab-ace6-c1fcda213bb9"
        },
        "item": {
          "id": "c519b017-a3fa-4453-9e17-1748c6052989",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f60e30f8-3ce0-4694-9996-d5a6c4acbac4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "c519b017-a3fa-4453-9e17-1748c6052989",
        "cursor": {
          "ref": "072c22fc-6f66-40c8-ab09-117f00639c4d",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "860e87ba-b29f-45ab-ace6-c1fcda213bb9"
        },
        "item": {
          "id": "c519b017-a3fa-4453-9e17-1748c6052989",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f60e30f8-3ce0-4694-9996-d5a6c4acbac4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "85cef6a0-deca-4769-b2a5-88236bcf413d",
        "cursor": {
          "ref": "76cc7864-abac-48e8-a697-65fcc8d40190",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "83854a6e-529c-4a7f-ba94-6e06046e689d"
        },
        "item": {
          "id": "85cef6a0-deca-4769-b2a5-88236bcf413d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1edc28ce-e74c-4269-985e-df12dbe98074",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "85cef6a0-deca-4769-b2a5-88236bcf413d",
        "cursor": {
          "ref": "76cc7864-abac-48e8-a697-65fcc8d40190",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "83854a6e-529c-4a7f-ba94-6e06046e689d"
        },
        "item": {
          "id": "85cef6a0-deca-4769-b2a5-88236bcf413d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1edc28ce-e74c-4269-985e-df12dbe98074",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "e345caaf-9e19-4c43-9422-e542b38aa847",
        "cursor": {
          "ref": "2d4c3543-3e3b-4fc4-bbc0-b75432502d10",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "422ed7e8-6827-49ea-ae36-71db50c6ae7c"
        },
        "item": {
          "id": "e345caaf-9e19-4c43-9422-e542b38aa847",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5533250f-1d05-4294-a63b-aa0f50599b7c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "e345caaf-9e19-4c43-9422-e542b38aa847",
        "cursor": {
          "ref": "2d4c3543-3e3b-4fc4-bbc0-b75432502d10",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "422ed7e8-6827-49ea-ae36-71db50c6ae7c"
        },
        "item": {
          "id": "e345caaf-9e19-4c43-9422-e542b38aa847",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5533250f-1d05-4294-a63b-aa0f50599b7c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "e3f0df86-2c2e-44c3-9a64-d8cba5edc702",
        "cursor": {
          "ref": "5b2a5071-a710-4657-9905-b9ac3b1a7e16",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "42849246-bbe0-46fa-b684-82585df2c913"
        },
        "item": {
          "id": "e3f0df86-2c2e-44c3-9a64-d8cba5edc702",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d16a8937-f49f-4a82-b662-dfe7ce3147a5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "e3f0df86-2c2e-44c3-9a64-d8cba5edc702",
        "cursor": {
          "ref": "5b2a5071-a710-4657-9905-b9ac3b1a7e16",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "42849246-bbe0-46fa-b684-82585df2c913"
        },
        "item": {
          "id": "e3f0df86-2c2e-44c3-9a64-d8cba5edc702",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d16a8937-f49f-4a82-b662-dfe7ce3147a5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "b2b7f07b-bfee-44ee-ab87-9123fd7b436a",
        "cursor": {
          "ref": "34c7e435-7652-4352-9931-03fa1bc125b1",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "00718118-dd82-4819-8aca-7aa29a0ec4ed"
        },
        "item": {
          "id": "b2b7f07b-bfee-44ee-ab87-9123fd7b436a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1c8825b9-983c-4d88-a740-b52d0beec989",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "b2b7f07b-bfee-44ee-ab87-9123fd7b436a",
        "cursor": {
          "ref": "34c7e435-7652-4352-9931-03fa1bc125b1",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "00718118-dd82-4819-8aca-7aa29a0ec4ed"
        },
        "item": {
          "id": "b2b7f07b-bfee-44ee-ab87-9123fd7b436a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1c8825b9-983c-4d88-a740-b52d0beec989",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "33d5ed46-07e8-4fe8-b74b-ec6af13b1f0b",
        "cursor": {
          "ref": "894cf3cf-968d-4ed2-96f7-92df5828920e",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ff3e8b6e-610b-40c7-9ef9-08a27a42d91d"
        },
        "item": {
          "id": "33d5ed46-07e8-4fe8-b74b-ec6af13b1f0b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "09926197-6549-413c-9225-caafa4eb43be",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "33d5ed46-07e8-4fe8-b74b-ec6af13b1f0b",
        "cursor": {
          "ref": "894cf3cf-968d-4ed2-96f7-92df5828920e",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ff3e8b6e-610b-40c7-9ef9-08a27a42d91d"
        },
        "item": {
          "id": "33d5ed46-07e8-4fe8-b74b-ec6af13b1f0b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "09926197-6549-413c-9225-caafa4eb43be",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "988aa51d-cb3f-4ed3-bdd1-0f600c145509",
        "cursor": {
          "ref": "2dbd9e39-5bae-4d92-aa28-d703c31b51f3",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "622d5912-00fa-4ed4-9696-6f21101eae14"
        },
        "item": {
          "id": "988aa51d-cb3f-4ed3-bdd1-0f600c145509",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d930ec73-f4b2-4e43-bc46-739408f89883",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "988aa51d-cb3f-4ed3-bdd1-0f600c145509",
        "cursor": {
          "ref": "2dbd9e39-5bae-4d92-aa28-d703c31b51f3",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "622d5912-00fa-4ed4-9696-6f21101eae14"
        },
        "item": {
          "id": "988aa51d-cb3f-4ed3-bdd1-0f600c145509",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d930ec73-f4b2-4e43-bc46-739408f89883",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "5272da03-d8f4-48f2-ae46-6d799e13a20e",
        "cursor": {
          "ref": "3cc4c4f0-ef03-44b4-8c29-b432504851f6",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6be47eee-7225-4eb9-9121-551559c16b98"
        },
        "item": {
          "id": "5272da03-d8f4-48f2-ae46-6d799e13a20e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5765867f-550b-477a-97c5-96f58493b437",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "5272da03-d8f4-48f2-ae46-6d799e13a20e",
        "cursor": {
          "ref": "3cc4c4f0-ef03-44b4-8c29-b432504851f6",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6be47eee-7225-4eb9-9121-551559c16b98"
        },
        "item": {
          "id": "5272da03-d8f4-48f2-ae46-6d799e13a20e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5765867f-550b-477a-97c5-96f58493b437",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "ec4abd06-94e7-4a1f-aa5e-f81029468920",
        "cursor": {
          "ref": "e4158424-1d9f-4de6-aaf8-d2b59b2d9b54",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f01fb1ab-ee9f-4ac2-9fde-0e4876ada7bd"
        },
        "item": {
          "id": "ec4abd06-94e7-4a1f-aa5e-f81029468920",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1ab3145b-5968-4c7f-812e-66fc7d3bce8b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "ec4abd06-94e7-4a1f-aa5e-f81029468920",
        "cursor": {
          "ref": "e4158424-1d9f-4de6-aaf8-d2b59b2d9b54",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f01fb1ab-ee9f-4ac2-9fde-0e4876ada7bd"
        },
        "item": {
          "id": "ec4abd06-94e7-4a1f-aa5e-f81029468920",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1ab3145b-5968-4c7f-812e-66fc7d3bce8b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "047c98e3-3a26-4544-a783-2ca4db41b8ef",
        "cursor": {
          "ref": "07a004a9-52e8-430d-be14-d1ccbe083d87",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2d0bf677-eccb-48ab-82db-1ed9524f13f5"
        },
        "item": {
          "id": "047c98e3-3a26-4544-a783-2ca4db41b8ef",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e43c49c6-1ef0-4af6-8bb7-da708522db30",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "047c98e3-3a26-4544-a783-2ca4db41b8ef",
        "cursor": {
          "ref": "07a004a9-52e8-430d-be14-d1ccbe083d87",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2d0bf677-eccb-48ab-82db-1ed9524f13f5"
        },
        "item": {
          "id": "047c98e3-3a26-4544-a783-2ca4db41b8ef",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e43c49c6-1ef0-4af6-8bb7-da708522db30",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "715916ea-df1e-4e70-8faa-3e5e5ff04009",
        "cursor": {
          "ref": "ba7a5b49-3875-4d04-9dd9-3a9dbf6cc71c",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "34b4a973-742e-45a8-b212-2b063c6bbd46"
        },
        "item": {
          "id": "715916ea-df1e-4e70-8faa-3e5e5ff04009",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d45ee4cb-86d8-4b2e-a6d0-a1a042685632",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "715916ea-df1e-4e70-8faa-3e5e5ff04009",
        "cursor": {
          "ref": "ba7a5b49-3875-4d04-9dd9-3a9dbf6cc71c",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "34b4a973-742e-45a8-b212-2b063c6bbd46"
        },
        "item": {
          "id": "715916ea-df1e-4e70-8faa-3e5e5ff04009",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d45ee4cb-86d8-4b2e-a6d0-a1a042685632",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "fb289546-3f3c-4ffc-8fd7-6776300174bc",
        "cursor": {
          "ref": "043d0812-2675-48d2-8f53-705e26cd5e68",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ee2444ce-9482-4044-b229-75a9bf60dc3c"
        },
        "item": {
          "id": "fb289546-3f3c-4ffc-8fd7-6776300174bc",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "86fa9b5c-7dd6-4d00-bb4c-8f28719eb266",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "fb289546-3f3c-4ffc-8fd7-6776300174bc",
        "cursor": {
          "ref": "043d0812-2675-48d2-8f53-705e26cd5e68",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ee2444ce-9482-4044-b229-75a9bf60dc3c"
        },
        "item": {
          "id": "fb289546-3f3c-4ffc-8fd7-6776300174bc",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "86fa9b5c-7dd6-4d00-bb4c-8f28719eb266",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "ff38621b-94b3-4099-9f9b-23e75f5bfccf",
        "cursor": {
          "ref": "b60544b7-ec03-491e-a741-467cf0d90511",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7930ef3f-2400-439c-8451-9bbfd373efaf"
        },
        "item": {
          "id": "ff38621b-94b3-4099-9f9b-23e75f5bfccf",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "66b80c5e-5dfd-417b-bd4d-f5bc2f917a3a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "ff38621b-94b3-4099-9f9b-23e75f5bfccf",
        "cursor": {
          "ref": "b60544b7-ec03-491e-a741-467cf0d90511",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7930ef3f-2400-439c-8451-9bbfd373efaf"
        },
        "item": {
          "id": "ff38621b-94b3-4099-9f9b-23e75f5bfccf",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "66b80c5e-5dfd-417b-bd4d-f5bc2f917a3a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "4efcb1bb-e07f-4835-ae02-5253e76cb5b8",
        "cursor": {
          "ref": "434d1593-b4c3-454f-9442-1ebacc244494",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0bc66c01-e0a9-435a-a74b-46fbb54d11bc"
        },
        "item": {
          "id": "4efcb1bb-e07f-4835-ae02-5253e76cb5b8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2f2b9afa-5958-436f-84de-3482bf90922e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "4efcb1bb-e07f-4835-ae02-5253e76cb5b8",
        "cursor": {
          "ref": "434d1593-b4c3-454f-9442-1ebacc244494",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0bc66c01-e0a9-435a-a74b-46fbb54d11bc"
        },
        "item": {
          "id": "4efcb1bb-e07f-4835-ae02-5253e76cb5b8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2f2b9afa-5958-436f-84de-3482bf90922e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "cc0727ac-3f42-431a-aa9b-33b4e053fbd1",
        "cursor": {
          "ref": "ae26a340-8e40-4dcb-a272-b8882c976821",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "161deda4-9e7b-4742-bddb-91231a86f305"
        },
        "item": {
          "id": "cc0727ac-3f42-431a-aa9b-33b4e053fbd1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "fd8d87a2-dff4-4cc8-b308-af0d3592764b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "cc0727ac-3f42-431a-aa9b-33b4e053fbd1",
        "cursor": {
          "ref": "ae26a340-8e40-4dcb-a272-b8882c976821",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "161deda4-9e7b-4742-bddb-91231a86f305"
        },
        "item": {
          "id": "cc0727ac-3f42-431a-aa9b-33b4e053fbd1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "fd8d87a2-dff4-4cc8-b308-af0d3592764b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "7f466792-2512-4bee-a7f4-78caf0cbe6dd",
        "cursor": {
          "ref": "9a185d20-2b1c-49cb-a63e-4d4e70fdd6bb",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "19553c1f-40f6-4df7-9373-533c4672c44a"
        },
        "item": {
          "id": "7f466792-2512-4bee-a7f4-78caf0cbe6dd",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1e2f874b-00a3-41f2-9dc4-5f351189691d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "7f466792-2512-4bee-a7f4-78caf0cbe6dd",
        "cursor": {
          "ref": "9a185d20-2b1c-49cb-a63e-4d4e70fdd6bb",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "19553c1f-40f6-4df7-9373-533c4672c44a"
        },
        "item": {
          "id": "7f466792-2512-4bee-a7f4-78caf0cbe6dd",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1e2f874b-00a3-41f2-9dc4-5f351189691d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "bc378249-1fe8-47a8-9138-ebbbd2e5075d",
        "cursor": {
          "ref": "3ccd46ef-f69f-4ec5-8129-8611806051a2",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3b2d5d35-de63-4cab-b255-b64a8e91bec9"
        },
        "item": {
          "id": "bc378249-1fe8-47a8-9138-ebbbd2e5075d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "43943714-42b1-490b-93aa-0078976f53bf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "bc378249-1fe8-47a8-9138-ebbbd2e5075d",
        "cursor": {
          "ref": "3ccd46ef-f69f-4ec5-8129-8611806051a2",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3b2d5d35-de63-4cab-b255-b64a8e91bec9"
        },
        "item": {
          "id": "bc378249-1fe8-47a8-9138-ebbbd2e5075d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "43943714-42b1-490b-93aa-0078976f53bf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "bee6f47e-dc48-4ceb-b99f-424ab9343f17",
        "cursor": {
          "ref": "cafe4c84-383f-4b52-9454-28420fe07192",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a2fcb71d-3b35-41ec-b16d-d23549227d93"
        },
        "item": {
          "id": "bee6f47e-dc48-4ceb-b99f-424ab9343f17",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "651e2d86-ade9-4772-a18c-0832e965db12",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "bee6f47e-dc48-4ceb-b99f-424ab9343f17",
        "cursor": {
          "ref": "cafe4c84-383f-4b52-9454-28420fe07192",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a2fcb71d-3b35-41ec-b16d-d23549227d93"
        },
        "item": {
          "id": "bee6f47e-dc48-4ceb-b99f-424ab9343f17",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "651e2d86-ade9-4772-a18c-0832e965db12",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "4fc05a97-d0bc-4320-ab2d-f5dac8511725",
        "cursor": {
          "ref": "8ac3b8ef-cd75-4ee7-8135-04d2454f376d",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e734a15b-b6a6-43f9-ad83-028ea356fe5e"
        },
        "item": {
          "id": "4fc05a97-d0bc-4320-ab2d-f5dac8511725",
          "name": "credentials_verify"
        },
        "response": {
          "id": "99501027-c04a-42de-8c46-8f16e326a96f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "4fc05a97-d0bc-4320-ab2d-f5dac8511725",
        "cursor": {
          "ref": "8ac3b8ef-cd75-4ee7-8135-04d2454f376d",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e734a15b-b6a6-43f9-ad83-028ea356fe5e"
        },
        "item": {
          "id": "4fc05a97-d0bc-4320-ab2d-f5dac8511725",
          "name": "credentials_verify"
        },
        "response": {
          "id": "99501027-c04a-42de-8c46-8f16e326a96f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "98764975-de54-443a-93c2-6080aa9f803c",
        "cursor": {
          "ref": "faa17229-f8ad-47e2-9bb1-065c9bf2068b",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c954fa5e-c654-4064-858e-267ef5835a90"
        },
        "item": {
          "id": "98764975-de54-443a-93c2-6080aa9f803c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "92eec009-a46b-4470-b633-7edb33b85ee6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "98764975-de54-443a-93c2-6080aa9f803c",
        "cursor": {
          "ref": "faa17229-f8ad-47e2-9bb1-065c9bf2068b",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c954fa5e-c654-4064-858e-267ef5835a90"
        },
        "item": {
          "id": "98764975-de54-443a-93c2-6080aa9f803c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "92eec009-a46b-4470-b633-7edb33b85ee6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "4f306025-30bc-406f-be43-8cd88347236f",
        "cursor": {
          "ref": "2942af82-0758-427f-b4ae-17510ac04f10",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "55389b87-6dca-4b76-accd-209345a592aa"
        },
        "item": {
          "id": "4f306025-30bc-406f-be43-8cd88347236f",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "4f306025-30bc-406f-be43-8cd88347236f",
        "cursor": {
          "ref": "2942af82-0758-427f-b4ae-17510ac04f10",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "55389b87-6dca-4b76-accd-209345a592aa"
        },
        "item": {
          "id": "4f306025-30bc-406f-be43-8cd88347236f",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "4f306025-30bc-406f-be43-8cd88347236f",
        "cursor": {
          "ref": "2942af82-0758-427f-b4ae-17510ac04f10",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "55389b87-6dca-4b76-accd-209345a592aa"
        },
        "item": {
          "id": "4f306025-30bc-406f-be43-8cd88347236f",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "784d80f6-1396-4f59-be35-7af610eb3a58",
        "cursor": {
          "ref": "7709a7b7-d1ff-4027-8e71-fe615c6e16cb",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f03a5b81-3f80-4f4d-8e57-13988665a7bc"
        },
        "item": {
          "id": "784d80f6-1396-4f59-be35-7af610eb3a58",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "784d80f6-1396-4f59-be35-7af610eb3a58",
        "cursor": {
          "ref": "7709a7b7-d1ff-4027-8e71-fe615c6e16cb",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f03a5b81-3f80-4f4d-8e57-13988665a7bc"
        },
        "item": {
          "id": "784d80f6-1396-4f59-be35-7af610eb3a58",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "784d80f6-1396-4f59-be35-7af610eb3a58",
        "cursor": {
          "ref": "7709a7b7-d1ff-4027-8e71-fe615c6e16cb",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f03a5b81-3f80-4f4d-8e57-13988665a7bc"
        },
        "item": {
          "id": "784d80f6-1396-4f59-be35-7af610eb3a58",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "f4e50263-6b33-4565-9a11-592d9304b8c5",
        "cursor": {
          "ref": "87b52c65-49af-4811-8dea-9efbaf7c4fbe",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "85980c3e-fd23-4af7-a6c8-0af919d57a33"
        },
        "item": {
          "id": "f4e50263-6b33-4565-9a11-592d9304b8c5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "f4e50263-6b33-4565-9a11-592d9304b8c5",
        "cursor": {
          "ref": "87b52c65-49af-4811-8dea-9efbaf7c4fbe",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "85980c3e-fd23-4af7-a6c8-0af919d57a33"
        },
        "item": {
          "id": "f4e50263-6b33-4565-9a11-592d9304b8c5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "f4e50263-6b33-4565-9a11-592d9304b8c5",
        "cursor": {
          "ref": "87b52c65-49af-4811-8dea-9efbaf7c4fbe",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "85980c3e-fd23-4af7-a6c8-0af919d57a33"
        },
        "item": {
          "id": "f4e50263-6b33-4565-9a11-592d9304b8c5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "ec2b7e13-6050-42ac-a886-762d0b62000d",
        "cursor": {
          "ref": "fdcbb22e-4fe2-43d1-a7a4-3599ef28b96b",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8616a195-afea-4a66-82a6-022926436624"
        },
        "item": {
          "id": "ec2b7e13-6050-42ac-a886-762d0b62000d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "ec2b7e13-6050-42ac-a886-762d0b62000d",
        "cursor": {
          "ref": "fdcbb22e-4fe2-43d1-a7a4-3599ef28b96b",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8616a195-afea-4a66-82a6-022926436624"
        },
        "item": {
          "id": "ec2b7e13-6050-42ac-a886-762d0b62000d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "ec2b7e13-6050-42ac-a886-762d0b62000d",
        "cursor": {
          "ref": "fdcbb22e-4fe2-43d1-a7a4-3599ef28b96b",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8616a195-afea-4a66-82a6-022926436624"
        },
        "item": {
          "id": "ec2b7e13-6050-42ac-a886-762d0b62000d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "3406627d-f6d0-47a7-8aa1-2228dd2c3549",
        "cursor": {
          "ref": "b4604865-6034-4fcf-8084-0fc71d2cff78",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "676de650-5144-41e2-837d-c8d4dcc5d1f6"
        },
        "item": {
          "id": "3406627d-f6d0-47a7-8aa1-2228dd2c3549",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "3406627d-f6d0-47a7-8aa1-2228dd2c3549",
        "cursor": {
          "ref": "b4604865-6034-4fcf-8084-0fc71d2cff78",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "676de650-5144-41e2-837d-c8d4dcc5d1f6"
        },
        "item": {
          "id": "3406627d-f6d0-47a7-8aa1-2228dd2c3549",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "3406627d-f6d0-47a7-8aa1-2228dd2c3549",
        "cursor": {
          "ref": "b4604865-6034-4fcf-8084-0fc71d2cff78",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "676de650-5144-41e2-837d-c8d4dcc5d1f6"
        },
        "item": {
          "id": "3406627d-f6d0-47a7-8aa1-2228dd2c3549",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "f0c4b6a4-f9f7-4457-91ca-41d08edf72ed",
        "cursor": {
          "ref": "d26caf31-a617-4f0d-be18-2d0084d43ed9",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "69e56b09-eb13-4923-802f-dd5ec77c0851"
        },
        "item": {
          "id": "f0c4b6a4-f9f7-4457-91ca-41d08edf72ed",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "f0c4b6a4-f9f7-4457-91ca-41d08edf72ed",
        "cursor": {
          "ref": "d26caf31-a617-4f0d-be18-2d0084d43ed9",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "69e56b09-eb13-4923-802f-dd5ec77c0851"
        },
        "item": {
          "id": "f0c4b6a4-f9f7-4457-91ca-41d08edf72ed",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "f0c4b6a4-f9f7-4457-91ca-41d08edf72ed",
        "cursor": {
          "ref": "d26caf31-a617-4f0d-be18-2d0084d43ed9",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "69e56b09-eb13-4923-802f-dd5ec77c0851"
        },
        "item": {
          "id": "f0c4b6a4-f9f7-4457-91ca-41d08edf72ed",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}