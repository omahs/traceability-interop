{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "998803e3-f1fb-45b6-bcd7-bace4feae75c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6a839f1f-7809-466d-a183-116f8545960b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3c130667-4e60-4dcd-a61e-5e8555917312",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "52cf338c-9670-4673-9d34-322ca66b0eca"
                }
              }
            ]
          },
          {
            "id": "21078294-3fa8-4611-a419-262e805e326f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fefdfd40-ebdf-4a57-bb67-b8bcacefb008",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e1d8d7f5-0e1c-4f93-9e55-308c113b1a3d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "207cf8ba-7491-4cc3-bb3c-37665ab26c7f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6810edda-342e-4407-be95-017ea8531f0c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1df07660-8cb4-4516-809d-65bb3749eaf5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1150a947-0666-4fe4-89c7-b9d9125f843e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1833286d-fa62-480c-8509-c647757a22a8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fb5dc5a5-2a4f-47c8-99e9-8e9eaf739513",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c4b8a0de-95fa-4b8c-97ba-8fbd6f9873fe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "48e718fb-e6e3-4976-b920-de5c642e3776",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2d6d766f-bb92-42a2-8237-5d48afd1d1fd"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "099d1f36-e49b-4b92-aec3-472aff759ec7",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "794771fc-5bdc-4958-88f9-2be1c915aa97"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c9d35c3-776e-4d4c-94e6-fb7c439ce239",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d902d599-19ce-4bdb-a781-a9736160e0cc"
            }
          }
        ]
      },
      {
        "id": "550144a9-fe04-47d3-a557-28bbccd5e649",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "386dc2bb-9e57-41b4-9c19-9b93afb214a8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c1557e54-a426-4f29-ba37-43d58ce4f637",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "941f1d3b-ab8d-47a7-8457-48d7e6c041ae",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "618e7cca-102c-4fa4-8cc4-1d83bf8f5c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6c709d6-9c0d-4bd1-bb5d-1470c2a2f7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beba41ca-34c3-431c-8deb-19b67a0fe9ed",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8aea90-fcdc-454a-aa2b-67b59b235432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44cd4d0b-7f16-4445-a58a-99db29cd7984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09120e7-1863-478b-b006-829c11a9e11f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcc1c8fd-91bc-42b8-b2d2-aef1b69b04ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f809edf7-18d1-41a3-ad18-de04c3b2cf76"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c972b29d-bbb7-41ac-92f7-ae777bcc1607",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ef92b65c-830b-4251-a78b-425e347a7067",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90bad000-5f63-443f-a446-24e303b9e945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f558acf-d714-4623-a88d-7004819ec84b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2b0fad-4ea6-413e-a8e5-5193c346b373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe323d3f-0c93-4f71-9768-12711f315ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605011a2-bdad-4a1e-b6ce-ec07c1922867",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae955db-8788-4bb3-bf12-a4ee23fb5e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5de568d6-c501-4993-b9bb-11115b8d2240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f931988a-b78e-48d5-9c45-351ce7d751aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "abefa63d-bb93-42ba-afc4-dffb491c19c6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a8044564-9cc6-4025-95a3-a412c4e33232",
            "name": "Positive Testing",
            "item": [
              {
                "id": "224d6618-3b8c-4e16-a3ec-5d9db691e10c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d401e88-cc87-4e32-915a-ea397a84d31d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c8703a2a-4187-4300-b4d6-f8ef2e7a56fb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79abe55f-5a13-46e0-8944-47fcffbd7f58",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "e34dcb2f-dba3-4e96-af94-6e3d7c0261ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6ca10e5b-dfe7-4b68-bdeb-9302f43d16ad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5302c69a-4fd0-443d-a073-c274331302cb"
            }
          }
        ]
      },
      {
        "id": "3ad37601-3524-4c76-a6a6-e0628c6df167",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "fe4edc93-4a3d-45d8-bf3d-6c828d63f5b7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2fd3e3b0-fd08-4e11-ac5c-e0eda6b29e77",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "36f57b7a-d3b3-4d49-8a4b-a944f272be37",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "249056a5-8894-4ed3-b042-e4b51f45bfe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e63d1508-bbc6-45d2-87bf-a57090fbaeb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f302602-1ccf-454a-b1ad-7bfdbcc8e0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b72ed3e-7f86-4bf6-b474-e2f0e0f47a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b513e1e6-c8d3-4ed2-8828-750da3aaafdb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f26981-6d2b-4c8a-9032-e593732dd506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74d60187-ea6c-4534-a619-55dca520624b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa5c482-fd3f-4715-9521-5205e7d211a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee391185-d0b6-4435-badb-7940db7d6994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46103c90-d380-41cd-83a5-eba75291ae51",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f3368a-0138-420f-b495-632de2ceddaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37f8abae-f035-487c-92f0-2d8a18619ed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede1f77d-878e-46d2-8ba8-2370bd602d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0e91ec1-f723-4cbd-90eb-7720d5894a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b932dc-e0ea-476b-8c41-1cfc9b5d6329",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf637609-f465-4073-bd49-aa2e06a36b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da062754-c263-4713-84d2-b838e61cc09f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e318d5-6d09-4460-a278-ffc9655dc746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55dd02e6-baed-430e-8dd0-a26f586b10b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "199d9dae-9836-40fa-b6d3-69c5027681a4",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df2830f-618b-44ca-9776-88c40e9dddd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f8ee4a3-daa1-41cd-a5ec-65527c9ad1e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f59e6fb-51a8-43d5-872d-13d1d88fb4b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d642655-6b52-40c4-95bc-9610531c017e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d196712-fb9c-45df-b382-35dbdc162ec2",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80cf9b1-b086-471d-baf9-3247d70bb3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d263c6c6-bd02-4837-960d-f89d9029eef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdec72a0-5dc9-49d1-b762-9acdb01231ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1e0c6f3-5eed-4413-ad47-2c9b07af683d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff2a8c1-06ac-4329-8597-ab8aeff14428",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c8214d-bfd9-468e-92ba-4bc20966388b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4217ca3f-170d-41a3-9d15-3abf14a4ee29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555f9761-96cd-4571-b1a1-7da431395206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3f0dec9-e750-40af-aed1-b7a8604413f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1ca40a-0562-499b-9e9e-d9f8cd573154",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be5df6d2-e97b-44c0-82ea-32da5e627bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4595c118-82cd-4d2e-9266-ecad6f006166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccca35cb-44b2-4336-9d14-2177d8be9bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "acbd10d5-c093-4fd3-8bb0-f85567d8e096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310f3d20-8516-48a0-82d9-03b56fb2675f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58da6956-0510-4b66-8794-41edb80fa21c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "518f5cfd-6764-4ae8-aef0-6a9f611666bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55cf5c12-b261-4d91-a49b-5528044d9ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a63af45-4d4a-47f8-8ec5-0d318f968c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfee06ab-def8-4291-9ada-4d316ae5115b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7bb022-253a-40a6-be06-f6ced8ae0053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcab8c00-2385-47e0-a77f-5ad085c20c5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67004dca-0a71-418d-a864-b64e7337e871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "593b4de7-6db9-40ee-a51d-2d0dd1c615f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98553d94-ce26-42f0-89b4-71a0ac1daf03",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f431344d-3317-4d20-8646-a2be964fb392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb915996-fab7-4b69-88f2-bca73affecb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb0c09e-31a8-4a5c-8632-2888d9631b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5363d47-1bec-4701-a485-08934288d8ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6323deac-c032-4e83-b197-6746e8d5ce82",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c759f73-d5ef-41d5-a85e-0e9eb507f1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a093193c-4d62-467b-968f-e70eede0236c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260d4d1c-0ac4-4dc2-9347-7f2282ddecec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6b4d814-9937-4924-a909-aa845977146e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb69dc3-a0ba-4ebf-9904-60a6d8822e7e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d2c2cf-7e35-496e-8ae5-15641fc0ba67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8e85566-7459-42f3-b89d-dfacc60496e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928469f3-6868-4d21-a8bf-2cd1f002bd0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94624ac0-b241-43e5-acae-ce1e49677025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c7160ff-cfbe-4d1b-aa4b-aaf109d8cf88",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07646dac-df51-4f53-8d49-5b7afd3e8ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11ed48bd-6523-458a-a0db-e90649e8e6e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a31396d-03c7-4c6e-b93f-99c4fca1babb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27c67d84-4711-4685-b318-9e63e7abe4d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "585b3d20-3604-497b-869e-20dbc3104b28",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d566ef-239b-45d5-be95-47d0c938e370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baa1b958-34a8-41cf-a55d-5c68fff1934a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aebc4db-81f0-4ae7-b804-04ac4bdd6927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9549c880-c7d2-4b5c-9d66-38759e8f7d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4669ed89-c7fc-449c-a360-c9a61d2cfa37",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "889abeb4-298e-474e-b022-a7ceaa6ea2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "846f59d5-d3ef-4091-a21a-4388b1941ed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27c21433-7c4b-4abc-9934-14dec4df6b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec23f2b6-a9e6-4fcd-a69e-bbf74d99723c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8512604-78d1-4896-a9e1-9c33ae8793b9",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51411657-c074-42af-80a2-440a2d0bf23f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0c2dcd6-93f2-4379-b830-d79b42c1d7cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a280802e-95f5-4b8e-bff1-b0706d196f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3337bce7-7cad-4499-9fca-f06a6f2b96f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d357b04f-e984-4ee4-9090-35be671b29e7",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331255c5-388c-454a-bd80-1b6fe79de939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "736223e3-040c-4555-8f55-d3f6033463d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce86dd60-ecd1-47c1-91d3-ee465f8b1965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0838a62d-2253-4dbb-9745-6932a71ac00f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a53715c8-c70c-4793-b936-78b78f4c2a19",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf6fb478-26de-436a-8431-ffa075eac458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea098df-1575-428e-a713-05229fbc552c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cce4138-cf8a-460f-bb61-fe1203a01d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca280e85-6ea1-49c0-9d60-835750ebc10d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a49c74-8fef-43df-8f0f-7d0cc466161f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c048effe-bc2c-4e3f-a20c-2f25b31a6f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a88691da-91f4-4850-834f-8ea32bca0544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c98db797-2387-41e3-8e39-da27f1dc7744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "363619b5-b9c2-4ab6-ad8c-242fb89c7bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138a423c-9ac0-4df1-b771-361279828d32",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1a323f-55db-4fca-a1cf-cdf869f15f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d3e6403-1cd1-4ca4-9d38-d0cc5324f57e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c3cdab-4a4d-4089-b7c1-1a71bd595385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5573044f-5c84-4a0a-b478-3964db86167f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea82ab4-ae12-4740-b9ed-b88ab7438f00",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01dd07da-95e3-4e0a-8160-7be6ff0f83d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "043883a3-a722-4e87-be6e-8385362ca7a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7022b53e-e22d-42c6-8f8e-466ef4d80574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc94f755-7414-4164-8485-885cf3199ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de55213e-d997-4151-9c85-a2c95c9cab77",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a212b8d-3d23-42d4-9e22-790fe80fbd23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89e2e525-6cc2-4a6c-a69e-d5d4dba4837e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1acc7fd5-4d4c-49de-bc9e-48c9c60720f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a51a0f02-d93f-4721-b48a-a8c74f38097b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df11153-0df1-4593-992b-1aa0937902da",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31887b7b-638c-44c0-9a2a-a6b17b520551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b886378-9d35-4c85-9e8f-b4fa95f7e0d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9118b1b6-47b0-484d-9eb9-a94b75eed404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b6c383c3-f9bf-4f55-bed2-2d9ac5ebb544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a74566-f9fc-42a9-ae66-8234a6b4bbf4",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db881f6d-f3e8-48af-b732-aee0e82a54b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46bfbb12-c869-492d-8f3c-a71c06f79e7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e60bde-7dd6-48cd-a96a-225cee3af692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb8d4471-32b9-413d-aa04-f2c5e72c75da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e08d05-f07a-43d5-94d0-98f5c3e05102",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26e037d-79cc-481f-a90a-f6f671666325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f30e1b2f-9162-4304-bf93-794a63f4e12c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dbb640c-2177-4e7a-a85d-3129e877eff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae41fa1d-84b4-49ff-9166-32529a65d969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b26c4d2a-e048-47ec-8fa9-75782ebc51c5",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61b9681-bc74-449a-a2c9-aae68fff6ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c0f44eb-2643-4549-833f-527ae0a7741a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17aa7b8b-96d9-47bb-9a5d-b9b4d02f0069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "68196c5e-7988-448f-82da-938a38699f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a496626-fb0a-4a21-914c-b7b9286c960e",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c8027c-2f87-450f-a75a-a05acc92b55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9180b7bd-c90b-4383-a5ae-f3d2bb40a59b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e834f9-3825-424a-970a-8a6dd9cd4f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "38cf5a11-3421-449a-a96b-d812eb7ea4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0031019f-4f75-4923-86a5-ad7b4bc8dd88",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96317ca-4dc9-45a8-a00d-fcc1d14111bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16e072ef-04e6-4146-b668-0534c3fffe00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f040fb5f-f10d-4766-98fa-f8cf41d8cc9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d47d6837-ec5f-4656-bb65-ae20990ca278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11f8335-c773-4c4f-926c-cbbff89aa4a8",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "176e3194-c6b4-4a30-b586-3b6e75cab4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a858271-5480-4fa2-b717-1e2dc9c36ca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f18f80f-63bf-4954-b341-cab9aadc8e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd0755d2-11cd-47ba-9e39-5c69296a7109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "577a06ba-f31c-4d5d-a967-a785dc83f3ea",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b552803-1f1d-48f6-a8e3-02f032af48dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76412493-d0e2-42f8-85d3-1cf427101ce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c88a22-943f-4b26-9240-af082a379b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "197731cc-12c5-442e-a9a7-e41f261a9b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824f6153-1455-4115-a36a-a09d71cceb68",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2403c53a-bc5e-4f4f-beb7-6bedaaa31cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1355b790-43f7-499b-8984-6ae2371f4a0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ef20ea-6608-4556-b2a0-9dfe2f10a1d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1345602a-03ac-41ae-ae06-c11c77fa111e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74654891-5c4d-418f-9936-724bd6507644",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e153d2a8-dbd1-4360-8170-e55ea66164a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9127901-d3a1-4a2f-ac74-fbfef03203dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf78110-d49f-48ed-9954-fbb2f853b618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fba8be03-9cc7-4d24-a06b-d113ee491531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c329344c-d89d-417a-8fda-ab76e07e1511",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31a181f-5924-47ff-b6bc-836bef75db17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0143953d-1d61-45f7-a627-f4301d3a40fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bbc2480-7e5d-478c-ae84-c30c136f3fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3324b72-3b77-46c9-85d5-eb30ee906f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94d8221-0215-4eb5-b6f0-db1d868e1e53",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef8dee9-149e-462a-8bb7-b32779541d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07ae57f8-a75d-4bab-9456-5d38fea39a32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da79def4-ac67-401a-bbb8-27712616457a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e108ed32-1000-47e0-9e73-d0468232da4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f18243-9e95-4207-9f3e-83a4a36dbdcb",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312e3250-ff61-4a40-a0d3-f0d2f31c5d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2269e3be-377f-4b59-aa94-3e64ec81d559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb17e7a-2eb2-4243-b216-537c6604fe0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "62a4c16f-57b1-4d82-ad16-77fe5ff2b077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a355acd3-40e9-48b3-9bae-97ef5c7014d0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba9782e-63ba-4e49-8e09-da26445abd1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "341d465a-0ae9-4815-9792-e24bf6f0c147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff46a80e-6af0-4632-a57a-436c0aaef8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b183317-3b61-4512-a0f4-bfee2164e139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd2b6fc-700b-4c00-8423-02740f35aeba",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9911822e-0c48-434d-a522-a0b21526a190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90d3cbcd-0035-4a52-ab10-6a288599fb6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c409ff-789d-4a09-bb92-4e70b70fdb14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "28411743-8bb6-4110-8168-0c4c460b2be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d23089-efa7-4416-af2e-edc609be594d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48279093-cd00-4b16-a88c-3fe8c91f4860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15db2b8d-209f-407a-a44d-2c90973c5ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c88991-78fa-4ed1-9b10-e3a10dd7349e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "72ede7a0-1df6-434a-8f5b-c4a92bed697f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "638a9e87-ff91-4e61-8c5e-d0646beb0058",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff583945-10cf-4b66-83c1-6bb73c4fff6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c832209-4281-4682-b534-a23f9ee03fe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6a9f63-3fa5-4560-adfb-0d00acd7224c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "929d63a0-2330-43d2-913c-c8ed5cbd2f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d85b3d51-c3c1-42a1-8bba-f9f82cd45a25",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe898f87-231c-4ae6-8ee9-408b98d83993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f0b3a35-57f7-422e-9810-788dec63b834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6690970-6715-4085-b88e-a5d39548da2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d4b1ecc-5aa5-40f0-8808-9914f5fbab48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f0cc34-9db1-45f1-9e7e-380c35d45f2e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8655290-a2b5-4d51-8543-c9753bd9308e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db6e0c19-f4f3-4baf-bf50-9ffa86f6d0d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6b1383-dc7c-48c1-9a5f-ab8fd828568e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a54f534c-ad75-4e72-b66a-25426c5e0e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09403c51-8e5e-4a2b-b094-6aadb9114570",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd756af7-b3d5-48bf-b5a3-510d3055616f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a36c49c-1d3f-4e3e-ae06-ae5d56c83f70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab89be8b-62ea-4295-9c2a-b17727f4cd0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b46271a4-69d0-4acf-a75c-f704c21dcf90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d8f0f3-f9bc-4b33-8641-a6d9347ffb85",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96ca9d5-cef8-4640-b8c6-a17fc3d0de31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b70d8bd1-a751-4086-bdc8-b48158a637b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c5da8d-0a7d-4a6f-ac7b-8a1c026be6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b31f2fc8-b906-46b0-b3ed-b14977f29f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24aa6d5-e5b3-4d5d-b8af-dde589f4a8c2",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76633c39-5089-4f38-b24c-f51f88ba6d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db0f4041-d21e-4f30-9fc5-b0ef14b9d92b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b350094-8522-4273-ba71-9c64c929ed6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "edb74101-1def-45fb-b8af-a047aa54545f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "312e6f38-ec56-46d5-8ef7-f8ca80a87079",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b919e8-12ae-46be-aa38-7970ccbfb36c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cf19b0f-98c8-4707-bf61-fd17ee0fa439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290e854e-1709-4339-bdf2-7c629aa5241f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e91bd38-3aca-448d-86b1-4f6b20a63b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac4a43d-e0e6-495f-bf4a-d927658dab51",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcabfe01-cd5c-44a3-8f10-6111a1123367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f89bd1a-3d33-41c2-b5cf-d90c26459e91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e27626-04fa-4a52-a32c-b4b4888d897b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3851e524-29e8-4d09-ac56-8d6f1a67179c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101d1007-7b4a-4a8d-858d-890aac32e448",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37abb50f-e401-48a2-9ff1-9995d2e52fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3ad9f00-1d6f-400f-9f6b-8909547046ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c20e20-6a1b-48d5-b177-027cf3cd3e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b427bb34-8821-4c1f-8913-258a6d7e4b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a44aa13-f736-4d46-9a3e-8bea6d8c815a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f44345-df79-4e09-9678-a7ce4f28e7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9403bb41-fca2-479b-be28-9c800347f952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7915cdd1-796b-4948-816d-8a3522da2a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "337a0eba-a3a9-4c8f-89df-fc8247d74f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f00df180-ff0d-440d-ab6b-4cb6a319ae14",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "850d675a-ccd2-4d92-b0c7-2474fc2282c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65721bc3-d879-4f35-99b6-024986ef8031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429fb0ff-c9d8-400d-93eb-19461301a798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc414d73-8a34-4088-8092-b58712b21ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce34549-2601-4169-99a4-b602a842bf47",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf92e613-dfd6-4f52-8dd0-bf99f6a6648a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3673012b-d0a3-4769-93fe-54da65b6e708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1dafd51-8a54-4362-890d-80e1985b088e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e221c64b-39ec-46e4-83a7-409056cb004a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58908e1d-4365-4855-b77c-5856237ab02f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b72f558-84f9-485d-902b-07cd5f419d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e34b955-1b7f-4f17-b4b4-2fd62b296625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86c9ed8-0c40-4213-af81-8d91a8828810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0755932-1c40-4ebb-90cb-8aab566e3f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6812f202-d4cd-4b3e-912f-51c472541b13",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9356899-e5f1-46b4-9f85-e4e6a52aec1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "109aff79-982a-4e9d-967c-8e0612960f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0698c404-52a4-4ff3-882b-15953c7e7b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "907f9e46-387b-4693-95cf-82d5f50e7764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea937a06-04be-498e-a301-8dc669937c8b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1254151-ec50-4653-9daa-179b9ff63ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad40d01-3742-46b4-a373-b271e16dea6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e09de8-c84e-4fcb-adbd-46513fafca49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3af88f3e-4fb3-4401-8491-7da22e42d5ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b98b5e-4f9f-4bb7-a3dc-46cbf8bbe0f8",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "251e1fca-b349-4031-a888-a8eae872a585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f959b776-65fa-4265-853f-9f137b4becd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "391a1024-a73d-4f3f-ae78-9770dc36596d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "47b9c610-b666-4c95-b932-19c58ae8b383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba79381-e4d9-4aa2-a083-f8a57c8b5051",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f8dcce-51f2-43ee-a7c6-70a879fd6e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e609961-4e94-423e-8d1b-82f133b5d847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11477637-ad90-4047-ba5b-9d1d2351ac85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc54d90f-9b34-447d-b18f-63537d5fd45f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455fe43b-a7d0-496b-b7b9-cbcdeb9458e0",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f114ed6-c011-4855-8768-067d82457794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "959b2ab0-37fb-4998-b8ce-4393ead371a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6366af4-15f0-45da-823f-d43c2d4810d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "13760269-752c-423a-9172-f1ac568a2636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50979d9d-c180-40b3-9aa0-d55878e66202",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56fe287-39a2-4422-ad0e-bcbd75535d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77689e8c-0810-4e7e-928a-87b461eccb1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e4f50e-ff35-4349-8d9c-be37e0e14f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "36662527-3a00-4b42-9aaf-6fe1c3473190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8683f2b4-0fcc-463f-ba17-7d96663f8642",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "043fd079-3dca-4709-b397-97a5a2619b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6ef48af-7c20-4e40-b58b-16b13900fea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6450eee-e5b4-456f-9c82-b993a0beafad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cfb4bf55-a78a-4df1-bb88-a262a82111eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af4533e-c422-4c6d-add1-dfed5dff4c3e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1c8c1e-bece-448f-8c77-a70f652c026f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "687bb8af-90a8-496d-bf97-1277fc7f6cd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8158b876-cba7-4561-8e74-24d37bd26043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "74ff0aa9-8b69-4211-aaa0-4182b208ac1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc5006c-e8bb-4f79-8d80-a9719f2cff07",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ff1179-4c35-4de6-8767-d2bdeb59c042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "441cb35c-bc6e-43d9-85b5-58d57920bb2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f261c44-7879-4155-a44f-576059dda8f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7fa7ada-f0c1-4728-afa8-2714462cec0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a0661f8-f027-4910-942f-30e8e7670543",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46fd1054-f4f3-4c0a-9fa2-16f8ec3ab9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb5c619f-89d8-4369-ad32-a77cf9a2e600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe76b1aa-7629-4b34-9ba2-90511f56d53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc7bcb3b-9f1c-4903-8be5-9ce2d7a7cd95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec955d0-4473-4e3c-96f8-0a8e89f8cf8a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a2f3fbb-4be4-46af-b75a-3a6c16d40da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f432ec05-29dd-4cc2-a208-c881494ac694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f27b99-0d93-4d80-9e75-188d264be7a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "59a8ddeb-8ffe-43bb-9eb0-490ecd29d3f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03285e2b-a91a-4f4b-ae79-56ffac51e3aa",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0afa15-d6cc-4777-9d8b-15d0432d3540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7db9bebb-0404-43fb-9177-6f8ebd4aa533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497db116-7ed3-4910-98e5-31877a8079a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ffd7c70-b2b2-4384-a505-0ae53b0bb32d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7168475c-31ee-408b-9686-61a163b68e43",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "603bdb0f-fc7d-4912-9624-06f282f15157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e572f3-ffbd-4797-ad7d-23df5fe6df9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b20a2f33-a5a6-4bf3-8d02-40a942c92944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6c872ba-463f-4bcb-a094-c5d1add3fea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9aaaafa-3592-4205-bee5-a31e61579f67",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cfd8704-97ab-48e0-a2e4-e190871eedd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c31b422-8b65-4d17-b0b5-7ffae658e9cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b5f77a-4e86-48f9-b5c1-b2345a7123b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2307767-687f-40c9-bb4a-deed93e82f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a004039-4022-4773-9c5d-7ee75b99285f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "300de6f2-3600-446e-87d9-f44e2a3e4a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "106e1a01-a40f-4166-928f-7d52f171099a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8acf4850-47e1-4643-8fa9-ebeb26f852ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bead882a-7208-4d84-adc3-21b9d0d5fa6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f88b70a-d7a4-44e3-9946-2b976437005d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d09089d-3401-4a7e-b140-59b4104b1633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9026137-b0d3-4e3f-9851-e628636a8fa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6d16d6b-9384-47c3-9c68-96326ca56f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bf749a7a-0dd3-4bff-ac5c-b254eeb709ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e7f5f9e-9ea1-457a-b475-7b46b46634cc",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc6b82b-f066-4059-b2f3-26228b6bfde4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70798764-725d-4005-a7b8-e3082bce336b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3355d493-81ba-43f1-9570-a28c25b21da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "47f739ac-1e6b-46a1-9920-6d2efb346463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5ed126-24aa-4c0e-8620-dc9a4b004f88",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da9c686-49fc-438b-b643-349576592c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1112a288-d2d6-4da4-ba0e-5689a1c6ff9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f0b46f-99ee-4686-b48b-7db56c23c102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "11d91e20-7388-479e-8087-ed697b609db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3b8559e-d502-4bd8-a845-139cc5d1f96d",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66477958-1a99-4983-ab8d-0728f904f533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e10caf14-fe91-48f0-93e0-4619c7ba5e96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8d9b8c-daaf-4357-af5e-91516405497c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ca18f6d-cc48-42b2-9028-9d4b2eaa8fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653247ac-3ac3-4c7c-bcea-e6c8471d3ff4",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f988f46-3e8d-4a56-9f24-8443d0d23e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c460dbd-fba0-4e9e-8e6a-8680fd3a1239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6f17d6-cd82-4df3-9fc3-ac3d9406db26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2a02c48-03fd-413d-a0b2-5e5ce0eeddf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "411d3b5f-ecc2-4aeb-b6bb-3c8c9fe8827b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0f0f9d-2e84-4f84-a5b9-044c3f7afb2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93dcbeb8-1062-4179-ba71-92f33d419962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cd49164-eee9-42bb-a4f8-4911f2a887af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee336b89-5aa2-4a8b-b5da-3e18e7f76ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb1ab28-fa81-4b39-8aaa-1081bd8ab1a4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03061d4a-7bb3-4a88-a65f-82cca5410b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86048624-696d-46e4-be30-59bb452f3318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e161c0-edb8-4601-bf9c-a411ddc2b8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b571740-0ce9-4c03-b2a9-a5a31510f479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e87095-b3c7-4d91-a640-327abbdc12bd",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aef4032-4519-4df9-be0a-7b67d664458c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10e3ad84-2f91-4e98-8c15-8144b02fbaf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11d00de-aae5-40ff-a29b-503fe28ea03e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ed5bc72a-5e66-4ae0-9bf2-94796cab9e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a400792-c65f-4a00-ad37-d10fdd2f6a0e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10553f2-f74c-4482-93b7-c6c1b3240ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c5e3063-e79d-4bca-accd-d440cc6ea398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7f6ea8-0d80-497c-8f53-f065f1131407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eeed15dc-d899-4a8c-b9dc-c3952b18fe8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4da6e4-c4d2-4d87-9ce0-dabfcb4ecec1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d550ef04-d511-4faf-9319-3012a3a002b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f8c884d-623b-4381-91a7-481fe9c3c960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03cbbcaa-ef63-48c5-8e5e-741b31c0eecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "10bb9804-bdab-4ef7-8c7a-54fb1eed218a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a986da7f-3ccf-42dc-9a10-59cf0edec04b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c816fe64-a3ca-4028-ba6a-7d4d124984eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbed0e54-4bc0-45ce-9c53-ba3ea38792d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356a73f7-3221-4aaa-b74f-19e364be035f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2e1aa26-a9f9-4e70-bb66-8e72da9b0256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99ed653-ab45-4b06-968d-0290a9733ec5",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "406755f8-394b-4402-ad33-b5ea017698b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e23105b-c5d9-473a-8301-30060ccde4e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d75735e4-32fd-4578-9dab-9a3739c02091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2da79c95-f032-4d39-831c-7216ab5cc057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275620b3-6bd4-4522-9ec9-b922869848ae",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07cdfac-77df-42e0-a532-c9cb8a67009c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "909a1aad-5c1c-49c9-8a50-428dfcc35956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b3006e-7674-4fb6-bac0-9597aecd5b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a457720a-71a1-4c4d-a63e-544fcf7d64e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ae17ab-6bd1-4313-9cc2-f47662059023",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c01ab0-6079-4623-9778-191cdd18623d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ad8cef-20dc-4a06-9734-88e900be9c19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea46ed1-337a-479d-91c6-7f3fc3087c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0ea1303c-b98b-440e-9f76-e4e69b15f637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e37ded5-16ea-49ca-be81-cfdac668c0ff",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d2538b-162d-4b08-ba96-a888fc716dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a86c0297-21ef-491b-ae83-9f24b1340f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fafd3d5c-b6c0-4bd9-8407-d9d1552d3064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b1dc3b9-e356-405e-9c19-10e2f2a5272e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04de01f3-93aa-4365-b3d4-602e731113a1",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "548c51fa-ce99-47be-9ce9-7afeea06b456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c579445-ee46-4167-8592-cc757bc279e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9e0ce0-6f1b-42d2-be0e-67ff20a7e61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "37bd587d-cd6f-49d3-b94a-d849294cceb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2028dc5-70d5-4ee1-8043-eb143a8280ef",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a54db620-b18d-4ab8-ab46-bba00beb14d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8be7755-01c8-4990-8b64-6cadb92dbb3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f517f186-21c4-4b5f-b2d8-af03207176b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d002b5bb-17ed-483c-ba3a-5a0087a69e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0338c0-7504-4135-948d-85eb058fc3d7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b52381a-67f0-40a9-952a-18e477163c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "614a1b37-4b7a-411c-bee3-db601df68d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef78bef-d9cd-4e72-8876-dc87f44d8d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ee4af3d-76f9-41ef-8efe-d27c793f1af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab7beb6-a970-4f3e-b83b-23bcf32973df",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f767aa7e-534b-40b7-8cb0-4c3d14fdbfa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2beae7b1-5242-47e7-8d9b-f31c75ed7216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a0e0b3-be18-4d62-ab0f-6d2148b2959c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e4160273-134b-45ec-a47e-d2570b1d264e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6a7261-ec92-4784-b871-1da589881564",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87469888-da2f-4bde-b209-4b8597e4c09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd543d4-3fb2-4e34-9574-a6ece4353388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6f751f-24a1-4446-8d4f-5d050627003c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c66b7e5-24c0-464e-a458-4c0a96df0771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "204513c0-b333-48bd-bef3-310c2f74b097",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eaef1f1-2d0f-4e32-bccc-03ac3dc95c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47ff2023-eca2-466e-8de9-9df124197b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea41490-aa04-4c00-bd6a-e01e1ceaf320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "06949937-3382-4d60-8d4c-cc5c2cee4a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af318e67-f4c7-4c2d-868e-bd60d6efb2fb",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da35c7dc-7951-48d5-a2db-1c2b58fc3330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcce0482-ebf7-43b7-bd99-93a4e7895f4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6603efa-0aaf-49e0-ab4d-258d45b8f54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d66f2ab5-bd5a-4fe4-8cff-5f06df2d7251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c270e0-bf70-4325-b84b-91659c510508",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "455b677c-45d1-4d1a-a3b7-b4ddd0afff03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6adac25-7063-428d-bc92-d6e376048e0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f1c9569-8110-4c88-9530-96c862832882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd55e060-6f0c-4f18-a5c7-e576c3cc2ca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1852f09-d07a-4b31-9b21-dd7bca688901",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0835e8ec-0152-4e57-95b7-3e0812316aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c9d22da-b4ab-41fb-83db-3ad66ffd2624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efde8b14-95c3-4202-a8eb-16b27420926d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c26d348-4ae9-4d20-aaec-4bfd7a355fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c84cfe-01c1-43c0-8618-13557895bc95",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e6bf0f6-afc4-40b9-8fc1-31978fe4233f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e525bd39-e6b1-48be-a479-1729a8d55bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1abdc06d-efbf-4dcb-9c59-51b161f1c5c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2bd5ff5-3336-4b74-b2e1-c951236aa8b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd34df2-be96-44eb-8da8-eb80b4908bc5",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad5cc63-a434-4a39-912b-33949262f91e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6cca57b9-7243-4a76-8c18-ce2b9f70cb42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88036402-7f63-4665-b18f-1be78bc58f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3920aec-8bf7-4750-9eec-9d4d2babb3d3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f9f27300-6364-417e-befa-e0cbcb80565c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b23316fe-8465-4f86-8ed9-49bdbc7716fd",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "007e8014-83be-4223-8cab-53c0f2f7ec4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89c3609d-9374-46ff-aee8-0166dc6e9096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b900617-9cad-4135-9297-5c9104a875ae",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "5d0e950f-10f7-4f76-be96-2d0ff63d996e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc59fee-9719-4e3e-907e-6f5e1328cef2",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63201e8-c530-4fbb-8f66-6ffb11a0a4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "176d27e4-c553-43a2-8cbd-5d91e256cc29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d809bb3-4165-4a8d-a74d-89fb36402efd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "b6945a1e-7a84-4b37-9a17-d172551bdd35"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "133c2bf9-c617-4626-8919-0b5b3902ab4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afd0d2f3-ae43-44ef-a808-edd067d5b977"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d5d9ed8-e379-4139-8e95-34c84884ae43",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5e50a39-8337-42f9-8f90-f51b39fc0fcc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "42e6cca7-6069-4e78-ac05-7f8da3c54416",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "074d061d-080e-4a6a-a6c4-f1a7a1ce20c5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1f0639cc-a3cc-4867-9e87-f36bfa7c264e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "01cb034b-6c28-429f-87bc-e161ee0cc854"
                }
              }
            ]
          },
          {
            "id": "208b0775-326f-4e0f-bbbe-1f48b86d7bef",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b6114f7b-82ef-4853-a2d9-f96f0e5618b0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2196e8e-249a-4f3d-9ead-b9fb46b925f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "21ad9261-963a-48c0-8807-d32efb1efd28"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53499526-f544-423c-93b0-c9ff33375709",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3cf67582-301f-436c-96cd-94abb707cfb3"
                    }
                  }
                ]
              },
              {
                "id": "7d371dd7-80f2-4852-a39f-6a89d788c92f",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fcb5c15-146c-4d95-9096-6000dd016747",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c22e1d08-c54f-4198-8378-99de707a2335"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1dbabb9-26c3-49a6-9de1-3fbb5eb10d18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8124e87e-c60a-4924-8d1b-2d1a9994c063"
                    }
                  }
                ]
              },
              {
                "id": "2d68a30e-1ba6-48f8-b396-6e8480bec570",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "23f9172c-cfe6-43c4-9e14-7ab100264899",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "505b9105-2948-45c3-b93a-22c734bc924a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a2103a8-3490-46db-a884-3b25dd35ea49",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "51671058-9d89-439a-b504-8743f7cc3e06"
                    }
                  }
                ]
              },
              {
                "id": "2b73821f-c7ce-493d-89cd-4680300000eb",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "709aaeec-62ef-44ba-8c98-238bbdac5410",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f45df51c-e172-4490-8ba6-485399176813"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0086d913-1d62-4971-ba59-903b35341386",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "81c75d54-5bc2-45ad-83aa-209f36b7c1f4"
                    }
                  }
                ]
              },
              {
                "id": "0c017513-cc08-4e7e-ae02-66851d57297f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b12ef1b5-bcad-4a2a-b758-0f592d384667",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "98b278f0-54c5-421a-a90b-ffadd4275c09"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa2f23e1-9d04-4172-a2ba-19e588446d1e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "535fc394-8ca5-4935-bc59-303a3f522e1d"
                    }
                  }
                ]
              },
              {
                "id": "cdd1bcee-5709-4901-aa2c-ff5df373a20e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "58fea173-d9a0-4d8d-998f-e8229677527d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0c263514-2ff6-498b-bceb-33d1c7a7ad84"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37cdebcf-2613-43f0-8a7a-7daf6c5e5708",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1509a2c1-9578-4dd3-a9df-ad5b5d0e757a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2a0c23c4-6d57-4fd7-9ab8-8f0236235318",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "782bb684-ebfc-4c97-a77a-490dde7a0533"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "75209373-7638-461b-8cc0-41ec2d2a7094",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "61c0dd24-1535-4ef6-b3bc-017a90ea0085"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f48e4a2-833d-467b-8808-9180cab1b6d9",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d408402e-f22c-4d37-b610-67266b7b2124"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2dcc969e-8b1c-4652-8861-9bb27dd160ec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c43286ac-7db7-4365-b4d7-ff3d0d696f1c"
            }
          }
        ]
      },
      {
        "id": "08088608-b432-40df-9971-160d14279177",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d4f78be7-7046-4c73-9d02-11d705c7e2c6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4012999b-7674-4fca-9a3f-456bf9076491",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7f49a95d-697e-4263-9761-0ba9b51063a7",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92bac65-fa50-4f61-8d4d-a39f900310d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b6f54de-9107-46f6-ac38-768408b19e07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b987dc-220d-4bc4-bb13-2921f99ad893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e259b11-c4e2-405f-8d22-8d03aafaad00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "560605d3-aad3-426d-8924-67a18f9307fb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4439224-91ce-4621-8be0-34ca7d9ec61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed9b1d3-cd53-4b74-9257-b6e7678ff386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c6dcec-d008-4aac-85c5-a5970b046dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "02638ec6-d1f5-4684-942c-c9d586c537e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3780b2f4-014c-4ac7-9b8a-f73d3e680da0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99252fa8-9231-4757-b18e-83715a582a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ae3d317-7840-4a37-8e71-adb9b55a83cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67ee306-006d-4535-ab74-0906bfb69e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "37aa3b03-026e-450b-be83-1cc071f5be90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b93197-1647-45fc-8784-56d4b4c12c9a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7baaa2-d559-49b3-ba97-bea5c55eb99e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3639638e-c484-49d6-b86c-4d305a2b73ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed3505d3-544f-4faf-8169-1122bcc9b3b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "169b132d-c8dc-4251-88a9-c7a19951a5c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7d2493-f996-4ada-a643-fc4ba00ed0dd",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19157bc6-c63f-48ee-84fb-ffde45c5e9fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0256a5b7-55f1-4210-b578-106146320075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "128faf19-d511-4ac9-8bfb-66fa45c6af18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "06ba466d-2c6d-4b48-939b-b87acd6c35da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a4d75bb-80eb-4962-9071-7f24a8b54971",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3491b5b-e978-4ec3-b818-eee1a99ce8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae36faeb-1f1d-4e66-88cb-549d6f4ee910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3034e3-086a-4302-9e65-ad98b1b78341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d5554b8-381c-4c92-a0a9-31d0065d8431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc762422-cf40-49c5-b9cf-d9992a89220b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7c1b04-40d5-416c-a997-27a5ad6ae0ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "587fd5c5-aedb-41a8-8fe0-29b3a631f444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f54fc6-4cef-497b-a139-dbe09fc1a688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "69408afa-5e55-4f9a-9666-ce617dfd8b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "172c32ee-542e-480c-b5da-b7836ba42381",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b766dc-6df2-4ae4-ad3f-3404d019dd5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c095ec3c-25ac-497c-816a-520eacfbf03d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cab0bbb-5832-417c-b523-09935013b798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ea44951-1e1a-4b48-80aa-cdae130b543e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ccb8d3a-3276-4514-86f2-d1d4d4c6be45",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a269c0a-a311-4972-9569-9b5bb8652ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7861cacd-70fd-42a2-bdf4-a9184b7a858f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ece1c3-647a-4f39-8a3b-8dda3fe529df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "783100a6-03df-4d86-abde-68e45a30f8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff6bffbc-b82a-43be-bfa3-ab26b07edcaa",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a92ded-8c88-4bb9-a636-6baee3d7d979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00ad5363-4aa2-49d1-8236-efbbb0b3a79c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe0c31c-5cf0-41ae-a9f2-be705aac33fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "665a647f-500c-4ae3-8dff-69679dbcaba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9238dd6-e4bc-4fe4-8de4-4ef997ef3f91",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4265bdc4-0887-4cf6-baf1-0df789054633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d870a7a-23ed-46f9-aab8-a285fae4dc3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9063ff-0a96-4951-ab77-e1985a76d147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4f65d93e-3fed-4ba6-8931-a68dfe9952f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c43e58-b235-4c15-9754-7a04a2c7b702",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de76d953-7bfb-4f6a-a3c0-9c0437c9f09d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0840978-1ae2-47a3-9e08-934041116608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e27adf-3a33-43c1-9741-433b21815bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5147c657-3508-4ee3-a454-5c27ecc68aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a626dd95-ca35-4346-a1b2-dde3314d63dd",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "691b9eab-680e-4d10-913f-91802cf14bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cef2562-8eb9-4b69-8fff-0c397bc71fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d2f0fcd-7b23-4a06-af45-a30c70d045c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4992a80-108a-4bd3-93e7-2cf294c76992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a427feb5-f6a1-4019-8345-d6f82aebb327",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c137d49-aafa-402a-a362-cac8d23e994b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48f737cf-e091-41b4-b50d-29125e0227cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd3162a2-ef12-4db0-8985-b2fa0e2485ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "79303a1c-a258-4eec-babb-aca800ff07fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596dd468-10b5-452f-a36d-7788006d97a7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e269159-ce32-42f2-adb1-4c1830d87066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f860c650-ae29-4975-be1e-89cdc7ada262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910d1c96-6bd7-485b-b07e-4c6c2d248183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0ab82a0-6ea6-4e06-a49a-9da4bc2e7182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df44dfd8-9ad7-403d-a12e-17a3d7689904",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05612b0-f621-479e-986e-f89f20de9d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81fdf318-9af3-4239-b205-74216612157c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7529479-8124-45e4-9563-5e6e7604cb6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a7afb91-de2d-4f5a-aa25-87c9c6d168e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed85a9c-154a-493d-9f01-511c6e8f692d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2524c8a7-bdaa-412e-810f-286b5e55c303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "271d66fb-b5e0-46b0-b93f-e4b15369868f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc9c6c6-4e1d-4263-8e93-a470f4ed49af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "60d6d987-ceb0-430c-b79b-4826bb69be76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd63beaf-3b26-40fe-9b0a-e0f2233a8dde",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d85a179-a702-4ccf-99bc-23a396f5c222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b03a792-4b81-4af3-9a61-ecd2eb69bf0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6994f6bf-835a-4fe6-8a53-63977ca81e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "645a8569-12d5-4db1-b50d-6e3a0083e338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f64f03-6398-44c1-90cb-15dbe8f9482f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "545e37cd-3409-46bf-8ed9-706e3a45b9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9d4a4d0-4ac1-4aa9-8f47-558885054b63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2689a0-127a-4790-a5db-923d79b8e810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d98e741c-c3e6-4293-bbe9-a0a8ffa3b1b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a735a74-1cfa-4fac-a8e4-2f4e86f309b9",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88893fd6-4ab8-45ba-8141-f4417d887221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c7be1dd-3e58-4d38-b679-570781378e58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed03bad-c75a-4730-a0dd-0cf056b27271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "869752ec-2966-409c-9667-185a2dee5975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc36306-8946-414b-92b3-222de07f8056",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c292fe-1da1-4951-93f9-05a425719de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e01abdc4-5f00-4329-be26-4b942b021208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c758c64f-75c9-4a11-80dd-7269fa0a6019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bb2b549-2b5c-40b8-8ddd-e92a0619eaef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e97720-27e8-46e6-8748-b525050385e8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ab1343c-9e10-4a0f-a309-ddf2f90aa469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49fd1e9f-235b-45c7-bba1-dbe513f50fd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f2fba73-5885-451d-a887-d541d68ab61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c70d409-2e41-48cb-b1eb-0b4eaec9f4f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7915223b-26c4-4dae-94c5-8804ce5ce7a1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a6cd08-93be-46d5-b1e5-bd4bad39d66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6d6d8f8-4675-4351-8c20-e773de25b30d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7932c37-b742-43ec-aa68-1ec1702d1560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d7c0283-18a0-4b87-91fd-25407d6fb32c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d28d2a24-b80f-4155-9e4c-b6574d6a0322",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7329fede-4535-4ecd-a0fe-5c217510d768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f58d42b-260d-41de-b811-debcadd2c16f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd919342-c08f-4eed-be22-28a29acac531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5ea111a-5bb0-4ce2-9d13-9e58d7792b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d4bbfd9-5d81-44fb-8b10-e5d95c3e7a09",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81710d0-33ee-42f6-8800-31186ff0230e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a83b6d2b-23e6-445f-bfb9-b67b90145443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bbb944a-97b7-4bfd-9dcf-cbce75cb7444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48b40433-1b07-4d8b-9cdd-aad7504516fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c4a07d-1a0a-40bd-91ac-6ecaf72928b6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73d2078-373f-4ce5-a139-5231f67dc07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d6adcad-7761-41f4-bf9e-a2eb8f09ecc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d108c347-9893-49d3-874b-125c520f16f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77167562-e3fe-4bbd-9834-1f95504fa5fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ebaa212-faf0-41d6-9907-0a96d38eee67",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f377590-c4b7-4a65-bb68-e70fca27f574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d0a68d-5d72-466f-999c-f4d21698328f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7a0cb0-8ae9-4d29-91e3-6b29b6cc9279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e32aa76-f53c-4568-bd63-36a21245f734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82072db2-1181-4f5e-af53-a23b0943bd41",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6c98e2-400f-4a35-ad96-8105c89e7eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63f29707-ba0a-462e-bdfe-be9fc27b3d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74042984-eea2-419e-b176-8ed9db9880d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be67e6d6-a8f4-4763-807d-0f740157af50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11fe560e-989d-406f-b292-afb6e48a6481",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78285c4b-9d43-4294-ab28-3e5705ca7057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f313dc9-f183-40b7-ad00-e038ebf3a39f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d47e8d-1cf2-41e8-96bf-7c35cb811e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c22d431d-f79a-4247-be37-fa89e2709f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ee2cee-3af4-4910-9162-1a5565e2a553",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae1d602-cc18-44ba-8aab-0412ce92345e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1e485a4-b597-4e38-9756-03fbe633f078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a833625-bd8c-4225-af54-021243213e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8899b7a-ae37-4508-bc2b-8108351015b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b767b7d-0b04-4351-a0df-ba0858d0e18e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94f0b9b-eef8-43e2-922b-a7925a5505b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d203cf86-b165-4c91-901a-6f5a82d2ad71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2338ee4-56df-4052-b7af-1eab5ec8c5de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cb08218-5331-4510-b664-2e597168d3fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cef91bd-f8d7-455c-bd18-ddb30d21abe4",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab19c13-a007-4ad2-972a-7ad898a1afa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f413675-9887-4b1b-83a5-213a0c401a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "818c733f-506f-4a4d-99ed-e833d44c0bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99ca807a-dd17-4533-b415-82b4c8030540"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "205264ee-2c27-46ac-bfcf-575d0e09f8f5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "45ae1771-ad5c-40f1-b592-92bf5c513c99",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d27e86ad-1ce0-452b-95b4-2c8c4efab2b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73f555e6-afb1-4ce4-9958-00321363d3c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed7f3f8-0e3c-47a9-b0e7-4c2b37c01925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ce4eb3d-0117-4b40-988f-0c3952127876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c497f6d-652f-4847-b8b0-8c4d00517dfb",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44e7d4d-8e1d-4c41-b0ad-a9b4f2d3b5cc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "3633f148-ef8a-4d35-9354-9f6b0ba99dba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb77e35c-f937-486c-9ffb-6fe31a20d198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdc4a5bf-2ba3-4be7-83df-e2ce0446368c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92068ebe-eacf-40bc-8b92-d482e1d7574f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2797a34-72de-4e30-9eeb-eb2f3d4338db"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "876e00ff-1e99-4d6f-9e67-61ef4fe5bd35",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9dab16d-afbc-449a-bd37-35c8cb9cffef"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b509f5ac-58c5-43c9-8672-85b952bbc57f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "89cf9729-5764-4b60-b6d0-1f169246bbad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "900d0ac9-8ee4-4817-90f9-d5cea0b36214",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7c703b43-8b0a-4acc-b366-332493f94ca3"
            }
          }
        ]
      },
      {
        "id": "13bc272d-55d7-4816-a33c-a910954ef659",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6b60699e-6088-45e4-92e6-0a09bfbfcc18",
            "name": "Negative Testing",
            "item": [
              {
                "id": "14a05bd6-d30e-4b5e-8063-3b45cfbe9ae8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0ce2d2eb-fa83-40dc-8081-02b682bf92e0",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d08ab8b-4ed0-44fc-8b98-07fafe450efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f0ea2fd-13d0-4a88-8d64-eff79ba8b8b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a22c44-206f-459d-b1f6-86327b4c6a31",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "005e0791-f6ea-4563-8c6f-ce2c98e343eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd975488-55da-4ec9-b237-feaac7ee79af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce217d37-3d26-483a-9f56-9119c35b80d0",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0071a1ac-10b3-482d-9573-bdfe945ed48c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae8424f1-8d97-4cbf-a90c-90f659175bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e08bdd7-6574-4464-8c92-ea2b87dbcf0a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6949c6d-4780-4ba2-ab5b-93e022bce225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cb779ac-4195-4c7d-8bd5-c6da363ceb33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f6916d-d47d-492a-9dfa-4efeda0a87db",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "919f604c-79ff-4c55-9f86-8bde43d2b387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efc6d68e-635b-4e92-a1b5-bf3087ead117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95be7839-e084-422a-b5f3-3abb89a8bd4f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cdd1aa8-c9cb-434f-8471-dcb2dbadd998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "330957df-c404-4894-aae9-2478fadad2db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c470042-6781-4888-a2ba-a23ae3f179b6",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a02408b7-4568-42c8-85f7-ea450eb31928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "454a3518-bbf8-461c-9813-0fddfce41075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "296e5cf1-f073-47f9-a67d-323364e5c30a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46e6c783-4436-42b5-8a4e-1a979f5f26d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e409839e-e145-48c3-b9a9-de491be27aa5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab839d61-543c-4149-b821-b860eaba1cff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c28f6452-682d-4ab4-82b4-3f4af0221ddd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a853411c-eb82-4094-8765-305d659876ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feb91283-ec96-46cc-a9df-184b6d698078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4598bd35-c11e-4afc-aad2-534d6b193fb3",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ec88cf-68f0-4816-973b-76c1210d93c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3de3df27-30b6-4bc9-882a-6a5b7a6825ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc29fbae-09b2-4542-a06b-7f615556e59b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5debf77-c847-4e36-bbf6-324334e7f1eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e4ae2e-e23e-4f6e-b341-dd8221047279",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf8b5fca-0f81-49af-8cca-012dbddd65f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b03fd02-6f59-431e-9689-507e6247b106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec9486c1-8b97-4950-afa9-99a64728b259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5528bef8-cc82-4a73-94f8-f82623fffb2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "411207cb-70e7-4d44-a7d1-362fd1f2c951",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef4b8d7-dce0-4058-985f-eee03b7cdb9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73fe551f-3286-4e47-b003-58fa4e11d677"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecddcb56-5a87-4199-b04b-9168806033e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6332356-26cf-4e63-9f5a-5f469379287b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c989bc90-6617-4185-bcf7-6915c72b90fd",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2dfa1c-0b1d-470f-96a4-79d0cad1c176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "613db278-4990-48a5-8ae5-1a3858efa82f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "646a12c6-2922-4bb4-8236-d2cb973aa75c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "358a43cd-b87c-43c2-a33f-f371d57e45eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28aa089a-6cee-4e0a-b3e1-c39188736507",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "157c0db7-55dc-44ed-8687-22999eeeb43a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b7447f9-f9c2-4163-b03f-b03d77d51925"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe2f4d0-f819-475a-ad2e-3e209d3f681d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a50d0d52-6750-4f5b-8d1a-3553ce483d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0262766-b2b1-4984-b52d-00f42b08287b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c1f8373-4dbe-4e97-bd09-e8ed28bc01f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1166e1bc-6f0d-4326-828c-3b3bb737c1e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d86b67-7cf3-4d87-9c83-355d37d67e87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "811af699-c447-4f8b-8aa7-37bd5bb0fa4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ccb654-7b6f-4420-851f-78a16393ed3c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7040d354-5af6-496a-9769-be03bcbf3d6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3014de08-eb89-4ed4-8d47-5b1e0e46d3c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9fc25c-be7d-4ea7-a84d-657a316e8e88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c6cf715-30bf-4242-9a41-aadca1ec421c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3611c38-1430-4e85-9b6a-c3a3dc8903e9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7836cb-5775-47b0-9a48-decbcf4b4301",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ce0964b-ce99-47a7-a471-ddcd503b79cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a0426e3-bc40-4ecd-b43c-26d71a0d4de8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6355dd27-b2df-4099-8dc7-1109c0eb03ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc8e7443-728c-40c9-b081-6aeb5aa35e4d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ceed248-e983-43dc-9aa8-56b004e9c228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bea7cc9-84de-4751-b355-19c07037d3c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8250de40-b4ed-48e1-a69d-6eefd94e2321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "308ab222-3305-4ec5-a9f9-e77a876e1bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f421bd3b-948f-4c8c-90cd-4914d2a7bb90",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34fa533b-53f0-435f-b39a-86d8d9611fc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1c6c8fa-dc7e-425d-b698-85b874c607b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ef0b88-49bc-4fc3-969d-882f48cf4bc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b2812b1-4daa-4dcb-8487-1678aae3cad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3421dd62-4eb1-4552-a2e5-d9f1b81014b1",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ffca883-0289-4670-bba8-d69da9331494",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adc6ee0d-414b-4f70-94c4-aa1c80f1f118"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "061b5a05-c1b7-4c30-b6e4-e4371651dcad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02109cdf-09e1-4b51-8705-d9a1e761cb33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac178617-220b-42d2-ad32-7a592d5e7a99",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5223258d-ef2d-45e6-a05d-cd4b08f40010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50e2231c-0927-4624-9712-2c2d3d7d21f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f55b4f7-03db-48f8-9f25-47547b8c9cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85481a1c-f5fe-4b44-8cf0-87ba0d3eb839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a4ca8d-a8fe-4f31-b0fd-7ded68e2af2d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02de6d90-f8f1-49ec-a2d9-0382fab66e5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62dfb92f-1064-4528-a89b-53b0ff46d78b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d59a0d-10c2-4bb0-ad6f-d79659bf5b18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35752c21-712c-4cac-87e5-2e9fbbbe3123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf9ecdf-1f2e-4975-bbca-591900f64a81",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94eed586-dc85-4151-a612-a1819b04b0ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "403c1333-6900-46ac-8cba-3d538fa66b70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "848e8f0b-2d35-42b9-9f6e-186672dcbbf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75c79f0f-bf64-4944-b540-d4359d53ebb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4b7b0b-c673-420e-85cc-7aa448874181",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..a5NS2rMhgsOcN1dYaNHuMMfcuscEbs0zL9JCQVt7y1iy7q1g9pGUlhFwffQUNj_M6JgmHG2e-V_QNPQN9b0rDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df72598-e098-474f-9b40-b03a4f3e3301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f48bc7-22aa-48f1-bf36-b79ea798280a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee1b179-abd2-4eb1-826a-a62d3176851c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff0a9209-ddc8-4f19-9f33-87a5e427f33b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb267db-deae-43fe-a032-35c55f089e72",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad70edf-0a52-48a4-a816-f244c8a28152",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d33cb408-eb9d-4ab9-974c-be58e37d03f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd39fa67-d8c0-4bfb-a0b8-6fe2f0ddd37f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2cf77c6-b7a9-41c7-9efc-8cc180c9f95b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacc9000-c0d8-4a8d-a3f2-33d43ac7ecc6",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3ecb2ff-1ecc-4d3e-a38c-ff99c129c387",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8b139f1-edf1-4670-92f5-77fec27f86a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "758a5783-0a89-4cfb-b9cb-1ab6ea1802db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcbd11ca-8ce1-4377-9fd7-a355b899e50e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5cd6e46-b6a4-4440-8e50-9de89930c6ee",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d573ab6-45db-4fbc-899d-21aa41c201f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bf00355-24ca-4320-8c77-bd1a31b77434"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e856b7a4-cb85-4bf1-b49e-3caeb4ac5154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a057c00a-68c2-42d3-9d89-12c69135826b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2675d469-41cf-4215-a4ff-608f1ec02243",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15a77f4-e558-4c1c-a990-e723bcd9c66b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85cfc19f-2e9b-487e-93b5-d42aaaf5fed0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aeeeb89-f5e2-4546-aa3b-c737e3166c1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f6f4a1a-4686-40e3-a844-f30007370e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abef4d44-9b68-4db3-9e34-7839d1d81411",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f4e73e-f833-4f9e-8946-583ddf5ab663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e5f16ac-db6d-428e-bfeb-034f79ac1852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c7fbc6e-127c-428c-91da-1c690a5e9982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f7d20d3-f9a9-4a4f-b5f5-fd6d360dec35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151fda77-e7eb-4629-81de-8109a5782e6e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920ae1f2-7d2c-4a8c-b03c-14ce221640bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cb5715b-51e7-4e7d-a2a7-3364d2284f4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d9de0f-6049-4592-9322-a337ffdf0bb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75576453-daab-43b2-904a-2920775aed65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71191b44-ae72-48e1-a277-b224a52bd218",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a4f0c6-19af-4373-b2f3-c09942c72d90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0fcd257-0a3c-45ff-a660-8ca4c733572b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ab037d-0b12-4963-9b69-c7811308ef4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bdabfb3-f282-495c-9333-3df526ec7067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bbba0ca-e86a-4016-a02b-79ee5ee1656b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a981dece-e489-4b0a-9d5e-a15886daf6d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "beabc42f-3b3e-4538-8b9c-d4841d3c69f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "535361ea-6648-49dc-9e2a-25bd398b7ce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2320baf4-097a-45bf-ab7f-e9da8fcdf556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0724b4ae-79e4-4613-8d8c-58f17955753d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d60f3fad-9fd2-4188-8ba7-3b84fa6a0305",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "913ed0b2-0338-4aa1-8528-1f9ebca3e0ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "856ed38e-8323-458b-a99d-74df1a632769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90fa10d6-c217-4724-a226-c6dc5a82b79a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d2defd1-e986-4cfd-aa14-3ca6e7de29dc",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e3ed019-0e5a-43a7-9baa-42de22b6dc91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55bf282a-d0a4-473f-ae3f-1942d21445b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c10c12f-3362-4ff2-a5c3-d65b0e50c2f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbca00ee-87d9-481d-95a7-0281f40088a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c79fdd-c3b1-45ec-bd31-2fdb1c7af7b4",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0299d111-d8ed-4965-bdb8-53d31f502933",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91979ce6-e61a-49d5-a693-8710b14b40e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c1756d-6504-4f8c-a860-3357cede5840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62f4a2f2-df79-4ffd-845c-afb144058468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef483d7-f85a-442a-8728-249def5bef5a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27dd69ed-718c-4fc0-8a73-bbb16d09c93f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "102ed695-9d54-4d50-8e90-d9f76750f87a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f2d4e6d-ce78-4558-995d-e0ec0b3c638f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f64b2a4-007a-4921-b982-904f4bc20146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2bfa0c2-2ab2-460c-b1af-1e0963aa3279",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7015132d-6e11-4f98-9488-57709d29cfff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e48ccc6-43d8-4eea-98ca-2c8a8ddf51f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4acb75-d606-4988-93cd-3e8010d1a424",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc5f751a-3cf5-4d2c-849d-108db300520d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebaccf28-0f4a-4589-9604-01497ea31832",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67294fc2-cb5b-45c5-ada4-7d6de0389504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deddfcea-afd0-4e4f-bffb-902b77a93feb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2046fcc5-4ec7-4d86-ae35-d09bba6d7e23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "106d66ea-89a9-4b42-88a0-68dacb3465c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bec484b-e9bf-4fd9-88f6-1ad73e2d5ec9",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fbb15a4-ea24-4179-9134-23545a353951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cb61ed8-64ec-41c4-bd5f-ddbbbbe83e97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3734dca5-9a0c-4d72-b137-71702976685c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7caf893-8a04-47d3-a33a-cd70bde7e197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "157b1f47-4ecd-43aa-969d-58daf8f35cca",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed248d91-9b7f-4330-a2c9-9751e52e4a02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf47eebf-534b-44e6-a398-14e50f5bff8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c013d36-b39e-41c4-a5a9-7b606ec67d12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a530d02-e965-454f-8fd8-51a3a62b39d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79dfbaca-9a84-476d-9145-c110ff40f7b2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce752d2b-0be9-4741-9c0b-c2d023dcd219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3254e482-1fd9-4db9-9cad-fd6309cfacca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d531cbd-f9ac-451e-b5a7-73b912eff57f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28f5a69e-2f4c-4439-a327-6525b87bd8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d7f147-089d-4eec-97aa-b247bbdd8ffc",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0cecd17-d92c-4be1-8ffa-f7719f8f40a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "697e9db1-ab34-4e83-9902-4e760e34724b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "535227ef-77d6-430b-8b0c-a6f40e0ad6d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7772123a-e100-4ed6-ac65-b7bf54a60239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6049f535-a65d-42b4-8ae5-0fec648e74bb",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91611b62-12c5-4dfe-ae32-d1614597c84c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89ec2e88-857a-4700-9233-da3d51f4b7bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc5b2b0-bee2-4922-9816-d0d48f8ff37b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe3b6ea7-46fa-4512-a73d-13edeb423419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7837bf-29a3-4cf4-a043-3fd8c16f2a23",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb79ba32-398b-44fa-8d30-2d1711fbc28f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6ddfd1b-04e6-453b-b9d9-ab92db4ab45e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9b71f3-53fd-4973-8d27-ae428fb5c7f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b857676f-9997-498a-8c8a-8e1599872c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fafc023-e94c-412b-92ac-27f57e0756c2",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d4220e-3e9b-4194-b2ff-ce997dba0d0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25616102-dda6-46d6-8a33-dd5f58c2adb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f384bba9-6103-48fc-ae43-9aaa0ca3d8fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48a96b46-d5a7-45e7-910d-2a992c522c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d672ae-9891-4b07-b5f1-877e34d6319b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..4x5xT7i6SOYZ2xoyxzXT8uh0iLvuJKsaEi5AHunTghGIyojcl7qPoXS7-zIBtAzdJ_hQ0Y0FUTCtt_iCymTcAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4644574c-ed21-47d5-8135-eec277c02bae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7d2e4ac-42bf-4d9d-98a4-7508a1a33e10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82401aa-2a3b-4bcb-870d-70d84f7416e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8588ab82-8a9f-489c-961c-35261e5a3d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd774b5-00a3-4beb-af26-28944e10d5ef",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039e2410-1dee-41bc-ab65-0cc5fc7ebb3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cfab74c-cece-48dc-b0f8-80893f0a9b17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbb368c9-c6d0-482d-9673-fe3c721863b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a471b38e-ffbd-44b5-b10e-0593a0095716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c58dd3-83de-495b-8229-edadd2cb19ef",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4725ffd-00f6-4723-9c2b-96bc6c8349a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e419f11-2762-4d26-9827-945cb91aecdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85107c46-7dfe-41b3-bfa1-9ab1850c9038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20dff23d-339f-460f-9aa0-871673eef0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85297beb-f324-4e4a-a780-e7d636852ce7",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516bfb38-a657-4e3b-8b69-90101b55a65b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e966e02b-78c3-4998-ba24-7e412e216fa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "628fb298-4929-4dbb-9fae-93953c7e4ea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf56550-d486-4738-882e-a489ec6a5a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21076b6-563b-4842-ad81-e0afb6240ccc",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa15c1a-c616-4df3-b893-b756802d2b14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21081d25-7868-4fb1-b202-c9b798648cfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "651c1ed4-3271-4a87-ba8b-f7ef0c392a00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cdef57a-f46a-43d3-8b38-5b9ff2caf334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f53cb6f-1811-4d98-949e-53b278d2bf8b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf8daa73-8121-431e-931e-aa14428be228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db93f3b7-6b49-464d-8920-36a0ef590dd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4371c582-05a3-4a5a-a078-cf34a926f0b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c95927b-63de-43cd-91bc-8221e7a6c9bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc0d833-27af-4dfd-bafd-cc257aa66bb0",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ScdiIJdpg-fZNifwI7dNf0i4fItp-Gf_MGpTO4Z7kp1eQGg-1nf3O3BoaPem94UO-gL2fM-eY3HdNOyTUl7bAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1a2c91-a4bb-442c-899a-6a506fe7b228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f58319e1-3ef3-4e91-862b-26445c13ab9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ab140a-6264-4ab0-9ae6-8c0d0afc44d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e9bd201-cb54-40bd-a212-be375ddffa12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d475f1-5902-43b0-b055-7d134b87444c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecfb0ef9-6ae3-4757-88c8-1f5261f1aef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1931930a-bd61-443b-b7e2-23547ebece7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb8e4dc9-85a3-43ce-aa01-0f8e872cfab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "750b8638-7963-4454-bae7-896b8fb9c76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b31342c1-b11d-4951-b94e-85af876ab333",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7a605e-b342-4952-bf77-5a60794adcb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "020d611f-34bc-4f53-b230-8c0411defde1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74f6cc0-8ab1-4f61-b160-db0d17d2ef65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4bdefeb-4f72-4d6a-98d1-15da8ad451c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d5c9814-815a-4cc8-b829-b035886aafb2",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd45ef4b-5460-4791-98e1-7432cd86bb93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b50c2e03-82a3-4f1b-9ec9-23ef1fd829b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5562cffc-cedc-447c-989d-cd860aeee412",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba6cbe22-0b8c-4886-8bca-2e81c26e4fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39833834-8d6f-449c-aecd-3c065c3c5e7a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349bb597-2b28-4612-a65e-2e90d2fac94e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ea5e59-2f8b-4159-b1e3-1767dbd644f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3926642-fa0f-497c-8c47-57653fcc5e6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1b51b7b-f2c4-4508-a722-d8a3ea59f698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e12afb-6cf3-4dc1-84d9-f00d95fb8c59",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96651572-6be7-47c2-8afb-9f98c1a139a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fa0f2fa-11cb-4644-822e-41350b77f22b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f38c0ec-3a85-42e9-9570-f796aef964ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46ef9833-dc72-432c-9edd-247f2eabe054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81d562e-b0cd-45c1-b90b-cba6d108d95a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146463fe-30b2-4c8e-bfd3-5e08b2d49837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee59f3f4-062b-419b-96ee-545f5eb41e54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3011ec12-103c-4ef5-b9f4-b61842d7e785",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94683a59-314b-4bda-85dd-b1ce8c2e3de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "844b3b8f-3937-4cc3-baba-cd23b31670ba",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9f0b23-5bff-431e-8b62-610202aef746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff43f2c9-6a4c-4bca-91a8-123e465d6422"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ffdfaa-e5b5-4d3b-9a01-e7f028b0d03b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a715f150-df0d-477b-a739-6cda93b4192a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe32d09d-d4d4-4048-9751-94d267e15cba",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a50e0d-6342-4695-a522-47cb66682408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "808d8ab8-f436-46e5-bfbb-832acbcc6db8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4021f4-d2d6-4fdb-944a-bf96aeb09146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74f831e2-d0c3-4394-b6d9-dc4c193a00c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a62966e-0951-4442-9ebb-cc8f45bb8d78",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147255c2-cd49-459a-8363-97ae39a3c34f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c505165a-f0bd-4cee-9c35-4f586ffa0a27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada9dc4c-4f8e-45a2-87d8-bea532264f36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38c597b7-b3f9-4bd8-835a-4b4011541a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "240fc53d-c660-46b9-b59b-b993da065759",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38c4dbf-fb39-4254-ab70-d2f2c035ceda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b911215e-109b-40d5-bdaf-ea371bb8e940"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97adc7e2-323d-4eb7-a51c-b587fc808d3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c119a059-bafc-4de8-8dc6-7cf37fb8601e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383b7291-f6f9-4d67-883c-7aa7d784950a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30bf9806-9ed5-4822-9f54-499e71b37cc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5b56929-39b3-4c2e-af9b-e49dbe9b0cf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad5d944-5536-48f4-9cb6-7a9554fbdbf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ca925f2-734b-4ffb-81d7-28156aa4da96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78fe94be-5567-403d-9958-62eac99ca6e7",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..WJ_K6rlTXdYFhAt5Zmbei9B-5TawMj7h7MwRnKEnJ6pRjHvgBVRwgjrbdpCMs8DtA_SXe5LoVTNIDPSYA8ALCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124e60e8-627a-4ad6-ac45-409592e63294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4798027d-fbbf-4094-aa2f-e208075ffea0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1861cc35-7641-4d3e-97c7-4d2bb3bebab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "563f6425-dadc-43a6-943f-cb9e10b9612e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce775e3-395a-44bd-ba18-e7410ef696a3",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16dbff4-c103-45ee-a547-f88ebbe24bda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6b33646-c334-4d5b-80c8-cca22f401722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "708ac71e-afb8-4e89-a341-bd11b1b533e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79ed153d-f5e7-4ca0-86b3-c406a7252e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5f42c63-5159-4fae-a3c4-8ca3b249b4a2",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7194e232-a1bf-4776-8c37-c7d1155b0c72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a1cecd1-a32a-48bb-ac2e-bd56e0ce1b5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8568c65a-e1ef-472d-9397-ee17036f9722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1bf9d91-f5f2-4cc5-a12e-80ef3da5c6c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36771302-1fc5-4d4d-a13d-afa9df1d63e0",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db79b1e1-d94e-41ac-aa3b-d5e9e6d1ac12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c105bf74-699a-435b-9731-d000a41b06ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82dab47e-b40c-4d82-9855-2177f7901491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0105e91-0ee4-4cb0-a093-d2b7dd8079a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f05261e-30c1-4711-a175-45f0dc7fe378",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ebe78c-64a9-4985-99ac-05ac6f4d5f98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10f5bb39-dc91-4a22-8420-1c831fd9cca5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ea52a6-0be2-4f18-b601-24069644ebf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b281fdec-9fc2-473a-a66e-dbc052ebcd94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f920f3cf-9165-4ca9-a693-f1a02ce7c5a6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754f8339-efcb-4c6a-9692-038374cf1c69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38f1bc02-29a7-433d-afc1-6ed721a11351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "941ea14f-ed01-4929-b6fa-8b33ad4eb03e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c79853b1-ffc6-402f-8000-88993877089c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01433f4b-ec6a-4308-8bc5-d4bd55d1f94b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e80ee6-fa97-4d5c-884e-d7827438ee33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "346a45b1-93c5-4dac-91af-41e7f9621c7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc5a70e-47b6-4a0a-90af-1ae6d18ef78b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b928a808-3646-4f24-ada6-fbd6a0dbf354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13a923fa-aec0-4182-8a11-49516659749e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab122eda-2d4b-4c80-bb11-8e233c46cc40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a80b97b8-696f-4e06-8e1c-f7c6bb78e883"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9a7823-fabf-477e-b56e-f1c9830cfd02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1932e0ae-0a0c-47dc-bf23-9b50ea344066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c9753a2-5e0f-4041-a79d-b475d2e9dfaa",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fde4a28-e686-4441-a4c4-7a08bd6ce0b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d7b2e79-63ae-409b-a669-9b68425fc24a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97bebcd7-80f7-4a9f-bfc9-ee0f9e1bf899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d1c1dd-c91f-4a90-8fa5-a4ad44afa579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40040fc8-ae28-4b59-a2f7-1f2bc71ee02a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9175cc36-d24b-4bcf-9ad4-726bbb128a79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "973926b9-87fd-4a88-89d9-c0f906c51997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc465582-f3d0-422f-a3f5-d6dc454fd760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9cda216-e25c-4094-928a-9bc135e46a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c5854d4-bf98-434d-abdb-ff68e173dbe3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c7a153-d5e9-46c3-a9a7-4f8c7d2e8de6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26ee53d8-aed6-4f80-8a17-ae78d1aa0f16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c11213-e922-4b5f-bf45-1c387b26bcf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea729f6a-4221-4099-9909-e7e0f8e24a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51efc17d-8925-4f87-acd8-10dd3530ccf0",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea0c6785-3831-4aab-adcb-230e93919e95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "362f1615-0330-4f30-9ecb-5e31deeeb684"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3781a1e7-2241-448c-a869-87624b29cf14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4baacafe-2e6d-43b8-94c3-4f2384d6f461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3bd812-7d06-4be0-b6a8-ac378119406a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869809ce-7827-4733-bb8d-d35b57fd10de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e881426a-ee85-454e-bbfd-941cbc265b9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6757e8d8-5159-43a1-afe7-bb6f00403a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfa1c43b-edc1-4b14-b329-f46705875b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f3b9e12-a121-47db-959e-c670c0f5a211",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5596d114-bc77-4fe5-b0c9-828ba68d73d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "753103c8-f87d-4955-9616-88e39a7ce703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b783e859-c73f-489d-a9b1-0b12780ba961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa0288f8-f826-4fce-aa17-85dfbadcf4a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee278c5-5533-49bc-ae94-ffec54f551d3",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57afeee5-201f-4ce8-b802-0dcaa7187fc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edfc0647-918f-4627-b196-406be1a1e031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6800ea-acab-4a64-96c4-38c10cfa8c7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0683520a-860d-4fdd-95ec-7990b11b6445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337e495d-51c0-4122-a834-47474fc804a3",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7314e195-c7a6-4279-8d5c-cb5a1b55c4b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "363154e6-fb82-44a7-9470-934cc18139df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9eef05-3f98-48e5-a1c1-1f7384ee8bd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "021c17a4-70dc-4ea5-b74d-e6fe0dde3eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3edb77c-7277-4506-87ed-ce8789ac77e3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64626f06-0228-408f-9e25-ccdd8247763d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "363cb044-48f2-4ddf-b14b-8a4438e6c71b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf8fe35-4db5-4542-9801-7376bea195bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1290d97f-5fe4-4435-a399-0d48fe960a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd7ef42-c7a2-4247-886a-2e84d2043f17",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67833f8-ba85-4b17-9ea1-443eb67899d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "532dc01d-099d-4959-9ddf-4d509f7e9799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0da660-a77f-4f9d-8366-7db6df108d99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8778eef7-bafa-454b-b312-dc0e5964cdbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d0861e-2619-4fe3-9ae7-a5c8f44f2301",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6763fb-efd2-40d5-be18-1a1da907247f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69fbaf74-1f8e-44e8-a4f3-9f4ca388b06a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50506407-240d-4153-8fc7-72b0193dfa96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00fc7840-c804-4165-a6a8-7c0582f1b9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ee1ace-1036-4520-99d2-37f273b7af62",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17fff0f1-1783-42f9-986f-d32e91cc22d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c6a85e4-2579-452d-a6bb-79d12287fa52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d647edb8-1f82-4b71-bc00-a08a4311b4ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f415a881-377f-488a-8032-9bfaed706118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3024dbfd-abe5-43aa-9b6b-0deb1d759f3a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d6ff2a-b307-4e25-acec-f2421aeefa6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b95b069-dca4-4dfb-b72c-01aa91635d00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7c8318-4aee-4310-beeb-59c45f8d1646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd3c5bc-8e36-4db7-9857-dbe4241c668b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "150520c7-feb2-4c27-8d2e-76b757b0d6fe",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "903fb4f7-788b-4ded-ab44-ff3469058de1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67a69e15-4374-4583-b980-ada142e9bcf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce97f8e4-c29f-48d1-87bb-ce8eabf3d005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c34685-7b1e-4d6c-a5c9-b993e4a87ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0649450-fede-453b-8492-b1a6b56aaafe",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c64bbf-7825-41a9-b7b4-67906fa1b30b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "262067af-4b25-4c2d-b4b7-4aa43285422b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0dd3b3-3505-4404-a8ca-6cba7804267e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d169b7c6-1855-4153-9d66-20f3177df7e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee6956f-90d6-438d-907b-d6996bfc8a64",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01310372-8068-4d57-a8ae-8d5647f417a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12394db9-afad-49d9-93c3-c3a15b1a0714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db760a65-caa0-44e7-aac9-6576f0387035",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da474e51-0575-4c9e-8567-ba1e4f91804d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "478184ef-5cd0-47ba-ae24-047a08ed132e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f840ac-68ee-4859-811a-56bd020e2b71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e3450cb-7009-44a4-8739-18d9a14cfe4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd64a15-faf6-4e67-b57b-a14434742f80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70e2d9af-941c-4ef7-b511-0f20eff4f287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3b86f0-0272-4bca-bf9d-e58e4df34e33",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e5d7cc-3d60-4b11-ae7d-989c7041c57d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09321517-1299-4c5f-bfcc-46b0385d5e3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a79037-1fb5-4a8a-ae3e-8110f09efa5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0324211-c3a7-47b3-b2ad-6e3e90113525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e688232d-4f1c-4f30-ab59-d7e9c69df65b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cabdbf9d-bb4f-483d-8592-ff8dab67ba7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17b32c4f-cbeb-4a49-a7d1-faaf11019f27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65dc66d-1119-46db-bca8-d9110d249934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e5b656-11f7-441a-8f87-f0873b066f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c98701-c3e7-44fb-aaaa-b07540dc1574",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b12b418-1154-4bd0-a1db-4dc484e7b152",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7747445-6724-490f-843f-8e845689497f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5723cb95-8c78-4a72-956f-7becbe824397",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dcc358b-920b-4307-8672-b627346afe20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2221be71-634f-4f4d-8af9-4b417b7b9841",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ab4289-6589-4c99-ae6e-8b37f18a6389",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d08fd85-9c18-4805-83db-5e1ad48d4445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b98501-fdf2-4f27-b7eb-08b1075628cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a63d05-b5b5-4aaa-8704-03d1269dfa7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a942cf-7033-4947-8a41-ed83e9eed65e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e72e4af-3c3d-4df6-aa89-7b9f915e17f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "434cc115-6b16-43b2-86d6-06880791cbbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f7284a0-4b14-4ffc-909b-34ed4ae78402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b57fc43-2bee-4e3b-b57e-6e4819ba8b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9bce54c-1a2a-487d-aafa-0520b5cb4c03",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6189bcb-2699-4dc0-8d03-1b45b1da7345",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04047e68-8973-4e2b-a65e-eccfdbc1a465"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4bc9dba-cd82-4600-9f9e-567ad8e2c91f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e8abfa9-cef2-499b-8c1e-367cd5a12494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab2a553-15d8-46d3-84d0-69c6c3ddddba",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba727cae-aec2-45dc-af41-3c5197a01528",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0371a250-b2e9-475e-b837-d4c49ff81c33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43787b6a-6159-43a9-b79b-ca7e53365294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed2e2e7b-971f-430a-accc-e25b0f6a217c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f405af4-e2ef-4e00-9a55-27c81731496a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01c2824-4c23-479e-a36c-30e459eaea13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a906e1fc-b29e-41b0-a677-12d426ef3ca1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d30adb-00ae-446c-b113-a4eeb400702f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe4abe2c-652c-474c-9a0a-919f25814124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da060421-4fa2-4752-bcfb-dbb5a3d44525",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9cb3493-754d-4994-9a81-4cf7fa75eda9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b59461fd-0ca9-461c-a3e6-f7bdd3b23e4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62376f9c-d3eb-4cc4-a168-462ff971fbd5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18d7572d-ec20-4681-adff-fbefc0148bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfaf314-1e62-4387-be2f-82c848a01614",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3216281f-3052-411f-8b4b-7c8f66a602e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01a840c2-d9e9-4523-b557-acec3e8977f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "189740df-be5a-491c-8b45-8200e7d02d5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f91df4f6-3426-4958-b0b8-4ada9a281cb0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2796aff3-aafb-467e-962c-9474116605d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e1232090-9f0c-4300-bae0-bc23fd459dfd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "50d4e7a5-1094-412a-8c1d-ef81885a9c7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7f1e37ba-5266-475c-b80d-3e63548dfc7e"
                    }
                  }
                ]
              },
              {
                "id": "cde1e54d-b8d5-4e6a-b7ff-63944290b110",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b3b5e54d-718a-4daf-bf65-345c495256c4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b98b114-7b72-44a2-853b-3f6e89ed30df",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7b2c6e56-2712-4625-9ee6-68c6c3f9d602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e851f210-8e69-43b6-9359-f74e818c1bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "754a7731-cfa0-46ae-86e2-9fb7683329ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8b96f0-f833-42b9-aa35-43275fd9e2c6",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6110d697-b47e-4548-8818-4c6613e26b5f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b49a4f05-9348-4fec-b2f7-d6cb511e1845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3a3a4e-9f9f-497d-a8f3-388cff1a7ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63d0db09-5279-41f5-a2fd-e381e2e6d1fe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce10bfdd-eaf8-4952-a612-fb95dc6bc2bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e14c061e-8254-4b55-9d8e-8906cac7dca9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "80966437-68a5-4339-bd31-13f078e0149c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5cf0d84-2065-49b1-b985-942f0136d3cc"
                    }
                  }
                ]
              },
              {
                "id": "efde70c3-c6d8-4e5f-8792-92a3f93569de",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "5b30c7fa-b724-4e5c-9d78-652b302bcbbe",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e78328-dcbd-4476-a558-ba235e092c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "73cb5c38-465b-4284-98bf-a94361b1ff08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103c8d1d-7951-449d-82d1-02565d5ac68a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d37f5c-f9f7-4241-af9a-d8fe6004eb00"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "eee7e1bc-20c9-4bdd-a82b-209a6815b26a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f7eedf04-b7ac-4a9b-8b5b-0350d12f3342",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7232dbf5-cd35-4111-a38a-9c08f32427b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0a15d09d-c670-4c5f-9b23-a45133c6e37f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30d80f28-a978-4d2b-8790-1708f71f816f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62a7f6af-edfb-4d46-a196-ff5af71d9d2d"
                    }
                  }
                ]
              },
              {
                "id": "ab47ee8c-fa39-4fac-a434-3dc925c69001",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "804cb4a6-7e5e-46ee-9590-9e67b75778a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0f2ad3c3-7579-4eeb-a4e9-017bcf2db1eb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed29d823-a8fc-467d-90fc-8ba0d7aae2ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85cdf799-8c15-4fbf-8ba1-bcedcfe26454"
                    }
                  }
                ]
              },
              {
                "id": "da6ce68a-5a31-417d-9480-a0c23d2d1a77",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "41dcb4ab-0243-40ec-9865-510ddc8f5e82",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "543ed236-e016-4632-9a66-95aa6f9b8700"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6cb6fdc4-9c78-4ef1-bf43-afea15b9eac2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbd578cb-371e-4657-b543-7bb866b70b31"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57e4965e-f488-4f9b-8202-a472cfaeadc2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0555e5e4-552d-4fa9-948d-ed756bafac2d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c4734c6a-7d15-4d19-a990-6ef65bd15bef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "39ada076-bb81-4f2a-81b2-fdd969fd1b2d"
            }
          }
        ]
      },
      {
        "id": "eb172e59-bb42-4e79-90dd-67dd361b3460",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a910e546-9772-477b-81b9-27d4fbb75c3b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4cc452fd-ee40-4f15-884c-398c37833a6a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "98cfa3c7-a4e7-46de-987c-da6721462db0",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546b6018-273e-4d38-9aad-1b1593f05fa7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "472bccfb-f64c-4c3c-8128-121a623d877f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb60c4c6-30e4-46f1-9079-6dd23640817a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7210afa-ae57-4751-aa0b-891c10de4b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb8ddb0b-5b9b-435d-a318-0f0c007ff799",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ebfea6c-074d-4608-b526-ed31f113a694",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "49749a0b-3a12-46f2-a72e-e06a0050bb25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bf77ea-fbab-423b-b1d4-cc8a95c80191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1879f81a-b603-4fa1-a7b9-3498656b5c01"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "068b60a9-9272-4920-b232-9c61cf113e0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f63e9410-ba6c-4588-91cc-f9786c8c9c11"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d185b45-b015-4eb1-bc50-d46784eb27c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3b6cd8d-b248-4688-a5ef-6c0793d0f6be"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "efcfe099-8a51-4cf8-9e0d-3e25c5fe795e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6cc63032-f343-4889-bc44-4eea495fd0ea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3707f359-cbc9-43ca-aa28-c4d03c1dacd9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "27498cb4-cb9a-4c1d-aae3-3c41bd491361"
            }
          }
        ]
      },
      {
        "id": "3865c73e-cbf6-4c2e-ba78-a28151ce7083",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "77b49d72-4614-4b6d-a21d-0e712cb40bc9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f155c32c-8251-4766-89e2-d04adfa99ac6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "678f8e34-e13b-4670-b041-559e4f55c06a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50b6906-c71a-4317-9ade-39a5017140c2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dbf9a351-3c11-4831-ac4a-557b446d7e5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c084f6b0-8872-4d8d-aa17-76c140e52a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63169968-2754-47a4-906d-83a5916c9777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39580d3c-75d5-4279-b4a0-fd8f7221c4cb",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "553d1347-82ef-47db-81c7-7885fbc6b81c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5cf308f3-4ca2-4b3e-a8ab-15dcae4ea60e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "840cd6a6-ffad-4af2-afda-b890ba0c4e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "25f1a06d-16e7-46a5-aa81-8f5da1f18798"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82543eec-6fd7-4068-9b0b-f6764320209b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b7a377d-1822-4340-9357-7938e6cd5635"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c23b95a2-b850-41e0-a578-a01688fae684",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9568ca89-bb7d-4dd0-af98-2f901a98e092"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c0f4335c-6bf9-4eeb-a277-944cd8dd82c6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8dd989ef-ff41-452f-a752-a4e33a656ad7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5e5af612-0a6f-4711-bfce-7b3693725755",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "78e19c3c-df33-4205-8b31-99fb06bfee4e"
            }
          }
        ]
      },
      {
        "id": "361e37d2-52d9-4a2f-baf3-72282eade972",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "502c1bca-be77-4dd8-8199-ca695bcf5fdd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f788d382-7a75-4430-a211-24f09f8568a2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba6f3cf4-b861-4e83-bfbf-a0d61271ab0c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1a33cc-86b5-423e-b867-4b7aa36ab656",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "02a91a09-a707-4171-9793-e6d418fa5f46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b714e3-b950-4495-adc1-9126dfdb2b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b52ff812-809d-4218-b7ec-aa0a71bca857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80b1613-734d-4e5e-811e-445eb0672029",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d3335d7-68a8-41d3-82d3-af8b7cb26d60",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ca9533d2-e4f9-4019-9c5e-9ae7855c7e1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d2482a5-7a34-4380-986a-74b4538788be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "383595fd-54c9-4645-98b2-2930ecbf107c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95462b1c-dba0-4e03-9f70-5b273a6cb990",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fde960b2-30fc-461d-9bf0-e83505c93e3c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "687f0092-8078-4949-b600-63f38a99836e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab19d3ed-d78b-4cd4-8114-587ac12468d4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f947f7bf-3bbc-49ff-b04b-5ccd93ccd5cd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5b1df3ae-6f75-4837-b0d4-966544476611"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0560f5fd-127c-4947-b917-a0632e78d1f0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "30998cc5-dceb-469e-ab32-a7524451744c"
            }
          }
        ]
      },
      {
        "id": "70c1051c-205b-4d71-b42e-34ca9960ad8c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0bd35ad6-6f35-45ae-8ac7-afcb0e7cf1bf",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e5c0e6a-e778-41de-ba0c-28156d7ac88b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c8a94269-28b1-45a2-9b10-dc4e418f1f24",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9af11136-b3a4-4cdf-a0ec-5d4379b85f59",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a0d4e83c-8c0c-4e35-9a99-57f43e034bc9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1923,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 519,
        "pending": 0,
        "failed": 98
      },
      "testScripts": {
        "total": 966,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 957,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 84.8435114503817,
      "responseMin": 4,
      "responseMax": 1175,
      "responseSd": 162.2744892534833,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1670978323912,
      "completed": 1670978356890
    },
    "executions": [
      {
        "id": "6a839f1f-7809-466d-a183-116f8545960b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "92ad82b7-9b32-439b-a915-daa9c29374a1",
          "httpRequestId": "848b34a7-5db8-483b-8896-0b2302dd6829"
        },
        "item": {
          "id": "6a839f1f-7809-466d-a183-116f8545960b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0b2c258c-de6c-4661-bb1c-660742e315d6",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "21078294-3fa8-4611-a419-262e805e326f",
        "cursor": {
          "ref": "27ffeaa7-b1e7-4308-9a9f-390348b335ac",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fe79f956-4594-49c0-95ba-06285bf1bf03"
        },
        "item": {
          "id": "21078294-3fa8-4611-a419-262e805e326f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5a20ea85-b136-4440-abc3-f18acc61dd98",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "1df07660-8cb4-4516-809d-65bb3749eaf5",
        "cursor": {
          "ref": "a08002b8-8b26-4380-bce7-072d149c0a24",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fbf8790c-2dff-43be-8e3a-7da060631f89"
        },
        "item": {
          "id": "1df07660-8cb4-4516-809d-65bb3749eaf5",
          "name": "did_json"
        },
        "response": {
          "id": "1a206b6c-e612-4b59-af3f-98a271b0f644",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "941f1d3b-ab8d-47a7-8457-48d7e6c041ae",
        "cursor": {
          "ref": "37c3427d-ba66-40f8-9c09-e9c8a709bdb1",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b085c87f-c1c4-455c-a946-b0403f96c00c"
        },
        "item": {
          "id": "941f1d3b-ab8d-47a7-8457-48d7e6c041ae",
          "name": "did:invalid"
        },
        "response": {
          "id": "4574bc96-1b26-417d-b6c3-2750ba381add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "941f1d3b-ab8d-47a7-8457-48d7e6c041ae",
        "cursor": {
          "ref": "37c3427d-ba66-40f8-9c09-e9c8a709bdb1",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b085c87f-c1c4-455c-a946-b0403f96c00c"
        },
        "item": {
          "id": "941f1d3b-ab8d-47a7-8457-48d7e6c041ae",
          "name": "did:invalid"
        },
        "response": {
          "id": "4574bc96-1b26-417d-b6c3-2750ba381add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beba41ca-34c3-431c-8deb-19b67a0fe9ed",
        "cursor": {
          "ref": "4c9d04c0-04af-4a46-91f3-45d6fea1a0a7",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4d38dff9-7601-4f19-8f51-757896724a68"
        },
        "item": {
          "id": "beba41ca-34c3-431c-8deb-19b67a0fe9ed",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "59679a3a-37e4-40f7-a9a1-1f018fd54552",
          "status": "Not Found",
          "code": 404,
          "responseTime": 120,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09120e7-1863-478b-b006-829c11a9e11f",
        "cursor": {
          "ref": "f92824b4-fe0a-4c2d-bfe1-099072926d77",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3b9c9fca-67a6-455d-8b0d-42e23fe93c9e"
        },
        "item": {
          "id": "b09120e7-1863-478b-b006-829c11a9e11f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2920cf3f-57fe-4ebf-85c0-b9deaa668c6a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 16,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef92b65c-830b-4251-a78b-425e347a7067",
        "cursor": {
          "ref": "79853d25-f826-484c-a385-e145df0bf503",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9952ee3c-bad1-4f3d-8917-e8b3c3904bad"
        },
        "item": {
          "id": "ef92b65c-830b-4251-a78b-425e347a7067",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4200679d-f2b7-49d2-b645-bcc2456ddb05",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605011a2-bdad-4a1e-b6ce-ec07c1922867",
        "cursor": {
          "ref": "6733b896-6fd8-47ec-939d-40597e0e8267",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ff8c4106-9605-489e-9683-e44e7835533b"
        },
        "item": {
          "id": "605011a2-bdad-4a1e-b6ce-ec07c1922867",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "11d03858-7efa-4359-9793-89e2c72861ff",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 12,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605011a2-bdad-4a1e-b6ce-ec07c1922867",
        "cursor": {
          "ref": "6733b896-6fd8-47ec-939d-40597e0e8267",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ff8c4106-9605-489e-9683-e44e7835533b"
        },
        "item": {
          "id": "605011a2-bdad-4a1e-b6ce-ec07c1922867",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "11d03858-7efa-4359-9793-89e2c72861ff",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 12,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224d6618-3b8c-4e16-a3ec-5d9db691e10c",
        "cursor": {
          "ref": "d68dc917-e742-48c7-a9cc-ad3a69683c08",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f95454df-5922-4bf3-b36a-bf2b1c9a85d8"
        },
        "item": {
          "id": "224d6618-3b8c-4e16-a3ec-5d9db691e10c",
          "name": "identifiers"
        },
        "response": {
          "id": "5467fe3d-6e38-4876-a648-18bfe1130462",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f57b7a-d3b3-4d49-8a4b-a944f272be37",
        "cursor": {
          "ref": "f9009a08-c690-4c44-86c0-e99a9f9efc52",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1dfffd92-0601-4f82-a36a-380d6a96732d"
        },
        "item": {
          "id": "36f57b7a-d3b3-4d49-8a4b-a944f272be37",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2b9172dd-9190-4ce5-8ebb-84145fc80c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f57b7a-d3b3-4d49-8a4b-a944f272be37",
        "cursor": {
          "ref": "f9009a08-c690-4c44-86c0-e99a9f9efc52",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1dfffd92-0601-4f82-a36a-380d6a96732d"
        },
        "item": {
          "id": "36f57b7a-d3b3-4d49-8a4b-a944f272be37",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2b9172dd-9190-4ce5-8ebb-84145fc80c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b513e1e6-c8d3-4ed2-8828-750da3aaafdb",
        "cursor": {
          "ref": "c50482d1-3fad-4ffd-93e7-27f1d4d70807",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a712a413-bf47-4f5f-ab6f-e811e01870cf"
        },
        "item": {
          "id": "b513e1e6-c8d3-4ed2-8828-750da3aaafdb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f8124b8b-2db3-45e8-b255-ed5632acbdf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46103c90-d380-41cd-83a5-eba75291ae51",
        "cursor": {
          "ref": "78665115-8ff1-4452-b0ea-0f87e1f667eb",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1f8f6b3f-8e07-423d-a9ac-03dc5f9ce772"
        },
        "item": {
          "id": "46103c90-d380-41cd-83a5-eba75291ae51",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "39977d3b-e9b6-4061-b36d-af8ea55e205b",
          "status": "Created",
          "code": 201,
          "responseTime": 824,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "94b932dc-e0ea-476b-8c41-1cfc9b5d6329",
        "cursor": {
          "ref": "a692719d-a9bf-46f6-8782-d2b2dce627fd",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a26a7263-ba3c-4dd1-a449-0d36bd49978b"
        },
        "item": {
          "id": "94b932dc-e0ea-476b-8c41-1cfc9b5d6329",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "45b81cc1-75a9-469f-aea1-c72ac6a8f3b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "199d9dae-9836-40fa-b6d3-69c5027681a4",
        "cursor": {
          "ref": "c78b2e76-1be5-4a81-8336-429dc756f43c",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "92c6598d-1e2d-4afb-a40d-2d91fc2c8b69"
        },
        "item": {
          "id": "199d9dae-9836-40fa-b6d3-69c5027681a4",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ea74f411-0103-48ef-ae96-e3c5bc36af4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d196712-fb9c-45df-b382-35dbdc162ec2",
        "cursor": {
          "ref": "f1faa1fe-2259-4048-a4dd-58f9ce81cd00",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "79e22d2a-38db-410e-9a80-e8e82dcd292c"
        },
        "item": {
          "id": "9d196712-fb9c-45df-b382-35dbdc162ec2",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "453f496b-c162-485f-8b94-b1696461b5e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff2a8c1-06ac-4329-8597-ab8aeff14428",
        "cursor": {
          "ref": "cbed1f05-1199-4839-a9de-9d9836684370",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f04bd530-3f6d-4968-8e2e-151f07598054"
        },
        "item": {
          "id": "7ff2a8c1-06ac-4329-8597-ab8aeff14428",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0523d4ce-ec62-428e-ae0c-1bd87f8824a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1ca40a-0562-499b-9e9e-d9f8cd573154",
        "cursor": {
          "ref": "3b0e1174-7486-4d43-b28f-8ee8bb0d4856",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9c62fee6-e569-4bbc-879c-c431a7e51272"
        },
        "item": {
          "id": "1d1ca40a-0562-499b-9e9e-d9f8cd573154",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2aed8c34-536a-4475-a1cd-50e82fe4f672",
          "status": "Created",
          "code": 201,
          "responseTime": 410,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "310f3d20-8516-48a0-82d9-03b56fb2675f",
        "cursor": {
          "ref": "e509d9c8-fabc-4714-a4d5-aab3930dc813",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3d28c75c-15c7-4f84-83d4-e2af0d194163"
        },
        "item": {
          "id": "310f3d20-8516-48a0-82d9-03b56fb2675f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f57ec807-4e05-4818-a34c-06b99cd97e63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfee06ab-def8-4291-9ada-4d316ae5115b",
        "cursor": {
          "ref": "49b98c31-a974-4a95-8323-f6c81c832d1f",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7d72b256-f721-4b7a-bfc6-aa658f5dd817"
        },
        "item": {
          "id": "bfee06ab-def8-4291-9ada-4d316ae5115b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ec3cc5c2-0060-44b1-84f8-d34bfb14259d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98553d94-ce26-42f0-89b4-71a0ac1daf03",
        "cursor": {
          "ref": "14960058-dcdf-4634-8804-6da4fa5faf74",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5c36a48c-501b-4fd6-98bf-d3094b7efd9a"
        },
        "item": {
          "id": "98553d94-ce26-42f0-89b4-71a0ac1daf03",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "abd01a3b-7dc7-4f29-98c5-b076a8ae7091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6323deac-c032-4e83-b197-6746e8d5ce82",
        "cursor": {
          "ref": "7c3050a6-3ffa-47b6-bca9-f48af4d34497",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "12bf119a-8752-41d5-9fcd-f76cfd508539"
        },
        "item": {
          "id": "6323deac-c032-4e83-b197-6746e8d5ce82",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c024b377-468f-47e6-bc58-21d49f30e35b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb69dc3-a0ba-4ebf-9904-60a6d8822e7e",
        "cursor": {
          "ref": "761ac2ad-7e44-4f5e-a031-f30b177088de",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3068a8f6-e166-480f-9197-3f338059926f"
        },
        "item": {
          "id": "feb69dc3-a0ba-4ebf-9904-60a6d8822e7e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "22511ca5-99ae-464d-8bfe-407a3e56460e",
          "status": "Created",
          "code": 201,
          "responseTime": 442,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "1c7160ff-cfbe-4d1b-aa4b-aaf109d8cf88",
        "cursor": {
          "ref": "c8c1bf8c-570a-4501-be31-dba051c18efe",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1281ec6d-0eac-465b-81bc-e1c48b0df06d"
        },
        "item": {
          "id": "1c7160ff-cfbe-4d1b-aa4b-aaf109d8cf88",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6f336e13-1deb-4058-8c43-be387c3cbc0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "585b3d20-3604-497b-869e-20dbc3104b28",
        "cursor": {
          "ref": "87b0362c-8d09-4757-9cb7-a750d4c9f960",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "81d4100b-6807-4850-a542-19417337dd79"
        },
        "item": {
          "id": "585b3d20-3604-497b-869e-20dbc3104b28",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9cc5a92f-db77-47e7-84da-4278a2e15b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4669ed89-c7fc-449c-a360-c9a61d2cfa37",
        "cursor": {
          "ref": "91c05021-3dd7-4ada-a503-3366976e05ae",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1f4ed05e-e0ba-4318-a969-e21469dfc3f0"
        },
        "item": {
          "id": "4669ed89-c7fc-449c-a360-c9a61d2cfa37",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "76b79f22-8794-4ae0-9a71-496d9f92e973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8512604-78d1-4896-a9e1-9c33ae8793b9",
        "cursor": {
          "ref": "193d1d63-413a-4ee6-8616-b492c652e2b9",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6dfbd3b6-d5f4-4850-82f6-c1266df1de3b"
        },
        "item": {
          "id": "d8512604-78d1-4896-a9e1-9c33ae8793b9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "934463a6-8e17-4a08-adf8-545976e07249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d357b04f-e984-4ee4-9090-35be671b29e7",
        "cursor": {
          "ref": "56940b8d-dac9-4d0e-9b09-9f75083974d2",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7fdf608f-cf6a-49c6-bde5-44bf961f9692"
        },
        "item": {
          "id": "d357b04f-e984-4ee4-9090-35be671b29e7",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "23d95858-c016-42dc-8231-69e903862a81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a53715c8-c70c-4793-b936-78b78f4c2a19",
        "cursor": {
          "ref": "c01628e5-a28d-42b0-85ce-a8928a9d32d9",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1ac1724e-f3e2-4621-a051-b8cd59d1df1d"
        },
        "item": {
          "id": "a53715c8-c70c-4793-b936-78b78f4c2a19",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "30b540d9-0b13-4d47-9af8-0a657d0f1d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a49c74-8fef-43df-8f0f-7d0cc466161f",
        "cursor": {
          "ref": "451e7c56-a2c4-4bec-a1b2-e61882fbf951",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "04f1736b-cbea-47d1-bb97-9153e3f48f37"
        },
        "item": {
          "id": "e3a49c74-8fef-43df-8f0f-7d0cc466161f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "898a59bb-cf37-4a3b-991c-d9ea3aeb2a5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138a423c-9ac0-4df1-b771-361279828d32",
        "cursor": {
          "ref": "a0fac537-74c3-43c4-a35a-074bafe4aa44",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "47697f3d-633f-4324-9cfa-eb141726b495"
        },
        "item": {
          "id": "138a423c-9ac0-4df1-b771-361279828d32",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5869ec38-140b-4ec9-b458-83551d812ce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea82ab4-ae12-4740-b9ed-b88ab7438f00",
        "cursor": {
          "ref": "fe58d24a-606a-406e-9e77-8ba86af302c8",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e0f03bbc-4916-4f75-b7c5-05bda94629b3"
        },
        "item": {
          "id": "fea82ab4-ae12-4740-b9ed-b88ab7438f00",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "65734a62-df39-409c-b9e4-88d1647e4f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de55213e-d997-4151-9c85-a2c95c9cab77",
        "cursor": {
          "ref": "bb4f72ad-adaf-4fab-b217-a011b3183bd3",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a90d692b-4e23-484e-8a72-6ca4da69a3c8"
        },
        "item": {
          "id": "de55213e-d997-4151-9c85-a2c95c9cab77",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "1e0e0d57-e69b-49f5-99d6-df411af506af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df11153-0df1-4593-992b-1aa0937902da",
        "cursor": {
          "ref": "e627b892-5d78-4888-94e9-002e9a4629e5",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0ceebee5-f10b-4020-b7df-cccc4aff27fd"
        },
        "item": {
          "id": "2df11153-0df1-4593-992b-1aa0937902da",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5e67825b-1492-4544-bb09-3f9e8023b3e0",
          "status": "Created",
          "code": 201,
          "responseTime": 1175,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "e2a74566-f9fc-42a9-ae66-8234a6b4bbf4",
        "cursor": {
          "ref": "3601eb5c-50d2-4ee1-b513-fb2dbaa1d028",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4f1403e1-1502-45ba-981f-5b0bb07c8ce8"
        },
        "item": {
          "id": "e2a74566-f9fc-42a9-ae66-8234a6b4bbf4",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b2ac2550-b086-4c6f-89b8-2b3252285218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e08d05-f07a-43d5-94d0-98f5c3e05102",
        "cursor": {
          "ref": "c6362cee-b032-46d8-af5a-f7af57df09a7",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8a527cf0-54a8-44ed-a8b4-be5ccd7cc698"
        },
        "item": {
          "id": "85e08d05-f07a-43d5-94d0-98f5c3e05102",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "403fd1b2-3819-4d86-b255-7b088187ffae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26c4d2a-e048-47ec-8fa9-75782ebc51c5",
        "cursor": {
          "ref": "9ab64a0c-a344-4c4f-a6db-d53e4a7fb79a",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f85e1bf7-510a-4752-ae9f-a8805d7a33fb"
        },
        "item": {
          "id": "b26c4d2a-e048-47ec-8fa9-75782ebc51c5",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2087d601-378d-4bf6-b910-8790438f8e23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a496626-fb0a-4a21-914c-b7b9286c960e",
        "cursor": {
          "ref": "84433ce2-cc73-427f-ad14-c6a003788f69",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "86d4758c-dd2f-4f4a-9b43-ac7374a3eba5"
        },
        "item": {
          "id": "7a496626-fb0a-4a21-914c-b7b9286c960e",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "551b8ea6-bb2c-4ebd-b2bb-7fb4b148e3f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0031019f-4f75-4923-86a5-ad7b4bc8dd88",
        "cursor": {
          "ref": "37110703-a838-4350-9f92-c0eb1a65951d",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4d360417-d7ac-482f-98b8-2078c2ed9a81"
        },
        "item": {
          "id": "0031019f-4f75-4923-86a5-ad7b4bc8dd88",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1ba0016b-c826-44ab-a16c-46a3578ae7a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e11f8335-c773-4c4f-926c-cbbff89aa4a8",
        "cursor": {
          "ref": "e80b3b7b-37e5-4c54-836c-2f329ea13b3a",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2d990975-0035-4f6b-9fba-46373c497306"
        },
        "item": {
          "id": "e11f8335-c773-4c4f-926c-cbbff89aa4a8",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b1c3c4b2-087e-459f-889a-2b3068b47ce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "577a06ba-f31c-4d5d-a967-a785dc83f3ea",
        "cursor": {
          "ref": "b2e9d8a9-852f-4638-8777-04f765ce68e8",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4cdf57f4-7db5-43ce-b59a-1c1df57c9bca"
        },
        "item": {
          "id": "577a06ba-f31c-4d5d-a967-a785dc83f3ea",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "9b8dbb1b-6bb1-41fa-b809-73951727dd5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824f6153-1455-4115-a36a-a09d71cceb68",
        "cursor": {
          "ref": "1202932e-1e4a-45df-8a38-b837f4461c0b",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f84af437-00a3-48e1-92a0-7dd7147b99f0"
        },
        "item": {
          "id": "824f6153-1455-4115-a36a-a09d71cceb68",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "374dd358-25e0-4eb4-ad4d-600ee92bc3a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74654891-5c4d-418f-9936-724bd6507644",
        "cursor": {
          "ref": "7c2d3184-5bd7-4da9-8f99-d35f2747cd57",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4899924a-bcb3-41c4-ab76-0bb1a0924e22"
        },
        "item": {
          "id": "74654891-5c4d-418f-9936-724bd6507644",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "cfb80bf1-bf8c-419c-9183-db3821e30d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c329344c-d89d-417a-8fda-ab76e07e1511",
        "cursor": {
          "ref": "187c89de-61fe-4500-9145-23114264b2bb",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "061c30f9-2cc1-4415-b2c5-4949c7ae2629"
        },
        "item": {
          "id": "c329344c-d89d-417a-8fda-ab76e07e1511",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "5a3eec20-5094-44b5-bd5b-bcc7d34515ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94d8221-0215-4eb5-b6f0-db1d868e1e53",
        "cursor": {
          "ref": "273b13ce-8e9e-45cc-999f-df44be6bb3d0",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6073c962-7981-4a6a-96de-f9b4b59f820b"
        },
        "item": {
          "id": "f94d8221-0215-4eb5-b6f0-db1d868e1e53",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ebb62a3e-5886-463a-887d-6577cd6b2a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f18243-9e95-4207-9f3e-83a4a36dbdcb",
        "cursor": {
          "ref": "0af07950-d288-4fa0-be10-18b00fc4aa3e",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3cdb3d21-494f-4c6a-9a30-b386159149dd"
        },
        "item": {
          "id": "c7f18243-9e95-4207-9f3e-83a4a36dbdcb",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c63ea095-f192-4726-a147-31a00c2e32ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a355acd3-40e9-48b3-9bae-97ef5c7014d0",
        "cursor": {
          "ref": "38654f86-19f9-4340-95fb-3d20e9775f02",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a960cde5-ca9e-40ef-ae66-09b943143776"
        },
        "item": {
          "id": "a355acd3-40e9-48b3-9bae-97ef5c7014d0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7f31fd32-f496-470f-b8ce-0bb855308fd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 330,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "7bd2b6fc-700b-4c00-8423-02740f35aeba",
        "cursor": {
          "ref": "764bded1-1d44-41c9-aa3d-3ce9a26a746e",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "25088993-d6b2-493f-9f03-13c4d04e542a"
        },
        "item": {
          "id": "7bd2b6fc-700b-4c00-8423-02740f35aeba",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e52914b4-cb26-4e65-a78c-a5cff40fcfe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d23089-efa7-4416-af2e-edc609be594d",
        "cursor": {
          "ref": "322cd2f9-37a0-4acb-9631-3d042b5ecf41",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6c3b4831-588d-4bea-9782-020861231a33"
        },
        "item": {
          "id": "30d23089-efa7-4416-af2e-edc609be594d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "88e2abd5-74ee-4058-a96b-dfa346f50017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "638a9e87-ff91-4e61-8c5e-d0646beb0058",
        "cursor": {
          "ref": "ca0a3c52-5faf-4884-9adf-6f62f5dcafb3",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "01d73ef2-4d5b-4f3d-bd7d-10f93c5bb595"
        },
        "item": {
          "id": "638a9e87-ff91-4e61-8c5e-d0646beb0058",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "356555b5-6bba-4023-b6ce-f5f4cce6483b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d85b3d51-c3c1-42a1-8bba-f9f82cd45a25",
        "cursor": {
          "ref": "73071091-7aed-4a28-9e34-24a4227126f9",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a1a3587b-d850-443e-8116-8d6fcf361cde"
        },
        "item": {
          "id": "d85b3d51-c3c1-42a1-8bba-f9f82cd45a25",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7c15a464-38a7-4717-aaf1-701bcc1c2432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f0cc34-9db1-45f1-9e7e-380c35d45f2e",
        "cursor": {
          "ref": "a8a88b0f-ac19-4608-a30f-d5adfc806d18",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d95e7763-78ac-4e94-8b1d-30d02bfab8e2"
        },
        "item": {
          "id": "c7f0cc34-9db1-45f1-9e7e-380c35d45f2e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "774235e7-1478-4f52-9cdf-6588089dd16f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09403c51-8e5e-4a2b-b094-6aadb9114570",
        "cursor": {
          "ref": "09e54955-5505-4334-9970-2f8cdef1acac",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f0104b75-2893-4680-a1f8-3f0178f19773"
        },
        "item": {
          "id": "09403c51-8e5e-4a2b-b094-6aadb9114570",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "55d0c944-084e-4cac-85dc-4e275e9dfa8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d8f0f3-f9bc-4b33-8641-a6d9347ffb85",
        "cursor": {
          "ref": "90cf277f-cd5e-4236-8c4a-0a80cbf931d1",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "82905ed7-8452-4e6b-aadb-e6d36c8015c1"
        },
        "item": {
          "id": "59d8f0f3-f9bc-4b33-8641-a6d9347ffb85",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f0f31c39-fe9e-4981-bdc9-d3782cdec706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "e24aa6d5-e5b3-4d5d-b8af-dde589f4a8c2",
        "cursor": {
          "ref": "a8a054c7-a965-426e-9991-44b21fdcca2c",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "dfaa28ee-d6ad-4db4-b70c-f3794aa7af2f"
        },
        "item": {
          "id": "e24aa6d5-e5b3-4d5d-b8af-dde589f4a8c2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "96966d2b-2120-43cb-9c12-6cc81521ef16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "312e6f38-ec56-46d5-8ef7-f8ca80a87079",
        "cursor": {
          "ref": "a93e910e-551a-474c-85fd-231a62fcfbca",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6df91a72-d7c3-4a58-9b23-c56d65cdced9"
        },
        "item": {
          "id": "312e6f38-ec56-46d5-8ef7-f8ca80a87079",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "519a6ae6-048f-4b1c-a6ea-a7cb4854b0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac4a43d-e0e6-495f-bf4a-d927658dab51",
        "cursor": {
          "ref": "9873e107-a87f-4e32-b378-3facfed0a8ac",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7262ec45-0bc6-4ae3-8d6c-57cd72bed33d"
        },
        "item": {
          "id": "bac4a43d-e0e6-495f-bf4a-d927658dab51",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6c6930f5-73c9-4c8b-9111-8bcc7cbdc140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101d1007-7b4a-4a8d-858d-890aac32e448",
        "cursor": {
          "ref": "5491957e-b6c3-4748-9662-b54a7a5a8551",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "460a8667-61cf-4ced-9772-9a95e2082972"
        },
        "item": {
          "id": "101d1007-7b4a-4a8d-858d-890aac32e448",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "44f19a1e-9d6d-44b0-b099-a35fe4c6bba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a44aa13-f736-4d46-9a3e-8bea6d8c815a",
        "cursor": {
          "ref": "76bed1ab-9a79-4d40-a5a0-e7f6e81f3865",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ee632c47-866e-4c43-8357-270d88e8c361"
        },
        "item": {
          "id": "8a44aa13-f736-4d46-9a3e-8bea6d8c815a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "267a7eb0-b697-47e0-9d4b-ada7cd6e72a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f00df180-ff0d-440d-ab6b-4cb6a319ae14",
        "cursor": {
          "ref": "a0b3fe5c-2337-43e2-8b09-3394375d9721",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6b25a032-3b5c-4b56-af4e-e07ada2deebb"
        },
        "item": {
          "id": "f00df180-ff0d-440d-ab6b-4cb6a319ae14",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "070e6bed-1503-4dd6-91d9-ab122c6e163c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce34549-2601-4169-99a4-b602a842bf47",
        "cursor": {
          "ref": "26fe1839-64d0-408d-8fcf-c1b9e4502f19",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f2da6d4c-73f6-4292-a93b-1dfce58d7bfc"
        },
        "item": {
          "id": "fce34549-2601-4169-99a4-b602a842bf47",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3e616c77-d31a-4c8c-a58b-2061c614aba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58908e1d-4365-4855-b77c-5856237ab02f",
        "cursor": {
          "ref": "1c517fc1-af21-4832-97f3-c2c05a59ba8f",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2a832ae4-ab6a-450a-884f-a46bb0815323"
        },
        "item": {
          "id": "58908e1d-4365-4855-b77c-5856237ab02f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "82ed8674-e17e-4edb-87be-eb081f556f38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6812f202-d4cd-4b3e-912f-51c472541b13",
        "cursor": {
          "ref": "686e233e-8985-4fa3-8b24-2932870f404d",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "527648fc-5d29-4d03-bc69-9e0e652e3df5"
        },
        "item": {
          "id": "6812f202-d4cd-4b3e-912f-51c472541b13",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "366b46f9-595d-4ace-bd27-9276955e089f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea937a06-04be-498e-a301-8dc669937c8b",
        "cursor": {
          "ref": "524b61f1-8a2a-48e7-9d5f-e7f38d7e1d28",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "60567fb3-6aac-475b-bad1-5c86de916210"
        },
        "item": {
          "id": "ea937a06-04be-498e-a301-8dc669937c8b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9d7990b7-bcd5-4ff0-8ddd-c618d6f8d97e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b98b5e-4f9f-4bb7-a3dc-46cbf8bbe0f8",
        "cursor": {
          "ref": "ca844c38-3863-4eee-9895-a301f61a4da0",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0ef1bb58-701c-4408-b3c9-f960267f7160"
        },
        "item": {
          "id": "60b98b5e-4f9f-4bb7-a3dc-46cbf8bbe0f8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "84d75f7c-b2cf-43dc-90e2-1f934500c4c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba79381-e4d9-4aa2-a083-f8a57c8b5051",
        "cursor": {
          "ref": "b5126963-ef05-4ee0-871c-7fca26161265",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "72a53db2-1ade-4ee3-ab6b-7acd203cad71"
        },
        "item": {
          "id": "7ba79381-e4d9-4aa2-a083-f8a57c8b5051",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "373f11c3-5226-45d9-842c-e289e70d6e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455fe43b-a7d0-496b-b7b9-cbcdeb9458e0",
        "cursor": {
          "ref": "36e61eeb-7fba-4931-9a77-f8a2f97ed191",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "13beeb18-82a3-48ea-abf3-57404dd1e908"
        },
        "item": {
          "id": "455fe43b-a7d0-496b-b7b9-cbcdeb9458e0",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "acbca48e-35c6-4d67-8266-8a18d71b8487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50979d9d-c180-40b3-9aa0-d55878e66202",
        "cursor": {
          "ref": "7c81a945-fe35-4246-9398-89efad90c272",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c083a5e0-7563-4695-bd90-eed062d6fa05"
        },
        "item": {
          "id": "50979d9d-c180-40b3-9aa0-d55878e66202",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "352814fe-b0be-4939-b2f6-f537f9df6a31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8683f2b4-0fcc-463f-ba17-7d96663f8642",
        "cursor": {
          "ref": "bb9e07ba-638f-4ae1-9e0f-c4860b5eb3c1",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "34e5782c-1b50-4e7e-9383-e4d0542b8a13"
        },
        "item": {
          "id": "8683f2b4-0fcc-463f-ba17-7d96663f8642",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "a3b91b2e-5d40-4aeb-a7be-a81df7ab2cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af4533e-c422-4c6d-add1-dfed5dff4c3e",
        "cursor": {
          "ref": "72473d6b-29ed-4a92-8615-0f4da684a9a1",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "80f69994-3201-4d9f-aa2e-23c6cd7f5c28"
        },
        "item": {
          "id": "4af4533e-c422-4c6d-add1-dfed5dff4c3e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "771a8945-5e14-48bc-b807-660ac1f1d6b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffc5006c-e8bb-4f79-8d80-a9719f2cff07",
        "cursor": {
          "ref": "bce2e81b-fb3d-4f3b-abab-40b4a4287f10",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "994e8340-eab2-4c21-ad77-b0d57381d905"
        },
        "item": {
          "id": "ffc5006c-e8bb-4f79-8d80-a9719f2cff07",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "dc8a9de4-84b0-4d87-8608-4febb09e06bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a0661f8-f027-4910-942f-30e8e7670543",
        "cursor": {
          "ref": "96b31126-afd7-4d31-a299-166b0343e171",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0bde2eb0-c606-49d1-b724-5362151bbdc7"
        },
        "item": {
          "id": "3a0661f8-f027-4910-942f-30e8e7670543",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e0a87717-8387-4b38-b68c-f0f6fe5da823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec955d0-4473-4e3c-96f8-0a8e89f8cf8a",
        "cursor": {
          "ref": "2ce46faf-f661-4470-8bb3-02dfb0e4e613",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d6a0cd28-8a93-4eb0-a56b-b88786e0127d"
        },
        "item": {
          "id": "0ec955d0-4473-4e3c-96f8-0a8e89f8cf8a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a6a98f27-cfc0-41a2-8bef-4b496cad610c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03285e2b-a91a-4f4b-ae79-56ffac51e3aa",
        "cursor": {
          "ref": "77b5d050-a135-4878-91b3-76d80d12d0d9",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3f3d9c3d-8714-40f3-95be-f1ae7abab362"
        },
        "item": {
          "id": "03285e2b-a91a-4f4b-ae79-56ffac51e3aa",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "cdbbe595-be28-4d95-8899-c9379e455cd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7168475c-31ee-408b-9686-61a163b68e43",
        "cursor": {
          "ref": "163a5d71-caea-4a99-b9ba-0828eea28644",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a53f1b28-db26-400f-a95e-73cc6312329c"
        },
        "item": {
          "id": "7168475c-31ee-408b-9686-61a163b68e43",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3a5f3f53-298e-4bd6-95a9-368c598ce402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9aaaafa-3592-4205-bee5-a31e61579f67",
        "cursor": {
          "ref": "a33c7f66-4ff0-476b-9e3d-b7cd69790d0a",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "60d6a240-033a-49ed-aad0-a580d4aa8d59"
        },
        "item": {
          "id": "b9aaaafa-3592-4205-bee5-a31e61579f67",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f28a44f1-64e8-4d45-8b75-5984d6485b84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a004039-4022-4773-9c5d-7ee75b99285f",
        "cursor": {
          "ref": "0ea2a2cf-fb8c-4abb-abff-f7e3aba7e791",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a5da7fe3-b0bc-4777-b884-2ffdfb9c10c8"
        },
        "item": {
          "id": "8a004039-4022-4773-9c5d-7ee75b99285f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "04a800c6-0629-4997-80b7-b7cdf3002448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f88b70a-d7a4-44e3-9946-2b976437005d",
        "cursor": {
          "ref": "15a5e455-243c-4abb-99b7-de2a23a0e9aa",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "72aa3ba1-a2f5-4cc0-ac94-3876f0da0433"
        },
        "item": {
          "id": "1f88b70a-d7a4-44e3-9946-2b976437005d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "86e9b200-b0f3-41a9-ba93-e2baf1b4c65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e7f5f9e-9ea1-457a-b475-7b46b46634cc",
        "cursor": {
          "ref": "6aca4c74-9708-4918-8b5d-5c73fa0df1b8",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "43914a95-2d77-4753-be9f-3aeaf7011bb3"
        },
        "item": {
          "id": "3e7f5f9e-9ea1-457a-b475-7b46b46634cc",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "75a85598-ea61-493a-95dc-6d04dea48e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd5ed126-24aa-4c0e-8620-dc9a4b004f88",
        "cursor": {
          "ref": "56d74279-cc96-4d75-b127-f4ae11933c47",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "90618586-0c50-458c-989e-3e598a323434"
        },
        "item": {
          "id": "bd5ed126-24aa-4c0e-8620-dc9a4b004f88",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a579184c-c6f1-4343-8e3b-ead92a986d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3b8559e-d502-4bd8-a845-139cc5d1f96d",
        "cursor": {
          "ref": "a3411cdb-9c7d-4bd3-a914-feaf8a2c061e",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "32ce1752-8d5e-41f6-aa60-6c5516bf0b96"
        },
        "item": {
          "id": "f3b8559e-d502-4bd8-a845-139cc5d1f96d",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a846ae22-8a7f-47bb-9c0f-d0c42b8e31dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "653247ac-3ac3-4c7c-bcea-e6c8471d3ff4",
        "cursor": {
          "ref": "efc1b497-fbf5-43aa-8374-1bd65c6f4452",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d2980eff-7865-42b6-a154-db6162621c23"
        },
        "item": {
          "id": "653247ac-3ac3-4c7c-bcea-e6c8471d3ff4",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "cdf4287c-9f5e-4789-969f-d51ea0291dd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "411d3b5f-ecc2-4aeb-b6bb-3c8c9fe8827b",
        "cursor": {
          "ref": "afaf1a5b-d3bc-41ed-b783-751b4020764f",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "94397d3b-471f-4612-8337-7027e7b99e1f"
        },
        "item": {
          "id": "411d3b5f-ecc2-4aeb-b6bb-3c8c9fe8827b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a54aed07-eee1-4859-87c1-30c825941a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb1ab28-fa81-4b39-8aaa-1081bd8ab1a4",
        "cursor": {
          "ref": "3e253f48-c25e-4533-9678-b498c43105eb",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "63bbf9c4-6787-4949-90c5-ef279963a697"
        },
        "item": {
          "id": "9cb1ab28-fa81-4b39-8aaa-1081bd8ab1a4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "333096fc-d00d-4001-9e08-86ad8de52f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e87095-b3c7-4d91-a640-327abbdc12bd",
        "cursor": {
          "ref": "22df8edf-97a2-48f4-b7e2-c13d321e759a",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "dd7c4381-9a3d-467c-ae9d-3344bc692b75"
        },
        "item": {
          "id": "35e87095-b3c7-4d91-a640-327abbdc12bd",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3f039ddc-2151-48f6-a279-0b0a18436bbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 382,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a400792-c65f-4a00-ad37-d10fdd2f6a0e",
        "cursor": {
          "ref": "4b5d1d44-77ba-4472-85fb-e2633f5850f7",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2e1d6721-0f4c-45f0-8ecf-7a5d17d60c49"
        },
        "item": {
          "id": "7a400792-c65f-4a00-ad37-d10fdd2f6a0e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "945d460d-f772-4028-bcda-fbb9c2d22963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4da6e4-c4d2-4d87-9ce0-dabfcb4ecec1",
        "cursor": {
          "ref": "2c360f61-fa87-4d93-a9fe-ab12e960d090",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "517f70a8-2002-4ae2-91be-9a779d061de6"
        },
        "item": {
          "id": "5e4da6e4-c4d2-4d87-9ce0-dabfcb4ecec1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "dd0f2d39-fb38-4b3d-bf14-0d6f1719a1a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a986da7f-3ccf-42dc-9a10-59cf0edec04b",
        "cursor": {
          "ref": "4c27b51b-274d-408a-8ea6-68dcc724b57c",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9a49d127-5197-4722-b2a0-12cbdf210e6e"
        },
        "item": {
          "id": "a986da7f-3ccf-42dc-9a10-59cf0edec04b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "151b388c-366c-493a-acb0-27fc07e28cff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99ed653-ab45-4b06-968d-0290a9733ec5",
        "cursor": {
          "ref": "cdba62aa-a279-4d75-8313-ec8f8a6e0ab5",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "20e4fd2b-c460-4f96-b0de-db7637c0510e"
        },
        "item": {
          "id": "f99ed653-ab45-4b06-968d-0290a9733ec5",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "cfddef54-99dd-4a78-bbd9-41889cb4a93d",
          "status": "Created",
          "code": 201,
          "responseTime": 552,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "275620b3-6bd4-4522-9ec9-b922869848ae",
        "cursor": {
          "ref": "c656a9c0-424b-437e-9eec-89387359346b",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "eb2a6583-87ac-4318-9bf2-8e55167c6a7f"
        },
        "item": {
          "id": "275620b3-6bd4-4522-9ec9-b922869848ae",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d8d68711-3986-48ec-a056-3fbe8af7b981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ae17ab-6bd1-4313-9cc2-f47662059023",
        "cursor": {
          "ref": "6865936a-332a-46d8-bfc8-ef70f91b7177",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "cc20d768-89dd-4446-ab5d-94d2c0e7d18e"
        },
        "item": {
          "id": "94ae17ab-6bd1-4313-9cc2-f47662059023",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e40ec8c5-f554-4b99-8ebb-dbb1592af5df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e37ded5-16ea-49ca-be81-cfdac668c0ff",
        "cursor": {
          "ref": "1fc5c1f0-3d19-468a-82e7-159c5bfa6b8b",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c468e6d4-53ce-492b-8dcc-7ee8f7855e6c"
        },
        "item": {
          "id": "4e37ded5-16ea-49ca-be81-cfdac668c0ff",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2d49f538-fa9c-4b06-9129-25cccb6e3dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04de01f3-93aa-4365-b3d4-602e731113a1",
        "cursor": {
          "ref": "26223b15-d198-491f-889b-8dbd9a9b0e32",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "574c6839-d67f-4f6d-8cbc-211b6b39c687"
        },
        "item": {
          "id": "04de01f3-93aa-4365-b3d4-602e731113a1",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b3d765d2-8e53-472a-951f-9ef95aa5856b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2028dc5-70d5-4ee1-8043-eb143a8280ef",
        "cursor": {
          "ref": "6c1518d9-334f-4fb2-836f-acd70380daf5",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "605d7d23-52fb-44fa-80e5-fb8502425453"
        },
        "item": {
          "id": "d2028dc5-70d5-4ee1-8043-eb143a8280ef",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "83e210c8-3f80-4a35-aa09-fa9554b509c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f0338c0-7504-4135-948d-85eb058fc3d7",
        "cursor": {
          "ref": "9ebf4084-58aa-425b-a500-efda8fbcd989",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ce83c94f-1ae7-49fb-8af1-8d2987de0a44"
        },
        "item": {
          "id": "8f0338c0-7504-4135-948d-85eb058fc3d7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d42e6e50-56a6-4db2-a692-72bc6aa9163e",
          "status": "Created",
          "code": 201,
          "responseTime": 569,
          "responseSize": 671
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "eab7beb6-a970-4f3e-b83b-23bcf32973df",
        "cursor": {
          "ref": "828a61fd-a5ab-4d23-abdc-01e9f89407a2",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "99aad338-c43d-46bf-93f2-d6ac169f6ccd"
        },
        "item": {
          "id": "eab7beb6-a970-4f3e-b83b-23bcf32973df",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "aaba6e72-da9b-4571-9100-c2559c559a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6a7261-ec92-4784-b871-1da589881564",
        "cursor": {
          "ref": "447e2712-9f51-40c1-9947-044608541163",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "cc3df358-be65-4cd7-9265-6fb054ec1435"
        },
        "item": {
          "id": "cc6a7261-ec92-4784-b871-1da589881564",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6584788b-a39f-4c07-b678-746a48a7dd40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204513c0-b333-48bd-bef3-310c2f74b097",
        "cursor": {
          "ref": "ae5b2e11-9412-4cec-a688-71096ad24106",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "87b8fe60-65f3-4490-9301-bb7ab3853076"
        },
        "item": {
          "id": "204513c0-b333-48bd-bef3-310c2f74b097",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "6bc8998b-f7bb-463a-a00d-abb067d7fda9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af318e67-f4c7-4c2d-868e-bd60d6efb2fb",
        "cursor": {
          "ref": "0090e71d-869a-4e56-9e01-00b8436a6c58",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "854fcf44-9c32-4b14-aa67-1de10348f2e1"
        },
        "item": {
          "id": "af318e67-f4c7-4c2d-868e-bd60d6efb2fb",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "448f09bc-8830-4164-a4b1-fc3c0fb6707e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67c270e0-bf70-4325-b84b-91659c510508",
        "cursor": {
          "ref": "97a46f4d-4960-4100-9ac7-536a55fa556e",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4a628349-983c-4084-9770-9939fcc4c5f9"
        },
        "item": {
          "id": "67c270e0-bf70-4325-b84b-91659c510508",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ec4c3588-43b4-4e89-a1ed-31e9756ee118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1852f09-d07a-4b31-9b21-dd7bca688901",
        "cursor": {
          "ref": "00b057c9-e61d-4f9f-8cf2-b1765819f252",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6a098162-a123-4065-bbcd-8c954cf80da7"
        },
        "item": {
          "id": "f1852f09-d07a-4b31-9b21-dd7bca688901",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6e332076-f01a-43a3-9d4c-8559d3ff782b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c84cfe-01c1-43c0-8618-13557895bc95",
        "cursor": {
          "ref": "0ae6b41e-1b46-4a04-8cd4-9e39b0b27e52",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "df3a215e-0e32-41f2-aabd-bef825259cec"
        },
        "item": {
          "id": "82c84cfe-01c1-43c0-8618-13557895bc95",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "34bef102-7d99-401f-9840-4c41dd761c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd34df2-be96-44eb-8da8-eb80b4908bc5",
        "cursor": {
          "ref": "f678d4bc-3f71-4879-965d-1c5dbc387c58",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1d36a460-3aba-4b3b-b00e-ff1223c38571"
        },
        "item": {
          "id": "bcd34df2-be96-44eb-8da8-eb80b4908bc5",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "4a9a3d0e-45ec-41d4-8fa2-665e4e308b3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23316fe-8465-4f86-8ed9-49bdbc7716fd",
        "cursor": {
          "ref": "923e9cbb-ac25-4d75-b160-a48f5c4ff124",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8a7f5c2c-6451-4621-bebf-7a356d62cd1b"
        },
        "item": {
          "id": "b23316fe-8465-4f86-8ed9-49bdbc7716fd",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6595c033-dbb2-4f30-8351-9409eba20844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "afc59fee-9719-4e3e-907e-6f5e1328cef2",
        "cursor": {
          "ref": "ab1381ef-386b-457f-a18c-cab779bd5c91",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "55b3f436-4612-4363-ba87-5ddb32394d60"
        },
        "item": {
          "id": "afc59fee-9719-4e3e-907e-6f5e1328cef2",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "3fbaac01-70ea-4526-a341-5c59a36d1a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "b6114f7b-82ef-4853-a2d9-f96f0e5618b0",
        "cursor": {
          "ref": "950624ee-05a3-4f63-803f-0cecb4cc8083",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b644ea2e-f8cc-4fb3-903d-c4dfb50533bf"
        },
        "item": {
          "id": "b6114f7b-82ef-4853-a2d9-f96f0e5618b0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "171af70b-3640-4576-bb63-15fb355c0f9c",
          "status": "Created",
          "code": 201,
          "responseTime": 542,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d371dd7-80f2-4852-a39f-6a89d788c92f",
        "cursor": {
          "ref": "3080d9a7-574b-468b-9e60-d92902c5310f",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "616a5657-ea9a-4672-95a7-4b83a8ff5956"
        },
        "item": {
          "id": "7d371dd7-80f2-4852-a39f-6a89d788c92f",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "d5ba949f-5040-4ec6-b4cd-2f17c9f67b91",
          "status": "Created",
          "code": 201,
          "responseTime": 557,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d68a30e-1ba6-48f8-b396-6e8480bec570",
        "cursor": {
          "ref": "c82f14bc-7007-4d0c-a4f3-609552420203",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "df7d73b0-d148-48d6-8bb9-5730676b0bc7"
        },
        "item": {
          "id": "2d68a30e-1ba6-48f8-b396-6e8480bec570",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4dcedc4b-5471-4849-936f-132897f2c1f1",
          "status": "Created",
          "code": 201,
          "responseTime": 520,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b73821f-c7ce-493d-89cd-4680300000eb",
        "cursor": {
          "ref": "96af1efb-2e00-4000-83c5-6c7a8a05046f",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "d3d53512-c0a3-468d-94fe-b7cd268b21f1"
        },
        "item": {
          "id": "2b73821f-c7ce-493d-89cd-4680300000eb",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4c578b5c-74d9-4c23-bb6f-878e7383b68a",
          "status": "Created",
          "code": 201,
          "responseTime": 512,
          "responseSize": 694
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c017513-cc08-4e7e-ae02-66851d57297f",
        "cursor": {
          "ref": "60a37d1c-e9c5-453e-8957-4ee99776493c",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f5d63b97-dcfb-41e9-886f-eb01e136b390"
        },
        "item": {
          "id": "0c017513-cc08-4e7e-ae02-66851d57297f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "21b5e4bd-8027-4ddd-9e54-48b1957343af",
          "status": "Created",
          "code": 201,
          "responseTime": 602,
          "responseSize": 662
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd1bcee-5709-4901-aa2c-ff5df373a20e",
        "cursor": {
          "ref": "8bf66e54-a250-41c6-8566-aff58273a922",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "38a1e919-1c20-4da1-a8ac-8b686222b3a3"
        },
        "item": {
          "id": "cdd1bcee-5709-4901-aa2c-ff5df373a20e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f0bfac5b-1cd6-4c5a-92bc-915f4588f9fb",
          "status": "Created",
          "code": 201,
          "responseTime": 534,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f49a95d-697e-4263-9761-0ba9b51063a7",
        "cursor": {
          "ref": "df32a759-cc9f-4b2c-a36d-dc1f39a0abe3",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "fec8ddc5-c47f-49d8-ac33-1cd3e1a295a0"
        },
        "item": {
          "id": "7f49a95d-697e-4263-9761-0ba9b51063a7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1941c2a4-9f44-487d-b6a2-f8bbc5651aa3",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "7f49a95d-697e-4263-9761-0ba9b51063a7",
        "cursor": {
          "ref": "df32a759-cc9f-4b2c-a36d-dc1f39a0abe3",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "fec8ddc5-c47f-49d8-ac33-1cd3e1a295a0"
        },
        "item": {
          "id": "7f49a95d-697e-4263-9761-0ba9b51063a7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1941c2a4-9f44-487d-b6a2-f8bbc5651aa3",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "560605d3-aad3-426d-8924-67a18f9307fb",
        "cursor": {
          "ref": "847ecd05-4960-4429-99b7-f04a38670ef0",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "bc22a2a8-dfd1-4be3-beab-4b1017fcad6d"
        },
        "item": {
          "id": "560605d3-aad3-426d-8924-67a18f9307fb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "91a578de-99f8-40f2-a4b6-8c2776287598",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "3780b2f4-014c-4ac7-9b8a-f73d3e680da0",
        "cursor": {
          "ref": "7cf8ba2e-4ea5-4fe0-a4d8-3bd7dd557862",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "534ed1ac-ee97-436a-9868-4e3fc8a61483"
        },
        "item": {
          "id": "3780b2f4-014c-4ac7-9b8a-f73d3e680da0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "dd3f07e2-b1fe-4f79-bffa-57ba007b8a16",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "71b93197-1647-45fc-8784-56d4b4c12c9a",
        "cursor": {
          "ref": "03867052-4bf2-4b4b-8e97-377a84732a40",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "52f683fe-c6b2-46d4-bf51-446c86e1e763"
        },
        "item": {
          "id": "71b93197-1647-45fc-8784-56d4b4c12c9a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3bd5398a-6ae3-4cb8-89b6-879d7d842335",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "ec7d2493-f996-4ada-a643-fc4ba00ed0dd",
        "cursor": {
          "ref": "5953dbc1-7dca-448a-b9a2-376a863e0df7",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "642a9d14-06cb-45ad-b7d4-626270e7aaf7"
        },
        "item": {
          "id": "ec7d2493-f996-4ada-a643-fc4ba00ed0dd",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8c9cd1fe-b813-44f6-9356-ccaf5a14f004",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "1a4d75bb-80eb-4962-9071-7f24a8b54971",
        "cursor": {
          "ref": "54b28f82-7530-4d7e-8ad8-3da77420213b",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0372d582-7869-4454-9425-d6ab791806db"
        },
        "item": {
          "id": "1a4d75bb-80eb-4962-9071-7f24a8b54971",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "48733982-37b8-4c9c-bc94-890ab3b77f9c",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "bc762422-cf40-49c5-b9cf-d9992a89220b",
        "cursor": {
          "ref": "67ce27fa-cff2-4d86-9039-c78bfb7a6335",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7128d988-83ad-4355-af66-04c225976d02"
        },
        "item": {
          "id": "bc762422-cf40-49c5-b9cf-d9992a89220b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e03a009d-856d-4cc1-b6e7-f44586969e34",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "172c32ee-542e-480c-b5da-b7836ba42381",
        "cursor": {
          "ref": "ac18591e-5e3c-4783-a46e-51f95c7f3497",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "64488673-1387-4903-b769-4a12c038dd67"
        },
        "item": {
          "id": "172c32ee-542e-480c-b5da-b7836ba42381",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "24e10243-e159-48eb-a6b7-c28006a902db",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "9ccb8d3a-3276-4514-86f2-d1d4d4c6be45",
        "cursor": {
          "ref": "41f8de6e-42fe-406c-938a-f8bc669ac2a6",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9a713123-c3ea-4e3b-9b43-6efd9758d587"
        },
        "item": {
          "id": "9ccb8d3a-3276-4514-86f2-d1d4d4c6be45",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9537e859-3cf3-4906-8e14-caea4ddd3a2b",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "ff6bffbc-b82a-43be-bfa3-ab26b07edcaa",
        "cursor": {
          "ref": "c5f5b0a6-88e6-4eb7-bbd8-340799750502",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ce5b9f1d-e8ee-4f0d-921b-91a112cd6403"
        },
        "item": {
          "id": "ff6bffbc-b82a-43be-bfa3-ab26b07edcaa",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7d301cbe-a054-4bf1-bb96-a5fe4be1dd0d",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "e9238dd6-e4bc-4fe4-8de4-4ef997ef3f91",
        "cursor": {
          "ref": "fcd8e630-ef15-4fa9-89f9-d07e285810e7",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a3619827-da52-43bd-9b80-af7d4f42982d"
        },
        "item": {
          "id": "e9238dd6-e4bc-4fe4-8de4-4ef997ef3f91",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "babe0708-19b5-4c26-b45e-eac05ca424a9",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "f7c43e58-b235-4c15-9754-7a04a2c7b702",
        "cursor": {
          "ref": "099f923f-29aa-48cb-84ee-3183900037f5",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a6da8122-bc7e-47a1-9a86-15d5b7308ca1"
        },
        "item": {
          "id": "f7c43e58-b235-4c15-9754-7a04a2c7b702",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "43c4da21-ed09-4f87-95f1-616860187276",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "a626dd95-ca35-4346-a1b2-dde3314d63dd",
        "cursor": {
          "ref": "b2e41cc6-8e6b-4c04-8573-473651459916",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "70d39480-eaca-4e5c-9ae3-173e82364463"
        },
        "item": {
          "id": "a626dd95-ca35-4346-a1b2-dde3314d63dd",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c641c529-8947-4a6b-9ca2-3fa5ec7eb880",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "a427feb5-f6a1-4019-8345-d6f82aebb327",
        "cursor": {
          "ref": "a4b495f6-d9ef-41f9-8628-661fa80433e6",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "78cc114a-c052-483e-82d1-8c7c89ed5d79"
        },
        "item": {
          "id": "a427feb5-f6a1-4019-8345-d6f82aebb327",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1d767222-bf9b-40cb-a4a1-a8bc1eff7132",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "596dd468-10b5-452f-a36d-7788006d97a7",
        "cursor": {
          "ref": "5b17d6f7-1c18-4764-92db-3d8522f093a8",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c61915a6-832a-431c-8c5a-2c9ac58ab741"
        },
        "item": {
          "id": "596dd468-10b5-452f-a36d-7788006d97a7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "08f99f24-195a-44bf-9af1-6fd5e7c543ce",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "df44dfd8-9ad7-403d-a12e-17a3d7689904",
        "cursor": {
          "ref": "811fd221-b96f-47bc-b4a0-7a4242997362",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b525d993-ca3b-41d7-83fc-9b9a13a214da"
        },
        "item": {
          "id": "df44dfd8-9ad7-403d-a12e-17a3d7689904",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b767dcc6-d014-42c6-9df3-ced3965e1640",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "1ed85a9c-154a-493d-9f01-511c6e8f692d",
        "cursor": {
          "ref": "51c2b90b-1a08-4f41-b635-9a6ddedc9aba",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "bb2c92ce-4822-48a4-9916-afc476c28e64"
        },
        "item": {
          "id": "1ed85a9c-154a-493d-9f01-511c6e8f692d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1e8b0e68-5ffd-47d7-92ce-50b53c3fdd5d",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "bd63beaf-3b26-40fe-9b0a-e0f2233a8dde",
        "cursor": {
          "ref": "2c1b0f0c-5ca8-42aa-9558-228228f3504d",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "478d67d2-5a34-4a38-8f07-9c30196e65b9"
        },
        "item": {
          "id": "bd63beaf-3b26-40fe-9b0a-e0f2233a8dde",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a47a1757-bc68-4793-b22c-2b24434983ae",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "63f64f03-6398-44c1-90cb-15dbe8f9482f",
        "cursor": {
          "ref": "39c2875c-a85f-4ff5-9b63-ec16c57153eb",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "425530e2-77ce-40f5-8be8-a88ceae93916"
        },
        "item": {
          "id": "63f64f03-6398-44c1-90cb-15dbe8f9482f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "913b27f8-f9b6-42b0-9086-ca23e9b9119e",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "1a735a74-1cfa-4fac-a8e4-2f4e86f309b9",
        "cursor": {
          "ref": "b7dd72a1-d085-4d2e-9723-72fbc63cf350",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "9506d680-41a0-4c92-a764-0bda59d3b5de"
        },
        "item": {
          "id": "1a735a74-1cfa-4fac-a8e4-2f4e86f309b9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f27263d9-b5b4-479d-b469-aa072c9405ba",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "afc36306-8946-414b-92b3-222de07f8056",
        "cursor": {
          "ref": "a6a5bdf5-89d4-44df-9289-d444aa773f2e",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d9079811-4c22-435c-ba61-306cd227acd8"
        },
        "item": {
          "id": "afc36306-8946-414b-92b3-222de07f8056",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "13112a97-33d8-493f-8737-db5a19221785",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "39e97720-27e8-46e6-8748-b525050385e8",
        "cursor": {
          "ref": "44e079f6-afb8-4861-93c9-b29530d48c25",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "92550fa7-60b3-4b9d-b059-108dd8c9ad1c"
        },
        "item": {
          "id": "39e97720-27e8-46e6-8748-b525050385e8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8076d6fa-3a1b-4712-a59b-36e064fa0604",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "7915223b-26c4-4dae-94c5-8804ce5ce7a1",
        "cursor": {
          "ref": "258145eb-9111-435c-93ff-aa824a7a6982",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a3846001-21d1-465c-bd1d-2cf549d86ece"
        },
        "item": {
          "id": "7915223b-26c4-4dae-94c5-8804ce5ce7a1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ba1f4219-7fa7-4d22-834f-4b2d5eba726c",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "d28d2a24-b80f-4155-9e4c-b6574d6a0322",
        "cursor": {
          "ref": "b5a34c11-bbca-4f65-b0d4-9857245a8e65",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "019b9f89-2c09-4926-8781-71ada7fc960a"
        },
        "item": {
          "id": "d28d2a24-b80f-4155-9e4c-b6574d6a0322",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2f8277ae-c48a-4d3b-9a66-c7c54b5d59bf",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "8d4bbfd9-5d81-44fb-8b10-e5d95c3e7a09",
        "cursor": {
          "ref": "6cba69b4-4cae-40a1-b54b-b93450bac471",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f00ef721-6321-4ebd-b89f-a4631ced3b43"
        },
        "item": {
          "id": "8d4bbfd9-5d81-44fb-8b10-e5d95c3e7a09",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "85dee60c-3cac-4877-987c-239b1b61232b",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "45c4a07d-1a0a-40bd-91ac-6ecaf72928b6",
        "cursor": {
          "ref": "3b872979-f085-4233-8283-03d81a263514",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e4868dc8-a611-40a8-a911-73c2986f3462"
        },
        "item": {
          "id": "45c4a07d-1a0a-40bd-91ac-6ecaf72928b6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2f53d08d-e2eb-4e9c-91af-e56255aac024",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "7ebaa212-faf0-41d6-9907-0a96d38eee67",
        "cursor": {
          "ref": "5acc48da-c537-4cd6-8397-ccb355cb6ca0",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "4fb8f173-caf9-43a7-8424-9454df8eb2d8"
        },
        "item": {
          "id": "7ebaa212-faf0-41d6-9907-0a96d38eee67",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "95aa2b68-c87e-4e92-84bc-62b89ababf22",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "82072db2-1181-4f5e-af53-a23b0943bd41",
        "cursor": {
          "ref": "4ec877ce-b1aa-4c99-9974-22d2671e2303",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b0a58cdd-4b60-4808-b3bd-7f4df869320e"
        },
        "item": {
          "id": "82072db2-1181-4f5e-af53-a23b0943bd41",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b883bf2b-0643-4f36-98f3-89dd62b5c300",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "11fe560e-989d-406f-b292-afb6e48a6481",
        "cursor": {
          "ref": "b41aadc6-57a9-4e6c-a0cf-14fd1970b9df",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "221bf9ba-5983-4346-a32d-7756979a4196"
        },
        "item": {
          "id": "11fe560e-989d-406f-b292-afb6e48a6481",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ec76d60e-a9d6-4fa7-a1c9-5561fe731a6b",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "11ee2cee-3af4-4910-9162-1a5565e2a553",
        "cursor": {
          "ref": "bc9b6213-05b7-4b0c-bb4c-ea34c1af910c",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "786359c9-1a3e-4df7-b7bc-70675267cac0"
        },
        "item": {
          "id": "11ee2cee-3af4-4910-9162-1a5565e2a553",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "be14f633-dbfa-4dc4-9064-974de58fe528",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "8b767b7d-0b04-4351-a0df-ba0858d0e18e",
        "cursor": {
          "ref": "800eb658-d89f-426f-8b1c-c9a8df985cd1",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "db2ebe98-eb84-4d6c-a653-fa190c228a47"
        },
        "item": {
          "id": "8b767b7d-0b04-4351-a0df-ba0858d0e18e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9f82a9af-205a-4b2b-a997-0be93f721241",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "1cef91bd-f8d7-455c-bd18-ddb30d21abe4",
        "cursor": {
          "ref": "06921604-1fbe-41c8-aff7-a1b804b9fecb",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d9cf0e77-9f90-4d71-9ea4-7f33e0f28383"
        },
        "item": {
          "id": "1cef91bd-f8d7-455c-bd18-ddb30d21abe4",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "44ceb616-ce50-4f84-a9c4-4f01ba313760",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "45ae1771-ad5c-40f1-b592-92bf5c513c99",
        "cursor": {
          "ref": "78d35b08-fd23-4c93-aba7-64356f1e769b",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "864da42b-385f-4431-871c-fd0360f29522"
        },
        "item": {
          "id": "45ae1771-ad5c-40f1-b592-92bf5c513c99",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "26cfe691-ee10-4e09-b729-2f4733443092",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c497f6d-652f-4847-b8b0-8c4d00517dfb",
        "cursor": {
          "ref": "f5c668ff-e318-44ee-81e6-d60306004da5",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "39e47897-21b5-47dc-8311-0b186ccf46bf"
        },
        "item": {
          "id": "9c497f6d-652f-4847-b8b0-8c4d00517dfb",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "221143c7-25ce-4f52-975e-a4e401a0a3fd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ce2d2eb-fa83-40dc-8081-02b682bf92e0",
        "cursor": {
          "ref": "cf8a20ed-57a4-4318-90b0-3099f3eade4f",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5d7710cf-fa69-487d-984a-ac3ad418efc4"
        },
        "item": {
          "id": "0ce2d2eb-fa83-40dc-8081-02b682bf92e0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "552e4aa6-5e6f-432a-87c9-9cd35120aa70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ce2d2eb-fa83-40dc-8081-02b682bf92e0",
        "cursor": {
          "ref": "cf8a20ed-57a4-4318-90b0-3099f3eade4f",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5d7710cf-fa69-487d-984a-ac3ad418efc4"
        },
        "item": {
          "id": "0ce2d2eb-fa83-40dc-8081-02b682bf92e0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "552e4aa6-5e6f-432a-87c9-9cd35120aa70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a22c44-206f-459d-b1f6-86327b4c6a31",
        "cursor": {
          "ref": "102f945b-b075-4212-ba97-78ca23a8b0b8",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ce5d4222-92b9-4849-a122-60b03f92786e"
        },
        "item": {
          "id": "66a22c44-206f-459d-b1f6-86327b4c6a31",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7126a9f8-5646-40cd-a081-b2bfa50054de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce217d37-3d26-483a-9f56-9119c35b80d0",
        "cursor": {
          "ref": "faa2b945-f9d7-4f57-b0e6-496839b6cf5d",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "20ced2bb-2757-4645-b9a2-b36a12f044c0"
        },
        "item": {
          "id": "ce217d37-3d26-483a-9f56-9119c35b80d0",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "08b69e09-dacd-4799-9b28-31f9ea480fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e08bdd7-6574-4464-8c92-ea2b87dbcf0a",
        "cursor": {
          "ref": "9517fc8b-2f89-4299-9a10-f467527917c6",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b82fd1eb-f943-4a89-8e8b-d9a05b174b0c"
        },
        "item": {
          "id": "9e08bdd7-6574-4464-8c92-ea2b87dbcf0a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0cbf9ccf-c65f-4d2a-bbb4-14a9e9e44ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f6916d-d47d-492a-9dfa-4efeda0a87db",
        "cursor": {
          "ref": "91091107-b971-4a6f-b163-4399463bf494",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6de65c8a-ce49-4824-94e5-1970c8ae6ad0"
        },
        "item": {
          "id": "f0f6916d-d47d-492a-9dfa-4efeda0a87db",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8ec5760c-0edd-4c0a-b4fd-9745294bcc45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95be7839-e084-422a-b5f3-3abb89a8bd4f",
        "cursor": {
          "ref": "b6c2a122-ac44-4efe-8b74-cf942f38a787",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ff8fce81-087a-4cf0-8076-079d0ff1cb22"
        },
        "item": {
          "id": "95be7839-e084-422a-b5f3-3abb89a8bd4f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b9cb2ebb-d653-4d1c-ba18-1622494a1e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c470042-6781-4888-a2ba-a23ae3f179b6",
        "cursor": {
          "ref": "6960614b-8910-4ebb-9c1e-8d7aae538672",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8287a468-4384-404a-acea-5f71a89c73fc"
        },
        "item": {
          "id": "3c470042-6781-4888-a2ba-a23ae3f179b6",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "26f3f50a-a83b-4979-acef-6b9fc84b5901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e409839e-e145-48c3-b9a9-de491be27aa5",
        "cursor": {
          "ref": "8d2a5c8a-ee2c-476d-bd83-5ab0362d12e9",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d4b756ca-8b23-4eba-9089-1787a7083050"
        },
        "item": {
          "id": "e409839e-e145-48c3-b9a9-de491be27aa5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0d1b6d34-282e-40ee-8f81-ee538c0676a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4598bd35-c11e-4afc-aad2-534d6b193fb3",
        "cursor": {
          "ref": "18d236cd-ceb1-4185-af8a-e70529298af1",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "edb15da5-9220-4a14-886c-149e6b81142d"
        },
        "item": {
          "id": "4598bd35-c11e-4afc-aad2-534d6b193fb3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "bc820409-32e7-4e54-b183-c9e21e103b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00e4ae2e-e23e-4f6e-b341-dd8221047279",
        "cursor": {
          "ref": "55460eee-fbde-45a6-8856-68985ee64bef",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "718751a9-d930-4943-978c-289c39618c37"
        },
        "item": {
          "id": "00e4ae2e-e23e-4f6e-b341-dd8221047279",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b0f207f8-b9ae-432f-a9f1-b71a6b2a4f35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "411207cb-70e7-4d44-a7d1-362fd1f2c951",
        "cursor": {
          "ref": "03a27476-5a5e-40f5-a3fc-b47ffca48b28",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "46af6221-330b-427c-a767-2c84ddcd1022"
        },
        "item": {
          "id": "411207cb-70e7-4d44-a7d1-362fd1f2c951",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "cd4900f3-8afa-422b-80fe-e9b5d2293142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c989bc90-6617-4185-bcf7-6915c72b90fd",
        "cursor": {
          "ref": "b96f23ca-3aea-4599-b488-6cf506f23f6c",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a46db5d6-d89c-4727-a2ac-47622ab7f2f5"
        },
        "item": {
          "id": "c989bc90-6617-4185-bcf7-6915c72b90fd",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "68118900-a358-49d7-81b6-1968ecdd555a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28aa089a-6cee-4e0a-b3e1-c39188736507",
        "cursor": {
          "ref": "565e9cc4-6796-4f14-b5de-41a96218a7d1",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "97af8752-d9cc-48f8-8c72-681562ab910c"
        },
        "item": {
          "id": "28aa089a-6cee-4e0a-b3e1-c39188736507",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "23b76a6f-0ebc-4d52-b996-ecacdd093a26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0262766-b2b1-4984-b52d-00f42b08287b",
        "cursor": {
          "ref": "c096677e-c535-44bf-8e45-f41e9fb6be39",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c6d4038b-43f6-4ca6-bd04-34bf8a44a8b5"
        },
        "item": {
          "id": "f0262766-b2b1-4984-b52d-00f42b08287b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "4282ef7c-a518-441d-bea3-b997d24577fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ccb654-7b6f-4420-851f-78a16393ed3c",
        "cursor": {
          "ref": "9c9777b2-6722-474b-8d34-e72f5ba64761",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "021106a5-ae3a-40e5-9da1-1912bde68028"
        },
        "item": {
          "id": "23ccb654-7b6f-4420-851f-78a16393ed3c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fd70c429-58ae-4e17-804a-d4e9dce2b337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3611c38-1430-4e85-9b6a-c3a3dc8903e9",
        "cursor": {
          "ref": "35d4b231-7d76-46b7-9fe3-240703551755",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8acaa1de-7d84-4fee-b07e-edc928dbbb18"
        },
        "item": {
          "id": "c3611c38-1430-4e85-9b6a-c3a3dc8903e9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2269034f-8692-4e1d-98cd-d74886ce2ce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc8e7443-728c-40c9-b081-6aeb5aa35e4d",
        "cursor": {
          "ref": "79ffbbf3-da7a-45cb-b2a6-e86188b65190",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a129287f-35b3-4b2f-82d3-73065f322208"
        },
        "item": {
          "id": "fc8e7443-728c-40c9-b081-6aeb5aa35e4d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cd9745a9-5a72-48aa-9fa7-b5772f383eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f421bd3b-948f-4c8c-90cd-4914d2a7bb90",
        "cursor": {
          "ref": "d8f370c4-0678-401f-ad75-ee9ef442ed42",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4dce6aed-3051-4dc0-b86e-5123a65e8eeb"
        },
        "item": {
          "id": "f421bd3b-948f-4c8c-90cd-4914d2a7bb90",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3632c0f3-682f-4242-9672-e02f816412e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3421dd62-4eb1-4552-a2e5-d9f1b81014b1",
        "cursor": {
          "ref": "31af3258-2eb7-4099-991f-dfac121fce84",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "236f4eed-1ce8-489a-95f6-ec9518b68e25"
        },
        "item": {
          "id": "3421dd62-4eb1-4552-a2e5-d9f1b81014b1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6d0ca05f-9011-446e-af24-8ae9798169c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac178617-220b-42d2-ad32-7a592d5e7a99",
        "cursor": {
          "ref": "929d5bec-1b76-4f3a-8c64-84036d50d8d1",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "edc66ffe-767a-4176-914d-a2c449e698ad"
        },
        "item": {
          "id": "ac178617-220b-42d2-ad32-7a592d5e7a99",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f2ee01a7-497c-4a51-97b2-02ba0a75146e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a4ca8d-a8fe-4f31-b0fd-7ded68e2af2d",
        "cursor": {
          "ref": "cb7f1cab-38fe-4f98-acbd-1558629e0b52",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8a6f6456-e4c9-4c93-bf69-3c4abb6fead9"
        },
        "item": {
          "id": "b5a4ca8d-a8fe-4f31-b0fd-7ded68e2af2d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "09c04218-bdcf-450e-a1d1-3c92b8cefa84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bf9ecdf-1f2e-4975-bbca-591900f64a81",
        "cursor": {
          "ref": "09c806ba-c47e-4536-b58b-ea3734ca10f2",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "8cea185d-552a-4956-aa24-4b403cfcf697"
        },
        "item": {
          "id": "0bf9ecdf-1f2e-4975-bbca-591900f64a81",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e44f7afb-f1ae-45b8-ab07-e6a7a353684f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4b7b0b-c673-420e-85cc-7aa448874181",
        "cursor": {
          "ref": "52d78846-2c9b-493e-a641-3f5ef4dec64d",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "9ff9987b-c7cf-453a-9604-1c26d1f2b5fc"
        },
        "item": {
          "id": "6d4b7b0b-c673-420e-85cc-7aa448874181",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "2da3902c-8878-4447-b3c0-a5b79ec8d837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb267db-deae-43fe-a032-35c55f089e72",
        "cursor": {
          "ref": "6cab0259-5ee5-42f9-bf45-d84a3c5d25ab",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4e54b4a4-973e-499d-9a5c-83f8e06a92f4"
        },
        "item": {
          "id": "6eb267db-deae-43fe-a032-35c55f089e72",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "573f4d23-48ad-47e6-acfc-a0c96b7b50df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dacc9000-c0d8-4a8d-a3f2-33d43ac7ecc6",
        "cursor": {
          "ref": "9cbfe28f-a9e6-4736-9e5f-b5667ac6a7fc",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4f295bdb-f0af-4e77-a8b0-8f7bdf143dcf"
        },
        "item": {
          "id": "dacc9000-c0d8-4a8d-a3f2-33d43ac7ecc6",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "49361711-4a67-42f2-a07c-baf433b6b12f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5cd6e46-b6a4-4440-8e50-9de89930c6ee",
        "cursor": {
          "ref": "c2d89d02-0f78-4be0-bb9b-b27d0cc7be49",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "688a243a-09ac-4a89-b04c-2e6916d06a90"
        },
        "item": {
          "id": "c5cd6e46-b6a4-4440-8e50-9de89930c6ee",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "62dd9e75-c1e0-43bf-8c4f-1a1f2c1ee27e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2675d469-41cf-4215-a4ff-608f1ec02243",
        "cursor": {
          "ref": "98dc1b2d-35f7-4033-8e4c-5ab0f28d4173",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0bbf6c52-cda9-43c2-bd49-04d3dfc856dc"
        },
        "item": {
          "id": "2675d469-41cf-4215-a4ff-608f1ec02243",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ee4e7693-9a8b-44a1-bc07-58bc9112ee94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abef4d44-9b68-4db3-9e34-7839d1d81411",
        "cursor": {
          "ref": "0d833093-5289-4cda-8932-196523e79f49",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b1efdbb9-84b4-4a29-b24e-a50425ac88b6"
        },
        "item": {
          "id": "abef4d44-9b68-4db3-9e34-7839d1d81411",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6dc703fe-9d41-4569-96a5-c2c0a9014d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "151fda77-e7eb-4629-81de-8109a5782e6e",
        "cursor": {
          "ref": "835dd609-764b-4913-beea-ec55a418d60e",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e0c229eb-35ce-463a-a561-7de8607ef73d"
        },
        "item": {
          "id": "151fda77-e7eb-4629-81de-8109a5782e6e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0b1900c5-21cc-4979-848f-059394845bf6",
          "status": "OK",
          "code": 200,
          "responseTime": 186,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "71191b44-ae72-48e1-a277-b224a52bd218",
        "cursor": {
          "ref": "331722a6-c1bf-43b4-af23-7d214610ff72",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a52acb22-6aa2-47bc-99cd-6e06d4351957"
        },
        "item": {
          "id": "71191b44-ae72-48e1-a277-b224a52bd218",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "da5312fa-a087-42c9-8eb8-e543928bee9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bbba0ca-e86a-4016-a02b-79ee5ee1656b",
        "cursor": {
          "ref": "7b6da560-091a-44de-8ab7-cf18b50c9f8c",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7c498016-7844-4e80-baf1-589f0561bd95"
        },
        "item": {
          "id": "6bbba0ca-e86a-4016-a02b-79ee5ee1656b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c5bafc2a-480c-4243-9e60-aaa458286101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0724b4ae-79e4-4613-8d8c-58f17955753d",
        "cursor": {
          "ref": "ae5e91d2-6fc5-477e-a1e6-f8190e4e707c",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e169d285-e011-4a2e-bb1f-19ed861f5913"
        },
        "item": {
          "id": "0724b4ae-79e4-4613-8d8c-58f17955753d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "73710af8-1196-4ae8-9954-8c25fe7d3552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d2defd1-e986-4cfd-aa14-3ca6e7de29dc",
        "cursor": {
          "ref": "ba0cc8b9-cb45-483a-9322-945f2d667616",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "222dccd4-669a-43e8-8fa0-b102807cd243"
        },
        "item": {
          "id": "1d2defd1-e986-4cfd-aa14-3ca6e7de29dc",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d4c0f0b1-5bc9-47b3-a9ed-ea57803b91fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c79fdd-c3b1-45ec-bd31-2fdb1c7af7b4",
        "cursor": {
          "ref": "feeeafdf-ff67-4f8a-9a16-a1d5d8f7941d",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5b41c977-93b9-4aba-80d0-edce4a3ddbb2"
        },
        "item": {
          "id": "05c79fdd-c3b1-45ec-bd31-2fdb1c7af7b4",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "10522a72-fa9e-4b99-bf18-c99146761e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef483d7-f85a-442a-8728-249def5bef5a",
        "cursor": {
          "ref": "e4e66a8f-ad21-4181-9c9b-671674245496",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "cbb1609b-ebe8-4e8b-861d-f87a9b5cb34e"
        },
        "item": {
          "id": "4ef483d7-f85a-442a-8728-249def5bef5a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9c8dae74-aaa3-4a12-afaf-e1228c497357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2bfa0c2-2ab2-460c-b1af-1e0963aa3279",
        "cursor": {
          "ref": "fe07adbd-f485-46d4-b597-55d473746fde",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f89eb151-2e72-4899-b8d1-5d26750326c9"
        },
        "item": {
          "id": "d2bfa0c2-2ab2-460c-b1af-1e0963aa3279",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e38e4759-e66e-441b-865d-34610d243027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebaccf28-0f4a-4589-9604-01497ea31832",
        "cursor": {
          "ref": "9dec6382-3a30-465d-acc1-57bc7c82d409",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f0e16bf9-080f-43d9-b366-ae9d004188aa"
        },
        "item": {
          "id": "ebaccf28-0f4a-4589-9604-01497ea31832",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0ad86401-1a20-40e9-84aa-5162a10668e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bec484b-e9bf-4fd9-88f6-1ad73e2d5ec9",
        "cursor": {
          "ref": "a1388ef5-06da-4003-ae61-14dd5c81b119",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "17397187-79f0-4c64-ae25-bc838c228f20"
        },
        "item": {
          "id": "4bec484b-e9bf-4fd9-88f6-1ad73e2d5ec9",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0470260d-34c0-419e-8373-cbfc003900e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "157b1f47-4ecd-43aa-969d-58daf8f35cca",
        "cursor": {
          "ref": "e643ce6b-326f-4060-bc1f-a4ca9c18e5bc",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "387b7cc6-94f8-4861-8b37-6dba9befbbe9"
        },
        "item": {
          "id": "157b1f47-4ecd-43aa-969d-58daf8f35cca",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d7d6cfae-9ec7-47d1-bf9e-8fc09c7ec54c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79dfbaca-9a84-476d-9145-c110ff40f7b2",
        "cursor": {
          "ref": "195024e9-fa9b-43c2-81e6-53c679fcf10b",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "deb33ea0-b0da-48a4-a148-cc68555a91e1"
        },
        "item": {
          "id": "79dfbaca-9a84-476d-9145-c110ff40f7b2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "dcf43865-5a01-4304-b064-29d489a5adbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 484,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d7f147-089d-4eec-97aa-b247bbdd8ffc",
        "cursor": {
          "ref": "627a3853-4594-4b88-9d89-679bbece18be",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "373fefcc-9d96-4059-ad93-4c395d327690"
        },
        "item": {
          "id": "06d7f147-089d-4eec-97aa-b247bbdd8ffc",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d259ce7d-4419-440e-a65d-fe3900776f25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 256,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6049f535-a65d-42b4-8ae5-0fec648e74bb",
        "cursor": {
          "ref": "8cbfda7d-370a-4d8f-9630-052923fde28f",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c5676f03-4c0d-4fdb-9cfa-6866639b8fa6"
        },
        "item": {
          "id": "6049f535-a65d-42b4-8ae5-0fec648e74bb",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1e4f496e-3452-4459-9c5d-c679a00638b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 258,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7837bf-29a3-4cf4-a043-3fd8c16f2a23",
        "cursor": {
          "ref": "e96cafdc-c9db-4101-872b-76cb4fe89076",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "575e4b48-a020-491e-b9bd-a0a383b8d989"
        },
        "item": {
          "id": "7d7837bf-29a3-4cf4-a043-3fd8c16f2a23",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "871404ae-cebe-480c-b9d4-4dcfc2a24b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fafc023-e94c-412b-92ac-27f57e0756c2",
        "cursor": {
          "ref": "3fd38d73-8c1e-4e99-a221-9b9f5f977160",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "af704d17-7e2e-4d0b-9b13-338c3c692833"
        },
        "item": {
          "id": "1fafc023-e94c-412b-92ac-27f57e0756c2",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "53dac54a-d0a9-49ab-b577-1baa349047e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d672ae-9891-4b07-b5f1-877e34d6319b",
        "cursor": {
          "ref": "e27a532c-a690-436f-a96a-c41125eada91",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ec9be46b-47d0-4031-900b-4cc2e90df029"
        },
        "item": {
          "id": "60d672ae-9891-4b07-b5f1-877e34d6319b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "22e8563b-eec4-49a9-8eae-805d0d48d679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 254,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd774b5-00a3-4beb-af26-28944e10d5ef",
        "cursor": {
          "ref": "ac661ea0-e542-4180-ab4a-53f9ce3a41b3",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ad81e729-8aec-4ba0-bacd-c0b38d8cc145"
        },
        "item": {
          "id": "3dd774b5-00a3-4beb-af26-28944e10d5ef",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1499ee43-54c4-485f-8075-3158f36bde33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c58dd3-83de-495b-8229-edadd2cb19ef",
        "cursor": {
          "ref": "392d2e10-e04e-48f4-8fdf-64c14de324dc",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5e3480bf-5c91-4e75-a7c5-94823ba0188e"
        },
        "item": {
          "id": "12c58dd3-83de-495b-8229-edadd2cb19ef",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "51408edd-3dd0-4673-9f5a-4e40062fa797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 284,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85297beb-f324-4e4a-a780-e7d636852ce7",
        "cursor": {
          "ref": "4f6936e4-db06-4cc7-830a-d9d5925613bc",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d4d71996-f099-4c54-a1c8-13bf161a8a9f"
        },
        "item": {
          "id": "85297beb-f324-4e4a-a780-e7d636852ce7",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "aa320e84-21b1-47a5-8c29-1588a7f30ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21076b6-563b-4842-ad81-e0afb6240ccc",
        "cursor": {
          "ref": "6e87059e-38b9-4104-9f58-c2d92bb7dbfa",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "38e8abf8-e617-4bbe-aab4-5640380dc5ef"
        },
        "item": {
          "id": "c21076b6-563b-4842-ad81-e0afb6240ccc",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "51b9a7dc-35d5-441e-aa31-0605f3ab56b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f53cb6f-1811-4d98-949e-53b278d2bf8b",
        "cursor": {
          "ref": "133deae4-5249-4fac-9157-de8fbd52faf3",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "56a9a10b-4c46-49c7-87fb-d70ea51992c7"
        },
        "item": {
          "id": "4f53cb6f-1811-4d98-949e-53b278d2bf8b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d818feac-0f51-4d2d-828f-6ecfc072ccdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc0d833-27af-4dfd-bafd-cc257aa66bb0",
        "cursor": {
          "ref": "661b44f9-db89-4121-bb35-1ce983a386f2",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "20638996-1840-4d69-9f40-32c4a59b27df"
        },
        "item": {
          "id": "cbc0d833-27af-4dfd-bafd-cc257aa66bb0",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "94f22e4f-287f-45c9-8769-fd935090707b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d475f1-5902-43b0-b055-7d134b87444c",
        "cursor": {
          "ref": "00d6ea38-ab23-4f28-9bba-b394c5e3e7b1",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3094d647-b228-4f61-8f0c-12b606fb045c"
        },
        "item": {
          "id": "07d475f1-5902-43b0-b055-7d134b87444c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "db2ab5aa-6514-40c0-b521-456e6634e5ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b31342c1-b11d-4951-b94e-85af876ab333",
        "cursor": {
          "ref": "59bb8102-499a-48cc-9c89-d052a44a275c",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "250175e5-3626-4161-a446-2450bb928ecc"
        },
        "item": {
          "id": "b31342c1-b11d-4951-b94e-85af876ab333",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d656899a-18e4-40d8-a19b-994a35ea7d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d5c9814-815a-4cc8-b829-b035886aafb2",
        "cursor": {
          "ref": "9a80ed1f-0b8d-4ea8-83b9-b635cc17ef66",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "72f5e787-d404-4a0e-bc2a-b9e2d0b9cffc"
        },
        "item": {
          "id": "6d5c9814-815a-4cc8-b829-b035886aafb2",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4ef1a751-e723-4073-8f9d-e07f96c7466a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39833834-8d6f-449c-aecd-3c065c3c5e7a",
        "cursor": {
          "ref": "4f423c3b-5854-4cd0-907c-8af62161faed",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b9b9a613-e727-460c-a0df-fa531a89c2bf"
        },
        "item": {
          "id": "39833834-8d6f-449c-aecd-3c065c3c5e7a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "3c2bcc08-365c-456a-9018-ab314b264641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e12afb-6cf3-4dc1-84d9-f00d95fb8c59",
        "cursor": {
          "ref": "79b5c9df-d36d-4437-952c-203297785516",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "89729d54-93ee-4793-ab7b-dd66368a75e9"
        },
        "item": {
          "id": "45e12afb-6cf3-4dc1-84d9-f00d95fb8c59",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ca2e732b-4783-4546-8d24-8ccaf638fec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81d562e-b0cd-45c1-b90b-cba6d108d95a",
        "cursor": {
          "ref": "1020bddf-ccef-410f-a910-c1b0dd696490",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e41f655d-3ced-48eb-85e1-318198adcf5e"
        },
        "item": {
          "id": "a81d562e-b0cd-45c1-b90b-cba6d108d95a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "83b029af-3100-438b-aa3f-116cf0c1036b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "844b3b8f-3937-4cc3-baba-cd23b31670ba",
        "cursor": {
          "ref": "a2d8a175-0960-4466-a228-cbd0a4ff0621",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7fab3863-9336-49fa-acd4-92961baf5d2a"
        },
        "item": {
          "id": "844b3b8f-3937-4cc3-baba-cd23b31670ba",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "47e8758c-4f02-4b61-843e-561ba6f032c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe32d09d-d4d4-4048-9751-94d267e15cba",
        "cursor": {
          "ref": "5c1010dd-8b7d-404e-bbfd-1a6dd44ea1bb",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8a1250d8-2309-4d91-8aa7-69da3b8cc3d6"
        },
        "item": {
          "id": "fe32d09d-d4d4-4048-9751-94d267e15cba",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "fd01e2d9-5f91-4370-a8b4-88c374512fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a62966e-0951-4442-9ebb-cc8f45bb8d78",
        "cursor": {
          "ref": "78652763-1cfd-40d9-973b-eae5015cb4c5",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ffbde788-2208-47a7-87be-882f4b4ee014"
        },
        "item": {
          "id": "7a62966e-0951-4442-9ebb-cc8f45bb8d78",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "366468a3-1b2f-4577-b1d2-bff39f44fa9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "240fc53d-c660-46b9-b59b-b993da065759",
        "cursor": {
          "ref": "62b26006-e3b1-4188-91ef-3a2e1ce2d157",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ae28e26f-c46d-4ce7-9b24-7091216169ba"
        },
        "item": {
          "id": "240fc53d-c660-46b9-b59b-b993da065759",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "92a90ee8-9987-43e7-a2f1-9f0acad7566c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383b7291-f6f9-4d67-883c-7aa7d784950a",
        "cursor": {
          "ref": "8644af47-3630-45a1-a1d4-48ccb3b27e71",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b71f46a0-f2df-4e62-bdd4-2bfda11711b6"
        },
        "item": {
          "id": "383b7291-f6f9-4d67-883c-7aa7d784950a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ef5c1503-1961-477e-9510-e178a84ff6fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 288,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78fe94be-5567-403d-9958-62eac99ca6e7",
        "cursor": {
          "ref": "85fdad50-c452-45bb-82f0-c9291c4afe2e",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e64fb3c4-a68c-4c08-a1dc-c013f494a066"
        },
        "item": {
          "id": "78fe94be-5567-403d-9958-62eac99ca6e7",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f161e636-093f-4261-9b9c-1e69e780a8cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce775e3-395a-44bd-ba18-e7410ef696a3",
        "cursor": {
          "ref": "7b17e429-20d2-45b9-85b4-56e814066774",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3e6e8773-196d-4199-b212-3dcfb8a4a14c"
        },
        "item": {
          "id": "1ce775e3-395a-44bd-ba18-e7410ef696a3",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8f23350f-fe49-4975-b1df-a1b56ed4dd3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5f42c63-5159-4fae-a3c4-8ca3b249b4a2",
        "cursor": {
          "ref": "70b63ddc-e8a1-48b0-8e9e-462c4f57e4a3",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "12567aa5-5ca2-46ef-98fe-8919ec1e52ee"
        },
        "item": {
          "id": "a5f42c63-5159-4fae-a3c4-8ca3b249b4a2",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "97557b6b-7823-4a2e-9e92-6a416cdf25b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36771302-1fc5-4d4d-a13d-afa9df1d63e0",
        "cursor": {
          "ref": "d16241b2-46af-41ed-83c6-0baa1d24dc37",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "65fdbd70-159c-4b99-bb00-7f8b5e9882aa"
        },
        "item": {
          "id": "36771302-1fc5-4d4d-a13d-afa9df1d63e0",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6d15a2dd-b1cd-4a24-b50f-b444449493a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f05261e-30c1-4711-a175-45f0dc7fe378",
        "cursor": {
          "ref": "1b05c6dd-fb7b-4b4b-9417-ff4a0e94ff88",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0c7dd5ea-cb10-4dab-b6e1-57cdd410f742"
        },
        "item": {
          "id": "1f05261e-30c1-4711-a175-45f0dc7fe378",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4ad3687b-41c6-4b2a-8808-6f07efccd5eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f920f3cf-9165-4ca9-a693-f1a02ce7c5a6",
        "cursor": {
          "ref": "b7552092-204d-4ecf-aa16-bd15bc9c9fdb",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a26de8e9-571d-49ad-80f9-d7454752702e"
        },
        "item": {
          "id": "f920f3cf-9165-4ca9-a693-f1a02ce7c5a6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "da6bfd85-554b-4c35-bea1-7e7a897137de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01433f4b-ec6a-4308-8bc5-d4bd55d1f94b",
        "cursor": {
          "ref": "1ba0bc46-add2-449e-9afb-a472869318e1",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "894ecee3-8ad6-4959-956f-2f1a3b43c143"
        },
        "item": {
          "id": "01433f4b-ec6a-4308-8bc5-d4bd55d1f94b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "18791665-4ffe-4dc8-b4ff-767100e31928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13a923fa-aec0-4182-8a11-49516659749e",
        "cursor": {
          "ref": "d2e11063-2455-4b3e-b3b7-5d3133aa5cf7",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "0e18d5fa-bd4b-404e-857f-671594aaade9"
        },
        "item": {
          "id": "13a923fa-aec0-4182-8a11-49516659749e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3e071af6-0c9a-4488-8277-a1eaad42d612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c9753a2-5e0f-4041-a79d-b475d2e9dfaa",
        "cursor": {
          "ref": "41b2c27d-6c5d-4502-a23d-1a7525e2d61b",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ccb322e7-feac-4e5a-bc52-65ec1908c4cb"
        },
        "item": {
          "id": "5c9753a2-5e0f-4041-a79d-b475d2e9dfaa",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7a085caa-ac54-4a10-bd01-8735dc19283c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40040fc8-ae28-4b59-a2f7-1f2bc71ee02a",
        "cursor": {
          "ref": "ba8fbf7a-b7df-45db-a217-2968fee88c4b",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0cc9f4ca-2296-4dda-9450-3fd804c7df95"
        },
        "item": {
          "id": "40040fc8-ae28-4b59-a2f7-1f2bc71ee02a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c1cf57d9-52fb-4a2a-ba05-1ff4b1a8f1c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c5854d4-bf98-434d-abdb-ff68e173dbe3",
        "cursor": {
          "ref": "42ac0c86-f4ab-4ec0-af38-b6b129a85357",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4ec51f11-5932-4aeb-8b3a-eeda05121403"
        },
        "item": {
          "id": "5c5854d4-bf98-434d-abdb-ff68e173dbe3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "08a280d6-423d-4c16-bd98-0e92662c70f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51efc17d-8925-4f87-acd8-10dd3530ccf0",
        "cursor": {
          "ref": "b308ede6-e1b5-4bb3-b254-b34fd0ed9510",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "18fe13f4-b245-46dc-a56d-f8e8c2f03437"
        },
        "item": {
          "id": "51efc17d-8925-4f87-acd8-10dd3530ccf0",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "eb6bda07-92c2-4658-9bbd-49ce7355180e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3bd812-7d06-4be0-b6a8-ac378119406a",
        "cursor": {
          "ref": "bf1b8b85-6856-4f3c-8f14-f9afca2b8a20",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "abe3687a-4866-4560-98fd-5b30abfc82c2"
        },
        "item": {
          "id": "cc3bd812-7d06-4be0-b6a8-ac378119406a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "11aea906-3437-4963-996d-0d0525774318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f3b9e12-a121-47db-959e-c670c0f5a211",
        "cursor": {
          "ref": "bb15ff2b-a6a8-4495-bd00-c627e8088064",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8da77a67-8307-4c76-b201-a45d8b3f3331"
        },
        "item": {
          "id": "8f3b9e12-a121-47db-959e-c670c0f5a211",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "47a58cda-caaa-4f9d-ae70-a52649cfb99a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee278c5-5533-49bc-ae94-ffec54f551d3",
        "cursor": {
          "ref": "68fa2780-c9d3-40e9-8b3b-3b6fb1fcb3ca",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "64a3f0bf-124e-49c9-b33f-bb0acc39903d"
        },
        "item": {
          "id": "aee278c5-5533-49bc-ae94-ffec54f551d3",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "63ce8142-ce82-4935-b6ca-1d2f0d146b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337e495d-51c0-4122-a834-47474fc804a3",
        "cursor": {
          "ref": "2ed1edb4-5a88-49a3-a630-4b1d6140922e",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4069125c-648f-41fb-9360-8471ea910e61"
        },
        "item": {
          "id": "337e495d-51c0-4122-a834-47474fc804a3",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "dc96f619-f1b0-485c-80b8-6b031e658a60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3edb77c-7277-4506-87ed-ce8789ac77e3",
        "cursor": {
          "ref": "753302c5-6034-4835-8217-fbdba1e3c90b",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c324393a-34c3-40da-b780-41577eedb4f1"
        },
        "item": {
          "id": "c3edb77c-7277-4506-87ed-ce8789ac77e3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "bce268be-fde0-4ff7-a731-3617ca3f0e3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd7ef42-c7a2-4247-886a-2e84d2043f17",
        "cursor": {
          "ref": "8606f0b0-9958-401d-9c7e-4e9aee5fddeb",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "13a20035-b19a-48b3-a2a3-3dbcb1e858bb"
        },
        "item": {
          "id": "6fd7ef42-c7a2-4247-886a-2e84d2043f17",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9d479858-2603-41cb-8e30-ad855c7abf0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d0861e-2619-4fe3-9ae7-a5c8f44f2301",
        "cursor": {
          "ref": "6f5c8d73-d6d0-4160-adfc-a52867315b20",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "01723e7d-8995-4c78-978d-165b8023f329"
        },
        "item": {
          "id": "f8d0861e-2619-4fe3-9ae7-a5c8f44f2301",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a9ddd1e0-537a-444d-9dba-7b660c5269ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ee1ace-1036-4520-99d2-37f273b7af62",
        "cursor": {
          "ref": "502db775-7607-41f4-b260-35ed96b0a282",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e6d68139-7584-4a8b-9768-5cdede140b2d"
        },
        "item": {
          "id": "f6ee1ace-1036-4520-99d2-37f273b7af62",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "645a92c3-821b-4052-8761-c271e8de82a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3024dbfd-abe5-43aa-9b6b-0deb1d759f3a",
        "cursor": {
          "ref": "52545e11-a8b1-4d9e-bf57-703c2185d893",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d03c6c1a-b812-4abb-bc52-946766cf1da2"
        },
        "item": {
          "id": "3024dbfd-abe5-43aa-9b6b-0deb1d759f3a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d11e1dcf-0fb3-4513-9a8f-efa4f9c76343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "150520c7-feb2-4c27-8d2e-76b757b0d6fe",
        "cursor": {
          "ref": "a4d9ceba-b72f-44dd-8bee-d8be90e87894",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "73250a2e-e057-4772-ab0b-6ed5a110ec16"
        },
        "item": {
          "id": "150520c7-feb2-4c27-8d2e-76b757b0d6fe",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "56feb7bc-3614-4117-9d32-e9d9578e1df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0649450-fede-453b-8492-b1a6b56aaafe",
        "cursor": {
          "ref": "72bb5ff8-d019-4009-a565-f14dbe554a25",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1adac282-43c1-4b56-bd3a-b2b370bc52d5"
        },
        "item": {
          "id": "f0649450-fede-453b-8492-b1a6b56aaafe",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "52adeec4-2fc0-4b58-886f-e11a1d478096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee6956f-90d6-438d-907b-d6996bfc8a64",
        "cursor": {
          "ref": "2f02c235-ae9e-42a5-b465-44e89c58e544",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4a9a756c-114f-4548-ae81-0655cd3b26b5"
        },
        "item": {
          "id": "8ee6956f-90d6-438d-907b-d6996bfc8a64",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "81c0dbdd-be14-4d35-9e55-7ce23c889c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "478184ef-5cd0-47ba-ae24-047a08ed132e",
        "cursor": {
          "ref": "835929b3-5e35-4af7-818d-3cdb25a6ea4e",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f1ef6f89-f35e-4a88-863b-d854a2473176"
        },
        "item": {
          "id": "478184ef-5cd0-47ba-ae24-047a08ed132e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5607dc83-6fb1-4713-b7d1-a237634c8513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3b86f0-0272-4bca-bf9d-e58e4df34e33",
        "cursor": {
          "ref": "ac3bf068-2020-4651-870c-8a5288ed541e",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8e812236-68c2-4524-8a13-ae12f613d0df"
        },
        "item": {
          "id": "dc3b86f0-0272-4bca-bf9d-e58e4df34e33",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "53d697a5-6a42-49ef-a0fa-74f594a981ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e688232d-4f1c-4f30-ab59-d7e9c69df65b",
        "cursor": {
          "ref": "7df54ead-c8e5-4558-810b-9a4bdffe2656",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "24458e20-a1f6-4ee8-974c-30069369b542"
        },
        "item": {
          "id": "e688232d-4f1c-4f30-ab59-d7e9c69df65b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "04cc1a32-ed2f-4922-84b3-719b37e6bbb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c98701-c3e7-44fb-aaaa-b07540dc1574",
        "cursor": {
          "ref": "2928a332-75f6-49f4-8caa-18fc1cb9634e",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "271905c2-fc0f-40c9-a641-2cce2a4ed58f"
        },
        "item": {
          "id": "06c98701-c3e7-44fb-aaaa-b07540dc1574",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f5c742b2-74dd-4478-9f9f-2807f09dd963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2221be71-634f-4f4d-8af9-4b417b7b9841",
        "cursor": {
          "ref": "7c62a518-7e49-48d3-a854-bf75730c9da8",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4faf7854-4192-42b9-a226-37e0f5966b42"
        },
        "item": {
          "id": "2221be71-634f-4f4d-8af9-4b417b7b9841",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f482b8f1-67ca-4eff-b613-0bced984d15d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a942cf-7033-4947-8a41-ed83e9eed65e",
        "cursor": {
          "ref": "969e9770-269e-436d-b091-8459aaa2a403",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b5834c7b-e515-4aaf-a868-24607fc288cd"
        },
        "item": {
          "id": "17a942cf-7033-4947-8a41-ed83e9eed65e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ef43cf69-7beb-4e17-8054-b3c3e6c93b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9bce54c-1a2a-487d-aafa-0520b5cb4c03",
        "cursor": {
          "ref": "f29fc661-f668-444e-9611-873c17b0e25e",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "04e91042-f01c-4e33-9d8c-b75c12c8d123"
        },
        "item": {
          "id": "e9bce54c-1a2a-487d-aafa-0520b5cb4c03",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e0f60090-4e0e-438c-b1a4-58f08d9a99e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab2a553-15d8-46d3-84d0-69c6c3ddddba",
        "cursor": {
          "ref": "818091bc-ecf8-495c-bc24-63b323e3e1e6",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "190f52d0-e438-4afb-8f1b-64fd183d3cec"
        },
        "item": {
          "id": "aab2a553-15d8-46d3-84d0-69c6c3ddddba",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "cf4fcc6d-bd6e-4fa1-8740-bbba99063125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f405af4-e2ef-4e00-9a55-27c81731496a",
        "cursor": {
          "ref": "fd056e5f-d1e7-43b2-bccc-2b2f01574cfa",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "30d0dee1-b933-455c-9feb-8b14266f207d"
        },
        "item": {
          "id": "8f405af4-e2ef-4e00-9a55-27c81731496a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e7867e59-4acf-4dbd-a12a-3a90a9d1a16a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da060421-4fa2-4752-bcfb-dbb5a3d44525",
        "cursor": {
          "ref": "328f3063-2240-437b-a859-d45832c900b2",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "abbcef42-68eb-470c-9f3c-a3f7e18ce5ab"
        },
        "item": {
          "id": "da060421-4fa2-4752-bcfb-dbb5a3d44525",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "180bf7b2-6e61-41fd-90af-54fdbb3f179d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfaf314-1e62-4387-be2f-82c848a01614",
        "cursor": {
          "ref": "38071cfe-fd73-47c2-8b3c-0833bdd7df1a",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "1c4b6f1d-89ec-45a1-9eb2-909670f5af8d"
        },
        "item": {
          "id": "dbfaf314-1e62-4387-be2f-82c848a01614",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d3d45f11-bded-4ceb-9607-5538f50906a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3b5e54d-718a-4daf-bf65-345c495256c4",
        "cursor": {
          "ref": "9a0512eb-692d-4380-a893-598d23f7fdbc",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6bc82a4b-97cb-42ab-bc23-fa09d4d0aae1"
        },
        "item": {
          "id": "b3b5e54d-718a-4daf-bf65-345c495256c4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6af2f9ef-5ba2-4428-8d83-824f782dd256",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8b96f0-f833-42b9-aa35-43275fd9e2c6",
        "cursor": {
          "ref": "70313db2-92ae-48f6-9dc5-f9a60322f5c2",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0053713b-b821-4106-9d27-afa29a1ef412"
        },
        "item": {
          "id": "6a8b96f0-f833-42b9-aa35-43275fd9e2c6",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "e9473349-c6ca-4742-99d8-105c1e5af3bd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 12,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b30c7fa-b724-4e5c-9d78-652b302bcbbe",
        "cursor": {
          "ref": "8be383c7-f0a7-4a86-babc-b81936e0a686",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "fad58340-fd01-47b3-8c12-521ea73e607a"
        },
        "item": {
          "id": "5b30c7fa-b724-4e5c-9d78-652b302bcbbe",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "72975edb-93d5-4b9d-90e3-d0b5c1a5afd0",
          "status": "OK",
          "code": 200,
          "responseTime": 242,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7eedf04-b7ac-4a9b-8b5b-0350d12f3342",
        "cursor": {
          "ref": "1ccab0c4-ea62-4df3-8d00-95806ae845c0",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3b7be56f-4c40-4330-9145-23ed6adb9c08"
        },
        "item": {
          "id": "f7eedf04-b7ac-4a9b-8b5b-0350d12f3342",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9e955fbc-6b1e-4d3c-95cd-02b0c7d94944",
          "status": "OK",
          "code": 200,
          "responseTime": 594,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab47ee8c-fa39-4fac-a434-3dc925c69001",
        "cursor": {
          "ref": "c43a2692-7a8c-47b3-8ff3-98f708a170a0",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "dff76e3b-e267-493f-9188-f3a9afb93fd4"
        },
        "item": {
          "id": "ab47ee8c-fa39-4fac-a434-3dc925c69001",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "220e39fa-d485-43f2-b3e3-3fd1918c99a4",
          "status": "OK",
          "code": 200,
          "responseTime": 596,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6ce68a-5a31-417d-9480-a0c23d2d1a77",
        "cursor": {
          "ref": "afa224c5-6042-46ff-a147-0842fb75b15b",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "dc85848b-f53a-4de8-b833-d3842d1dde79"
        },
        "item": {
          "id": "da6ce68a-5a31-417d-9480-a0c23d2d1a77",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c2bb9238-9067-4912-8226-1bddad93712e",
          "status": "OK",
          "code": 200,
          "responseTime": 572,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "98cfa3c7-a4e7-46de-987c-da6721462db0",
        "cursor": {
          "ref": "21209f40-960f-46be-9bc9-ca14655759a5",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4a4aa470-1a44-48ef-92d3-ff91fce149e3"
        },
        "item": {
          "id": "98cfa3c7-a4e7-46de-987c-da6721462db0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1a319368-8cde-43b7-b2a1-c9ff8449451d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98cfa3c7-a4e7-46de-987c-da6721462db0",
        "cursor": {
          "ref": "21209f40-960f-46be-9bc9-ca14655759a5",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4a4aa470-1a44-48ef-92d3-ff91fce149e3"
        },
        "item": {
          "id": "98cfa3c7-a4e7-46de-987c-da6721462db0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1a319368-8cde-43b7-b2a1-c9ff8449451d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98cfa3c7-a4e7-46de-987c-da6721462db0",
        "cursor": {
          "ref": "21209f40-960f-46be-9bc9-ca14655759a5",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4a4aa470-1a44-48ef-92d3-ff91fce149e3"
        },
        "item": {
          "id": "98cfa3c7-a4e7-46de-987c-da6721462db0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1a319368-8cde-43b7-b2a1-c9ff8449451d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb8ddb0b-5b9b-435d-a318-0f0c007ff799",
        "cursor": {
          "ref": "4ada9744-bdde-472a-9b13-f8711dd1e9df",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3eed3564-ceaf-4a7b-8b26-897c5bf7b982"
        },
        "item": {
          "id": "fb8ddb0b-5b9b-435d-a318-0f0c007ff799",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "5425c1b8-d84f-4e3a-9fad-79b2e0892929",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 13,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "678f8e34-e13b-4670-b041-559e4f55c06a",
        "cursor": {
          "ref": "b47dc360-3646-4078-bf49-ef99c430f91d",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "fd6d6c0a-b223-4733-88a5-7b0a4031251f"
        },
        "item": {
          "id": "678f8e34-e13b-4670-b041-559e4f55c06a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5d75dfc1-7df9-4742-b4ff-f547910771a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "678f8e34-e13b-4670-b041-559e4f55c06a",
        "cursor": {
          "ref": "b47dc360-3646-4078-bf49-ef99c430f91d",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "fd6d6c0a-b223-4733-88a5-7b0a4031251f"
        },
        "item": {
          "id": "678f8e34-e13b-4670-b041-559e4f55c06a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5d75dfc1-7df9-4742-b4ff-f547910771a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "39580d3c-75d5-4279-b4a0-fd8f7221c4cb",
        "cursor": {
          "ref": "55ae3bb5-1f83-4767-bb9a-5db8331c5d2c",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "afb3b9b1-90f2-4de7-9ba2-92bfa0282d59"
        },
        "item": {
          "id": "39580d3c-75d5-4279-b4a0-fd8f7221c4cb",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "86793405-c306-4b82-b19a-0b99a072d1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "ba6f3cf4-b861-4e83-bfbf-a0d61271ab0c",
        "cursor": {
          "ref": "c0163852-bea4-4bdf-b94d-44e12587f8fd",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6b87da8d-5585-463b-bf81-8d0145a86858"
        },
        "item": {
          "id": "ba6f3cf4-b861-4e83-bfbf-a0d61271ab0c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6b689323-1bf4-4b80-828d-03b019113b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "ba6f3cf4-b861-4e83-bfbf-a0d61271ab0c",
        "cursor": {
          "ref": "c0163852-bea4-4bdf-b94d-44e12587f8fd",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6b87da8d-5585-463b-bf81-8d0145a86858"
        },
        "item": {
          "id": "ba6f3cf4-b861-4e83-bfbf-a0d61271ab0c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6b689323-1bf4-4b80-828d-03b019113b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "e80b1613-734d-4e5e-811e-445eb0672029",
        "cursor": {
          "ref": "38ba3808-c7e1-44fb-8898-5a41ce9debb9",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "bb3228a8-6c1e-408b-8b6f-9a8c109ed875"
        },
        "item": {
          "id": "e80b1613-734d-4e5e-811e-445eb0672029",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "6250e557-7135-47e4-b8a9-2a2f8c98ff9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}