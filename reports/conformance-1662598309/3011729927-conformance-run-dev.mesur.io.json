{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3e18f2b8-1d74-46c9-9ddb-ed77322b32f4",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "de589498-8b86-4624-bdf5-dba53d321bbb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d05206aa-ff98-4ff1-a0fa-a8e5ae49e697",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf87b4e9-8121-4853-8bca-3a6b9f10b4cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f4c79a92-04ce-479b-a259-b871991fdceb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "773a136c-31ae-4879-9ff8-ce2b0b7a0018",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e39fe322-7dcd-4bdf-8f88-a537164b4fcf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6b40f063-2fd7-446b-91e4-443e72a4b1c0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "738ef1c4-e395-4e4a-a7e9-d975cf77fd2e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24817254-f11c-4941-92d6-29cdbb3539e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "822e5fa4-75c2-451e-921f-5cb3d299738a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de15f71-f49f-4c61-bcce-9f7246d7153d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87b00af-3dd1-40c9-ac38-c760e540ec37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3762457-7fc5-4f6d-a491-df1d4f38f5ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68934a7-450f-4901-b960-6473d20ffb99",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d4ea19a-c093-46c4-8c76-1ef7ca999a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72c4cc8c-6127-4cab-8506-74773d606d1d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4440651e-fcca-4570-85fb-bc15c7e3580e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "27b37651-64ca-4e7d-8d95-99b976cb43f3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac1e8cc-cdf7-4bb5-a37b-19533801c6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f479b2a-33ba-49ae-81d8-096a0ec8423e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55035aec-ef1a-4c6e-bb9d-a496812e85fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5a44ee5-eb67-4970-827a-007737513c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "706e7fc2-ada3-426d-8971-53497fc1c33e",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "712abd59-a21c-4302-bf52-9e64381a5a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ae4d245-0630-40bf-846d-22af5d18bb87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59f906d-4124-4512-a3d9-708b94334174",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "79bb6756-2f61-478a-9688-8e34f767a27f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4f04e2b7-6c27-4a95-9813-e1542359cc31",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5f9a0a15-1ce2-4f32-9fd0-c1adb28a671d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b6975e6-1042-4b7a-9a85-cf4da98454c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2bb49946-6510-453a-b3f0-c27b05a48731"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9a4ef5ea-914f-48e4-84a2-75482c291585",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "d17f7631-6957-486a-97b0-032d0ab0da99"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f834822c-f905-451d-9427-12cda2dddf2a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "155cde20-ff40-4eb9-ab0a-6da9e73409dd"
            }
          }
        ]
      },
      {
        "id": "9bf613d4-70df-4eeb-9a49-768f4e90b18a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c61ff6bd-d1da-46b7-81ea-ea83a37fdba0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b3910c93-9f83-4d4a-8ec7-e1cd75a0d151",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e3601eeb-76c3-415d-b0c7-667f91770fbb",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5775ad-f58e-4a3f-b7ee-ab6f358b73c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "338c35a6-73f6-483e-9433-e0d084c5693c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a922d5ed-3578-4f1a-8795-58d64de84c23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65733b9a-651e-432d-83b0-2f0f4a9cc964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b26af2f-92e2-4e1a-afa0-0749a595557c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a858f833-aafe-4be2-89b6-d8a2a25fc1ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed9fbf0-fe32-445f-baa4-25671e309287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d542c11-aaff-4a98-a3f0-27b00454e7cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c86638e1-80e9-4169-be6c-e83d30b478c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d6c80f-dcbd-4eae-9e6d-ab58ac59d19e",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d5c2e1f-6296-42b4-9d07-53de8fa41dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed8d3422-42c7-4de1-bf45-a27cf517c1e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228afdf9-1a70-4889-bf8b-c6bdaf24ac52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1263f73a-22f1-419a-8fd7-5746e6dcbb71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd4365c-74a6-411f-aa26-f5be09dd67e7",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50554362-869f-4c4f-a31f-f68a8d1c7859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf79c8e6-3373-4982-aec0-f6a22721024b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1c3b76-cfa0-4b14-a6ca-0fbda2ee908f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80c5843c-1af7-455d-a5fd-b5baac2e296e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1365f707-d96a-4ba6-8796-85e21899c210",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ebd350-76d7-4c71-90fc-9743c66c5312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "249f2951-e69a-4e21-8699-f3e549f60e1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1bef490-b516-443d-a1cf-8538b6166923",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c56aff79-936c-473f-baa3-328d3a132fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88debc19-3b62-4871-92c9-c9789839d088",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a22458f-cb22-403a-a6d3-b1975a984c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5047ae93-9b32-4878-8226-32ff678218f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ffeab2-aeeb-4df7-97f3-f721793463a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd2f52e3-f816-499f-999c-10b55e781e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f47c590-7b85-454d-9e4d-672e4d8b58e4",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74385be-ee1b-4aeb-b58e-33199477bb21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e1d932e-df6a-4692-949a-11096e5b2d5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5276d3-8ebc-483d-857a-e3837a84681a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "624884e4-a578-4173-ae3e-7ddac8b19c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9cf46fd-0976-4153-9b41-a8e70c1f6906",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ded2856-0630-4936-87ae-d3a8b5c45b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5baba40-e211-4315-ae2a-44ca4b4db8f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3f8fbb-85b7-4fa8-828b-82145a05a32d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e156730-246c-4f77-91cf-e97c551bc2d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d75ade6-5b99-4535-9b14-1793b52df5ef",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4486e685-1222-420d-9d86-e6d12882c70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3113620c-9f0b-41ca-80ed-7abd8130f79d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea4a3aa-e7a1-4c8f-bee1-16d176e1df89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68981fa6-7432-440d-8c9a-85818f37e0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af77e54e-8238-4a95-ba70-306ad22082f1",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da7b2c12-7452-4a35-8cfc-6459324b8c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a49b8036-3fcf-40f8-8df5-9eae8bee3d97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97e4df1-f482-4145-8eae-3d4d8bfd1e33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12335cf6-b9b1-4d7c-af12-24dbf778985b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c551da-03f3-49b7-b284-5029a2f4bcef",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "598a302b-c8a4-49aa-8f5a-b5cc96be780c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "343cc058-fb4d-44e1-b6c0-a54ec4f44834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde17065-1ab5-4588-930c-d5db859f7296",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "fafc49c5-8fba-4b24-80c0-bf709cce2686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e83f0b5-8ac0-4fa0-9c3f-a5178e4ec78c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6305f59c-3942-4490-8771-3ebc7a2be80b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59857c9d-0b3e-4837-86c1-3b6f2ecbacba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292a5140-152c-426e-9f04-518388c69069",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "1d725bbe-af91-40b7-854d-17dda83ea396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9720c7-dba0-49a1-af4f-f7e424e714de",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a78ada2-669a-49b4-96aa-1eedbbf23a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb7209f6-81dc-46b6-ba63-3ece03433e63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b141e4f7-586f-4574-b70a-0a47efee96cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7a62228-defc-459f-bc00-8100eedbd671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212e157b-59d3-498b-8463-bc2317af4004",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f4cee93-e0e2-4af4-ad3f-3758a94cfc0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf58060-430a-449a-91c0-abd6547e6e03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df5a7e9-960e-480c-909c-591d99982b82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d1c52fe-f065-43b7-85fe-97fcdba2f7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53cb91d-2084-4a06-bf8d-0b3a50668534",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "220d03ce-9eb7-43b8-b294-113c262230b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64e3bed5-d255-481a-8f84-431fde37121e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28b1fec-a5cf-48d1-9e58-9e0e5f8277b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "9c029186-2be8-4c6e-86ed-39ce2a446ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3f703b-7a12-4d94-85df-34c9247d8b16",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5c1d1b-b5fa-4377-b8ab-65319638099e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afa51ccb-8acf-4245-9429-899ad7f2c301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1886dea-42ad-420d-a517-d297476afeb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "9d26521b-f8c4-4453-942e-cab050fb4b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d266da90-ad2a-41e9-9f62-8ccd5de6c475",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d648bd9-4f2e-457e-8983-d28f5ad04aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "001d2d56-79ea-4ab3-a4d1-258710d4f1c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc840dd-34f9-4afd-8636-ee2643db503c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c863166f-3526-4bbd-85a5-7732a1507d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e93162-34e1-474a-b9ab-c463049b854a",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28885ff8-ea27-40e7-ba7f-3af286a1948d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f73cd53a-915d-434e-a678-429deca34997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9295bc74-e0c0-4faf-9e46-8dc453847ac7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc38b6bb-667e-4658-ae91-ee2dbe74a61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f44e4a1-ba64-4205-ac6c-73d7b6c16c14",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9243360f-fd39-45a5-94bd-25eacbe74210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49f8ab79-61a3-44cc-8a33-ce152538a251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b98279bb-fe90-4218-b36d-cada73f87792",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8349a9fb-32b2-4cec-a090-2a6d7304ec3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2744a9-afac-4f4c-9303-ecd782583f99",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f9d107-48c2-4391-bf1c-d252c8df43c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9889850e-d938-4886-81af-0eb687a97441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8c5d03-966e-462c-b512-5f89246bdacc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8657c2e9-8ddb-4412-8c17-2abdc65eec17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8769cb-0922-4bd6-afce-86f570b9805d",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc901a3f-f97a-469a-869b-3f74ad3f6a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae3fc197-8d02-457d-bc44-dfd108f113f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0431d2-8ec8-4e26-a087-a4c842127ede",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff1fcea4-8df8-495e-9fd0-af1a95871478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c679e9e4-5924-4096-9078-cfec1cee3b15",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6726b6e7-31b3-4625-9def-a76dea334a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfd44272-d97f-4f38-a154-1104f1a8687e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fecf2abc-3a1c-41e9-bc3a-c4d7c1838836",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b45d784-897e-468f-b7c8-a2412caff22c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d54dcba-7842-4fe9-b066-0a10050b2b8e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88bc0136-96fb-40e3-855d-6f17964e6e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3000b8b-1ea7-4213-b42a-b350c4836cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e4a37a-48bf-46c2-b0cd-9e1d3e895aa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "904d2567-0755-4e3f-8c03-fc98c93f1959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b5466cc-20b6-4339-9b1e-307c0ff2136d",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f01165-6aa0-4ea6-9023-2abc8924e27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "825723f9-3306-47ef-bd82-449c7a18f3bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e4a9e7c-581f-4cc4-8d3f-81b60623d46b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb0b8963-a76f-4b80-aee1-2d4155472d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e3260f-d969-4d0a-abe9-a320e662472f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59c3b0c-09e4-42ee-b58e-00905318806c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b92e0adf-68c0-4176-9e21-3214a7dcbafb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd449f2-ad2c-4392-8685-f5d6acbeaa04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fce0687-bf17-4a47-8ba5-52a06047af51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9212474d-ae36-43b4-968f-a26255c00a86",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b800a81-73c4-4c6d-96b2-4d309228bd86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a371603-2811-4ade-bc76-d0a9b5e5ad87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2c7e44-989b-4211-8ff4-5635d9f92430",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab3e7968-5588-47db-9fef-7ee9bf7c1803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341f1e0b-b508-403a-9ded-a1d1a72c8585",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50779cd2-a51e-4043-8cab-7839d400179b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c63bd22d-0ff2-4972-a151-d211ef9d384d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74671825-9fd7-4bad-91d6-1786891b9c39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a08f2c02-fc81-43f6-ad71-b15001ad0fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a3efcb-9fc4-42c6-b0bd-2f5d7c4e0d54",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc1ffc8-a460-4865-b38d-388d3484ae59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b5d5a4-b209-4a5d-b1d1-72808d16b390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f17510ec-944a-4b07-a587-3c871f26a14a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a68b184d-eba6-41fe-8564-089ef2929eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7116c2-cb0b-41d9-8239-d10e9c76c83e",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b09187-783a-485e-8684-a334f3297193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38342d64-ac2c-41e9-a6a7-a9abf63a5690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f05253d-e26b-49eb-ac98-89b778edc9a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c85c12a-24ac-48a0-bbb0-5acaa27f250b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601c0f4a-1cb3-40c3-8a29-188015b91d29",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "455d7182-a810-4a86-9108-9da2ba83911e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac0829fe-d666-4405-905d-30531f34cb95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226ec1bb-22e8-44e8-9abc-96fe0b777924",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3148f00-6e7f-46e6-ade6-2397e8be3429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faedb73f-f2ee-4985-9290-a8d8d9ffbeb4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f96d7b6-b052-4a47-af94-fb0c187bb41e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ed394a24-a730-4474-9d7d-bcb1304a0cc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a605c7-c2c8-4bd6-9281-faeebc000d7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "443173c2-0f76-4254-9060-4dc4287c2da0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0094fecf-c03b-4f92-8f43-374ceef10d1d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e3bf70d2-34c8-477b-999b-a57ccdb3c6f9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1772fc-5d19-4cef-8a77-6e93a6c506e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7ef8cdb-a16f-4544-8ae7-8b91255abdad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2c4fe9-69ed-4cc2-a65e-664ac5286078",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "00c0b1ee-fa0a-44ac-8819-fda3747e92ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f83c829-83bd-4de0-bf61-fc7b8aa00015",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "763d553d-6a79-4b07-a2f6-a33fe2297d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0aba99f6-4e8d-4a6a-84de-fbe6b1b9a070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b386ae-f060-4e97-83db-8e12d4ce5bcf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "df17638b-9267-4074-bef1-5817fc2245d4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a908e343-6268-41e9-a874-49a07f1dd30e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5abbaca-c861-451b-8b27-112155c930c0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "44897cbf-77a0-447f-a113-dc998effb853",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "776a5f2e-b028-4b27-af09-be053b9deacd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "51aa0ee4-8b3f-46a5-9075-c165b8ebe07a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cff742b8-c950-4f5d-8958-a4a5c81fa621"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b87984cf-afca-4c24-baf4-cac390e8c03f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f613151e-268e-4905-a088-62abd07f1726"
                }
              }
            ]
          },
          {
            "id": "2963cfea-e100-4cec-b161-9002d3b2dd9e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e82f6eb2-e753-4207-87df-56b990f310ee",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa99edb5-f69c-4846-95e2-13431899a887",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c0ade01d-46ba-4c63-9f7d-e1b592caa48d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5927f8db-5553-4574-919c-c12214ceef11",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "decdd077-c935-480d-aac0-52d7c315ad71"
                    }
                  }
                ]
              },
              {
                "id": "804d9ed2-cb96-4108-a3ef-e4ea5107792c",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e4cf5d3-711e-4c7d-904a-85b8fc1e3204",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "57d48999-684c-42b5-93bf-3c28b4a46e08"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30f19433-c51a-4c88-a5e2-61949d5cfe45",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "63fb395c-8da0-43db-870f-61b1ff3f80a7"
                    }
                  }
                ]
              },
              {
                "id": "4e9f27a5-695c-4f16-acf9-984b4076cbb0",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3962f6ed-129a-4296-ad26-a968e9c5ac87",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9a7979a7-d2a9-4356-871f-09269f2ccff3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "184e6ed5-1117-4896-9b95-b49578d85842",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "3638a50c-61e5-40c5-be97-993e918c0f10"
                    }
                  }
                ]
              },
              {
                "id": "73d7784c-9085-4241-bf0d-802bfd9710a4",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8262e852-4ae5-45e9-9b84-94097fb47319",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4cad5523-44ff-4983-b315-cfdcfa584bf2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e623d002-d954-439c-a354-43cc89479722",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "6e4809b6-f6d0-49bc-85e7-b662d2077610"
                    }
                  }
                ]
              },
              {
                "id": "1e4a8e08-57eb-4961-99df-0682da20a2a8",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0a101ce-44b4-4485-84cf-21ead8eb47a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "0c0c5697-1f63-49c1-a61e-6932c631ee0c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc59c3ac-2025-42fd-96bf-f2a65cf1e4e8",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "48a335d1-ba7f-4a76-996f-79623b014172"
                    }
                  }
                ]
              },
              {
                "id": "ef5412cd-7c9b-4e84-8de5-fcb276d2eda2",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4745b616-fd4a-42c1-9734-c8a08800a1d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "74bc854d-c971-475e-8458-6d0393081282"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f848c22-9162-471d-8158-b62ef456a6b1",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "70e23027-788f-4f43-8661-bd31764e564f"
                    }
                  }
                ]
              },
              {
                "id": "533910f9-cb90-4558-bbfe-7bd4bf101884",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1255d15f-257e-41db-8317-cd703d8800db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "42493436-4577-4746-9884-97aa2f0ac6c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "957d872e-336c-45e5-a091-155ac09635b0",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "ce5785bd-70a1-401a-9fd4-9fb95186c6ae"
                    }
                  }
                ]
              },
              {
                "id": "268aeddf-17ba-4deb-9371-bf453c2ed28c",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a48cb0b4-fe2b-4999-ac5f-adfd76fea828",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1de77d17-09df-44a7-9335-260d93f9c008"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b344d672-e5c4-4e2b-b70e-6a664b81a67d",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "131be25b-5d0d-4ef6-a629-12badad85698"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "af6f58c8-edb2-42e1-93c8-c32c79b698a6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8853e2dc-be3d-478b-b256-bc6b8e5c9eaf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4bb274a3-6c21-435b-a56d-f606978e8316",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ec648023-e0f0-431a-98b0-493e18aa9f3b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "384afffc-6999-412d-b513-392d6c7a1ca4",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {",
                "            \"id\": \"{{credential_subject}}\"",
                "        }",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "785c7936-9261-41da-a4ba-2da45d2a2f3e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6f66edc4-4a0e-454a-86fb-1f25e409bec7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de7c2230-3806-467b-b811-a69df024049b"
            }
          }
        ]
      },
      {
        "id": "e74627be-9364-4760-8ca7-95be019c872e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3aee133c-083c-401f-a143-f4a0986c440c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "562b0f8a-6451-445a-a9c3-ec8a8a162f9e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b189a87-ae01-4b5c-8f67-ac6db8669a6a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c783451-470c-43d8-8057-d0a6950f43b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "500c8ce6-de77-433e-9b4c-8145347cfdcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30edc5d-61d8-4f8b-a7d6-685c0f7de3a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f11aa24d-589f-44a6-ab7b-eb3cb53684f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cbcc1b1-2b1e-4aa5-bdf6-67b70517c20e",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72811d4-ff91-4ff8-9551-012878c16ed5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "5c4ad022-047b-4b70-b674-2bdeb58865e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb366aa-85ac-4942-9365-bbdbe1972772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7baad839-8c51-4fd4-951f-36d25370c43e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6eb8229-ddd7-4ad0-b447-65b6ec44c30b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c0fcb1a-d62d-45c1-ab19-c72358918460"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "55a31ada-a811-4c82-9a2c-1a3a4bc0cc36",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2777a6f6-b7dd-404b-a0f0-b9646cb56b06"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "33123946-f8aa-49c0-ba56-b5432dadbe44",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "8b215cd3-a13d-4dd5-b984-368e45b3ce97"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f2f4704b-4e14-4753-8841-911166cd7a70",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b70b1630-0f07-47b6-9eb5-8c11e82521e5"
            }
          }
        ]
      },
      {
        "id": "1ac6d945-9ba0-4758-9377-a009a4618661",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2fd1c2d7-410c-40b4-a3d7-f44fe4488b55",
            "name": "Negative Testing",
            "item": [
              {
                "id": "25eeea70-e928-40bf-9bb3-febc43384ea8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "11e5cf22-6faf-4443-8f26-14c0561642a5",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ea9ed57-c878-4d1e-8f16-4280bad6e9d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4487baa1-1cb7-4c6a-940d-defa7291841a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef0af64-0ef7-40e9-b155-f3d8688b4289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a7f2a7d-efc5-4f03-9509-0e1196d4c75c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0e01f560-f7a5-4181-a6b1-dee22ba3c4c0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "08a2fc4d-00f2-44fc-8b0d-2f10d4bb9066",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21fae919-ce7f-47fc-a40e-1276f052ad28",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "3c5af9ca-6f44-44ac-b2d4-fe2c0ce13eac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4f648b-0dea-4846-a562-a0f2fc9e4890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77e92496-3d51-42c0-9ebd-6ba65b160393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "402ef771-5a07-46ac-9654-d71c2b7ce187",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa6af53-17d7-47e6-a44b-98bb9b50e8e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "9bc1fbaf-a868-4135-82df-5ffc6f2f53ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74107153-da3b-4299-84c2-4121041cd02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fedbb54b-aef4-4720-844c-48bb6e7011b2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe35bc27-14d8-43bf-adb6-38c6e298d193",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24398d0e-d94f-4908-b39b-15f964bd82aa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ac89958-7784-47c0-a0e6-fcfdb7e64b61",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1d13dfe7-9ece-49d4-bd75-e3661613f0db"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5195cb17-7a46-4e28-baee-98f0343fcb04",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7eaa6dc9-925d-404d-be10-54b09d3b3603"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "903a2b0d-5aca-41cf-baa6-f6fef34482f9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "50429481-7c59-4b5f-be4a-11afcee54f60"
            }
          }
        ]
      },
      {
        "id": "31b801c6-4432-4f2b-a33b-03751ac3e861",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "11acf3e1-269a-49b6-ba50-644349990f5a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b9479f3-91f1-43f5-aa6b-74394d7b516c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7ccf949a-47b1-4b04-9fd9-913057d3b41d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e627bde1-da59-42d1-a360-5312a3d259cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf090305-9bca-403a-ba2c-55b149adce2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2976d1c-e007-4ced-9f10-37702d3dba6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e78c4928-b3c1-4565-a5f4-c3fd834fecf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ca17e0-790a-4f01-b64c-01ead1a5fa7f",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9211e1db-e1f7-41af-a7aa-48ec5abac668",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "f103cbf0-d16f-47d9-b3ce-77d37b3f34a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "777427eb-a6f0-4cd2-9eac-3bc378bb0fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7193e4fb-9355-4425-ba4f-1055529df63a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "868912d8-c076-4bc4-99d2-05d4d55218a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c425879-05f8-4d22-ad02-fb4309f5260e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "18763201-4820-41f9-a658-946076fbd135",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d350b76e-5c37-4891-90c0-4e460d9a3cf7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9e94a740-f99f-4a72-9f84-28cbe97faea5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "c206679d-8c34-4f99-bd9a-631e10a067ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0374e36e-92f7-4d7d-9e6a-26040617e0a5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4147795d-283d-4c6b-a641-691ec514c9de"
            }
          }
        ]
      },
      {
        "id": "d04366cd-c263-44ed-b717-f90912815dba",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0d2eadd3-11e6-4bea-8620-43a340ce2ac3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "96ce4e24-db68-4c2b-bb74-2c2a362de154",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6804472d-18e2-4b13-b738-d6f3b59c84e4",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec6141e-aa74-418d-96a9-73459c49f032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "069f7e66-f076-4e00-a2aa-6254db62b931"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7955e7b-092e-46c2-b878-094a2a05088f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b8694ce-bbf5-492d-88f6-fbbfa01ce620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0144122-19fc-4f7d-95d7-7caccea20b29",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd09c2f4-606d-484e-bdeb-70f09f2912fb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "3500f7b0-5d88-4340-ba34-94788f489035"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abace713-1f32-493f-a9c0-effcf12dc3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d66f603f-9ca5-488b-aec1-1d31f9b072f2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a7128e0-b0f6-489a-86c2-25eb98d9e58d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6de8645f-a4d9-45c8-9e62-500df95b1fea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "43161be1-3d67-4915-92f3-e72e78a61d25",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e62a1155-c519-428d-b11c-317087b45ca7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ac5476bd-23fe-407e-801c-a213088b9766",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "5498b9a7-f7a3-4e87-9618-16ce79f31d83"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6f5574fb-ddba-4941-86ad-13ea423b4db4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "20b6730e-6e75-4798-a244-45a55c82ea22"
            }
          }
        ]
      },
      {
        "id": "b8d0c41b-d036-4eaf-8ca5-cb0dbeb2ebca",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e70b85da-25f8-425f-9d3d-6c963a559d0e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6170e99b-a314-44aa-a43f-7b290b564c99",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6d3f6ab1-54e3-477a-a868-03aeb9950024",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99041486-43c5-4103-9a06-fedc6007453f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0731762c-f928-4f2c-b503-f4bcdc84c216"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12097ce-e470-4d2c-beb4-b52eaacc8403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b0f3b0a-ac0f-44ef-8295-4d664f1ac1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2726b8-3877-40fd-a65e-34d7d4059e44",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e94978f-d870-431e-9e3e-a857340655e2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "bd0755eb-89e0-4864-9872-7af412946ff4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd230fdb-1753-4a43-963d-a616ba7582b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe08abbc-6ec0-4635-b34b-df21c6df1915"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d698bdba-6488-4517-a8ad-e770305e5227",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "036fa99b-cfac-4efc-ab58-b19f47fa117d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6f529ae-db8c-484d-8cae-261423e08acd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b50b82b5-eeae-48bb-a56c-46de10e20365"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad8148f5-f3c0-4734-9648-7a59be9378b7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "0d22852e-6a60-4d2e-9e5b-673338fecd8f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4785c87c-cbc1-4203-9ff2-f7137532db35",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3fcf771f-d04d-4535-ad60-df2daaa5a19c"
            }
          }
        ]
      },
      {
        "id": "5186c41b-0eb6-40b8-a58c-93d3cdecc008",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "6a4a5f46-0430-4998-92a3-d0f55887db8e",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 59,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 453,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 59,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 108,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 59,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 123,
        "pending": 0,
        "failed": 16
      },
      "testScripts": {
        "total": 229,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 224,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 73.62962962962962,
      "responseMin": 31,
      "responseMax": 676,
      "responseSd": 101.68666402534585,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1662598181143,
      "completed": 1662598192011
    },
    "executions": [
      {
        "id": "d05206aa-ff98-4ff1-a0fa-a8e5ae49e697",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 59,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "119689c4-a867-4c6f-858b-dfba51cc8f9d",
          "httpRequestId": "80181b78-d3a0-4270-b986-122750ed659f"
        },
        "item": {
          "id": "d05206aa-ff98-4ff1-a0fa-a8e5ae49e697",
          "name": "did_json"
        },
        "response": {
          "id": "2b879c63-947e-4314-8cdb-9b01489ee1d0",
          "status": "OK",
          "code": 200,
          "responseTime": 256,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "738ef1c4-e395-4e4a-a7e9-d975cf77fd2e",
        "cursor": {
          "ref": "0f2a7c06-d9a7-4294-9c64-8363d5026d84",
          "length": 59,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5c3be91e-ea43-4e8b-8022-cdeedfe7b22a"
        },
        "item": {
          "id": "738ef1c4-e395-4e4a-a7e9-d975cf77fd2e",
          "name": "did:invalid"
        },
        "response": {
          "id": "0daa8aac-2738-4d99-be7b-cec54bca2ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "738ef1c4-e395-4e4a-a7e9-d975cf77fd2e",
        "cursor": {
          "ref": "0f2a7c06-d9a7-4294-9c64-8363d5026d84",
          "length": 59,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5c3be91e-ea43-4e8b-8022-cdeedfe7b22a"
        },
        "item": {
          "id": "738ef1c4-e395-4e4a-a7e9-d975cf77fd2e",
          "name": "did:invalid"
        },
        "response": {
          "id": "0daa8aac-2738-4d99-be7b-cec54bca2ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de15f71-f49f-4c61-bcce-9f7246d7153d",
        "cursor": {
          "ref": "223d85bb-7dfc-45fa-8e35-59fd783a3e14",
          "length": 59,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f20de93c-5a79-4f2a-823b-8468057b6fe1"
        },
        "item": {
          "id": "9de15f71-f49f-4c61-bcce-9f7246d7153d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "836d815f-0637-42fc-ac3d-ce22d9e4fdc6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 89,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68934a7-450f-4901-b960-6473d20ffb99",
        "cursor": {
          "ref": "d22c9479-99d4-44d0-943b-369c06596181",
          "length": 59,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3961ea40-092e-4a29-8dda-6d1746fea530"
        },
        "item": {
          "id": "f68934a7-450f-4901-b960-6473d20ffb99",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4b499dbb-513e-4bba-931c-3b1ed7ee4cb4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b37651-64ca-4e7d-8d95-99b976cb43f3",
        "cursor": {
          "ref": "8e1586df-e8b3-475d-bbb3-13592dde5028",
          "length": 59,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2ab92b7f-6a8c-4e5f-a0cc-edaa76de8ba1"
        },
        "item": {
          "id": "27b37651-64ca-4e7d-8d95-99b976cb43f3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "08f50860-9594-4876-931e-5a852c21f3b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706e7fc2-ada3-426d-8971-53497fc1c33e",
        "cursor": {
          "ref": "0099fa2f-912f-46b9-bf71-7cd4f2b0433b",
          "length": 59,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "53538423-dc7c-4aa0-af18-c47e56c05ca9"
        },
        "item": {
          "id": "706e7fc2-ada3-426d-8971-53497fc1c33e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f3d68cb6-e4fc-49aa-bf49-297699ce55d7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706e7fc2-ada3-426d-8971-53497fc1c33e",
        "cursor": {
          "ref": "0099fa2f-912f-46b9-bf71-7cd4f2b0433b",
          "length": 59,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "53538423-dc7c-4aa0-af18-c47e56c05ca9"
        },
        "item": {
          "id": "706e7fc2-ada3-426d-8971-53497fc1c33e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f3d68cb6-e4fc-49aa-bf49-297699ce55d7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f9a0a15-1ce2-4f32-9fd0-c1adb28a671d",
        "cursor": {
          "ref": "8f1690ff-3147-49d3-94d3-62913b38b600",
          "length": 59,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bebcbd27-80e3-492a-93de-1760e5351d18"
        },
        "item": {
          "id": "5f9a0a15-1ce2-4f32-9fd0-c1adb28a671d",
          "name": "identifiers"
        },
        "response": {
          "id": "ce8f97b8-18bc-4068-b454-2dde4f17e8e5",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3601eeb-76c3-415d-b0c7-667f91770fbb",
        "cursor": {
          "ref": "a8e223a4-84bc-4e5f-889e-5099912398c5",
          "length": 59,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "244f2ebf-37b5-40ee-a0ca-b98817858f60"
        },
        "item": {
          "id": "e3601eeb-76c3-415d-b0c7-667f91770fbb",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a7c68cc0-5b9c-4166-8152-edc78d3455a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3601eeb-76c3-415d-b0c7-667f91770fbb",
        "cursor": {
          "ref": "a8e223a4-84bc-4e5f-889e-5099912398c5",
          "length": 59,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "244f2ebf-37b5-40ee-a0ca-b98817858f60"
        },
        "item": {
          "id": "e3601eeb-76c3-415d-b0c7-667f91770fbb",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a7c68cc0-5b9c-4166-8152-edc78d3455a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3601eeb-76c3-415d-b0c7-667f91770fbb",
        "cursor": {
          "ref": "a8e223a4-84bc-4e5f-889e-5099912398c5",
          "length": 59,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "244f2ebf-37b5-40ee-a0ca-b98817858f60"
        },
        "item": {
          "id": "e3601eeb-76c3-415d-b0c7-667f91770fbb",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a7c68cc0-5b9c-4166-8152-edc78d3455a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b26af2f-92e2-4e1a-afa0-0749a595557c",
        "cursor": {
          "ref": "2b6cc960-7dd5-40e5-8b80-b13cb3ba517e",
          "length": 59,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d320ef43-99bc-4936-9efc-0885d268ff48"
        },
        "item": {
          "id": "4b26af2f-92e2-4e1a-afa0-0749a595557c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "96b5e607-6206-4613-b291-03662e2d1a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b26af2f-92e2-4e1a-afa0-0749a595557c",
        "cursor": {
          "ref": "2b6cc960-7dd5-40e5-8b80-b13cb3ba517e",
          "length": 59,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d320ef43-99bc-4936-9efc-0885d268ff48"
        },
        "item": {
          "id": "4b26af2f-92e2-4e1a-afa0-0749a595557c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "96b5e607-6206-4613-b291-03662e2d1a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86d6c80f-dcbd-4eae-9e6d-ab58ac59d19e",
        "cursor": {
          "ref": "067de6c5-5d8c-47ed-aa16-8ab264992d72",
          "length": 59,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6317725c-e621-4f45-9bff-755a8af77736"
        },
        "item": {
          "id": "86d6c80f-dcbd-4eae-9e6d-ab58ac59d19e",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "f515f8be-f5fe-4af8-bdb0-3b66dac6ba88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86d6c80f-dcbd-4eae-9e6d-ab58ac59d19e",
        "cursor": {
          "ref": "067de6c5-5d8c-47ed-aa16-8ab264992d72",
          "length": 59,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6317725c-e621-4f45-9bff-755a8af77736"
        },
        "item": {
          "id": "86d6c80f-dcbd-4eae-9e6d-ab58ac59d19e",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "f515f8be-f5fe-4af8-bdb0-3b66dac6ba88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd4365c-74a6-411f-aa26-f5be09dd67e7",
        "cursor": {
          "ref": "dda8c806-0d0e-4ddc-a9b5-8c84a558a7a1",
          "length": 59,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b987b5eb-8e8e-48f8-9061-566c88042987"
        },
        "item": {
          "id": "ebd4365c-74a6-411f-aa26-f5be09dd67e7",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "7ece3a0d-b0c4-4282-ab8f-d8fd1f57514e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd4365c-74a6-411f-aa26-f5be09dd67e7",
        "cursor": {
          "ref": "dda8c806-0d0e-4ddc-a9b5-8c84a558a7a1",
          "length": 59,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b987b5eb-8e8e-48f8-9061-566c88042987"
        },
        "item": {
          "id": "ebd4365c-74a6-411f-aa26-f5be09dd67e7",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "7ece3a0d-b0c4-4282-ab8f-d8fd1f57514e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1365f707-d96a-4ba6-8796-85e21899c210",
        "cursor": {
          "ref": "1f2b1173-c2fc-44c3-844a-409fdaa13682",
          "length": 59,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "dd2389c7-abb3-4fd6-b009-f51ce99f742b"
        },
        "item": {
          "id": "1365f707-d96a-4ba6-8796-85e21899c210",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "f40ea801-ae3d-4f0a-a777-9b5a8aeb570a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1365f707-d96a-4ba6-8796-85e21899c210",
        "cursor": {
          "ref": "1f2b1173-c2fc-44c3-844a-409fdaa13682",
          "length": 59,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "dd2389c7-abb3-4fd6-b009-f51ce99f742b"
        },
        "item": {
          "id": "1365f707-d96a-4ba6-8796-85e21899c210",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "f40ea801-ae3d-4f0a-a777-9b5a8aeb570a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88debc19-3b62-4871-92c9-c9789839d088",
        "cursor": {
          "ref": "e9be8f5a-bf2d-46c4-b946-3ef81c89a451",
          "length": 59,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "200e6051-2254-4c67-b7c2-9a84e31ca337"
        },
        "item": {
          "id": "88debc19-3b62-4871-92c9-c9789839d088",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "df13e7ec-de78-4fdf-98c8-e983a183d44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88debc19-3b62-4871-92c9-c9789839d088",
        "cursor": {
          "ref": "e9be8f5a-bf2d-46c4-b946-3ef81c89a451",
          "length": 59,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "200e6051-2254-4c67-b7c2-9a84e31ca337"
        },
        "item": {
          "id": "88debc19-3b62-4871-92c9-c9789839d088",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "df13e7ec-de78-4fdf-98c8-e983a183d44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f47c590-7b85-454d-9e4d-672e4d8b58e4",
        "cursor": {
          "ref": "94af448c-b549-4a85-bad9-8ca53debebb4",
          "length": 59,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "647f96d3-4bae-4ff2-8422-179681bfebd2"
        },
        "item": {
          "id": "0f47c590-7b85-454d-9e4d-672e4d8b58e4",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "ff7ee94c-56e3-4087-a4f4-e031a713f6f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f47c590-7b85-454d-9e4d-672e4d8b58e4",
        "cursor": {
          "ref": "94af448c-b549-4a85-bad9-8ca53debebb4",
          "length": 59,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "647f96d3-4bae-4ff2-8422-179681bfebd2"
        },
        "item": {
          "id": "0f47c590-7b85-454d-9e4d-672e4d8b58e4",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "ff7ee94c-56e3-4087-a4f4-e031a713f6f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9cf46fd-0976-4153-9b41-a8e70c1f6906",
        "cursor": {
          "ref": "7d67dda3-338a-4327-84e6-264f42bde79a",
          "length": 59,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "da126ef5-1945-461e-aae2-202ee56c92ac"
        },
        "item": {
          "id": "e9cf46fd-0976-4153-9b41-a8e70c1f6906",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "2c1356bf-2715-4a79-8d2e-919ce3153f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9cf46fd-0976-4153-9b41-a8e70c1f6906",
        "cursor": {
          "ref": "7d67dda3-338a-4327-84e6-264f42bde79a",
          "length": 59,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "da126ef5-1945-461e-aae2-202ee56c92ac"
        },
        "item": {
          "id": "e9cf46fd-0976-4153-9b41-a8e70c1f6906",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "2c1356bf-2715-4a79-8d2e-919ce3153f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d75ade6-5b99-4535-9b14-1793b52df5ef",
        "cursor": {
          "ref": "741d2635-80c2-4581-b273-96790a6654c9",
          "length": 59,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9af2072c-b520-4a4e-87b1-26590af566f7"
        },
        "item": {
          "id": "1d75ade6-5b99-4535-9b14-1793b52df5ef",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b273759a-32f1-4078-b8b8-9b7fa208e6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d75ade6-5b99-4535-9b14-1793b52df5ef",
        "cursor": {
          "ref": "741d2635-80c2-4581-b273-96790a6654c9",
          "length": 59,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9af2072c-b520-4a4e-87b1-26590af566f7"
        },
        "item": {
          "id": "1d75ade6-5b99-4535-9b14-1793b52df5ef",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b273759a-32f1-4078-b8b8-9b7fa208e6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af77e54e-8238-4a95-ba70-306ad22082f1",
        "cursor": {
          "ref": "cb6d346b-425f-4ec3-9644-373e211acf0c",
          "length": 59,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5a2f4d24-f519-4173-9570-63ebaa993329"
        },
        "item": {
          "id": "af77e54e-8238-4a95-ba70-306ad22082f1",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "f3e76cd1-cff8-4d39-a928-2fc7315e0bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af77e54e-8238-4a95-ba70-306ad22082f1",
        "cursor": {
          "ref": "cb6d346b-425f-4ec3-9644-373e211acf0c",
          "length": 59,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5a2f4d24-f519-4173-9570-63ebaa993329"
        },
        "item": {
          "id": "af77e54e-8238-4a95-ba70-306ad22082f1",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "f3e76cd1-cff8-4d39-a928-2fc7315e0bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c551da-03f3-49b7-b284-5029a2f4bcef",
        "cursor": {
          "ref": "b6318198-887c-4dcd-8234-e00ce3199979",
          "length": 59,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "023c22fa-fd2d-43a2-9691-1f130a21b5ae"
        },
        "item": {
          "id": "b4c551da-03f3-49b7-b284-5029a2f4bcef",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "f624035e-5233-42cb-9fb2-9280a2fac7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c551da-03f3-49b7-b284-5029a2f4bcef",
        "cursor": {
          "ref": "b6318198-887c-4dcd-8234-e00ce3199979",
          "length": 59,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "023c22fa-fd2d-43a2-9691-1f130a21b5ae"
        },
        "item": {
          "id": "b4c551da-03f3-49b7-b284-5029a2f4bcef",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "f624035e-5233-42cb-9fb2-9280a2fac7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e83f0b5-8ac0-4fa0-9c3f-a5178e4ec78c",
        "cursor": {
          "ref": "d739a2b8-215e-4812-a9c2-65ec8586441d",
          "length": 59,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "19a65c28-64fd-4ee4-8435-0741e32f50ab"
        },
        "item": {
          "id": "6e83f0b5-8ac0-4fa0-9c3f-a5178e4ec78c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "396be0ff-9d8c-407e-bb0c-22ee7f8ebb00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 676,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e83f0b5-8ac0-4fa0-9c3f-a5178e4ec78c",
        "cursor": {
          "ref": "d739a2b8-215e-4812-a9c2-65ec8586441d",
          "length": 59,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "19a65c28-64fd-4ee4-8435-0741e32f50ab"
        },
        "item": {
          "id": "6e83f0b5-8ac0-4fa0-9c3f-a5178e4ec78c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "396be0ff-9d8c-407e-bb0c-22ee7f8ebb00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 676,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9720c7-dba0-49a1-af4f-f7e424e714de",
        "cursor": {
          "ref": "7ac136b0-f723-45ea-bd8a-8073c4923341",
          "length": 59,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7ebcc138-eb83-4f47-8d92-9d12ac73c9f7"
        },
        "item": {
          "id": "fb9720c7-dba0-49a1-af4f-f7e424e714de",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "df857315-23b6-4e8e-b36a-b73d55ef34fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9720c7-dba0-49a1-af4f-f7e424e714de",
        "cursor": {
          "ref": "7ac136b0-f723-45ea-bd8a-8073c4923341",
          "length": 59,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7ebcc138-eb83-4f47-8d92-9d12ac73c9f7"
        },
        "item": {
          "id": "fb9720c7-dba0-49a1-af4f-f7e424e714de",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "df857315-23b6-4e8e-b36a-b73d55ef34fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "212e157b-59d3-498b-8463-bc2317af4004",
        "cursor": {
          "ref": "bc88aadf-8931-46aa-8fda-37a2c7b50e35",
          "length": 59,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8c49fe6c-59f4-4a63-871e-30f258025f80"
        },
        "item": {
          "id": "212e157b-59d3-498b-8463-bc2317af4004",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "f534e209-2310-4901-80da-9edba6b9167f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "212e157b-59d3-498b-8463-bc2317af4004",
        "cursor": {
          "ref": "bc88aadf-8931-46aa-8fda-37a2c7b50e35",
          "length": 59,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8c49fe6c-59f4-4a63-871e-30f258025f80"
        },
        "item": {
          "id": "212e157b-59d3-498b-8463-bc2317af4004",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "f534e209-2310-4901-80da-9edba6b9167f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53cb91d-2084-4a06-bf8d-0b3a50668534",
        "cursor": {
          "ref": "12cb959c-16e1-425a-961c-75cb4915a506",
          "length": 59,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0087a088-949e-40d2-afb0-ab10aca0b292"
        },
        "item": {
          "id": "c53cb91d-2084-4a06-bf8d-0b3a50668534",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "37908a87-c93a-491e-8e6a-9a109691fa5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53cb91d-2084-4a06-bf8d-0b3a50668534",
        "cursor": {
          "ref": "12cb959c-16e1-425a-961c-75cb4915a506",
          "length": 59,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0087a088-949e-40d2-afb0-ab10aca0b292"
        },
        "item": {
          "id": "c53cb91d-2084-4a06-bf8d-0b3a50668534",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "37908a87-c93a-491e-8e6a-9a109691fa5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3f703b-7a12-4d94-85df-34c9247d8b16",
        "cursor": {
          "ref": "237960f5-31b0-4ecd-b92e-000dce934978",
          "length": 59,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0d525ac1-6b43-47ee-aca4-bd0dca0e27f3"
        },
        "item": {
          "id": "5b3f703b-7a12-4d94-85df-34c9247d8b16",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "848b0268-de53-49a2-94e1-ea9e0782fe89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 167,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3f703b-7a12-4d94-85df-34c9247d8b16",
        "cursor": {
          "ref": "237960f5-31b0-4ecd-b92e-000dce934978",
          "length": 59,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0d525ac1-6b43-47ee-aca4-bd0dca0e27f3"
        },
        "item": {
          "id": "5b3f703b-7a12-4d94-85df-34c9247d8b16",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "848b0268-de53-49a2-94e1-ea9e0782fe89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 167,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d266da90-ad2a-41e9-9f62-8ccd5de6c475",
        "cursor": {
          "ref": "886813db-3d71-4281-ac47-570f27c3b283",
          "length": 59,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "900f9782-d801-40f3-8022-b452dd711fc8"
        },
        "item": {
          "id": "d266da90-ad2a-41e9-9f62-8ccd5de6c475",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "06159817-15cf-4e37-a0c3-3e965c9cb3b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d266da90-ad2a-41e9-9f62-8ccd5de6c475",
        "cursor": {
          "ref": "886813db-3d71-4281-ac47-570f27c3b283",
          "length": 59,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "900f9782-d801-40f3-8022-b452dd711fc8"
        },
        "item": {
          "id": "d266da90-ad2a-41e9-9f62-8ccd5de6c475",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "06159817-15cf-4e37-a0c3-3e965c9cb3b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e93162-34e1-474a-b9ab-c463049b854a",
        "cursor": {
          "ref": "ccb7f639-34e6-4f0a-9160-fed63ce745a1",
          "length": 59,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a2c66281-a056-45e5-aca8-875b4580f0f6"
        },
        "item": {
          "id": "17e93162-34e1-474a-b9ab-c463049b854a",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "f5e7a48e-9123-4550-8bc5-364f57299f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e93162-34e1-474a-b9ab-c463049b854a",
        "cursor": {
          "ref": "ccb7f639-34e6-4f0a-9160-fed63ce745a1",
          "length": 59,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a2c66281-a056-45e5-aca8-875b4580f0f6"
        },
        "item": {
          "id": "17e93162-34e1-474a-b9ab-c463049b854a",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "f5e7a48e-9123-4550-8bc5-364f57299f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f44e4a1-ba64-4205-ac6c-73d7b6c16c14",
        "cursor": {
          "ref": "cf649b18-87d2-4fbb-a64d-5688c05c4e78",
          "length": 59,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "188b3f5d-a513-45de-bdb7-81643f256b04"
        },
        "item": {
          "id": "3f44e4a1-ba64-4205-ac6c-73d7b6c16c14",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a6feaafd-1737-4978-a953-c5b17e1c623c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f44e4a1-ba64-4205-ac6c-73d7b6c16c14",
        "cursor": {
          "ref": "cf649b18-87d2-4fbb-a64d-5688c05c4e78",
          "length": 59,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "188b3f5d-a513-45de-bdb7-81643f256b04"
        },
        "item": {
          "id": "3f44e4a1-ba64-4205-ac6c-73d7b6c16c14",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a6feaafd-1737-4978-a953-c5b17e1c623c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2744a9-afac-4f4c-9303-ecd782583f99",
        "cursor": {
          "ref": "262cd4e1-a247-4976-910a-257ac930fd09",
          "length": 59,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e9add462-a619-4400-a57e-93a2cff97288"
        },
        "item": {
          "id": "3e2744a9-afac-4f4c-9303-ecd782583f99",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "670c413d-7882-448d-b1e7-74f9a79a284c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2744a9-afac-4f4c-9303-ecd782583f99",
        "cursor": {
          "ref": "262cd4e1-a247-4976-910a-257ac930fd09",
          "length": 59,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e9add462-a619-4400-a57e-93a2cff97288"
        },
        "item": {
          "id": "3e2744a9-afac-4f4c-9303-ecd782583f99",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "670c413d-7882-448d-b1e7-74f9a79a284c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8769cb-0922-4bd6-afce-86f570b9805d",
        "cursor": {
          "ref": "52cc0ef1-32bc-4d60-8af9-c03401cc8b86",
          "length": 59,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "04c54755-0144-4a60-9656-4eeeaa0a775d"
        },
        "item": {
          "id": "9e8769cb-0922-4bd6-afce-86f570b9805d",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "048b9239-5912-48d7-87db-6f4ae36db847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8769cb-0922-4bd6-afce-86f570b9805d",
        "cursor": {
          "ref": "52cc0ef1-32bc-4d60-8af9-c03401cc8b86",
          "length": 59,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "04c54755-0144-4a60-9656-4eeeaa0a775d"
        },
        "item": {
          "id": "9e8769cb-0922-4bd6-afce-86f570b9805d",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "048b9239-5912-48d7-87db-6f4ae36db847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c679e9e4-5924-4096-9078-cfec1cee3b15",
        "cursor": {
          "ref": "467b587d-7504-4bba-9f5a-cb49921d332a",
          "length": 59,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "13e2a885-636b-4b05-8f47-a20676829e22"
        },
        "item": {
          "id": "c679e9e4-5924-4096-9078-cfec1cee3b15",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "07c91e7a-ed12-413e-aff0-4ebc931ac016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c679e9e4-5924-4096-9078-cfec1cee3b15",
        "cursor": {
          "ref": "467b587d-7504-4bba-9f5a-cb49921d332a",
          "length": 59,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "13e2a885-636b-4b05-8f47-a20676829e22"
        },
        "item": {
          "id": "c679e9e4-5924-4096-9078-cfec1cee3b15",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "07c91e7a-ed12-413e-aff0-4ebc931ac016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d54dcba-7842-4fe9-b066-0a10050b2b8e",
        "cursor": {
          "ref": "726bec01-aefb-428d-9d03-a15e0fcee93c",
          "length": 59,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "44946d13-8572-4f07-b711-56305de130b6"
        },
        "item": {
          "id": "1d54dcba-7842-4fe9-b066-0a10050b2b8e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "de1bdb59-3af8-44b6-8878-2b7c3835ed5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d54dcba-7842-4fe9-b066-0a10050b2b8e",
        "cursor": {
          "ref": "726bec01-aefb-428d-9d03-a15e0fcee93c",
          "length": 59,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "44946d13-8572-4f07-b711-56305de130b6"
        },
        "item": {
          "id": "1d54dcba-7842-4fe9-b066-0a10050b2b8e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "de1bdb59-3af8-44b6-8878-2b7c3835ed5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b5466cc-20b6-4339-9b1e-307c0ff2136d",
        "cursor": {
          "ref": "0f686546-85dc-4ab9-9b8b-cffa77432c05",
          "length": 59,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0ae951e1-aef9-4aa4-98b6-c823dc0dd27b"
        },
        "item": {
          "id": "6b5466cc-20b6-4339-9b1e-307c0ff2136d",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "b2afe3dd-d95d-428c-bde5-925a642d73c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b5466cc-20b6-4339-9b1e-307c0ff2136d",
        "cursor": {
          "ref": "0f686546-85dc-4ab9-9b8b-cffa77432c05",
          "length": 59,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0ae951e1-aef9-4aa4-98b6-c823dc0dd27b"
        },
        "item": {
          "id": "6b5466cc-20b6-4339-9b1e-307c0ff2136d",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "b2afe3dd-d95d-428c-bde5-925a642d73c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e3260f-d969-4d0a-abe9-a320e662472f",
        "cursor": {
          "ref": "b10fe903-0499-4cd7-b787-dab2caa667df",
          "length": 59,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "cfcfd9d8-4a5c-41ec-b7c1-af05d5b4f65c"
        },
        "item": {
          "id": "e2e3260f-d969-4d0a-abe9-a320e662472f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b13b03fd-84b8-4e9f-a60e-273bb49f9bee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e3260f-d969-4d0a-abe9-a320e662472f",
        "cursor": {
          "ref": "b10fe903-0499-4cd7-b787-dab2caa667df",
          "length": 59,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "cfcfd9d8-4a5c-41ec-b7c1-af05d5b4f65c"
        },
        "item": {
          "id": "e2e3260f-d969-4d0a-abe9-a320e662472f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b13b03fd-84b8-4e9f-a60e-273bb49f9bee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9212474d-ae36-43b4-968f-a26255c00a86",
        "cursor": {
          "ref": "f600b256-fbf8-4c30-9713-e29d96ff5754",
          "length": 59,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "652be53c-e5bd-4fa7-b17e-a55668497a29"
        },
        "item": {
          "id": "9212474d-ae36-43b4-968f-a26255c00a86",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "e1062af9-d46f-43dc-9c14-a379a720e6c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9212474d-ae36-43b4-968f-a26255c00a86",
        "cursor": {
          "ref": "f600b256-fbf8-4c30-9713-e29d96ff5754",
          "length": 59,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "652be53c-e5bd-4fa7-b17e-a55668497a29"
        },
        "item": {
          "id": "9212474d-ae36-43b4-968f-a26255c00a86",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "e1062af9-d46f-43dc-9c14-a379a720e6c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341f1e0b-b508-403a-9ded-a1d1a72c8585",
        "cursor": {
          "ref": "28af033c-6bb0-4224-ab0d-98b73dc05a42",
          "length": 59,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7d866f35-a559-4d25-8dc4-3f4220e6083d"
        },
        "item": {
          "id": "341f1e0b-b508-403a-9ded-a1d1a72c8585",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2ca00529-7b03-4528-a49b-7fc015b82c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341f1e0b-b508-403a-9ded-a1d1a72c8585",
        "cursor": {
          "ref": "28af033c-6bb0-4224-ab0d-98b73dc05a42",
          "length": 59,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7d866f35-a559-4d25-8dc4-3f4220e6083d"
        },
        "item": {
          "id": "341f1e0b-b508-403a-9ded-a1d1a72c8585",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2ca00529-7b03-4528-a49b-7fc015b82c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a3efcb-9fc4-42c6-b0bd-2f5d7c4e0d54",
        "cursor": {
          "ref": "56ea1178-3518-4a34-bd60-d8c3f366e094",
          "length": 59,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "51590cdc-89b6-4b6c-b1c6-de731049c7a2"
        },
        "item": {
          "id": "16a3efcb-9fc4-42c6-b0bd-2f5d7c4e0d54",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "abea5bb6-fdfc-4eee-8b34-21f99c4af423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a3efcb-9fc4-42c6-b0bd-2f5d7c4e0d54",
        "cursor": {
          "ref": "56ea1178-3518-4a34-bd60-d8c3f366e094",
          "length": 59,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "51590cdc-89b6-4b6c-b1c6-de731049c7a2"
        },
        "item": {
          "id": "16a3efcb-9fc4-42c6-b0bd-2f5d7c4e0d54",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "abea5bb6-fdfc-4eee-8b34-21f99c4af423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac7116c2-cb0b-41d9-8239-d10e9c76c83e",
        "cursor": {
          "ref": "0e6ab009-5f44-4c28-be34-0f2a97e4e2ce",
          "length": 59,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "50c950d9-ef0c-4d76-9055-2662fefb3ced"
        },
        "item": {
          "id": "ac7116c2-cb0b-41d9-8239-d10e9c76c83e",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "e80cd0b9-a05f-48bb-94bc-f26c9ca7f31d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 392
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac7116c2-cb0b-41d9-8239-d10e9c76c83e",
        "cursor": {
          "ref": "0e6ab009-5f44-4c28-be34-0f2a97e4e2ce",
          "length": 59,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "50c950d9-ef0c-4d76-9055-2662fefb3ced"
        },
        "item": {
          "id": "ac7116c2-cb0b-41d9-8239-d10e9c76c83e",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "e80cd0b9-a05f-48bb-94bc-f26c9ca7f31d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 392
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601c0f4a-1cb3-40c3-8a29-188015b91d29",
        "cursor": {
          "ref": "fb321863-5f25-4565-aaac-b6382e9a2c4d",
          "length": 59,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1d2e9579-c30b-4676-8ad7-b425530069de"
        },
        "item": {
          "id": "601c0f4a-1cb3-40c3-8a29-188015b91d29",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "c9116738-114b-47e6-b5fb-f52c370fbc30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601c0f4a-1cb3-40c3-8a29-188015b91d29",
        "cursor": {
          "ref": "fb321863-5f25-4565-aaac-b6382e9a2c4d",
          "length": 59,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1d2e9579-c30b-4676-8ad7-b425530069de"
        },
        "item": {
          "id": "601c0f4a-1cb3-40c3-8a29-188015b91d29",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "c9116738-114b-47e6-b5fb-f52c370fbc30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faedb73f-f2ee-4985-9290-a8d8d9ffbeb4",
        "cursor": {
          "ref": "2a5c52aa-ecbd-44df-a67b-e3c31e56cabb",
          "length": 59,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f4218ff8-b018-41b7-8c50-c713947c43cc"
        },
        "item": {
          "id": "faedb73f-f2ee-4985-9290-a8d8d9ffbeb4",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "1e9692a1-c5c0-484c-a363-fe06025f2cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faedb73f-f2ee-4985-9290-a8d8d9ffbeb4",
        "cursor": {
          "ref": "2a5c52aa-ecbd-44df-a67b-e3c31e56cabb",
          "length": 59,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f4218ff8-b018-41b7-8c50-c713947c43cc"
        },
        "item": {
          "id": "faedb73f-f2ee-4985-9290-a8d8d9ffbeb4",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "1e9692a1-c5c0-484c-a363-fe06025f2cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3bf70d2-34c8-477b-999b-a57ccdb3c6f9",
        "cursor": {
          "ref": "a6fbce99-84f1-4311-a2e5-901a56bef396",
          "length": 59,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a7e2d013-26b2-4e20-b1ac-a8c6994c3010"
        },
        "item": {
          "id": "e3bf70d2-34c8-477b-999b-a57ccdb3c6f9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6b74f1ab-e4d1-41fe-80f4-22a6813e9791",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3bf70d2-34c8-477b-999b-a57ccdb3c6f9",
        "cursor": {
          "ref": "a6fbce99-84f1-4311-a2e5-901a56bef396",
          "length": 59,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a7e2d013-26b2-4e20-b1ac-a8c6994c3010"
        },
        "item": {
          "id": "e3bf70d2-34c8-477b-999b-a57ccdb3c6f9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6b74f1ab-e4d1-41fe-80f4-22a6813e9791",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f83c829-83bd-4de0-bf61-fc7b8aa00015",
        "cursor": {
          "ref": "fe319145-3387-43f1-b9f7-b0aa3762f310",
          "length": 59,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "26a9dd50-7d17-4f4f-9309-ffb75eebbadb"
        },
        "item": {
          "id": "8f83c829-83bd-4de0-bf61-fc7b8aa00015",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4fe41003-86b4-4521-8bfa-f7a27c7db745",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f83c829-83bd-4de0-bf61-fc7b8aa00015",
        "cursor": {
          "ref": "fe319145-3387-43f1-b9f7-b0aa3762f310",
          "length": 59,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "26a9dd50-7d17-4f4f-9309-ffb75eebbadb"
        },
        "item": {
          "id": "8f83c829-83bd-4de0-bf61-fc7b8aa00015",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4fe41003-86b4-4521-8bfa-f7a27c7db745",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e82f6eb2-e753-4207-87df-56b990f310ee",
        "cursor": {
          "ref": "2e9cc1d3-f1b2-4dd5-b8c5-4e938765cd2e",
          "length": 59,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "20e0d1bb-148e-41a5-99d1-2301e8c43315"
        },
        "item": {
          "id": "e82f6eb2-e753-4207-87df-56b990f310ee",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f3d5dc72-6599-4357-ae28-0811e5821672",
          "status": "Created",
          "code": 201,
          "responseTime": 385,
          "responseSize": 574
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "expected { id: 'did:example:123' } to equal 'did:example:123'",
              "stack": "AssertionError: expected { id: 'did:example:123' } to equal 'did:example:123'\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "e82f6eb2-e753-4207-87df-56b990f310ee",
        "cursor": {
          "ref": "2e9cc1d3-f1b2-4dd5-b8c5-4e938765cd2e",
          "length": 59,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "20e0d1bb-148e-41a5-99d1-2301e8c43315"
        },
        "item": {
          "id": "e82f6eb2-e753-4207-87df-56b990f310ee",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f3d5dc72-6599-4357-ae28-0811e5821672",
          "status": "Created",
          "code": 201,
          "responseTime": 385,
          "responseSize": 574
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "expected { id: 'did:example:123' } to equal 'did:example:123'",
              "stack": "AssertionError: expected { id: 'did:example:123' } to equal 'did:example:123'\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "804d9ed2-cb96-4108-a3ef-e4ea5107792c",
        "cursor": {
          "ref": "a66d7ebf-846d-4ace-b58f-45db0fce93d8",
          "length": 59,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7086a7f3-8538-42c8-975b-6bbd2912d7f3"
        },
        "item": {
          "id": "804d9ed2-cb96-4108-a3ef-e4ea5107792c",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "2a4155ff-8810-4177-8fb9-3e8a42f8a912",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "804d9ed2-cb96-4108-a3ef-e4ea5107792c",
        "cursor": {
          "ref": "a66d7ebf-846d-4ace-b58f-45db0fce93d8",
          "length": 59,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7086a7f3-8538-42c8-975b-6bbd2912d7f3"
        },
        "item": {
          "id": "804d9ed2-cb96-4108-a3ef-e4ea5107792c",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "2a4155ff-8810-4177-8fb9-3e8a42f8a912",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "4e9f27a5-695c-4f16-acf9-984b4076cbb0",
        "cursor": {
          "ref": "08df0588-b331-4034-8465-3df69fd2fbe2",
          "length": 59,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "bc00aaf0-b7e9-47e7-956b-4de78ec0f8d2"
        },
        "item": {
          "id": "4e9f27a5-695c-4f16-acf9-984b4076cbb0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a1324210-b822-44b9-9fc3-a94726ffe675",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 574
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9f27a5-695c-4f16-acf9-984b4076cbb0",
        "cursor": {
          "ref": "08df0588-b331-4034-8465-3df69fd2fbe2",
          "length": 59,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "bc00aaf0-b7e9-47e7-956b-4de78ec0f8d2"
        },
        "item": {
          "id": "4e9f27a5-695c-4f16-acf9-984b4076cbb0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a1324210-b822-44b9-9fc3-a94726ffe675",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 574
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d7784c-9085-4241-bf0d-802bfd9710a4",
        "cursor": {
          "ref": "b963771d-3588-4405-a9e2-bf1be6068cad",
          "length": 59,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "162fb95d-26f8-47ee-a0bb-5adb1321f284"
        },
        "item": {
          "id": "73d7784c-9085-4241-bf0d-802bfd9710a4",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "4dbece89-0184-43dc-9bd4-89546c6190ed",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "73d7784c-9085-4241-bf0d-802bfd9710a4",
        "cursor": {
          "ref": "b963771d-3588-4405-a9e2-bf1be6068cad",
          "length": 59,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "162fb95d-26f8-47ee-a0bb-5adb1321f284"
        },
        "item": {
          "id": "73d7784c-9085-4241-bf0d-802bfd9710a4",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "4dbece89-0184-43dc-9bd4-89546c6190ed",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "1e4a8e08-57eb-4961-99df-0682da20a2a8",
        "cursor": {
          "ref": "901164e9-d7e0-45b2-ba3f-e868eb11bf4a",
          "length": 59,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7ac0be90-3282-4309-81e0-4dbee9877db1"
        },
        "item": {
          "id": "1e4a8e08-57eb-4961-99df-0682da20a2a8",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1f4f4a86-7bc5-4716-ba7c-3d64cca05687",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 574
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4a8e08-57eb-4961-99df-0682da20a2a8",
        "cursor": {
          "ref": "901164e9-d7e0-45b2-ba3f-e868eb11bf4a",
          "length": 59,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7ac0be90-3282-4309-81e0-4dbee9877db1"
        },
        "item": {
          "id": "1e4a8e08-57eb-4961-99df-0682da20a2a8",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1f4f4a86-7bc5-4716-ba7c-3d64cca05687",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 574
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef5412cd-7c9b-4e84-8de5-fcb276d2eda2",
        "cursor": {
          "ref": "843357cf-5e3e-462e-a660-560326d3ffe4",
          "length": 59,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f23dd1a1-72de-4ee8-ba46-a4fb2cc356bb"
        },
        "item": {
          "id": "ef5412cd-7c9b-4e84-8de5-fcb276d2eda2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2b4f6d22-987b-412a-acaf-b9a59af60af8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ef5412cd-7c9b-4e84-8de5-fcb276d2eda2",
        "cursor": {
          "ref": "843357cf-5e3e-462e-a660-560326d3ffe4",
          "length": 59,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f23dd1a1-72de-4ee8-ba46-a4fb2cc356bb"
        },
        "item": {
          "id": "ef5412cd-7c9b-4e84-8de5-fcb276d2eda2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2b4f6d22-987b-412a-acaf-b9a59af60af8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "533910f9-cb90-4558-bbfe-7bd4bf101884",
        "cursor": {
          "ref": "d8f6c45d-9c89-4e92-9c20-27d620ee01bc",
          "length": 59,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "233b4a32-a7a0-4bb3-b260-e90ed49f5f7e"
        },
        "item": {
          "id": "533910f9-cb90-4558-bbfe-7bd4bf101884",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "cb36f125-09bc-4e68-ab09-4f4a0f9868fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "533910f9-cb90-4558-bbfe-7bd4bf101884",
        "cursor": {
          "ref": "d8f6c45d-9c89-4e92-9c20-27d620ee01bc",
          "length": 59,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "233b4a32-a7a0-4bb3-b260-e90ed49f5f7e"
        },
        "item": {
          "id": "533910f9-cb90-4558-bbfe-7bd4bf101884",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "cb36f125-09bc-4e68-ab09-4f4a0f9868fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "268aeddf-17ba-4deb-9371-bf453c2ed28c",
        "cursor": {
          "ref": "e26d2523-4ade-439f-b590-c776ab820319",
          "length": 59,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5488bcab-224d-4901-9390-6b49259bf594"
        },
        "item": {
          "id": "268aeddf-17ba-4deb-9371-bf453c2ed28c",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "b174d30d-bbca-4031-a72c-1ee25605428a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "268aeddf-17ba-4deb-9371-bf453c2ed28c",
        "cursor": {
          "ref": "e26d2523-4ade-439f-b590-c776ab820319",
          "length": 59,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5488bcab-224d-4901-9390-6b49259bf594"
        },
        "item": {
          "id": "268aeddf-17ba-4deb-9371-bf453c2ed28c",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "b174d30d-bbca-4031-a72c-1ee25605428a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "6b189a87-ae01-4b5c-8f67-ac6db8669a6a",
        "cursor": {
          "ref": "b1fb9f2a-99f3-4695-b063-257efa3c6886",
          "length": 59,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "7d2af264-6131-4d5b-b29f-6c74ab947968"
        },
        "item": {
          "id": "6b189a87-ae01-4b5c-8f67-ac6db8669a6a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "554aee8c-1927-4bbb-9edb-0c9303c85c32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b189a87-ae01-4b5c-8f67-ac6db8669a6a",
        "cursor": {
          "ref": "b1fb9f2a-99f3-4695-b063-257efa3c6886",
          "length": 59,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "7d2af264-6131-4d5b-b29f-6c74ab947968"
        },
        "item": {
          "id": "6b189a87-ae01-4b5c-8f67-ac6db8669a6a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "554aee8c-1927-4bbb-9edb-0c9303c85c32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cbcc1b1-2b1e-4aa5-bdf6-67b70517c20e",
        "cursor": {
          "ref": "0ad0c541-a2a0-4301-bd10-8c5d650d2038",
          "length": 59,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "129a8318-f33c-4abd-8e3a-f3b034f87388"
        },
        "item": {
          "id": "2cbcc1b1-2b1e-4aa5-bdf6-67b70517c20e",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "3b55d720-50b9-4646-8878-01a1823c018d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e5cf22-6faf-4443-8f26-14c0561642a5",
        "cursor": {
          "ref": "191db2a2-57e4-403c-a7f0-a321574364b6",
          "length": 59,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f6dca82a-2200-401b-9cf1-50ec017fba89"
        },
        "item": {
          "id": "11e5cf22-6faf-4443-8f26-14c0561642a5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5c76ca3a-db72-4c33-87e6-ee38ab1f5bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e5cf22-6faf-4443-8f26-14c0561642a5",
        "cursor": {
          "ref": "191db2a2-57e4-403c-a7f0-a321574364b6",
          "length": 59,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f6dca82a-2200-401b-9cf1-50ec017fba89"
        },
        "item": {
          "id": "11e5cf22-6faf-4443-8f26-14c0561642a5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5c76ca3a-db72-4c33-87e6-ee38ab1f5bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a2fc4d-00f2-44fc-8b0d-2f10d4bb9066",
        "cursor": {
          "ref": "bd43f8b1-5d69-48f5-8353-d99902aec161",
          "length": 59,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ddbb356d-7ccd-4cde-b51f-631cbde21375"
        },
        "item": {
          "id": "08a2fc4d-00f2-44fc-8b0d-2f10d4bb9066",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "74808afe-c89b-4518-b19c-7fdd33894c9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "402ef771-5a07-46ac-9654-d71c2b7ce187",
        "cursor": {
          "ref": "1d6407e1-d849-46d3-bc77-7e41a102ed49",
          "length": 59,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9836b4cc-a736-4c76-aeb3-41bbe7727814"
        },
        "item": {
          "id": "402ef771-5a07-46ac-9654-d71c2b7ce187",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "f584485e-8844-406a-adb3-eb45a1c2ab1d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ccf949a-47b1-4b04-9fd9-913057d3b41d",
        "cursor": {
          "ref": "28d9ba33-0081-4ffd-86a4-367420464039",
          "length": 59,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bf31e778-ae28-4bd8-9b37-c8fe11796681"
        },
        "item": {
          "id": "7ccf949a-47b1-4b04-9fd9-913057d3b41d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4760737e-20e5-4489-baba-8fba21c9076a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ccf949a-47b1-4b04-9fd9-913057d3b41d",
        "cursor": {
          "ref": "28d9ba33-0081-4ffd-86a4-367420464039",
          "length": 59,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bf31e778-ae28-4bd8-9b37-c8fe11796681"
        },
        "item": {
          "id": "7ccf949a-47b1-4b04-9fd9-913057d3b41d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4760737e-20e5-4489-baba-8fba21c9076a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ca17e0-790a-4f01-b64c-01ead1a5fa7f",
        "cursor": {
          "ref": "13db0080-fda8-4e6d-9fe6-f044e310588a",
          "length": 59,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ca81c90d-0aae-4537-8ca5-0556c41a7afe"
        },
        "item": {
          "id": "45ca17e0-790a-4f01-b64c-01ead1a5fa7f",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "3a4ceae4-d884-45e5-b88a-a541b7094706",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6804472d-18e2-4b13-b738-d6f3b59c84e4",
        "cursor": {
          "ref": "a40bad8d-bcbf-437f-b55e-eb2e949b7b7b",
          "length": 59,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f3490239-342a-4b79-9135-09d18dee9ac6"
        },
        "item": {
          "id": "6804472d-18e2-4b13-b738-d6f3b59c84e4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6df20e7b-3033-4867-8f87-8a0fe3d2cc50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "6804472d-18e2-4b13-b738-d6f3b59c84e4",
        "cursor": {
          "ref": "a40bad8d-bcbf-437f-b55e-eb2e949b7b7b",
          "length": 59,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f3490239-342a-4b79-9135-09d18dee9ac6"
        },
        "item": {
          "id": "6804472d-18e2-4b13-b738-d6f3b59c84e4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6df20e7b-3033-4867-8f87-8a0fe3d2cc50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "a0144122-19fc-4f7d-95d7-7caccea20b29",
        "cursor": {
          "ref": "09af1f21-5153-4f53-8d41-1125e869622a",
          "length": 59,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1884e452-ef4d-4e10-a878-6b15bc58ed33"
        },
        "item": {
          "id": "a0144122-19fc-4f7d-95d7-7caccea20b29",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "3c89f938-0939-4a66-a769-e9ec083070c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "6d3f6ab1-54e3-477a-a868-03aeb9950024",
        "cursor": {
          "ref": "a41aedd5-3974-4aee-b3fa-6c54001cbf9b",
          "length": 59,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "cd7a37a2-c292-4562-bdde-28f75bcbb1e5"
        },
        "item": {
          "id": "6d3f6ab1-54e3-477a-a868-03aeb9950024",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "30056fd1-ee72-4c3f-9c30-09a2510a3d25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d3f6ab1-54e3-477a-a868-03aeb9950024",
        "cursor": {
          "ref": "a41aedd5-3974-4aee-b3fa-6c54001cbf9b",
          "length": 59,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "cd7a37a2-c292-4562-bdde-28f75bcbb1e5"
        },
        "item": {
          "id": "6d3f6ab1-54e3-477a-a868-03aeb9950024",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "30056fd1-ee72-4c3f-9c30-09a2510a3d25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2726b8-3877-40fd-a65e-34d7d4059e44",
        "cursor": {
          "ref": "4167cabf-fd4b-401f-a655-0026e1d0572c",
          "length": 59,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6c0fd32d-32a6-441b-9c76-65570da65e89"
        },
        "item": {
          "id": "cc2726b8-3877-40fd-a65e-34d7d4059e44",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "ee90a525-b813-40b7-8b82-a3d3e22dee10",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}