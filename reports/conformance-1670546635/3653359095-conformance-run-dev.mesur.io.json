{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b84620a2-9701-4621-849b-5767bc48b44e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "73afc38a-b1ad-40a8-828f-01b236a25fac",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b2c68f51-8f70-43f8-bd8b-4746a646d130",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6675adf4-c816-4b7e-aa5b-f4cd185a7acd"
                }
              }
            ]
          },
          {
            "id": "33b09c4a-162f-41f9-8484-8da71e080940",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "518aa922-5074-4d41-951e-0ff5f11475f5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "29cd906e-1f18-4d67-9b34-7a8f0a9b12f5"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a8a90bed-9ece-4b1c-8810-bd825132e4b7",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7c64d132-2446-487d-8fbb-96e6d25e56de",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0116a11c-2724-460a-b395-aa73131babef",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9135ee6-d86c-4c3b-a6d4-59f14abf38eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "edba1900-9495-4b5a-a1bb-9018f8b95b91"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "19a21275-87ba-4bf0-928d-d49f79630386",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eeae36f9-a75a-4a31-8d76-204165114c8b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3445bf86-ed0a-4262-a251-c78278f9182b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "663c5f1b-278a-4237-b9ae-99adab5d2f91"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce76afed-72ff-428f-bc34-441ada83374f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0f2a3b94-cd0c-4936-ad1a-d87c9cd817cc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c8eee216-6c46-4f40-9db8-a66f5f0b7e2b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ee23eec8-4d3d-4326-8b76-c90f43e7e8a2"
            }
          }
        ]
      },
      {
        "id": "f993ca81-368f-4812-a394-fb02b4157af2",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e81057ba-0f9f-419e-9ab6-176a8d1bde9f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "792da18b-64e0-48a6-b276-cea5c5d92469",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d0d96a09-ff81-4e45-b197-ec9d5747eebb",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ed1506-215a-4b5c-8eb1-08a9e8149799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c0fc80f-6dd8-4d0d-9219-8079a775da03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab584ce-579e-4211-8189-1717eba688d9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8575c3fe-c099-4f12-a58f-88887ae89ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9193ede7-5e01-4cc2-9e8c-f29a61cb540e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c56236-c914-4dde-826b-c8dd3498b299",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da2a228-a45a-4220-b6b0-857cc27c9c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8a67333-b8d0-464d-9b02-7de070391df3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8061bcdc-85ef-4cf5-8759-3dee8c9a01a3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7d9ebc7c-1219-43a1-a8b7-4e47a43db3c8",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a21d13-27e7-4296-8c64-770b7b8864d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ac30062-5e97-4ba8-86e6-56bf05419a70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce63c4aa-6f4b-42e1-826d-9570c35b7dcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95a86d31-f415-47b9-ac4b-b2eb5a484076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a893d6-264f-4478-9804-7466a76d5d49",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "387e95ea-8c00-4a03-8fe9-f1315a232a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d43708e-824c-4ba6-9148-8ac5b268e4b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f0b9b3-eb84-49b7-a796-679c32d590fa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "ecda67c2-609e-4536-a84d-1b0628a51973"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "40adcb84-a8f4-41c5-af7f-2ebcda429be8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "70728a46-f979-4c04-bbca-6835745277c5",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f539b765-850e-4c4a-872d-3f8cd12c456f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "556c4289-a2bb-4293-ba3c-ed8126ab91c6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8f0e25fe-4520-40fe-9efc-915d49b49904",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "462a1394-5863-4a79-b2a4-9186e7e8fb11"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "143484bf-1858-4321-ac0f-57b33bc525ee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1d3ba2e2-e912-4d50-bd61-5434925d0869"
            }
          }
        ]
      },
      {
        "id": "032f23fa-5e0b-499f-9d1d-9349fe7f141b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2526ac5d-b8a5-43fb-9fc0-2a6cd4fe0647",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5898bd7e-2fbd-4cc2-bab2-772befe169ab",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f7e01c7b-2c9c-4bad-ba5e-a8036a6cb755",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a158ad-f315-406f-919e-bd821fbd7ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a94a53b-a785-486a-b32f-82aa6d7b3533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fcff8f1-289e-4285-8f47-cfa47979ea07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7526be8-4061-41b0-bee3-d7ead2707059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27048a74-9fec-4187-bf3f-7cdf15edeeb0",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5b1bbb-adc3-4159-94df-fa94e69f55aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22ed41ac-b788-4eb2-8f84-e50ecc1848ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d9c0ed-6032-4f1b-952e-f3901cecd3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9bb94852-5f1b-4dd3-b499-9977c68802b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73102f28-bd96-43eb-978d-e76ec6bb531b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b794b954-d6eb-431f-8bb7-afe247ec6f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55f65792-7269-4f27-996e-1b7fc6dd47c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e485053e-cbe8-408e-8de1-f318c49e5bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34fd6bce-1396-41a7-b953-a249c300cae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41e222d-b93a-4a91-bd43-455f4d6ed2e5",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e959e97a-3494-4dff-aad4-3e7b8707da69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39bd0b74-1793-4911-b80e-685bb259ffe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0659969-0431-4412-aa8e-c57d7c634527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "166c3a63-5af2-49e1-bae6-acd5f8b523a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0778d7-499d-44ee-afe2-072c0a786cc5",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0031d03-6ead-494d-a3e9-6a05306d525e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "408ff8be-4287-4e64-9320-ce3de0d7cd01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8febcc23-0fdf-4256-b0bf-a994cd12aa68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "205eba06-e241-4100-921b-51a4a2d20ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e82742-dc0d-4c36-9215-e0f1120a4aad",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e1d969-75a8-4c2a-b4e5-ec1a9b9bfa39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f7a88e0-79d5-4c00-8628-e336fe5f3e4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cadd54a4-00bf-4466-b548-a0a5c6038397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0eb2b771-ce60-4ee2-8e2d-59da3b7b0561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3909b41-79a8-401e-bd23-4647613d0e55",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f28413b-c2d5-410c-b67f-867d6a76df65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0564577-d64f-41a2-9153-1a8e95abfd08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd437eef-a93b-4857-8df6-b60a6d828b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79e6cdb0-e9cd-4f73-8ff8-e491fbc89c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b51ed43a-435b-4499-971e-5b8dca4ea616",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c5b47a-6306-48a3-8959-ec3508f54062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9386afe7-bb02-4161-b10b-8d80d179fac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b59eb8e-47c3-4952-90e8-727583e97e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d49694b1-0e6e-4ae4-93b8-7e053f04713e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3464ddc8-6d59-463f-832f-bb2a50f5d5d6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "308ae4a0-6a81-4ccb-b750-4708d457ac3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7510556f-c107-45d6-9e55-c4e40dad6b19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebcb8b0d-68e1-4851-8b18-d69e4fe9d361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65013c8b-fcf6-4c68-be3a-fe1581e1d5df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b362242d-26ce-4082-8d71-cd4c3c437bd9",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bed0c59-d44a-4b05-bf68-a427d81fa3a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0adbcc2-f334-49b5-a1f4-4dd9229effa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0997cc7-bd6c-414b-bff0-869b16731c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6df554a3-b120-4579-a288-8c6f37a91fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25cb110-d20f-4464-9ed8-686205314269",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73bb8ba6-21c0-4154-b2eb-5c5c2dbd29f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d381e825-2330-4cb3-a948-747303d77fd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0a632f-4981-4477-8aa2-5087a686d02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a61a9a90-6739-4dcb-afa3-dca1bb00e349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ac3cf6-b9fc-4340-860a-3ca2f7595134",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0809fba8-8bfe-4f14-865c-b7e9495750e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b2cf0ab-2e7f-4d41-b477-0cd87940af37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220edb9f-e895-47d2-a67f-4f02f8e4bd38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91e050d4-20ab-4e35-a9ce-cce11272bc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d646e6-944f-4f11-899b-3db7f6a2fb18",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5a88bc-2f16-4fb2-a7af-04f7ba20eef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23a15f2d-c3ad-4b8b-95fa-a227facd32b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704e4975-71c6-4b7d-ae98-f84e8f708d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74556c4b-29b4-4b93-b293-ea307539d77d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa91a4d5-2304-41d9-8506-cc51f8672ff3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f458690-9efb-449c-9bf2-dee3dd8b7151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "043b1084-12ce-4b4e-9fde-f6d06ef04419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23603e31-d60b-41fb-9f1c-7df30cca4efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aef4c045-ef64-4aaf-b925-5b7b15dc2d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5eef2cc-4e51-4b3e-bfad-e34d1c68874d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50fe3cf4-7a78-412b-b6de-563c27df79cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e95dc58b-fd27-4d77-95e2-7f6db929aa38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae81a254-6143-4c7d-8d48-cf4fa09a5459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb701276-37da-408b-91e7-197112cb0687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d38a907e-6fd3-4be0-811b-62ee9db547ae",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "299266e4-44da-4dc4-80a7-3b115abf1a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b11673f5-4f6f-499b-9cc6-55fec1b88826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e29028f-2d0e-4a2f-8a0e-2b7a031a6b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "097f3f98-d4ad-4e9e-8ca7-6f2ce0596ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a864225d-a581-4461-8454-cac3eea495d1",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e708c176-ef5f-4d0c-a0c6-907b7a46b859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "043ea5d1-eb5b-41d7-8246-094ef54fa105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9999b321-628c-4089-a837-d86549e12bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4f909d9-646a-49dc-b326-2dae935428fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f91aa44-06b4-45ab-b079-011dcb6da082",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ce409c-653d-4246-be63-e0afe7cc151e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7437ea74-f301-4c55-bc28-448b9a0c4fc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94811ac7-3fd9-4929-8fdd-b01a66957310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc830f41-e91e-429b-866b-d5b4943aff88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c191c9a-17c5-459a-99d3-73f6a56dad56",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b407917f-c288-47c8-8bd7-38026845a8f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d79b72fc-1151-4ecb-ba21-2acd57ae3da5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3462a0-e793-4070-825f-1d6b49f7f0c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98135a4c-5efe-46b3-b01f-ce3853745e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad38d9eb-b0ca-49c9-86d3-ed22d393b3aa",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be188ddd-08d7-45c9-b94a-25d93f505dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc054cf1-37a0-4210-aa5e-ad99e61c45d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeff7871-2cc1-48e1-b1fc-e96c0faf5f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff80ab1a-9d6e-4bd6-8352-7137c2e8001d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21407c90-437e-4f6a-bd06-bb4a4d38440a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "872e1e56-018d-4235-b482-c0cbaaa81620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "856636f8-003b-4422-b0b7-0305f731fcfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7809b92f-108b-4281-82a3-caf0e5a2eab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d5006b0-2299-4a6d-a0b5-e23abcd9e001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ee5c15-f9be-43e7-9f7c-1c7e3f343b32",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9704d8db-90a6-4f22-8825-8c40ba68bf9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54f9fa86-8c20-4715-9cca-adc072f53451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c797f0db-e35a-4b39-a0b3-fbf5419b9f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba276ead-ef04-4c6c-ad6d-4682ca24e680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da7f4ff-d45b-4fa5-9424-a1a7cf5a7dae",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa941759-2412-4795-948b-15ded1a4e811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d2be2e7-b84a-4b90-a960-47c24b94ca79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22fdcafe-288b-4285-8c89-7919658d5b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cab43eba-298f-45a5-8420-4c578f977d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6851c6c4-f314-4f68-8e3d-c3b499e28050",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad89a04f-e762-435f-a279-c30401005f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cbad19c-3133-4fd5-94d5-52f7edfd4ff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2cbbd98-53a2-4923-b384-dec44a19b4e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "df0eaf75-c753-4d99-87e9-fee49aec11ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d7e586-6e63-4fd0-9e1a-1845daf4dc96",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa510e0-e411-41a0-9dd1-89ef8aa9b27a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5180f6a-af98-42a9-9c7c-0e4c895ee04b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c78306-b828-41a2-bbe3-ac65683b6646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0c0a7ec-e4d9-4f21-9b4b-3d65c7527e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967a9edc-e795-4904-8e8f-4a1781aedc50",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9107eeb-737b-4e6f-a697-d7c7c6d5a490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45660b10-a2f2-441e-85fa-068a8c8a0af6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcbb3569-fad7-46b1-99b7-249f9f0168ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef1e6bdc-0b60-477a-96f4-c6393f045858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "611e83e1-2eec-4ced-9b2f-2f2a538b4aa3",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c18bd37-bdcf-4269-814b-35de697bdae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9195a5f9-6661-4a3b-bd2c-0055cc64bc08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c971353-5d95-4d91-92b7-8d37e832cf81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9252063-41fd-4d97-b26b-854892ea6fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f01615-c5ad-4d59-bbd4-a622ae7d0ae5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d1e5e38-57fa-4699-82e3-4c2980c9a42e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6962eda-df64-45c2-974d-93c8c2398afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410ba5ef-565f-4175-bbf2-1c41de2d27b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "23a20366-78be-47b1-9349-715d5a0276fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd577a82-d167-44aa-987e-c96998e76a61",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abb733c-3675-4d5c-a994-b2bde6d26e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74bbc9a9-f3c0-4229-abcf-b6a23bb7e6c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e07cd0-becf-4048-8e27-a1021d26a1d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c9bd868-458e-4b6f-956c-7903801757a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74372116-ad33-4147-8873-b715d19fa6c6",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bde9195-1874-4ca0-9e99-91d78e4a1e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "601e19ed-67c8-4a0d-887f-11d99f7a3f0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d23f05f5-4c9f-4272-a96f-b0145bf92ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d87ed178-158a-4946-a3b4-4e489dbbd5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f60efaf0-7221-45f2-b8f8-44e9da2f0564",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6d1815-0d38-49a5-9ad7-2565329e3eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4808a9ea-9717-4ec0-a8f8-16970b2e3189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10203fe6-12a6-478e-9331-08a4c8026f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d86473cd-00f1-4bf9-91e6-17f5efcbe5de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834e1ef6-402b-4c8e-ae6d-1ce0e48865e3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52dc4842-ee0f-41ff-a27e-c1aee8fa5c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38a1791e-b4eb-42a0-aa23-2352e752e976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba53eb6a-0215-4ad0-9ad9-4f791331aef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "06626616-691b-4075-9e1a-29e13774ba0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42efd76f-91d9-4b00-80f9-09c287648261",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a6affc-1f60-4f7a-9773-125f98c7bbe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c36782f7-9bbd-413d-986c-0a11c8f90b6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a17ea92-da3c-4931-846f-1de10216aafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b03c8c0-cc9b-4db2-8abf-dd7d88a0d441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c46f8d7-469b-49ea-8c95-b7a9e7d81d8c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b9af97-c979-4dd1-84f1-408d5fe5cd9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "773928c4-b9b5-4d36-a32a-a15b0a960c08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b5a89a-c3a3-4115-b779-6ed81c183727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e891c5ba-7142-47eb-b5c1-39fdceecb474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750f9261-baa8-4870-b60c-41ba2ab2d6af",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a0baeb-5842-411f-86a2-3ebdfde525dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e38945e9-6c6c-4248-a5b8-675240b13a16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd522b3-ce46-4750-adee-5cc5821f4beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a2ba8af9-dad8-4cbc-bf7e-a5bdd65bbcd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d4ff05-509e-48d0-bf37-4ca2f6a4a62c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09fa3ef-d2d8-443d-a86c-0966f7c0b852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "efd33b1d-53e3-4c1e-b8fa-829447633217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5a4c1c-e599-4438-b710-3880ab36535d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e7e1a599-039a-4f53-b164-065eb80ed335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab376bb4-2076-426f-93fb-6eb9f2d79165",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae6d6ce-42c0-4a29-8e2c-51056a88e3af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5a12a8-99db-49f1-9d74-104c65e5ecaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2cc51e-7bcb-441d-99ee-ab5ab4d29f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "175ece5c-a9bf-4908-98d8-ca11833b4605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "817c0ef0-ccba-44ba-870d-f67cb0586281",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecab126-3d86-4a21-8cb1-a717a7452d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "078df1c5-d751-42d7-b333-44da1d8f399a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e88cbcc-e5f6-45ba-abf5-21e2e8d0050f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3df0a7c2-e1c4-4a89-b2aa-76b113f6d7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b535ee26-287d-4299-b061-562f0638a73f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0198b4d-81aa-465c-8d88-cbbe6ec46246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75961917-21d3-4b21-bb2e-17c86fba0c81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "466e3d99-df62-4e53-878b-9bd1adeb83cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "acc9c9b2-e3fc-48f7-8469-7d0bc85ef20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5bb52d8-abab-4a05-a8ab-347a6c8ed549",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a469ccda-25da-4a48-909a-6a719588161c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e41ee0c-61f3-48eb-9b7f-28dee447c6e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5908bf7-eb81-477a-be67-37757a076e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b8cf919-c2c0-4bc5-81ee-662658205cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8af8396-5226-473b-9a73-c95963e5e53b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73951bc2-5a63-4b07-b92f-ddf3ced6cc7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9198b73d-5972-4071-adf0-4cfef9867de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1469e2-f245-4103-85a2-ba509a11a0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1abfd9ed-94dc-4a51-aa1a-828f90b58e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd5378b-f5c1-42a4-a693-4be7d2a10ab6",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24cbb6da-a346-472e-93ac-dffce19d22e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8910f84b-0fb6-4347-8dab-ac67c9d35180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b775dcb4-33e9-4f60-87c6-d450c36ef737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "57984b0a-8c3f-47f2-ac3f-fafd6a7bf041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab09d71-5a5a-44d9-b262-3fb659fb4f13",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dccf0eed-784a-427a-82e1-e2d68b11fe66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d55c95-0dff-4b62-9ce7-27325c5957ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e518ddce-d1d3-404d-bbc9-3420b3ea2d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "713edd11-c915-42c0-980c-893c85cd202a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3856654-fc06-44ed-a721-c122f77f41fa",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc30be1-95a2-4b54-8e82-66de7013f2cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee18c0d9-478e-46ff-adc9-ef3bd8024353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2995c257-99d9-4fe1-a77f-1907b76cedc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f829a638-9d1c-4123-99ff-c393ff7a5150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689ccf31-fb93-469f-ab4f-ca44f6f6b428",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46adf4eb-aa85-430b-a93d-b88b4dd04a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9668fbf6-26d3-44ec-b223-0c1edfdfd508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6899b022-acb8-4857-bb5a-7ad4b7d11f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3325e78d-f7bf-4bce-b89e-6854defa0211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d556ac3-3c8c-41e0-a254-45a9fe6b1fb6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc3e8cce-77cc-428b-ba02-4c5eeab0660c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "328410c3-13cc-4545-bd11-9106c3b908dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c727a15-53b9-4b5b-b647-d58cfe214a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e157956a-a12d-4222-9201-a9a9f0e22663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f00090eb-151d-4c45-944a-1e3f9ed5b205",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec46d274-11a2-40ed-b92c-0147ac1fc51a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "022e5b57-de49-486c-b0bd-06b56608dcee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c39e72e-c780-4ff1-b460-317920a1a1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "206d08a1-4d23-4192-91bc-a4b03732883c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c366f01-db1a-44e5-bea4-54bcd4431194",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "737798fe-813c-41a7-a6e5-daafcca658b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10db2300-9550-4f41-be51-433ecffd792b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3bd8c68-ca6b-482a-8aaf-e9c226914449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c44c8dd7-8c17-440c-b7bd-c4a021fdc1ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1361bd7-c492-4317-8474-89402da0cde4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b566905-98d9-43ed-ab85-8a31deef4730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "180443c2-f21a-4e30-846f-1d51c59fe46d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6cbd93-0ed7-4640-9b85-899cc8d85543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "95dda5a8-b235-4162-8b04-cd6e94881765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c155885-22ea-4cf3-ac66-07c231ea61d5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8318e6-671c-4047-8807-f5cc8f0613e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba91f89-bf3e-4f72-96ed-577e3eb56ef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba81b10-e525-4429-ad6f-9e06fcf93465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd319006-4a2c-43da-84be-062c24405408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7009d486-d858-4771-a1a4-baffaddf0014",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abad16d0-8ee8-4a98-a41e-e72d7910a917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da4a70c5-8d7f-498a-8bd7-2e88da90ddd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867fd068-aa87-4f55-a5e3-ff2c95d26415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "34eab5e2-9725-4c68-9602-cb21488c8aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f0153f3-cb81-4f10-9184-10c0e8cf3daf",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0f92b7-7642-472b-9112-1d6985435d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a48b886-f6c8-49cb-bcb0-84503ed87a58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b2fbe2e-a643-4912-a6fe-ba7dad119f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "418d179e-83bc-4f74-a545-e7058b0e3681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e6b579-a7d1-45b4-826d-0b50ae704c2b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe57e497-d5ee-44d7-bd03-cf0ab327917c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd2cfeb7-a3ff-4117-8f24-d8ef0d9c60ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28093a2a-2f42-424d-993e-a3464069aa19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ec58b44-caf9-4a87-9e8b-29ff3ea6f1ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b099c4-7587-4dea-bba8-a1ab4c37839a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "678eb59f-7b27-4fc5-b9d7-d039db340b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11869729-f4e7-4022-87be-bf0f4b6514d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1546aef6-524c-43a8-b005-49d074dbf6f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb4cebd9-674c-4790-914e-97ef86a9ccdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac3dc0a-c737-40e8-bddf-959f5329a920",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b45f1a85-de08-4b36-bd89-b2b6247d95b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e444a79b-97ac-43be-8075-a866d9e93cbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "551926e0-a8f8-4617-add6-e00d6d3c9457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c5c07d4-fafe-4e41-88d6-fc01f0a06128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb96c51-afb2-4809-beb0-7b4e53501d2b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ba5d61-cdc3-4956-8089-ef9dad55d279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fd85763-cb91-4dd2-9d40-300b51df1f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24db20a6-d924-4f94-9e8b-3c7c0e28117e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b7109e70-b8c1-4903-97c4-ec4b252be176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "298e52c3-2831-49df-8788-de876e5f40a9",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea2e013-f41c-488d-831d-561bea36698c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8707034b-f709-4c90-b65e-05de3b3f883c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e243f4-93ca-4bd4-abc8-93ba8da7cc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7184f29-6fc6-42e0-a828-05bdf2ac2445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "448b420e-b947-44c0-a721-8a53c3666c12",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef48047-cb3c-4a66-a122-4ba86da6144f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "726490a1-51da-4d9e-8c01-78d9255f9400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da2b3a2-c819-4ee9-8d83-8eb2f02742a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "307b24b4-b8c8-473e-b540-bd546ee89444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ed5ae3-79ec-4cb3-83bb-513b7968b1cd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c7d8f6-fb13-445e-9cf9-699e47059f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deea1968-7323-40af-821b-850594db7f26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6701a5-5431-4c95-8189-8bd78ced19f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "df348475-7f18-4e92-afc3-0ff073e675d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b62ef0-d816-47be-b220-23b8418a527f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2092a6d-3d12-417e-af82-cb8760bc1921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "135e42bc-bdc2-4a34-8738-9662bf333f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b46b9070-f5ab-4dd3-be63-298e5a7a48ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "028b7aa3-6b11-452a-9eb6-7f8f5e7a1d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b5b324c-9e4c-4483-aea1-5ce3a9167fbc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a03711-0f07-425d-b8c8-53764269fcd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c9d2b10-793d-4be0-9cc1-d49b0a8fdcdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc44ab6-d61d-4d5b-baf0-2ff1e39f6b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebb58dc4-384d-41dd-9e65-ae1a297159f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d67a13d-d576-45eb-acad-cc7543f1e998",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3242f7c-057d-42e1-a2cb-cf236d02f8f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f795dfaa-8540-4e79-9ccc-533eca908afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012fa40b-ba91-4fa2-8a83-22e57e3edf93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "278ae974-9d16-496c-b4b8-8dc3c58629d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7977cd5c-9c86-48a2-9a31-9e57937332b4",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fded371-12d0-468a-b283-0239d8225886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4715574-f09c-4261-9755-de0c3d4a7c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2364c57f-e4a6-4836-99d0-6589b9c4d7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9dadc059-4678-4c3a-bab1-d0f393581bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d422a4d2-d260-4fe7-a0c4-338cd3bfb538",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98910366-b08d-452b-a5ea-ad9d4f80492a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dde465d4-4f10-4d0e-822a-606161e56a2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2a1213-ed4b-4a93-9010-e15fc00d90ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4dd642a1-db12-48f7-8431-6bd1cc1806fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd95fd29-df93-4c05-8c62-409274c990e6",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faab55ed-90c5-4aba-ac2c-b05f1d726553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a2a3cfb-e618-4dbd-b4db-af7f4aea681f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd3f69c6-54c9-4bea-aa0a-ea4c3cf55631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8391048e-ff61-40f9-85d7-7a3535bca23f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d8b45e1-9349-4677-95db-eb06cccf6e8c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc111549-b2a9-4694-8b42-baf0def23872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90bb0e61-e237-4379-8ebb-f2117ba21056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36088572-2b6f-4fc0-80f5-fae62c5e5c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e769f13e-23ad-4d82-8716-81f5aac2d95f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "610df90d-c233-458e-b436-ff622b5935eb",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "147aab21-f614-49d5-a237-f7658f3e674a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70c1262e-9c13-426c-bd44-11f1378495d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd16d17-e31c-42e6-a45e-b38a3a5c3ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f24da855-644d-4db0-a121-6f9f2ad1dc5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835dac4a-b90f-4b20-9808-666a3c5a6b55",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f977f213-21e2-4fb9-8d6d-4e47823137b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c71f133e-2d18-4c52-84b9-12955fb5b2a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657e24b7-631d-4c01-8955-7ea7f88208cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "732635e9-5b77-42cc-a5c9-efb5b734c88d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c3054d-8a73-4163-a9b1-5cfac74ae9bc",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2ea4e3-93fb-4b01-aba3-7da7eae0e8e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bd11b9c-e73a-46f0-9069-5acca5a19ff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9befd781-58a2-4548-8348-bf3a16ecb7d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "06924838-fc87-46c3-a110-2e8ac35fd9dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7420035f-1ec6-4485-87da-3683864b253c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c669e8c-2103-4caa-b980-68cb720db8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d01692e6-9023-454e-a54f-032ea5cf7b17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a385419-61ef-4443-b71a-6a5c28fea234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a626b87b-b061-4278-9f3e-f8a4566b882c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb6e392-f6f6-457d-a3b7-380387963c24",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be09120f-950a-4ee5-99e6-a6615aaa12b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93757637-5fe0-459a-867e-6860d8908c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523491e1-4c88-4e7e-9884-ea12e28d32bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f16385ea-7e4f-4756-aa4a-a39588e1afb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abcde559-7260-47fe-b336-10aed6445faa",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56fba10a-690a-4c0a-8ce5-0c3cd78f4a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41542c62-225c-4568-9396-ef2adb486c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a009c7-6568-4227-a9b0-e241dc2e2cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5f0c75d-33a7-4fbb-821a-7b8a3d8fa892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd298fea-23bf-4a71-b822-44a6cd1769d0",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff7177aa-8420-48b0-b474-fef4cb48be9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "885f57b3-b612-424e-a17c-a89e3d9fa7ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "364a68e5-1d6a-47e2-9c12-06552a575283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "30de1ad0-4cf0-45b9-9f2c-56da3a160f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c96beda-4360-4d48-bd3f-e4bae6606f07",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64bc3238-739a-4f9e-84e0-dc3d5176c6b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ec7e43f-6696-4783-a429-3c1ceedc9602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb7515da-9335-402a-9000-2f53f72e9c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "39b7f4a8-1290-4469-9baf-591d83fb6b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15de9d0-c1ea-4f9e-9d6a-8ef3c578daf7",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3df965e3-e9e9-4be9-98ee-41765138369d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea24fd42-b8ec-4a79-8792-b7dbf9fe8f03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24f94a9-b6f8-4420-bee0-199440b2f8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a1844a8-1b12-4018-8459-2680758bd821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f782580-dcc6-4ee1-99be-fbd53981d82f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "643844a0-98b2-4098-87a7-564d22926044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b01598f-c8db-4b7f-89d6-e2324f83fdf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a86509-187d-458a-9b57-8c77f9dfd086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b8ed8fd-200a-4b63-bb21-c00dc277d08f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52ecf41-7c2a-496e-b738-19f314414658",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9dcbaa8-a87f-439c-b8eb-8465e4a7bccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71dee29c-e3fd-4e06-85d5-1b092f3cdb0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f925be9-2ec2-4b26-b35a-baa76408df01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "480921c8-2889-4cb1-855e-5baf3a652ce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3dad3c2-4a03-4e98-af7a-0fe93234cad5",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "361fb757-49bf-4a08-a0ee-0873a6db5521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb7304c-b5fb-453e-a4a2-8da7e416dc8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905ecfc0-fa42-4c72-af44-8dc9dd1c3443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "326e7593-88c1-4814-804b-64fe7069de4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac2fdfa-5937-43ea-bbc2-d383f7a9de42",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13bcfbf2-90b9-449f-9a40-a9edfb5ff5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08eeb4a9-c218-4ce7-b059-57da7f56fff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f0430b-dc27-427e-b6f9-548282507998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "08277b41-971c-446b-8c98-aaf2b049c42c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b726d20-2319-4a2e-a2ea-87f775b9e9fe",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc827d1-d822-4b1b-b58b-72f03415f2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b59d816-3714-4f6c-82f1-2cade4b612f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c25ba6d-70ea-4582-b751-4fd29072efef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f2740f0-fd80-4a74-9afc-817f1fc47080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56aaaaf7-fc6e-4121-8340-68b3fc18ad75",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a95059-1b0f-4643-ab19-ef2aa94fc400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "048b7659-3f9d-4766-8824-0fce6f302ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70fab0aa-aa21-4cde-8ac3-9f89d4087583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3136d73-cc1e-45cb-b5c9-77a70185de55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed00d7f8-fb36-4d04-83a3-0292c7fceafa",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad310b4-f871-4e07-8894-cbe42896df54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "956834db-1979-4d3d-89d4-19195fde2ab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52463fe9-3d49-4eae-9f8b-9ade22fb979b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "caba23e5-4c43-4500-990b-40d212d3f509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53993a70-d010-4547-89e4-45f401a292f4",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a6073a5-55d3-4faa-9620-16c5a66f24e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "007c341e-fdc4-4f20-be3e-995fda3fadcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff28976-96f0-42fc-803c-62c7f2e45a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42e50558-82af-46c5-bb4f-86b9a45bc3af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11344e64-02fa-45c6-a35b-4cc1c97421e9",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "091ade40-ca33-4783-a697-d0647a7deee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4d83365-9ad4-4256-a928-75ce23ae5647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0dba927-0cc3-4a0b-b302-09b492d425ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "868ae975-7398-4cdc-8855-8af5c48f9f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f52b1b-2b21-4ad0-81a6-d94f0a478314",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38dde5a8-53d6-40c6-8488-b7e93443860c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce5bff94-f0c7-471f-aec1-856451165b73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1003344e-74fd-44d3-83eb-c03e8ae5e68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b3793dd5-f213-42df-b46c-aa09bc8daffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c9d97c-c358-4762-938a-547721e3ecdf",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "314b221b-3199-4472-a52e-7a0060239f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8242eb6-3f1b-44ea-9e15-ec55f4a16298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b17805-89a7-4cdd-b2c7-533657c85cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d8a9723-199a-4ba3-8200-8e82ba50c44d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f90d95-1237-4108-8e63-e557fa6d5983",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9d4696-e065-4def-ad6c-ddd7432d2339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "335b88d9-a73f-46b6-a4c6-c0eeaa4696ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6257bd8a-0aa0-470c-9d37-c550b06bdf66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0200ca27-b9e3-4cc7-a5d4-da2cda713bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b30dd53-7cb3-4a66-8c68-0922b66134c9",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12368b13-8ac5-4091-84e1-70f622dbb8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e31e884c-430d-4212-be1f-874631aad00b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a0794aa-0abf-4366-bc8c-42d6b5c1d2c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b66a998-56fb-4358-a9af-195a27cccf5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc0ad02-0fb4-4c75-aa53-60ebb18150b9",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7d5866-db86-4c90-934a-5093f865f2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38687fbf-568f-450e-9a4b-050002fe535e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3184ba2-358f-4967-8e4e-eae6aeb28517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e22ea50c-dfb7-44d5-98f1-2b3c2e43e274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a1c0a69-964a-411c-b2b2-f299d393940f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a210dd2-49f5-49d7-8893-46f188f44190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35950a03-c288-429e-9644-e1293659a73e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc0e8c7-4a5e-4c48-8301-9b52ca1f1ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "def26dfd-4832-43cd-9ed7-286fb846d19c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27172306-6fd6-46df-bf82-1806bb72128e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dfef28d-de44-4798-8e9b-ccf0dafa5311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c76c8a-cea0-43fa-b25f-428f5af043c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447654dd-22c7-4337-8e9c-8eda16e8ad02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bff88a57-540e-4f50-9ff6-cfcd901ba334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021488a5-646b-48bd-a6c3-3684e241ac61",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa6b6cb9-c9d6-48af-92aa-52da15ab6ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9d2b2f89-7a7f-40db-9808-fa99813bff2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80fb2d2a-b2a1-41b5-95ac-6118a0eeb060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "489c4df7-9a14-43a9-bb9d-a116be0cddb7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4fee0f15-eff6-4b17-929d-c15187aaf6fb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "49da3614-44a0-47a4-b924-df8c952c87a6",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd9c0d3-3058-48fc-9b86-a09c2b326d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd4e3ba3-ee81-46c8-ad5f-b63c597df0ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec75bdd0-af45-4497-bd8d-3f91bd76ec09",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "1708d06a-1053-41d3-aeac-5e30bbac98de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278d9728-b3af-4b36-920a-c79b2e4ab673",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3ca849-5e9d-4814-a635-8033be084944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c8e9690-23f9-47c2-a39e-b9f6c65b5f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1405b438-6ed8-4316-b04e-8b1c9450588e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "72e1f792-beaa-4b7c-adf9-b33e39d47b65"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c75d22fa-2a83-4aa1-aa5b-255a8120d32e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d34a9665-3464-4ec0-bafc-a59611b96dd9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7feea87b-4809-424b-943f-8aff264c59e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b333e0ad-0e29-442d-842b-d1bd56913371"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "24ee45cf-69c6-460e-a851-0732257a4cd5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c512a9db-9c10-410b-8fe8-5b7ba607b7e3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "54faf2e5-bff1-4222-bb0d-4993e27cd5c2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "097cbd1e-687d-46cf-bd6f-a0f0e5739ef0"
                }
              }
            ]
          },
          {
            "id": "1c4725b1-25ac-4eeb-8892-8052aafdc6a3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5e575d91-8c0a-4ada-b01f-2dc5aef8dd1c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "107f3c5f-0952-4b85-9a1d-5254aea95557",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f0b52069-f4b8-43d0-a21f-f64f500113a6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8a7161f-97af-4f50-98f4-6fa39d3d0f13",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "40b61fd1-1dbd-4530-b0a5-05c057ffe4d0"
                    }
                  }
                ]
              },
              {
                "id": "303276cb-5295-4801-a8fb-8857f7eaf7f5",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "34c8bda5-ebd9-4787-a725-f34a0e00439c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6d7989d9-7148-4030-994b-f7738e72f822"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56aa5d91-b3bb-410b-bba9-72d0bc9eb6a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "78cd0484-b89a-4b18-bb9b-3875dedc879b"
                    }
                  }
                ]
              },
              {
                "id": "37036331-e325-4a96-b4df-dbfa4e7b4940",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a6f48f8-1567-475d-85c2-1da4a1017c5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e992adcf-ba5e-44e1-b40c-e25ffe21a384"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63105617-d588-4985-b809-af16a43095d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6c63aac4-c091-48aa-89a4-1140f174f01e"
                    }
                  }
                ]
              },
              {
                "id": "872656d1-7228-41cb-a46e-156eaad320b8",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e38a116-c829-441f-94ad-ac0e5885798c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ae86a193-a700-4d5d-9bb1-d0846a2a6c6b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d84b8be-f629-42e6-9411-0fe39503d8cd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a2ce72ed-0217-400e-ae75-54b7be270114"
                    }
                  }
                ]
              },
              {
                "id": "e8f6b12e-007e-4d66-af48-c033ec80120e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3cda180f-9a60-4a32-95d9-e0c18c3e5331",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4c75bbf0-6d50-4eeb-bd34-c21c21381ee7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ddf2c63a-b710-491e-9f74-61e46f4c66b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2d622618-490b-474c-900b-aedfac0fea24"
                    }
                  }
                ]
              },
              {
                "id": "f117a688-9f85-4afa-aed4-10ba6c9968bb",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62d7cd62-8e1e-44a3-884f-9da50ff3d774",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fefb8930-9264-4f08-8cf5-e3e95bb29f7d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5188f10c-62d9-4ff8-afad-da80dbca2ef5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dac065ab-ac92-458e-9bc6-5e697105598c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0c1bb485-b6cd-4b3c-863b-f1aa0a538b77",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a8fc95e6-3569-45e0-9c22-3ad015b59930"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4bb907db-f739-4672-b227-2d93d26a53e9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "261214ec-edf2-40c9-9c72-0a5d47e08ea6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf678bdf-16d8-42cb-b135-251e7c5bfee6",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "fc4a22cc-18d8-43dd-8fbb-6e560ab4e70d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8bc46e69-c9d8-4f52-9152-f02a2b339304",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "83545b5c-410e-4b25-8eed-ff0fdabd4cd1"
            }
          }
        ]
      },
      {
        "id": "1028bc3c-9b56-48c3-a06b-d48fa8ee9ef5",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "baa151b1-7c85-48ad-8beb-320834fd9f7e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "02123a8a-ce54-49c2-9e5b-73cd97b54eef",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c2db11c9-915c-4428-966d-2b13004e8376",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adebfeb5-1f5c-4dfc-923e-d6d9ef98a389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bb9cec8-aec7-4150-9c3d-bd52f75814a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2b7f58-68f7-478a-b099-2ce27fd70e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9880ffe0-c27b-498a-a858-2928b075c9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2b88a78-0572-4bcf-a745-ef10bed6bb21",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20744c43-8ef4-44a0-b982-d5c59bb48f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c937bfa6-3854-4ccf-9508-47677af96801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35752f4b-d93d-448c-9974-be8ad234be0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "745a3ca2-29a7-4bf8-94f1-fedae2c80d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f0ab4e-1ac0-48f4-99e3-f79b96d93ebf",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69021b51-822e-4eb2-870b-70039701754c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1deaf3b-9ab7-4405-99a7-985418fa7855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79c0162-118f-4995-842a-65313db8df6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "57bd16fc-847f-4f43-ac82-a15b3d91f2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a8e583-b705-4849-adb5-07d08785c84c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5964054c-769b-4e7e-bec0-41012e34381a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d2958f-105f-4aa3-a5aa-5e6724bca31f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "514a2d03-aff0-4f59-b202-5e9571f00306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b43130f8-3aa0-4335-94ee-b36053a43abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608b04d4-a6b0-441e-aaaf-5d5eaa36589f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "475f924f-c543-47b9-b247-4b25816ccfc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d21e9588-5dc0-4791-8245-7ab843b5930a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07e448f-39a2-485d-b927-2320c91efce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d43527a-d6af-4de3-b992-6e1352306d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa17a58-9edc-484a-ab69-b8d3655ee0f1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ed1d26-201e-4426-b223-d8c267c26401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "993ea63a-c848-41b2-885f-9d9a6d5e6f8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3bdf0d7-adda-4cf7-be7d-aa8af9892d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa9a5880-ecf5-40ab-8072-3747d2310c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20b13ff-da2e-4cb2-98fa-5781269887c1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f6c454-fbe5-4fce-883d-e2363e282100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3987cfb3-e109-44ca-a03a-3096880542ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b62abbbf-4309-41cb-b6f4-72b1b9fa0483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2329780e-e868-4687-8dae-b87d5ca99d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ac3491-4134-44df-965a-ffff46851ed6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1aeee50-9206-4ae6-a51c-e56c690eaca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e1b5802-c5da-44f3-9d9a-c6c69a8d20db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f23b79d-83ce-4086-ac3b-eee48d4a89d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "45c5dbfa-1684-4c02-9c36-e1c94d17469c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bcf31be-d3b7-4c23-82bb-c4bad2829341",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e248d6-654a-466e-89a3-276d2d2fba77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e01d53c-0478-4ac0-b7c3-c938ed994264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c9f8e2-8fcc-464d-a4f2-a45cf6c160df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76ecfe5d-f9bf-4e54-87da-439a90fff27c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2119e4-6c4b-4bae-bc57-0c191610a4f2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41271172-8498-4e11-b58a-a3da84390f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd1b5d0-e743-42e1-b8be-e9d1874a51fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f61682-055c-417c-8165-62b3ea8946fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c32ee4bc-fdb3-414c-a1b3-af46631f5cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d496ea-f99b-4f77-a803-df346740d45a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "debd2083-1fb3-4bdd-af13-675b16d7e871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa2f8bde-a80b-4e48-8f4a-17e48172a7fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141a8449-5329-4209-bbc4-81efbc6e7325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c356ee79-5b8c-4354-bae6-647ef3ed8e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba7e6f6-fbfd-46cd-ac15-a86830d56b11",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99929290-ddb2-4c57-9322-d03879346165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e940f0c8-5aa6-421a-8e2a-5f986bc9f176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ecee00d-c2ac-4c5d-8db8-619ec6a858ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f9e6b38b-6756-4126-b16c-63403d9499ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e331494f-e947-4124-83a2-724593840691",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90a138b-5624-4e6d-9afb-6dd8e530b25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55be75b7-3f0e-4189-be41-b861cc310431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a90af8-f74c-4cfb-8806-1469b30fdded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8da312c3-9d33-4284-88d3-b6143b58a7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2035453f-7d94-4bd9-9cd9-b14410cbd4e4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c32e4ef-7252-4995-a3d5-f8d11b2fdc0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "144aad96-1b31-4365-8038-3628a63e42b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "457d024f-1a29-49b8-8fd4-fc648d592c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "957e422e-5907-4ec5-8140-c0630b3dd23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4edfce6-a762-4b0f-86f8-6f0358b86446",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "217be8ed-e750-4dd9-bcc5-76ec28b9b535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1572ea4e-15a4-4602-80aa-7b6e5c9c70a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06eef95c-45c0-4355-97e9-1cacda8d0364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6042916-e96d-47b9-8050-c64b40eca77d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351c7493-fe13-49a9-9316-906e8456215d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc317ea-fb89-410f-a7e5-56714d0d4322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07ad2a4d-4644-4a01-8f17-794b2e10592e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ad6347-62a7-4084-abcd-733459f43e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c635bf7-d9bb-4e9a-aa9d-a4010b6ae671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c114666d-850c-4cce-8537-3b1fcf936709",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "369f194f-10f9-4910-b77f-021853ba6a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64f0fede-2f14-4d6d-975b-3fa4e9405153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a01703a-674d-47cc-93e7-f4585cb56c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "41f12658-5133-4669-8340-97c673f86501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9d190d-9cbc-4975-907e-89caa15e8619",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c5ca95-2e67-4168-af21-6100d65528a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "410b21a2-a6b7-4ba8-ace9-1c6ea460f312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c50705-2289-4027-83c7-08a24a749f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a34e71e-77e4-4afc-a56d-d0b5f48898b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a10209e-fdff-4380-bcf9-1f246032b4e8",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757a2bfd-a273-4e16-b170-48afe76d716d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb1afdcf-cbb9-4475-bfa8-0a22f1b0de64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6509ecf4-8bf9-44b3-a4da-b0d190c471bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3849b6d2-9048-4cba-aab7-b58f006f956a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6fedfb6-feac-46d9-bfed-74b542adbcd8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27cb6182-9ee6-41f5-a4cd-6078a882c272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4ec436-0a7f-4f7d-9e41-54e23a39adde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ad0e72-b967-4f4f-aac4-e5fec5bbe844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7d26604-4ffd-41f3-8237-976e40d7a772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220dbee5-a24f-4a23-a0ad-5ed9026e2eb2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3702b83a-110c-446f-a0f7-166f2fbafb17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbcfbc45-8924-41e5-bf7b-6984008e9da3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e906a79f-b232-445e-803d-86ba9067b78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1a5dcae-cc30-4af7-b2f9-9f4daeff0104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6d7c53-e011-45d7-af7f-959ceb7597d4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a723862e-78ad-4f25-8efd-3716fc878ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8cf8ec2-25ae-48cb-8b51-f9180705bdcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a549a96f-2fbd-49fa-bb82-452ef7f5e8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f7dd81b-c66c-46b2-b99b-932416485b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "594b32fd-8141-4e91-9f9a-d399e1e02801",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa94cd79-9ea8-40e0-8924-c819e16b951c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dde6dd9-271b-4356-a658-f7379546324b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caef6a75-b01d-4016-bab1-8380d18c67e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6bc27e5-c365-4bea-83f3-19a24608887b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab61019-61f7-469a-bef2-ab6b93084758",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f30bd56-53de-448a-a986-4eb73b66f7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee995f00-54bd-48d9-855a-da3cfd342272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "064060d9-6cec-4c8e-a08a-87e0edda85a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff2726c5-a16b-46b0-9b5b-586a686634d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a87f9c2-9ca7-4845-99ff-f4b5368bf30b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49e8044-2df2-460d-ab68-06d3af901638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82058613-649e-4f5e-956e-8749a05e987e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "911b72b1-7c47-4222-90c9-3463dba700ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45f59d53-d61f-4485-9c3a-68dbff821d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95af4c33-19a0-40fb-82a6-3cbe41cac6c1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6ddd34-e9af-4dcc-8630-a56b543ce0d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ed1c2d0-0f1e-41fd-aa52-9846b910462f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53e5e28-3b57-476c-a35b-2ad40478d74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9094483b-a540-4181-9e07-9627f34d4fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66b5291-b3fe-4d31-847f-e267ff955bcd",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa45992-a1c0-403c-8a68-0b329147f580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8052feb7-a2d5-4c15-832d-29b8fa1451be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d03fe74e-f205-4223-9e78-71e883892d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b34641fa-1b0b-48ca-ba12-9186342e7241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1638434-d885-4fa7-92b2-ec39fe8ddb19",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a41ef9-fb6a-47bc-b50d-56dd691c756d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "522ab4ad-7e8b-49ad-a314-bc45d7a6df2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d06ba442-e872-4bbf-ba82-d32fdeb7d187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f0982c4-7ddd-4657-8610-643d1c8e8e46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a84e308-f665-4901-b544-326bf7e8876a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61245b5e-4d32-42f9-a365-43ec57edcec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ced0d8e9-b7d2-4212-b635-406523182ad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509901b3-3482-4c58-ab9d-ed83fee4aba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "266a7c9c-1455-43dd-b1cd-8537d2bca7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0db67a-071c-491b-a50b-15576ae44fc4",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7afb3b2a-f13e-48bc-b8ae-cf633a17fab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7a6fa7f-00fa-42c7-a0e4-ea1dc5de7b40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6783cef3-a88c-4ddc-a332-43649965e1c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9879aa81-a518-4cf2-8cce-c16d3f5d08d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b51f387c-4fc0-4b14-93bc-9df7ffec6940",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba66e1f-53fe-47fa-b7ee-15c9856035f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aeb65ea-b9dd-421c-9d67-79b21d7e3f35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0747d181-4ee4-4dd5-9022-b159fabb7b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5385bb7e-c240-4fa9-9c11-031e14feddfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeba2671-9bea-4d20-9474-c7fdebbda061",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6719acc9-af3e-489c-8da9-9caec145d9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e439243-d4a7-4eb9-8e37-36956524a360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adbcb91a-8c7b-4a4d-b8f1-6f778b23127e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd417656-216f-45db-a286-ab75c8b84a68"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c9feec4f-d722-46a7-b836-0af53cc763de",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "25737deb-1f54-4d2d-a948-65b2e82f114e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1853bb-f832-4482-bc3e-a523dbbcf4b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "320b0eb1-c5db-49d8-953c-6956ef9c1663"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "521d16d7-6cd9-4acb-a343-0a6703841c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a64508cd-4416-4864-bde3-969e459996f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e2924a-f2ff-465d-a733-2d0ca7a01953",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6325466a-6c9d-4090-a247-1151307c1afc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2fcdd493-7ae1-4943-ae98-1336661c0088"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff07104-5bd3-4591-a651-9dec1fefd51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "52dfd6ab-10a3-45d2-8052-d08dcdd82afb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5744101-29eb-4cfd-994e-b5e537011311",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e989866e-5e8c-4a56-b7c1-eb35d79418ff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "62948b15-fa64-4165-abc3-fe07a87c7cb6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad0294c5-aa34-4d91-9b96-d4b26a5d610b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85708162-ac9d-4427-be77-78cb5c2c2a2f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1ca16b3e-b2c8-48b8-a600-3e78ef935c5b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fdd863b8-93ba-45b8-a0a4-0ac75b38f38d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9ec4949c-81d2-4e13-b12f-c67e46f58470"
            }
          }
        ]
      },
      {
        "id": "70f9b67d-f6fc-414c-a76f-9d9924c54c6c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9387955a-70e6-46ab-8e41-81717cee6bb6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8aa8b479-775e-4833-a3b9-1f09685a53b6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b67fa795-7b7f-4051-92ca-549ad0d8f711",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea74d3d-ef5d-4816-9c93-cfce0d4d1d88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7a26f00-9002-415c-866c-7a4a46201f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac33cba-d3a4-411b-a7c3-9608dce0ee0c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac627fe0-3f7a-4d93-b0ff-2d5a2242b8a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2187c3ff-5798-449b-a528-cc1d74d0e453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce8feffb-9b1b-41f3-87cd-84d3071bf6ed",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4ba243-2c34-43da-a5fa-a90ff2c2aff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8b07bde-7435-476a-ae81-485d4a09b8df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1625c26-4bd0-4cff-b49a-b124a19f6eed",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e7aa04-9cdd-4197-af61-2ad416ef4f15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "853624fd-15a5-47be-8e35-441c86b2213f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82bf1956-3099-4cb1-bda6-e24957a09c6b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be920194-e652-4d16-ad44-e45f455f8a99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "709c0ed6-bb80-4df9-abb8-121206255e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ce545e-80a5-452f-ae6e-f9401fb251d4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db55da1-a959-4618-bf74-25183f44a1d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db20c97d-51cf-4999-8f5c-b0111cec38fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36b8f2d-eefe-4ad4-9f9f-6835e2c5dc44",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b274e267-ec9e-4753-a2f9-4a4e67919531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c27855d6-dbc1-4a6c-90d1-ce6b95df57e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e815be-f98e-4ffb-a8bf-0262d3b2b7b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc85642b-949e-470d-aa92-aad964c9f1bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9575ca9-5e23-448b-8177-830894d338e4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d0059b-62ff-4fce-a03c-7b518833cdc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c0f7761-ccc7-41ca-b646-360b668ad1d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d20f1c-63de-4d6c-8de1-c9fa10707300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44103cd2-7941-4f79-96d3-46a7a1c457e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99adf9e8-a12c-4319-9321-32f5896a65e3",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09beef7-4bb0-4902-97c8-edbb928d74a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95aa9b30-8f5f-4fe0-96c6-2d30b41b6bff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6cc1516-9024-4d7e-ab31-ad28fb94fad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52e820c8-17c4-4b68-8ba8-a8259a8cbc7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86178604-0a6c-4af6-8ab0-9463a42c7bed",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ae0816-b4ca-4a28-8477-aee33c95fda4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94f6a8df-9f31-4989-9700-5b2ed9e9f837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b4ca15-9e90-4ac0-aa65-00e1bf804257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef7f7e95-b4bb-4248-8640-f2f153b4f157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab5a3f9-8b05-4455-9e16-c2805e3663b2",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c6d938-5a9c-4161-8582-a469f847a0b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57072fe5-652f-40c4-95be-af5b1ab6a524"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef83c15-fd36-4e39-aeaa-b667c9689ecd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97be18db-f49e-4061-8abc-798001cd3e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f81592-0001-42dc-a59a-afd089544071",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac6398c-8f74-430b-8980-03cc6361cc97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50c1a95e-857e-47ae-bcf5-9d4a3fb85cbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56839a81-fa7a-4545-808c-3ce09842a81e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8c46899-59a3-481d-8aed-6d755f540c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1874aa-b306-4d39-ab2d-0f8ecd25be01",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f50e31d-d405-48e3-9d08-113f46b86008",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abd93dcc-4430-4f7c-96e1-34fb73b3d965"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6bdbf0b-054b-4357-b22f-c1b6f327f8f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10941d04-4c20-41ba-a4c2-31ed9bd1b731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01d48bd-d0e9-4394-8158-4fcc81059a7f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0bcd60-4eb0-4866-b413-3ab1aba3d9f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f89e5bb-58f9-46fd-be96-6e6539984f43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae4e139-b43a-4dbe-b67d-673f1c1a7eae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d21b55bc-bdde-4778-8ffc-578f3a2d6357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae8d3d36-cb40-434e-b74c-70ee5625845f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a19059c-5e01-4dbc-b2a1-3d678bc68032",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dd319e6-d70e-42a1-a1c0-5cbb85ec5d30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bddb7d36-e1f8-409a-b771-28cda44ac596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c4f35ed-97c9-46d0-b948-8177f297c5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e912d48c-36d5-4816-b18a-1c671149a366",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a10741-39ed-480f-ae43-a116171b70bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "581b80a5-333f-45b1-b3e0-7dd5680c60dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f11de5eb-2da1-43d7-83d7-d92ae6a940f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e4c370-79e1-4f1b-9d6e-7604e141b845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f707b7f-cc87-48fa-b54c-59619c9b0c38",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d280977-9e28-487b-9bdd-5007bae80ce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0deff277-57f2-406d-8342-a29813186c55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0456379f-9bd3-4980-8040-e78a1adaa955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e40e115-e9e0-4ed6-8872-ae6905988f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae3c9da5-8328-474b-9e5c-78b0cd7f57ab",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6f17ea-32f4-4762-b613-8feb54f7fd57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2626f796-0f06-4859-a8d5-38408bf0e244"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3630ea3e-74ea-453e-82fb-17efa5db4e87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93b958ae-ac11-432d-9b53-850677941dd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa52904a-a05d-4875-aecc-22e9478af6c0",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f16216-7bab-47cf-a6d3-ba2451523078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c68d3464-21d0-433f-936b-4770c8ceaa70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d8f4eb-8a63-4491-b5f2-47ab4a63b54f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3568744c-de3a-45a1-999e-0afd457b323f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b17c793-a153-4fbd-b8f7-f78227a6d3fc",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "952866d6-2483-426d-8068-46b2a959dcf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a59199ea-1b2f-4048-b03e-fcee1545d9b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f2c270-1250-4bd3-a14f-1d74b314ac5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "997782e6-0f62-4e9a-8c90-4e1920e34cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c686d5a2-cea0-4fd5-ba5e-199623324970",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "297782eb-26c0-4fbd-819f-a0d931853dee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a32be1e3-4f5c-4274-8b73-917242f6b0d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b63700-0a04-46cd-ab0d-a69e92a1fa8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db627f43-c4a0-4825-8900-4f6736f5edbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7026e642-c1df-4782-adad-ec13bef02d81",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa1f41e-da52-4313-b712-5a52c7485013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "701ae1c4-a026-4613-8411-7afa421c8d6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd2ac53-e5e4-425b-9d92-d1814de47025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbdd8bdb-ed4b-4937-9c22-c9213931fae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834b8f05-6e66-4d21-8cf1-f007b1a556e7",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b2eae9-efcd-4323-86d2-3e6a8aa6cf5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fac18ea-997b-4228-b248-3ee959f75248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17384ec6-a3f7-49be-93c5-f1baea138cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2856e42-5322-47f3-ba03-bf89fd373c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "facc7112-f155-4ec1-8b47-159cb85c6619",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f605dd2a-a5d1-453c-94c0-5ce69533b227",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb7767e4-955d-40f8-9058-c95576638e58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d85edbb-b919-45ce-af3f-f577534d686e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b437f22-890c-460d-a097-5dee8c49613f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86adfdc-7d1d-47c5-b2d1-df5c4b5d9f28",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54cb074-a072-47a6-bc7e-754fb0d4c6a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9865b3d-1598-409d-ab2d-711ead1868e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4fa56a1-9f0f-4816-98b8-3f83642ac761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "406336d3-b514-402b-90bc-c4cbbb0027f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54dd616c-5c08-4471-8513-ba43e7f4ab2a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a132c32-5aab-47c4-86b5-032d7c8d8147",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1bc7a7f-7a42-4df8-a407-a2d18c94f57a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a4c24a-5d56-44f9-9113-10c293eaace3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1904a261-933a-4216-9542-b0615a93a4ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b028af6e-05a2-4833-be68-de55e43e610c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73de0d8-5c45-4182-bbbf-54e900e4f8a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1567b65e-0174-4679-b15e-a510a9815e19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "311dac3b-6ebc-47c2-aff2-b556e33888e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67b8d1cd-229c-4b60-978b-a27e6120b3d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8deb897d-4ad3-452d-a284-f598dbf72006",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "942c2c19-0d72-41c6-ab88-509798896075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "771674b5-eb7e-477a-8dd0-6993dbf033ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "371d6b3d-c404-461b-89b4-881f55b8db82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4164cb34-d58e-4d40-8d6d-16ed0435a60f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9977c90d-27c4-44cd-a2de-90bd8f4b8cf7",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86ab9b5-ddc5-4bdd-ae89-a9271dfe14ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "740b6ac0-eab2-4b21-97ec-ad04520f8c57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21db854-e2af-41e3-b902-390a9e399752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a31dd76e-f0c3-4df6-925e-0ea021dc99b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9e4d6c-d1e4-4e56-9652-96762d7aabe7",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11e5cb1-46a3-48a7-bcde-98471c6d9635",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63675da3-b603-4a11-96a3-42b19d9bade5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a8fc40-5e29-4e16-8ae6-7ef22710c6ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4649211-1762-4a79-82d6-d39a5222e30a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2740e17c-d3bc-46ca-8a5f-7ef67a45f1bd",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5281826-fe02-4156-86e8-d40e5e0e11a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "024c57fe-c2b1-41ce-ade0-b5b776103dda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58510781-db08-40e7-ad08-bc0bb2e429d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa28f794-96d7-4049-b5ef-ed1863092dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1780b739-c3b4-471c-b804-449768c2942e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1edf6e-ca3e-4aa9-ab36-195c6aca8386",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc7550fb-d6a0-4afc-bfce-c1c08c0991b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c219e22e-2e11-431a-a53d-d5d1f88f7390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d8a204b-14b5-4fd9-b1e3-7ce32412ee76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd07b0d8-7ed6-46a2-bef6-b3a93679eb97",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff97fd17-8456-44c5-aa71-63c7ffa8901e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7462b2ab-6a55-498c-8fb4-9e9ff17d85c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "436cd39d-6efc-4588-b368-8b8a5c9a389f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "329b34b7-0cd9-4c03-ba8f-0467bac98e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8552d855-aa9d-40e4-b510-b2fd6a5547b7",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df7a09a-cc9c-464a-9184-3565d743153b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec312557-c356-43ac-b14f-fb4613d5a94c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba2f8f9-d711-4462-930e-263b083ae9df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c64453c-ced4-49f1-9018-bc9052c721f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac8ecf7-0415-435f-a3f9-c43ccde504bd",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df4bed9-18cb-45de-a485-f5704dc08dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c979703-5b51-4afd-9a17-134964e9a616"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "200ace9c-08fe-43b0-ab72-b94c91a08a99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "249afead-881f-4ae4-bf78-8e522022e52f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f473b0e-6a15-4e1a-acaa-11726978a098",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cdb2eb5-df12-48af-a864-5c385e9a8279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad03ca27-dbd7-45a5-83b1-39fc0b42e453"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6793e2e-ad79-4ff5-a4b3-0553a66666ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dbe243e-e71f-4d93-948d-bc3d01d3e953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3d10f8-6dcb-48d0-af17-2c922cd40e56",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6256f4c-6e01-432a-8ff1-88bbc1d5b783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3b8d77d-fcea-433a-a563-3b344c9301af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9a2fe4-eec7-42ba-910b-f91fbe450c1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e032015d-4efa-4b8d-9b20-027ec7beb0d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f83f9100-7472-49ff-a0fe-5f4b635490d5",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f68c8d-0d33-4507-a7f4-dcbb307d6341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4451e8d2-39f2-4388-82a3-6fb4c9b3c631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "012c420b-a0cd-4ecd-8055-b732e5bda4a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc108a9e-21fb-499e-8171-e075a30a8daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f0cd7d3-44b3-4937-8ea8-38e83cc3bc04",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408db45d-c01d-4f25-b342-719076daac66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a75cafcf-425a-4e75-9d02-ca01ad1b124a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fddf282-90e5-430f-8d29-6701b38ef8b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d3113be-e1e2-48b3-ae39-914e809e9f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd995f24-6374-4274-b01f-6b3d572d85f4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b4a6f1-74bb-47f3-9885-95dddd6acc1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02375259-60a4-487c-9122-e85371557195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4998d7a0-39b7-4e0c-b098-6c47171242a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9c89cea-158a-439a-b4e9-0e55323600f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fba5f00-0bfb-48b1-8217-574d469d678f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86be8a4b-0f24-4e59-8e49-6116add63c58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b020cec9-12b5-400d-b902-19f717697cda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba28ddea-5bdd-412c-873a-19aea7a0bff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab3b13b2-d355-45f1-ad28-31e1b192b381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94eae339-305a-4929-b3d3-9b961f4b3f84",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f6cf5f-7f19-4915-b103-cea4b2abefd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f156169-bc1e-4016-830d-70419022e111"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "847e35de-b91a-4b17-8ec4-30bbeb06ba33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9873a146-f645-43ad-ac62-a1c323caa221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb37cb2a-0641-4df9-8934-9b5fb66ffc86",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9573cc8-2c8d-4b06-8fb2-103178fe3a18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc93b1b-f261-493d-8b6a-8b49a0a1d3de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde85d54-3f39-4a03-ba24-aebb263ee411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c6fb755-3838-4c88-8e0a-971ca3cdcb0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746fc499-d4bc-48b6-8211-acd97ba1f4fe",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2436788-bf6b-4e66-9263-89bee0e69ac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c56d6bae-c940-4439-b7cd-71e1a9345bdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d41d80-7678-4359-b3fe-4a48e0935ebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d855052c-8d7e-4798-869d-f14fce2f950b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10bb4cc-9d70-4878-a46e-b699c846552b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad939b2e-f3d9-471c-bb78-823f792f2705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "585da680-7e29-43ef-bf1c-1af2031719c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "279b984a-3ada-479d-8069-2a9edd21c6ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d98d0db-5cae-4c1c-8bf5-f267582ce494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c18572-6502-4f07-8bc7-c74a0d93bbc5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f1357ef-f75e-48d0-a8ed-c8cc023a9e81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdbc8663-6b58-4743-9876-b0e1056a2014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2fed3c1-373b-47b8-a5c7-f806c77bf657",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afe88cdf-e4bd-4b9c-a222-cafc402f4d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54b1adc-2cd6-4e57-8252-ffafe56ea7ab",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1930b352-e181-4490-9cc5-7aabd248cb76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79fa2c8e-188d-400a-a58d-2e383cc09b10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7588ce-73e4-4e2f-8938-00521d8dd6de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb37e66e-2d49-4be4-bc49-a3864c74cb69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e97c1c19-7676-483b-86be-7d30294eee64",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a24a80-5ced-4513-be1b-c98e385161dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed7f157e-89ad-44bc-aa34-3033f2a34a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1512bdfc-947d-4f80-9868-fe6369d2d78b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ddf2205-eec3-4459-88fd-46a897513f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8161486-3a41-4cf9-957e-539e8a286648",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb35bcd-cb3e-4530-83be-3e0e61a60ff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce829709-87be-4215-a68d-af15c6ba2662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acfc6f60-bc83-40b1-a3b4-8be1c285fa8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3af7a75-1c5a-43f4-ba67-136e3423fb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f098b0a2-b712-4746-afa9-4126ee7efdc8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a87b743-bd74-4314-a11a-e7ba141009cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bab00797-1149-4809-988c-1fcd69bdbdf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ff90e4-c99c-4dd8-8d2e-1842b7ba3965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ed66ebc-cedb-4e7e-8162-d23e46b25219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "381fab3c-67d0-4abc-90a3-3f672eddd6cd",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b188f83c-eca0-4735-b882-ead1730a0f33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87cae094-e6ee-4857-8edb-13e727de49f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ad4244-6b75-48ad-8c34-b0bdd8d984dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1190baf9-58b6-4a88-b8f5-67fa087d78e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0759e31-25c0-4183-a857-8699682139ca",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892784ca-88ad-45f4-9e02-ea90c1f99a0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36c1775b-41c9-4249-bc36-5f2d26bf2561"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c949c6-21ba-4a51-b36e-b10772a1814d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f817b9bf-fbb4-426c-8891-075e8bb3215f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9a81a5e-eb92-46b9-81f4-49eabfcab316",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c31a70-30cf-4f40-8ec2-8113974735b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aa2315f-6159-494b-8ee5-44ca05f5f9eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f96a50-8f5c-458c-b164-6331d456ff64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08cd4e1d-f8be-4daa-b93f-65eb395f92ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e01b9427-301e-45a5-9035-7be3432fbb18",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00984eb3-fcc8-4164-8f58-77cf98e86572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65750bcb-41b1-4f56-b3a8-d436205829e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8684778f-0aa8-414a-93fd-0274af1df822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7f43f0c-addb-433d-839d-2595bbaf84f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107c1d79-e461-4ffa-b35f-e9988824fbb0",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "245f6d2c-6b86-46c4-afc9-6b1ed679996d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa9108e8-994a-4f35-8d6d-00554ec9ce06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf0fdc2-5878-42bc-aa00-ab4dc8c0d85e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "689b0607-2e0b-4f6c-a4c6-420454c1c307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23e0525-d579-41e2-b853-5704b999260f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b861df13-ceb0-4360-af2b-2d3cfce42c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00b28962-4d33-4ed1-a298-b6d44abf2e76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "838d7aee-da40-4a79-a300-5022a2d6c125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e737c92-7c16-4a0d-9fd5-76e786bf72c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e087f30b-e652-48af-a1b9-c8bffae6e43b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee87ee8d-c323-42e4-87fc-c36ebce88678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d822010-51d2-4ca0-a8a0-b776536f2f15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf632cd0-ac4e-4775-a1d6-05a6373c3a08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b2516a8-8d4b-4ef2-bf19-748e7d82a0e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "996ba80d-4234-4412-b504-aa578d26f980",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcfbbeeb-99c8-457d-b9db-229de8f4c516",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5968915-6e1f-411d-9f72-869f196e68cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66aef80e-5142-4a93-a2d6-ce414ccaaca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a686115d-f297-4a50-a122-5e306f44e514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4eb5fff-edd8-4343-beb1-8d8d0f9d6ac5",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fffdf16b-ece0-4ebb-aa4e-e823deae975d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "026d31f6-1864-4e9d-9f31-3b1d84d9e239"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d839ad-684c-42be-93e6-d472055f0d27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e711cdab-1903-4b80-834b-1f131ae2b32a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f8d65e-8aad-4065-8263-d8d9f58cd83e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8448d32-82e2-4a42-ae5d-f840532ec355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3020a775-ce23-4154-9732-f0c286458407"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdcabb73-4131-4713-840a-9db7192b913b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ade2d94e-d143-4a0a-92dc-0bda1a7c5082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91dff3d4-8b94-4c96-8344-3f98e54344ee",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4034a2cc-361b-4bfb-963e-035ecbd827e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f960d136-f9d1-423c-93a7-f583ef5757ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97564787-b086-4de1-bc8d-c1997e7531a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94fa30de-12f8-4f59-a973-73c547609cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b14c23-05d9-4f1f-aad0-1bd74cf0c333",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405eaa87-ae17-4c9f-ae1a-0b4061e5abf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d17cd40d-96f3-4324-a91c-b06e571cf00c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e645b7c-af15-4c8d-8669-05e9d6ff8c14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2106e00-0d04-4428-9d22-7730243128c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaead27d-635b-4096-8fe5-851080906365",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fddff15d-1579-48bb-9768-6d42a4e8a3e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdc84745-b9a0-4a3c-9f9a-0c45056c120e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ca1d39-b56e-4e0d-85eb-31fe423bd2d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "334173ff-ddc3-4089-a3f2-fe195d57536a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad2afaa5-073d-4251-937d-3739209009d1",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd95867e-8aee-4db1-9db8-7d2462af535f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb68c1bf-ad28-45c3-ba1c-9ef15df895d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77d2505-670f-420b-a24c-758405bc1491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8be37e17-9aa2-42c4-b29a-fd654b2e9df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f55e8ba-706f-4ec4-85b0-70e0d1b31eef",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f586c60-12f4-4644-9dcd-9a83c1a5b175",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b59e234-7dbc-48e2-b8ce-3dc4d19eebd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d907dde9-e737-4d52-a862-47d86599630c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b14c15e-1fcd-4666-99e9-42cb18fbaee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f835ac93-171a-4bc1-98b8-e8e9fb00029b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37db7e63-19b8-45bc-80f3-fd54a09b592b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f72fae2-38ab-4163-9a25-a26f3fe645d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7813f497-0326-4b31-9d69-a9fb89e374f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a4ebcc4-9679-4292-9423-55332e7fe48f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26cbfc50-09bf-4d32-b96c-2d6ffb489656",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8e4832-1511-4ccc-979e-6412687fb8a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4549bb45-6a80-46bf-9d0e-ac18afd48b90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05dc7617-e4ad-4280-9e79-7873089f4356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f7b0ba-7d12-4b74-aa78-cd3897d67cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef5b393-7d8a-460a-9256-e078e7a36ade",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d7e5f1-2adb-469c-aeb1-a09baa30a7bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dec24c8-5392-4fc0-a47f-f7dc67c1a275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2dc0ce-43e0-4dd6-8fc2-e23fe8bb996e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84d77e13-9373-462b-a2c5-fc7435be2133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21c994c1-8661-48db-a063-30847ac5f827",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d36c65-4467-46f8-b688-431e9c3e3de6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cafeca4b-4e87-472a-a3e7-b1548925d4b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d18a5b-0539-4b40-accc-66efb0f60443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b34bdd9-8dc5-4741-b73c-2abd9b36e57c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc184cc2-2a3b-47d6-9abf-d4ce034e8a07",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839da16c-0d0c-4a89-be79-8456b52c8166",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bc0bc7e-2ac7-42f3-bed9-c00278c923f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f8bb10-3756-4df1-88b7-9c9a5120d549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a87bf26a-597c-4ce6-b179-907c6a92caf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c316ff-a67a-4ba2-84ea-a45d63c82d1d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16caa6c-d690-42a7-aebd-dc4921293873",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11d63497-862b-4856-a7da-a8737956ae86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5d414e-594b-46ac-a034-4e2769a654c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "493fca83-43f1-44a5-9f88-be9d9ff2fec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae20d2b9-0417-4355-b596-fe7fb1d50d26",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37890a45-fe41-4b10-86f8-593710c82039",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e77a8c6-6b51-44e8-89c7-673cea505388"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0860b41f-fba9-48cd-8ff1-5a2129999998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6f7cdef-8506-4213-a1e6-0a4e3eda8560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8459cb4e-890e-4181-80b1-218901664086",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e5d6866-f359-43e5-a337-c23721b2e9cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a642f447-dd5a-4c29-9bef-8f4c6be5ee08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de0f4e6-58cf-439f-8653-0b352afbd1ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79fbc6a6-d783-43e6-9cac-b914d2ceb698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a3154c-626d-498b-a53f-61e3433cf519",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42fdb559-1a45-4773-a857-5872f1309905",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b78edd35-2369-4cd2-9e29-5651da35ddae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5593ce7c-7160-4efa-8ceb-115fabe0fcb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c20b4ad3-be31-4176-bb66-ae952a264190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e00ff9-60f1-454f-8bab-ea8f67e21dcc",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2259f635-7125-4ad2-bdc6-da831742ad82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62af3a40-fafc-49ef-8332-0b52d78a6b91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f467ecb7-b763-4b66-a6cf-360b76259ca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f8645ab-fdd8-4834-a43e-fb603c497a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a32e967-e8ef-4ab1-96d2-6f5d48b9744b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a50ba90f-4a5a-4bbc-ad6e-e4d21f81c2f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea71886c-7b5b-4f9f-b33e-f53d7dd06762"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be978eaa-cd4d-4c02-9e4f-e79ae3e33486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6da6fb6-3a1b-4d50-9b09-87d9c219066e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17aefbdb-a6c3-417d-9f58-f9a8643faa81",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb83e77c-bd4a-4745-ad6e-c35a117207de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4256e42d-c66b-4c2a-98b7-c45ba8ec4ee9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45139b27-317e-47e3-81be-9c0d44ab9993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd91c82a-3781-42dc-9f7a-c78579388d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3771c80-e5a6-4141-93dd-50e9cccc43e4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29cad16d-bbea-4d0f-a731-d989b991e3b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7701917d-76a2-4a29-aca1-1e213532a040"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b08777f-b187-4917-be32-8cf83e0f8790",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6a89629-7809-4f59-b482-043df0784126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac78c9ee-643d-442d-a4c4-39484ddc3861",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e00d49-a440-4e35-80b1-0bb484d93c34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f12c8d9-6ab8-440a-85af-fbb4a4e67b70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1185edb0-2505-4b85-a319-dc8952e1bc80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dd1d24f-14e2-4fde-a725-c34b1caf00b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884b47df-9248-4c85-88ca-36c595a1cbf1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a1d187-1e23-49e2-81f9-e4f4a44901a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13466a5b-f79a-4f09-a083-a201e8553825"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4329e68f-f623-42fd-b5b5-835e5bd2fadb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fcea002-a9f8-47ae-8217-205d997a10f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c239f7a3-2167-41fe-90a0-894e9b9694b5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9411298e-cf70-47fb-983c-c755a109b1c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c397b69c-ceaf-4365-b51a-c97f67d307e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8769040-e663-49f7-98c2-94c5926074e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c682d59b-a4ec-48d2-8504-bf99c0f6cb0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "930ed5e5-c13d-4829-bce3-397436633d43",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c89ded91-3284-4342-86ed-b2673c3693d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00972bbc-4e76-4006-b036-4271031315fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60f3de7-a271-4399-8a1c-7bcc0a49d605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fdf5a80-4448-4dda-8627-0fd65adab754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88defe11-2397-4e56-9a3c-cf7d4ecb1387",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77f26a7-b698-4ae1-9e4a-33ad171f2d74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7f93518-4d3f-40be-a6b0-67c1972de16e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb2b857-e11f-490e-bdde-b55d93738110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "749dd511-15f3-40a1-9ae1-3ed990c49c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de7ef34-42a0-41e7-ae36-5a79fb8dda2c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb34a0ab-2242-463f-a463-ca59e0f83961",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b90c08d9-73a8-44a8-ab27-81ce6b468037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75a1fc4-dbb6-4e57-9229-a9dd36d37889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca8f7bdd-256e-4716-b6b4-c32ab96b01c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623b7c9f-7edd-468e-b99d-3758f4ad16c1",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a719325e-678d-42de-81c0-c89f1f50b300",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b61cd992-4037-43cd-88c1-5c5a371be204"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "662a7a64-de18-4f40-b0cf-7abe7804fe39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ce0ccbc-685f-4a42-a140-3bcdac5f61ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d2ea3b-f76a-472a-acc3-91dfcfdcd9cf",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3161ff0-86a0-4991-8b9a-7f9203e5e31e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcc72590-a4ca-46f6-b7e8-1a996f80a8c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4edb5cbb-2ef8-4208-aeb8-ec6a2c234c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b544fdb-6506-4f74-8ced-e7926a6bed14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3350e26e-6b82-4bbd-9553-d4619ee16af0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b27199-6ece-499e-94d4-7bbe9802d316",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a077575c-8aae-45cc-a075-da6ee2a8fc69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2024b52c-3eb1-4b25-92d2-251be0e97a42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b57eae7-c77d-439a-bacc-0181a2638642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5cfa0c1-e0a7-499f-854c-68a9b470c532",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7180749-4672-4220-b0a6-ff4c3801d024",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f8a6527-3d68-44c7-8549-634da2e9be52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9ced68-700a-49b7-b496-909b6df71b85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ad94a56-c653-40d3-a102-4690ae0a2ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d48774-d938-461b-92db-975a0d6f2cf0",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930ef3db-f357-46cf-9d30-6144f9f8d35e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b9dbbf0-c3cb-423b-b6e9-ee8e03bb8ae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf40bf50-712f-486e-b37d-a91272d0a465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1d9faf4-a44a-4348-9af8-2a5ac155b20a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe0e3ff-cd44-4acc-b932-eaed0746acd0",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "896dc94c-6af3-4e6d-b4db-b5d2101d01e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c133119-50f4-46e2-ae3b-7e9b52fa4f59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c2e77f4-6306-4190-85bb-6094e5a9ae3c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbc29d23-1291-4f1e-8034-c7a6d04ce2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910b4abe-cebb-4d8e-99ca-ee245a96b1dd",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0656fff2-cb61-4405-ae09-a513ecebdbdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdee62b7-517a-4447-9ca2-1b751dedd88c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "638aa4a7-a917-4710-a972-e408996c5879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e756e876-fb9c-43e6-b3df-4bb3334938ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d55270-0e37-4b50-a772-9d887e2afe0f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52476a97-2a0d-45ec-87d7-35b74c3791d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0846f4ba-4387-43e9-8bb6-2dec610badf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f71a95-5789-4507-b14d-5a605ca8c8bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3478c1a9-dcc4-4ed4-9c38-50c216d1e0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a07fe7f-f674-4a3e-9d08-980c7d8a7569",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f9d2c35-e4ae-4e3d-ba72-350aa7a25ec1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ff2b309-96f3-4018-a728-31c96858684d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff7176aa-5483-420e-a2d5-ddc5d8575eb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e916012-5a3e-4059-a036-e92ba864b80e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7d0038-8d82-4da0-9361-f149ef94787f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e24f9d0-3b77-4af1-bd5e-611963176c42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbabb6b2-db74-4387-ba34-2b9458ea42b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5f24cb-e29e-4912-8a74-59cbde11f62f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67eaf850-80b3-4dec-97ee-d605693cdaa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b1eba8-3ef6-477c-9e83-118f727a4dd8",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c5964c-5cc6-4023-8f86-824492948e48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67b72afa-4e7a-4883-bc0e-f251dd249637"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92b2f45-7129-4e03-bdb7-62e2b2003faa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19fb6af9-7284-48fc-8029-6929d85d8bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd84b7c-3047-4fb5-83ce-4baba9dd7d27",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3100b9d8-0ee6-4b5e-bd98-f9571cbbb222",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caaf7b41-4dfc-4c1f-bb1c-4f067f3a5132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e32fae4-7844-4495-8761-c24dbf7d6925",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1285ce3-9714-4323-9a53-c43ddcbf6db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63964b6c-f5e5-4e68-ba05-a022da996d38",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c353b2-b883-411f-9088-7d2d9eb4a138",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48d9fc24-23f2-4291-935c-fdc6624b2c33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1894910d-b496-4148-8fb4-8f612749d57d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc7065a1-160c-4c32-a7f1-7cd7b87531da"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b5323c4-cc48-4ab5-897b-5bf6e5137205",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "02b1199c-0d7b-4d81-bde0-4b3f521c94e9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "acf076c4-c704-49cd-921a-cfa3ae7dd510",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1ebfa9b7-914f-4969-a7f8-9773b66e163f"
                    }
                  }
                ]
              },
              {
                "id": "e509281b-bd30-45cb-84ed-3e500adbe881",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "359e8ff9-25e9-4337-94f7-4a0731f4d041",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ac89f6-6fdb-4923-8d41-0c48f7e042d3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8c87961b-6581-4b91-9ec3-4a0f756b1102"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da826ae0-1659-4600-8898-c60ab8686d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b316bcb1-0693-4c22-ad06-bc45d96ad588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8fa426-2b18-4eb8-aa00-cc4479fd367e",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb94a59c-2556-4fb7-a546-b47c7dd67fbc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2585b610-ac52-4054-ad83-2ea8c838bb7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef70173a-11f0-4bb4-ba56-65cdbc4c5357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2558a10-de3b-4fd9-aa21-5984bf4253d5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9989ed0e-cf7f-4b8f-9564-5bad25fcc09f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2f35a06-1dd4-4306-9a4e-51003f692d6b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf78e358-964e-4802-9705-97435aac7cb9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a756b8c-8c94-4db6-9bd4-9ab2baf7e986"
                    }
                  }
                ]
              },
              {
                "id": "86b9f590-36b4-46cd-bb50-73b07955c8c8",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "61ea0338-9490-4b90-9b19-0c22d8331c91",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df78ab2-d971-4d1f-a060-b0bca2e6158a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "bf13f271-1963-42fb-a37a-e27016f97298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce168629-a327-446a-9ec0-587e147f4a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e33b9ebc-291e-4ea8-85fd-978513b2f4de"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a9e4d775-9438-4e71-ba68-87b283402ff0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e03c6aa9-3057-48c1-ba21-1b61bbef2855",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3008abf-fc8b-47e4-9e68-f2721f8c4b2e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "85062adc-521c-40ad-9df8-fb2da1506e6e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9c45b69-80ae-488a-ad09-f98569d1c1a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f87547a1-f0ac-4b56-8cee-4c3186e2e715"
                    }
                  }
                ]
              },
              {
                "id": "4183e3c6-dae8-4a5d-90a3-cf8fc2fc18b8",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78304881-9763-4e9c-b6a6-fa95c21a5c4c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b78dd6d7-0121-4fb7-a9d0-c64ce59486d4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7be326d-ff7a-44f9-b38b-45a954fbabe5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "580b1b6b-ad74-4ec6-a0d0-d15cb0e8e9fd"
                    }
                  }
                ]
              },
              {
                "id": "58b05f2a-f464-485f-ac12-926d74f97ec8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "acdffa93-9368-46de-8321-03208f84f475",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e59c47fb-2497-4b0a-b82b-c6269533011e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "125e2b9b-7166-4ffa-8f32-f4c3f880246f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e55f9517-b0a6-4b42-8fff-bfdc140d3e69"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f75b7ff-8435-4ef2-8b90-5b79a394d96c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3bc7c4a1-e9b2-4210-ad35-26420cb29437"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "41ff9ada-213b-4f0a-a669-f7f7c603edf7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "198a62e8-525c-498f-a226-d35b6f6f140f"
            }
          }
        ]
      },
      {
        "id": "89443e98-d981-4ad2-ae4d-425cf2b5565b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "25bb4a97-1fbb-4e92-ad8e-a7f35584a56c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ecb41749-af46-4ed8-8b2d-8287f756839a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b70b7907-f117-4cfb-9d71-77f16e2aa2d8",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ae40dc-03b8-4d91-9f69-9d68335ae577",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ea1167b7-0976-4b79-bafd-d5a8c6810739"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd284907-9c91-4e58-a133-3924e016dd61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79f04d17-7933-45ba-a65b-4aa010b071ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c89cfd29-0b6e-48ae-aa53-a0cded2cec27",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a981a3-903a-4bf2-a522-c19406006dfc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cf47f8b5-fecb-4841-bf5c-4f12297497cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4469d13-d26b-47ba-8b2b-8ccbf09b6a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4dba91de-5923-4dad-bab0-d3d7ba7abf22"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3257536-42c5-4100-bb4a-e6ef818a781b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08a9012b-7553-4d80-a6c1-edb400727b15"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f238285a-c5f5-4528-9290-b2d1af930120",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b466130-0ab1-4dbf-86b6-eb34dbe621c0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c7fd14a-31de-4992-b59f-fe2c51d52810",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "216f04ef-e63b-4cb3-b311-8ef45dd36dd0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "960bdf3e-98ed-44ff-a512-2d339695ba90",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9579f44a-95f7-4e2b-bc89-9b3eedb5525b"
            }
          }
        ]
      },
      {
        "id": "af0d2d6a-7b5c-4b69-87d0-7845c23e86cb",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a6f6a0c8-cc4b-42b4-85b4-8a509bfd41fc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "06268d26-4074-4bc7-9185-810546e352b5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b35cd9cf-190f-46f2-905d-bfa8d4c0e6eb",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7853dd16-107b-4910-a6a8-dfe1210fa338",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "02fdfa49-ba77-4a28-9d86-d855c4b95e7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70f7873-612d-427c-af66-43b5bb986f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ceaaeee5-a89b-4738-9f0a-940307634a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8ca7d7-54a6-4c7d-a8b3-80c8fff935cb",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28023e3f-3e74-4cf8-8a55-566ecfed54c2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "139af49d-83ac-4c75-a903-fcb466d8395e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93af0ddd-786e-415f-b55a-a63e751187a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6778009c-69c4-4d36-831c-eb314ebd47d0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "043234cd-2894-4100-8028-46b45a4f2a5d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e809399-b219-44a5-b244-c1f77dd25235"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "82cbfc52-f441-4eae-927e-4bf7c313bff0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7490435d-95f5-439d-a016-00bb34380dc9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a985c95-19de-4c74-975e-347be7d556cb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7152ef1f-772e-498e-8aea-974f79310a07"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b30d11a0-05b0-4eab-9ddc-88b787a04d2e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cbc7430a-0a89-4ee1-9e14-bc04b39a53eb"
            }
          }
        ]
      },
      {
        "id": "1d808be7-6318-4608-ac54-d566e66ecb32",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "4340b423-83fc-450e-87ae-11586e7f8db9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9fe70ecf-894a-4914-9d07-4672d4031a09",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8e4c8b6a-ba69-4821-8ccd-1a8f6c1c1360",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ded0ec3-1720-4a32-a14b-932f5374e691",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4a29a1ca-a9a1-4711-8712-c4e61dab0ef7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "802f4f31-3d34-4bc8-bb30-5607e8ffb57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75bad9b0-934e-4fcb-9d43-b9eb0ddc1d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b020f9b6-d997-4ae9-9955-3a886ed019ff",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071d477e-a7fd-4389-a3b5-8feed97db715",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "393801f1-1222-4099-a208-0b7c58b8f197"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "905dc920-1ad5-4626-8dfa-87969b29d348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dea468e0-0e35-4965-be17-7f4119ca1077"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d2e7e44-7277-49de-8f08-ee49e8d2d878",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9bda248c-1846-4b27-a9c9-4c359514de47"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0ad4112-b05d-4886-92ae-d6173d5f991a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa10ad37-bcc1-4130-9c17-67e3a89bfd4b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da548167-f8d6-46b9-8c13-8be33f0ccfbf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b7682b6b-1502-4fbe-9fe2-6e23b92a3f8e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "416737e5-6658-4769-832a-300f31179f03",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "671580ce-4e41-4741-a3ba-453296d3e136"
            }
          }
        ]
      },
      {
        "id": "9e89e7c8-d37b-4091-9a6c-2c41fa8c9416",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6798e49c-30b7-4cb3-8195-eebc415dfe63",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "16616d9c-73ac-46e2-b445-065fdeeec61a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "da4ea495-3d2c-4e3f-b6d6-e290791b8578",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4b9969f6-9562-47c0-86e9-9b19b9a02020",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3cb94ca2-8c68-4cf3-852b-14a2d9f8fe06",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 85.07662835249045,
      "responseMin": 7,
      "responseMax": 1054,
      "responseSd": 157.57049711492886,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1670546344120,
      "completed": 1670546377409
    },
    "executions": [
      {
        "id": "73afc38a-b1ad-40a8-828f-01b236a25fac",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "976e877a-328c-4758-a175-242baacb7581",
          "httpRequestId": "089be506-d688-4e19-a5b5-4e569168fcc4"
        },
        "item": {
          "id": "73afc38a-b1ad-40a8-828f-01b236a25fac",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "fdb6d07b-ccad-4055-950f-d9974c27f95a",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "33b09c4a-162f-41f9-8484-8da71e080940",
        "cursor": {
          "ref": "8a82927c-463e-4a4e-8702-5bb1dd651a65",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "22d1bf9d-682b-4e83-9e84-25d24b76ab3c"
        },
        "item": {
          "id": "33b09c4a-162f-41f9-8484-8da71e080940",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "31f95a61-f994-40e3-91e1-41622c8d954f",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "0116a11c-2724-460a-b395-aa73131babef",
        "cursor": {
          "ref": "c7408ea1-b573-45a8-a5e7-1dce3af40c0a",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6f66ba10-ec03-40b5-bea7-0ecd752805c9"
        },
        "item": {
          "id": "0116a11c-2724-460a-b395-aa73131babef",
          "name": "did_json"
        },
        "response": {
          "id": "d4d76342-4722-42e1-86b5-9a76d22d29cd",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d96a09-ff81-4e45-b197-ec9d5747eebb",
        "cursor": {
          "ref": "98d2014d-0157-41d1-9498-f5860df29bc9",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5322caa9-0253-49e8-bd82-c3f3a518b5ac"
        },
        "item": {
          "id": "d0d96a09-ff81-4e45-b197-ec9d5747eebb",
          "name": "did:invalid"
        },
        "response": {
          "id": "c57a71fc-ef9f-4447-9d85-93c46ca22893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d96a09-ff81-4e45-b197-ec9d5747eebb",
        "cursor": {
          "ref": "98d2014d-0157-41d1-9498-f5860df29bc9",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5322caa9-0253-49e8-bd82-c3f3a518b5ac"
        },
        "item": {
          "id": "d0d96a09-ff81-4e45-b197-ec9d5747eebb",
          "name": "did:invalid"
        },
        "response": {
          "id": "c57a71fc-ef9f-4447-9d85-93c46ca22893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab584ce-579e-4211-8189-1717eba688d9",
        "cursor": {
          "ref": "5c59dd58-b493-43f1-9b16-8e1a5c4ef5f0",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0a50c6ba-dcdf-46df-b411-ae37e18502ce"
        },
        "item": {
          "id": "3ab584ce-579e-4211-8189-1717eba688d9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "dc51e922-fac9-45a4-aebc-5b92eaff5bb6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 199,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c56236-c914-4dde-826b-c8dd3498b299",
        "cursor": {
          "ref": "fc599bd4-702b-456e-8e81-6023d20c34ea",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9056c329-2944-4d21-8582-f475d2f7744c"
        },
        "item": {
          "id": "26c56236-c914-4dde-826b-c8dd3498b299",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "180b3a17-233f-43b8-8ad5-fffe245b0b1b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 11,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d9ebc7c-1219-43a1-a8b7-4e47a43db3c8",
        "cursor": {
          "ref": "dad7a5e2-0435-4395-9254-0e88ce3c065c",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a864e711-24d5-4ea4-a14b-a28ac0136b67"
        },
        "item": {
          "id": "7d9ebc7c-1219-43a1-a8b7-4e47a43db3c8",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6929d27a-d142-47b6-9cce-4129e9eb92aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a893d6-264f-4478-9804-7466a76d5d49",
        "cursor": {
          "ref": "d6dabc19-c1ba-4b29-acf8-50081a798532",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "985d6ce8-2d8d-4f20-8be3-3c8be64c1b00"
        },
        "item": {
          "id": "18a893d6-264f-4478-9804-7466a76d5d49",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b8cad3a6-26f7-409d-84d9-a260c1c1c45f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a893d6-264f-4478-9804-7466a76d5d49",
        "cursor": {
          "ref": "d6dabc19-c1ba-4b29-acf8-50081a798532",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "985d6ce8-2d8d-4f20-8be3-3c8be64c1b00"
        },
        "item": {
          "id": "18a893d6-264f-4478-9804-7466a76d5d49",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b8cad3a6-26f7-409d-84d9-a260c1c1c45f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70728a46-f979-4c04-bbca-6835745277c5",
        "cursor": {
          "ref": "1475d296-896a-45c6-85ae-8a2516cc6389",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f43a73ea-0908-4fbb-a2e4-96c9628d2acd"
        },
        "item": {
          "id": "70728a46-f979-4c04-bbca-6835745277c5",
          "name": "identifiers"
        },
        "response": {
          "id": "56518010-ac77-4a15-b543-c737ca2a475d",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e01c7b-2c9c-4bad-ba5e-a8036a6cb755",
        "cursor": {
          "ref": "8e1ac3e3-854b-4603-9bf8-2c2f116bfb9c",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b956dba8-983d-4489-b0b1-798fac1556f4"
        },
        "item": {
          "id": "f7e01c7b-2c9c-4bad-ba5e-a8036a6cb755",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7291f3b6-4dcf-4c0f-8f3a-bb73590ee876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e01c7b-2c9c-4bad-ba5e-a8036a6cb755",
        "cursor": {
          "ref": "8e1ac3e3-854b-4603-9bf8-2c2f116bfb9c",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b956dba8-983d-4489-b0b1-798fac1556f4"
        },
        "item": {
          "id": "f7e01c7b-2c9c-4bad-ba5e-a8036a6cb755",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7291f3b6-4dcf-4c0f-8f3a-bb73590ee876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27048a74-9fec-4187-bf3f-7cdf15edeeb0",
        "cursor": {
          "ref": "922bba34-18b0-4443-a31f-91c4833e0b91",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2484ecdc-5919-42ba-bec1-4aa8b3947ddf"
        },
        "item": {
          "id": "27048a74-9fec-4187-bf3f-7cdf15edeeb0",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6775950e-91f5-4860-8b6c-39cb0151d370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73102f28-bd96-43eb-978d-e76ec6bb531b",
        "cursor": {
          "ref": "3f52558a-beb0-4e47-b204-ac0639abff97",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "936b44f3-df8b-4ecb-ad1c-b1645aebfe49"
        },
        "item": {
          "id": "73102f28-bd96-43eb-978d-e76ec6bb531b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "d56d5188-e78c-41a6-84fe-3df669ebe9fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41e222d-b93a-4a91-bd43-455f4d6ed2e5",
        "cursor": {
          "ref": "1a020e21-599c-48be-94df-82d0fe9ba351",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f6868133-daa4-40eb-8e9f-178d3496863a"
        },
        "item": {
          "id": "b41e222d-b93a-4a91-bd43-455f4d6ed2e5",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f302bb58-3e8a-4d07-a3cb-e14111d097e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f0778d7-499d-44ee-afe2-072c0a786cc5",
        "cursor": {
          "ref": "c8fca9af-8402-459e-9bf1-351fd5678d0e",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "51b900b1-ca6b-4fbc-bbe6-a4ce9735b3da"
        },
        "item": {
          "id": "9f0778d7-499d-44ee-afe2-072c0a786cc5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4ae41ed6-cd2e-402f-b5c7-151b2cb6aad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e82742-dc0d-4c36-9215-e0f1120a4aad",
        "cursor": {
          "ref": "c84f59da-b4f5-4f53-9e93-3d4404a54958",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b6a54393-7bc8-4681-900e-157f875a93ae"
        },
        "item": {
          "id": "43e82742-dc0d-4c36-9215-e0f1120a4aad",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "531cbb69-f4a6-4414-8354-afaf3b93c765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3909b41-79a8-401e-bd23-4647613d0e55",
        "cursor": {
          "ref": "f6048b11-d474-40e7-8c8d-8fde21e42351",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a3fb0c64-2897-4c34-a2b2-e0756e78d409"
        },
        "item": {
          "id": "e3909b41-79a8-401e-bd23-4647613d0e55",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "60a7707c-b215-4b17-98f6-8d1bf28edfb3",
          "status": "Created",
          "code": 201,
          "responseTime": 734,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "b51ed43a-435b-4499-971e-5b8dca4ea616",
        "cursor": {
          "ref": "b1c09ff1-ebf7-4804-87b4-53e45f04b3fa",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ce5c8f30-a183-469c-871f-7022e535d505"
        },
        "item": {
          "id": "b51ed43a-435b-4499-971e-5b8dca4ea616",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "242ea484-4191-456f-ad66-17d82569e2de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3464ddc8-6d59-463f-832f-bb2a50f5d5d6",
        "cursor": {
          "ref": "51bf3133-63ea-41d4-a57e-838627b22f7d",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "79e32746-8d34-4497-b9a6-1028e76fad47"
        },
        "item": {
          "id": "3464ddc8-6d59-463f-832f-bb2a50f5d5d6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3f482a96-a4d2-41b9-aa9a-d5ef3d96fa4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b362242d-26ce-4082-8d71-cd4c3c437bd9",
        "cursor": {
          "ref": "13869252-aa6f-4884-953e-41d09d747f1e",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "52a1e2db-cb53-4934-a210-2c08146daa53"
        },
        "item": {
          "id": "b362242d-26ce-4082-8d71-cd4c3c437bd9",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "95efff53-922f-4c0d-b4f6-71a7f9a5267c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25cb110-d20f-4464-9ed8-686205314269",
        "cursor": {
          "ref": "2dccac44-b728-4ec9-8525-96ba9398e8a5",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f6d04c51-fede-4b07-a231-8d2e98243d51"
        },
        "item": {
          "id": "b25cb110-d20f-4464-9ed8-686205314269",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "7a99f1d0-08d7-447d-be95-bbb8f9d54d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ac3cf6-b9fc-4340-860a-3ca2f7595134",
        "cursor": {
          "ref": "d467e93e-13dd-4a6a-b0af-8510071ff137",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e0c182ff-d9a4-4cb9-8199-35f64888a9a5"
        },
        "item": {
          "id": "24ac3cf6-b9fc-4340-860a-3ca2f7595134",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6f3df12d-829a-4f16-88f0-7e0f1763290f",
          "status": "Created",
          "code": 201,
          "responseTime": 567,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "b7d646e6-944f-4f11-899b-3db7f6a2fb18",
        "cursor": {
          "ref": "de4ac7a2-70e0-4506-9a48-df6758902aae",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5726e296-a668-44dd-82a7-13fe6407a326"
        },
        "item": {
          "id": "b7d646e6-944f-4f11-899b-3db7f6a2fb18",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5265281e-2f57-4d76-a206-b4d1dc3c595e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa91a4d5-2304-41d9-8506-cc51f8672ff3",
        "cursor": {
          "ref": "19cd0ea3-08de-47b9-905f-a4e2fa59904a",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "24da3397-a0a2-41f8-b231-7e47f39d5a46"
        },
        "item": {
          "id": "fa91a4d5-2304-41d9-8506-cc51f8672ff3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e7bcc048-8d7b-48e2-88cb-d91025ddb0da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5eef2cc-4e51-4b3e-bfad-e34d1c68874d",
        "cursor": {
          "ref": "e00d21bd-819b-4ba3-aba7-ef93dfc43933",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d2d008b8-c15b-4c6e-82a6-9e342dfeb67f"
        },
        "item": {
          "id": "a5eef2cc-4e51-4b3e-bfad-e34d1c68874d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "2ea79f53-4ae2-49bc-a7f9-9be09fab6c45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d38a907e-6fd3-4be0-811b-62ee9db547ae",
        "cursor": {
          "ref": "5b710587-3ec8-4edf-a126-503b8d577299",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d9ffeb67-cfbc-49b3-9d20-9dd532369d77"
        },
        "item": {
          "id": "d38a907e-6fd3-4be0-811b-62ee9db547ae",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "299683d5-64e5-454e-8bfb-6da68159be7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a864225d-a581-4461-8454-cac3eea495d1",
        "cursor": {
          "ref": "1c80b8a9-6516-461c-ad8b-b1c2f42a68e5",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a8734e8b-ce5f-4978-81ae-0d23a6368089"
        },
        "item": {
          "id": "a864225d-a581-4461-8454-cac3eea495d1",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3e224865-6b1a-44de-aafb-2c216f555449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f91aa44-06b4-45ab-b079-011dcb6da082",
        "cursor": {
          "ref": "653b0089-beea-493a-b509-6eec4d7ee906",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a80a6125-61c4-4646-97d4-a665846c4a86"
        },
        "item": {
          "id": "8f91aa44-06b4-45ab-b079-011dcb6da082",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "dee42c41-6122-4da5-87dc-aed2fe7513da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c191c9a-17c5-459a-99d3-73f6a56dad56",
        "cursor": {
          "ref": "daa2d7ba-79d2-4418-bc0d-8c3f1c900d34",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8ff4f75f-bb4d-4e58-81b1-9df01498070a"
        },
        "item": {
          "id": "5c191c9a-17c5-459a-99d3-73f6a56dad56",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "359b16b4-ffa2-4905-9b6a-6c0d696f075b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad38d9eb-b0ca-49c9-86d3-ed22d393b3aa",
        "cursor": {
          "ref": "06dfe8f0-5b84-48e0-a132-6450f029b643",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f7b691e8-3a24-4785-ae66-7e83e8770625"
        },
        "item": {
          "id": "ad38d9eb-b0ca-49c9-86d3-ed22d393b3aa",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f7c6de6e-7625-4dc6-8c39-eec1ba5c041f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21407c90-437e-4f6a-bd06-bb4a4d38440a",
        "cursor": {
          "ref": "ff4b9005-7e7d-4e0a-a8c9-a20c562af610",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "da5ce36a-9d3e-4715-8959-045b559df1d9"
        },
        "item": {
          "id": "21407c90-437e-4f6a-bd06-bb4a4d38440a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0e8dfa60-b8a7-4296-97a2-639d26e4e303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ee5c15-f9be-43e7-9f7c-1c7e3f343b32",
        "cursor": {
          "ref": "3a589299-e543-4f0f-81ab-fd9fd94a8762",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e4354030-0174-480b-a645-ae2100fd775a"
        },
        "item": {
          "id": "85ee5c15-f9be-43e7-9f7c-1c7e3f343b32",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c2f65b74-a02f-4f3b-a0c0-e94bee79ac46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da7f4ff-d45b-4fa5-9424-a1a7cf5a7dae",
        "cursor": {
          "ref": "cc7423d6-4505-44bc-907f-61589a9127b7",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f79cadf3-5df3-463f-a7b7-54d1f88b10e7"
        },
        "item": {
          "id": "9da7f4ff-d45b-4fa5-9424-a1a7cf5a7dae",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "69d16100-aaa3-4225-ba94-d22c4a6c16be",
          "status": "Created",
          "code": 201,
          "responseTime": 560,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "6851c6c4-f314-4f68-8e3d-c3b499e28050",
        "cursor": {
          "ref": "32b464c6-1f06-45fb-a0ad-6bfd5314b712",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ad0734e6-d74f-4576-8ee6-e985e4095dec"
        },
        "item": {
          "id": "6851c6c4-f314-4f68-8e3d-c3b499e28050",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "879c5ae5-e807-4537-a7ad-f214fa31536b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d7e586-6e63-4fd0-9e1a-1845daf4dc96",
        "cursor": {
          "ref": "9c03dc8c-3392-499e-bcc9-4ceedb5fbbaa",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "31f547ed-a7ad-4256-800d-887af88b177d"
        },
        "item": {
          "id": "05d7e586-6e63-4fd0-9e1a-1845daf4dc96",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9dac7677-8804-4dbc-b08d-81c0eab176c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "967a9edc-e795-4904-8e8f-4a1781aedc50",
        "cursor": {
          "ref": "99214f5d-f16d-4ebe-8509-38c7a34160af",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "863a34e3-e3e6-4125-ad0a-0919c097ab42"
        },
        "item": {
          "id": "967a9edc-e795-4904-8e8f-4a1781aedc50",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e65f9dcc-40d3-4585-b40c-435ebe8d6c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "611e83e1-2eec-4ced-9b2f-2f2a538b4aa3",
        "cursor": {
          "ref": "77139000-d2e6-4029-ad6c-af7c15602182",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3594accf-fdea-43df-a22a-a70fe0a7c9ed"
        },
        "item": {
          "id": "611e83e1-2eec-4ced-9b2f-2f2a538b4aa3",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "9f9a87e6-5a3e-4d4d-b648-4f2be7936d65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f01615-c5ad-4d59-bbd4-a622ae7d0ae5",
        "cursor": {
          "ref": "b6b4cd71-cf56-4e9d-b971-94d9b1620172",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0e9f1419-0c1a-4876-92d2-d59a64503318"
        },
        "item": {
          "id": "32f01615-c5ad-4d59-bbd4-a622ae7d0ae5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "897573d4-4e48-446f-abe3-541ebd33c447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd577a82-d167-44aa-987e-c96998e76a61",
        "cursor": {
          "ref": "ca71d89c-6045-4241-a3ce-30f67b6f88f5",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "de09c224-b2db-4365-bd09-4cae7f01ed54"
        },
        "item": {
          "id": "fd577a82-d167-44aa-987e-c96998e76a61",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "68ba68d0-ac72-4bf9-bc85-6ff0755238d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74372116-ad33-4147-8873-b715d19fa6c6",
        "cursor": {
          "ref": "99dd8009-e577-4a39-8d56-9c3906812f79",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d2cbcf94-4451-43f4-9dbf-bf620f47f786"
        },
        "item": {
          "id": "74372116-ad33-4147-8873-b715d19fa6c6",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c1e29f72-ddad-4fd2-9862-cb1a776ad675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f60efaf0-7221-45f2-b8f8-44e9da2f0564",
        "cursor": {
          "ref": "0f8818d5-dfae-4f00-80eb-8e6da7b68e94",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e2f8689a-c970-44de-9a82-573e7b7396a6"
        },
        "item": {
          "id": "f60efaf0-7221-45f2-b8f8-44e9da2f0564",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9d304300-6b47-4834-8633-396f43abbadd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "834e1ef6-402b-4c8e-ae6d-1ce0e48865e3",
        "cursor": {
          "ref": "fd6434a1-0b9c-4c2d-8293-a713f6f62ee7",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "58dbb5d3-474a-4bf5-b629-20292a5f46fe"
        },
        "item": {
          "id": "834e1ef6-402b-4c8e-ae6d-1ce0e48865e3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "85f9d060-33ec-4b8a-865d-6a291943e251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42efd76f-91d9-4b00-80f9-09c287648261",
        "cursor": {
          "ref": "0cdb0a0a-4679-47f2-ada0-f03218608ab1",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "33f90389-8267-4405-923c-36a4ade6d092"
        },
        "item": {
          "id": "42efd76f-91d9-4b00-80f9-09c287648261",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "136b828b-b8ec-47ed-a9bb-1de21d3cf074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c46f8d7-469b-49ea-8c95-b7a9e7d81d8c",
        "cursor": {
          "ref": "700064fd-74c4-4cf6-9ccc-bfaeb9f56971",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b91a1521-038e-44b8-b236-c5c8b81038fb"
        },
        "item": {
          "id": "0c46f8d7-469b-49ea-8c95-b7a9e7d81d8c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "632e96b2-e87b-4b65-be9f-29a4a26ebc36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750f9261-baa8-4870-b60c-41ba2ab2d6af",
        "cursor": {
          "ref": "d8ec1eae-3d67-476d-b7d6-d323b6d26072",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6d8ab663-d479-40a6-a4e8-29298b6c22d1"
        },
        "item": {
          "id": "750f9261-baa8-4870-b60c-41ba2ab2d6af",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "214cb039-45c1-4a59-ad13-f44e83cf6020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d4ff05-509e-48d0-bf37-4ca2f6a4a62c",
        "cursor": {
          "ref": "744cb985-3372-4575-a1d2-2c75dca113f0",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f32596cc-0c56-407a-b3ba-d85c042766ae"
        },
        "item": {
          "id": "19d4ff05-509e-48d0-bf37-4ca2f6a4a62c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6f04f6e8-032a-4f4f-9418-19c2f178feab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 279,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ab376bb4-2076-426f-93fb-6eb9f2d79165",
        "cursor": {
          "ref": "97edad73-1ef4-48b9-983f-58dd9bb1c07c",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5c4eb210-7c5d-4454-bab6-f0e58273dd5e"
        },
        "item": {
          "id": "ab376bb4-2076-426f-93fb-6eb9f2d79165",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b099256f-42ea-45e8-a51e-bfae5f1d163a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "817c0ef0-ccba-44ba-870d-f67cb0586281",
        "cursor": {
          "ref": "32ea8bc5-86a2-4bba-a8c3-b3763cf4d96f",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3f188b7a-a2e0-49ee-a9bb-0d3521f8758d"
        },
        "item": {
          "id": "817c0ef0-ccba-44ba-870d-f67cb0586281",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b30f9cbb-6db2-4e73-b85d-efab094d14f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b535ee26-287d-4299-b061-562f0638a73f",
        "cursor": {
          "ref": "fd7a8e49-071f-4503-9493-564208139acb",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0a9febdd-b871-4fa8-8706-baf9998cb694"
        },
        "item": {
          "id": "b535ee26-287d-4299-b061-562f0638a73f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "feb4e058-1b77-4e18-82b4-ee1aff745b2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5bb52d8-abab-4a05-a8ab-347a6c8ed549",
        "cursor": {
          "ref": "251d3f6e-ebb3-4879-8294-ec131fa0ee38",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f3f664fb-0919-4525-abca-8f8a63a088ff"
        },
        "item": {
          "id": "b5bb52d8-abab-4a05-a8ab-347a6c8ed549",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "290c5c08-af78-4ab9-8e77-561a98821269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8af8396-5226-473b-9a73-c95963e5e53b",
        "cursor": {
          "ref": "77f5b53a-2c4a-40f5-b576-8793ee461ed6",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "89043c59-1ab8-4528-9315-36913d633824"
        },
        "item": {
          "id": "e8af8396-5226-473b-9a73-c95963e5e53b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9c7e2740-99ab-47b2-8812-298754027c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd5378b-f5c1-42a4-a693-4be7d2a10ab6",
        "cursor": {
          "ref": "d077171d-f3b1-4178-82ec-54b1d3f7872f",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8507e115-d69f-4c4b-be59-7d3d041d012c"
        },
        "item": {
          "id": "5cd5378b-f5c1-42a4-a693-4be7d2a10ab6",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b1fdd9ec-7214-4d65-8252-2b5e8863c336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab09d71-5a5a-44d9-b262-3fb659fb4f13",
        "cursor": {
          "ref": "d543f747-6933-48c2-9934-2872247d5684",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "536626fe-1d07-48c3-9471-bd93e94a2044"
        },
        "item": {
          "id": "fab09d71-5a5a-44d9-b262-3fb659fb4f13",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c09c958e-ade3-40da-8dbd-f67f7e48866b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 278,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "a3856654-fc06-44ed-a721-c122f77f41fa",
        "cursor": {
          "ref": "bc876122-7a6e-4b12-b411-ffe8c02be2c1",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2075f8f9-db3e-4ccd-b471-1bbf958dffe4"
        },
        "item": {
          "id": "a3856654-fc06-44ed-a721-c122f77f41fa",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0dd515b3-98ed-4503-af8f-34a501490f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689ccf31-fb93-469f-ab4f-ca44f6f6b428",
        "cursor": {
          "ref": "a5853fd8-0e90-4566-a42a-22d6bb16ce7f",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a1ad74e6-59c1-46d8-809c-009c0915b61b"
        },
        "item": {
          "id": "689ccf31-fb93-469f-ab4f-ca44f6f6b428",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "65cf1eff-87cc-412d-886c-ca2d089adf78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d556ac3-3c8c-41e0-a254-45a9fe6b1fb6",
        "cursor": {
          "ref": "6372f78b-8267-458f-8e59-476fa33232c9",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6fc74923-f57e-4138-ad8b-759981ea7f76"
        },
        "item": {
          "id": "6d556ac3-3c8c-41e0-a254-45a9fe6b1fb6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f8fc1b19-d876-40cd-a82a-ae6c91f96a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f00090eb-151d-4c45-944a-1e3f9ed5b205",
        "cursor": {
          "ref": "a8bdcbe1-404d-4aa7-bad6-b6273d759e9f",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b0c422cd-6f72-4723-be2e-e29deff25736"
        },
        "item": {
          "id": "f00090eb-151d-4c45-944a-1e3f9ed5b205",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "47cdf861-681b-4f78-b252-ed87d4288ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c366f01-db1a-44e5-bea4-54bcd4431194",
        "cursor": {
          "ref": "b1de93cd-bf66-44f0-81cb-117c3f963aaa",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1c8985ec-c885-46dd-ba35-862c21b685cb"
        },
        "item": {
          "id": "1c366f01-db1a-44e5-bea4-54bcd4431194",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a3f21ac4-ace0-4426-969d-134ae84e0e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1361bd7-c492-4317-8474-89402da0cde4",
        "cursor": {
          "ref": "520b2a4b-1660-4090-a837-6a1107e7c6a2",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3c06935c-8e09-4dd0-97ff-990fa5906d24"
        },
        "item": {
          "id": "f1361bd7-c492-4317-8474-89402da0cde4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "64b89033-6998-45b1-b5e8-189f78d964bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c155885-22ea-4cf3-ac66-07c231ea61d5",
        "cursor": {
          "ref": "2394239b-6f98-45d1-8e20-9fe98a74b919",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a9ac48f8-41ff-4de3-9817-0f4e6342ee59"
        },
        "item": {
          "id": "1c155885-22ea-4cf3-ac66-07c231ea61d5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9d90dee1-e6ad-4ea9-a551-f7147d27589d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7009d486-d858-4771-a1a4-baffaddf0014",
        "cursor": {
          "ref": "61899da2-1f4a-4fe5-a0f9-47bd6e55dd39",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "1e4d8cb9-e4fd-40ff-8baa-eed7fb4654b5"
        },
        "item": {
          "id": "7009d486-d858-4771-a1a4-baffaddf0014",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "51b13eb8-7010-44df-b9f2-7caa4b9b4e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f0153f3-cb81-4f10-9184-10c0e8cf3daf",
        "cursor": {
          "ref": "4749dd95-f67f-434b-b30e-85751d612d10",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4ec547d4-4fc6-42b8-bfbe-3c4fd2434a0f"
        },
        "item": {
          "id": "7f0153f3-cb81-4f10-9184-10c0e8cf3daf",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b3750eee-e711-40c5-ab96-d02281dbcac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e6b579-a7d1-45b4-826d-0b50ae704c2b",
        "cursor": {
          "ref": "c59fa72e-005d-49ca-bdb5-54891e85dbae",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "bd3cdd7f-362a-434b-974e-fee69c5d1bdb"
        },
        "item": {
          "id": "c5e6b579-a7d1-45b4-826d-0b50ae704c2b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2d8af7f6-3e4b-461e-95ab-d6838d2573e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b099c4-7587-4dea-bba8-a1ab4c37839a",
        "cursor": {
          "ref": "b63e9c38-cbad-4d76-96da-eb03c40fb2dd",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "db653982-1cfc-4094-bcbc-bfc63055212e"
        },
        "item": {
          "id": "43b099c4-7587-4dea-bba8-a1ab4c37839a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "88e944ab-02cf-4a7b-95b9-2968d8198041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac3dc0a-c737-40e8-bddf-959f5329a920",
        "cursor": {
          "ref": "9c185d8b-41b5-47f2-ae88-e833fc829274",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f37b914e-2437-4d33-9e00-9321bed267c2"
        },
        "item": {
          "id": "9ac3dc0a-c737-40e8-bddf-959f5329a920",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "88d6ffe2-f2df-43df-bd55-aeba277f1719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb96c51-afb2-4809-beb0-7b4e53501d2b",
        "cursor": {
          "ref": "4a33fbec-083e-4e0f-aebd-29a1a8f15aad",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c1431e01-46a9-453a-9181-b5f7e78f60c7"
        },
        "item": {
          "id": "1bb96c51-afb2-4809-beb0-7b4e53501d2b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "840aabcf-7a8e-4b4d-8506-4b0bf7202666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "298e52c3-2831-49df-8788-de876e5f40a9",
        "cursor": {
          "ref": "2ee6181e-f7e7-4126-9349-c2221063060d",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "681b5b48-a9b5-44e7-a7d8-8e00518517e6"
        },
        "item": {
          "id": "298e52c3-2831-49df-8788-de876e5f40a9",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f03d1600-6cf4-4714-aea8-b2ef68ef7413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "448b420e-b947-44c0-a721-8a53c3666c12",
        "cursor": {
          "ref": "efb1bdec-cf57-4165-82f7-845356f89de8",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "29eb6b43-6704-4830-b575-5d2f16bb25ca"
        },
        "item": {
          "id": "448b420e-b947-44c0-a721-8a53c3666c12",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "6a838032-2020-4384-824e-03d0b49f4a7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ed5ae3-79ec-4cb3-83bb-513b7968b1cd",
        "cursor": {
          "ref": "39424eb0-02f5-4816-8039-5275b7ac5dff",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3c199773-aacc-4587-808b-36e73df6bf02"
        },
        "item": {
          "id": "97ed5ae3-79ec-4cb3-83bb-513b7968b1cd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "00a123e8-cbf4-483f-aab3-e246b4ef472f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b62ef0-d816-47be-b220-23b8418a527f",
        "cursor": {
          "ref": "925963ae-9026-4509-a415-70e99238d5c1",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4d9210fa-5fa3-4a4d-bbd0-5060bae8aa9f"
        },
        "item": {
          "id": "93b62ef0-d816-47be-b220-23b8418a527f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "4aa9743c-b21b-4b60-a319-5dcebe0869b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b5b324c-9e4c-4483-aea1-5ce3a9167fbc",
        "cursor": {
          "ref": "9b9a3f95-d0ac-4440-ab87-1547fa9c69dc",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "6835800c-1ecf-4f00-a142-b8d2b6827fb5"
        },
        "item": {
          "id": "3b5b324c-9e4c-4483-aea1-5ce3a9167fbc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ed322303-4dda-42ff-af28-82af06b91898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d67a13d-d576-45eb-acad-cc7543f1e998",
        "cursor": {
          "ref": "44acfbee-dd14-4357-a718-8868730b8e1a",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c20f7850-8d77-4b05-9e5e-720cf54270c0"
        },
        "item": {
          "id": "4d67a13d-d576-45eb-acad-cc7543f1e998",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d71734f1-43bd-4a7b-b49f-2d3ca275567b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7977cd5c-9c86-48a2-9a31-9e57937332b4",
        "cursor": {
          "ref": "096349bd-6aeb-4ee1-a3e9-7bbc49ad161f",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "475b6bc7-7d92-4e0b-967b-9b2e23ac6207"
        },
        "item": {
          "id": "7977cd5c-9c86-48a2-9a31-9e57937332b4",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "17e6f161-d980-47a3-a4a5-568a43de65b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d422a4d2-d260-4fe7-a0c4-338cd3bfb538",
        "cursor": {
          "ref": "ebc6c029-0cc9-408f-a18e-014b5ba19dff",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "19808eb2-646f-4cb0-87b1-35e867e387bb"
        },
        "item": {
          "id": "d422a4d2-d260-4fe7-a0c4-338cd3bfb538",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5dae9c52-744a-4ace-9aac-ebecbd47260b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd95fd29-df93-4c05-8c62-409274c990e6",
        "cursor": {
          "ref": "3f7e3892-0c75-4152-9951-bbb51a4cd266",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "eea17791-1d90-4727-96c3-fd90ffa1eca4"
        },
        "item": {
          "id": "dd95fd29-df93-4c05-8c62-409274c990e6",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "db33750c-6656-40a0-abe8-618bb237d547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d8b45e1-9349-4677-95db-eb06cccf6e8c",
        "cursor": {
          "ref": "bf471ae4-83d9-4dac-9c39-b9fa2615b142",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3c24fb6f-5535-4f5a-b529-7d9d4e3f958c"
        },
        "item": {
          "id": "1d8b45e1-9349-4677-95db-eb06cccf6e8c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6bf58baa-571d-48d6-83ad-ac86bfa143df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "610df90d-c233-458e-b436-ff622b5935eb",
        "cursor": {
          "ref": "455142d9-1114-4831-8861-8092f057d56f",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "68b18973-44c0-4691-89df-0a31615d4ab0"
        },
        "item": {
          "id": "610df90d-c233-458e-b436-ff622b5935eb",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "706a9502-f44e-460b-ad18-bc71a674612c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835dac4a-b90f-4b20-9808-666a3c5a6b55",
        "cursor": {
          "ref": "c36d44de-6113-4bca-bed9-224b74caefb7",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "97a6373d-b58f-4c8c-8bed-003af7f42f81"
        },
        "item": {
          "id": "835dac4a-b90f-4b20-9808-666a3c5a6b55",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "24bbddbf-5cc0-4fc7-877f-ccee2d244951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c3054d-8a73-4163-a9b1-5cfac74ae9bc",
        "cursor": {
          "ref": "9bf292a5-5909-45d1-b428-868905ac0447",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6fbd1dfd-e0da-420c-8dcc-90fd67aec84b"
        },
        "item": {
          "id": "16c3054d-8a73-4163-a9b1-5cfac74ae9bc",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "df5678c3-0eb0-437b-b7ff-44154a64e6a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7420035f-1ec6-4485-87da-3683864b253c",
        "cursor": {
          "ref": "9775a830-69e5-42cd-a8b8-c6bee2b0764e",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5db44d10-cf16-42ef-bd3d-b8b00d8638c8"
        },
        "item": {
          "id": "7420035f-1ec6-4485-87da-3683864b253c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "03193e12-eb7d-42fe-8b22-b5b9ab2bfb20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb6e392-f6f6-457d-a3b7-380387963c24",
        "cursor": {
          "ref": "c719a961-7b7f-4596-9625-242408ec389f",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8c984f7e-a08e-487a-838b-200256040b4a"
        },
        "item": {
          "id": "3bb6e392-f6f6-457d-a3b7-380387963c24",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "cfb4f94a-b2a5-462f-b8e0-ae44affd0545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abcde559-7260-47fe-b336-10aed6445faa",
        "cursor": {
          "ref": "f2d5649d-40c5-40c9-8e03-4f86ec76cc79",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "90abd58b-20ae-4a84-8182-eac07df39645"
        },
        "item": {
          "id": "abcde559-7260-47fe-b336-10aed6445faa",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f3cb0940-8299-434e-9604-1114bfd3b0d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd298fea-23bf-4a71-b822-44a6cd1769d0",
        "cursor": {
          "ref": "f22909ca-67e3-4bae-85ce-d7830a077ad3",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "38bcd435-1386-49f6-984b-0aaf0400750f"
        },
        "item": {
          "id": "cd298fea-23bf-4a71-b822-44a6cd1769d0",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "48ca8183-39ef-40af-b782-28d4e8ef8819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c96beda-4360-4d48-bd3f-e4bae6606f07",
        "cursor": {
          "ref": "d5d7530d-4b76-48ad-8edd-d87ef65d96b0",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "eeba1ed3-adf9-4f74-9bda-cf37296da701"
        },
        "item": {
          "id": "2c96beda-4360-4d48-bd3f-e4bae6606f07",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "314fb078-0929-41eb-a26e-20becd0f610e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 306,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e15de9d0-c1ea-4f9e-9d6a-8ef3c578daf7",
        "cursor": {
          "ref": "b07c4d71-398a-46d2-b1cf-58bb77e9e7aa",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a486c463-1359-4812-ad89-62a097f9f398"
        },
        "item": {
          "id": "e15de9d0-c1ea-4f9e-9d6a-8ef3c578daf7",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "3da9820e-f8f6-4719-969b-a4f01b586e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f782580-dcc6-4ee1-99be-fbd53981d82f",
        "cursor": {
          "ref": "ee32fb7c-0041-4938-b3bc-e1765fc9fbbf",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "40c098bd-58a0-4860-a08b-3c32b4ba9fd4"
        },
        "item": {
          "id": "1f782580-dcc6-4ee1-99be-fbd53981d82f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f2512ad1-043f-4d29-966b-5ed5c59360ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52ecf41-7c2a-496e-b738-19f314414658",
        "cursor": {
          "ref": "2877fea8-8e11-44d4-ab10-69c3e610c4cd",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "59955aa9-c4a4-49aa-8eb0-0b69e38b9a15"
        },
        "item": {
          "id": "c52ecf41-7c2a-496e-b738-19f314414658",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1c140c24-0e55-4c33-b8c9-79148acda253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3dad3c2-4a03-4e98-af7a-0fe93234cad5",
        "cursor": {
          "ref": "e3970d25-c515-42c4-95c7-b813c1459970",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5fa69481-7a74-4e07-a666-ecdf81091342"
        },
        "item": {
          "id": "a3dad3c2-4a03-4e98-af7a-0fe93234cad5",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e7027092-43ca-48a1-9ccd-72610be31502",
          "status": "Created",
          "code": 201,
          "responseTime": 539,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "6ac2fdfa-5937-43ea-bbc2-d383f7a9de42",
        "cursor": {
          "ref": "689ce01b-73ab-428a-9111-85f110103e8f",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "76d30da0-ea45-4294-a104-a196881ace6c"
        },
        "item": {
          "id": "6ac2fdfa-5937-43ea-bbc2-d383f7a9de42",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b5b744a4-86d8-4ffb-be04-88241f04c326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b726d20-2319-4a2e-a2ea-87f775b9e9fe",
        "cursor": {
          "ref": "3c5fa3f9-2134-41b9-a2a4-9dfdfbd13fd0",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a57793be-8626-4c62-be52-d9bfd06064c8"
        },
        "item": {
          "id": "4b726d20-2319-4a2e-a2ea-87f775b9e9fe",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "3d30196c-1c4a-45f1-8479-6c70234361d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56aaaaf7-fc6e-4121-8340-68b3fc18ad75",
        "cursor": {
          "ref": "79902567-f667-4290-8f1e-457e6b921fa3",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "407a9a90-2e88-41b3-b5b9-9274fe765f60"
        },
        "item": {
          "id": "56aaaaf7-fc6e-4121-8340-68b3fc18ad75",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "54975b9c-ee60-4972-8140-19d394a44404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed00d7f8-fb36-4d04-83a3-0292c7fceafa",
        "cursor": {
          "ref": "dad7826b-cd17-422e-a7a7-5d0e2bbbf979",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "41c69af2-17b6-47cd-a4db-2cab07b653af"
        },
        "item": {
          "id": "ed00d7f8-fb36-4d04-83a3-0292c7fceafa",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "dd258e48-6d0d-41ec-abf4-cc74815bea50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53993a70-d010-4547-89e4-45f401a292f4",
        "cursor": {
          "ref": "b3f65c58-1a42-465b-b954-7000f8f5a467",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c71b8811-eedb-4548-a587-826e00aef8d8"
        },
        "item": {
          "id": "53993a70-d010-4547-89e4-45f401a292f4",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "01dd8b36-a472-4f89-b648-87eef359ad82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11344e64-02fa-45c6-a35b-4cc1c97421e9",
        "cursor": {
          "ref": "57b6f9a7-665d-4be3-9900-6c3a44488825",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "701063ec-7018-46b5-ac25-2e361874b778"
        },
        "item": {
          "id": "11344e64-02fa-45c6-a35b-4cc1c97421e9",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "31215b7b-29f1-4124-9dbc-5038ce3aa568",
          "status": "Created",
          "code": 201,
          "responseTime": 524,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "54f52b1b-2b21-4ad0-81a6-d94f0a478314",
        "cursor": {
          "ref": "bef79d73-afca-4d4a-a246-a80ba0771d34",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e44b3816-b7fb-4fc0-8310-9296424a0b0d"
        },
        "item": {
          "id": "54f52b1b-2b21-4ad0-81a6-d94f0a478314",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b954dccd-a9b4-4640-adbd-dba279b3745d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c9d97c-c358-4762-938a-547721e3ecdf",
        "cursor": {
          "ref": "64b4a1c9-2a07-4269-9ec8-6e6d0da30457",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d1fb6ca1-5709-426a-afe3-e057665057de"
        },
        "item": {
          "id": "b8c9d97c-c358-4762-938a-547721e3ecdf",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2c41e349-5394-43fc-a984-47e3c50ce7b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f90d95-1237-4108-8e63-e557fa6d5983",
        "cursor": {
          "ref": "fb1a32c6-982a-4010-a6d2-22d845477f68",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3dd2649c-3ae4-405c-ac4c-9b3efae95be0"
        },
        "item": {
          "id": "b7f90d95-1237-4108-8e63-e557fa6d5983",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "040094a1-464a-47e4-bc85-90ae8b928cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b30dd53-7cb3-4a66-8c68-0922b66134c9",
        "cursor": {
          "ref": "60f9b6e8-6e42-485f-b9bd-3d46d46b1071",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5acacdfe-0f32-474a-8558-d1f7bdbed502"
        },
        "item": {
          "id": "7b30dd53-7cb3-4a66-8c68-0922b66134c9",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "19ab11ef-443f-4241-8539-b0ee318b53de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc0ad02-0fb4-4c75-aa53-60ebb18150b9",
        "cursor": {
          "ref": "394730a5-a55d-4db5-8922-68ff54683aaa",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f8d8998b-36de-478b-8112-78ffcbbbd048"
        },
        "item": {
          "id": "3bc0ad02-0fb4-4c75-aa53-60ebb18150b9",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b5e54b07-ff99-4337-9fcc-dd6a3eb1539d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a1c0a69-964a-411c-b2b2-f299d393940f",
        "cursor": {
          "ref": "67335cbd-4cff-4ea3-b635-c2f40c2d5b5e",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e0aad835-b506-4b6d-b2ca-325d39de8a8a"
        },
        "item": {
          "id": "3a1c0a69-964a-411c-b2b2-f299d393940f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b22bec41-b001-4b1f-9394-7e652241cc0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27172306-6fd6-46df-bf82-1806bb72128e",
        "cursor": {
          "ref": "c0b037c1-74d7-4f7a-92e7-b70e7b657ce5",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a3bb63b4-2d67-44e5-ac28-b616f7ec9c08"
        },
        "item": {
          "id": "27172306-6fd6-46df-bf82-1806bb72128e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4e9e2949-fe85-4933-bddb-19930b2a39bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "021488a5-646b-48bd-a6c3-3684e241ac61",
        "cursor": {
          "ref": "c9e9cad0-d45c-4065-8e6a-b4cd67345cc5",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "107d21d9-c1e1-47af-b575-9300fc0cb20b"
        },
        "item": {
          "id": "021488a5-646b-48bd-a6c3-3684e241ac61",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0e46d10b-2ab6-45ef-8fb9-949071cec7a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49da3614-44a0-47a4-b924-df8c952c87a6",
        "cursor": {
          "ref": "81280c02-8037-450b-ac32-9fa238c5d9c5",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6a9466a1-aed5-4dd3-80e3-de618c0858ae"
        },
        "item": {
          "id": "49da3614-44a0-47a4-b924-df8c952c87a6",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ddefd27a-a0fd-40d9-90ad-5aecc55f9478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "278d9728-b3af-4b36-920a-c79b2e4ab673",
        "cursor": {
          "ref": "fb37fbfe-fca9-4dc9-bd68-c53aa2f8abd5",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a84223d2-a459-46c8-8e06-6ee6362afd44"
        },
        "item": {
          "id": "278d9728-b3af-4b36-920a-c79b2e4ab673",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "cc960e4e-2ffa-4daf-97bb-d9235a3f28ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "5e575d91-8c0a-4ada-b01f-2dc5aef8dd1c",
        "cursor": {
          "ref": "080895e5-eb43-480f-b008-95038a9dd718",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "28b37441-df20-4cbc-af86-f088347912b7"
        },
        "item": {
          "id": "5e575d91-8c0a-4ada-b01f-2dc5aef8dd1c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a4821479-41f2-4db9-9722-296f8bd2dbe1",
          "status": "Created",
          "code": 201,
          "responseTime": 537,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "303276cb-5295-4801-a8fb-8857f7eaf7f5",
        "cursor": {
          "ref": "20fa1c17-7bfb-40c4-966b-d1328b028261",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1fd3fe00-c385-4d89-88f1-00bf4327db4b"
        },
        "item": {
          "id": "303276cb-5295-4801-a8fb-8857f7eaf7f5",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "05a447e4-5fbd-45b9-9205-3420975c49c6",
          "status": "Created",
          "code": 201,
          "responseTime": 512,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37036331-e325-4a96-b4df-dbfa4e7b4940",
        "cursor": {
          "ref": "d0b76257-5d47-4afc-83f5-6a8823537ef2",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7efd21ac-33ee-4510-8363-863b855d1a00"
        },
        "item": {
          "id": "37036331-e325-4a96-b4df-dbfa4e7b4940",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c8bddfda-e64c-46c5-86a8-d5c5e7986c5c",
          "status": "Created",
          "code": 201,
          "responseTime": 508,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "872656d1-7228-41cb-a46e-156eaad320b8",
        "cursor": {
          "ref": "7080e458-0b9a-4502-a4a4-8d1f80159ed5",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "eb449f09-8590-49f3-9fbc-13b7fff8630a"
        },
        "item": {
          "id": "872656d1-7228-41cb-a46e-156eaad320b8",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "bce2f97b-18d6-4426-aa6d-f76c0c969607",
          "status": "Created",
          "code": 201,
          "responseTime": 573,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f6b12e-007e-4d66-af48-c033ec80120e",
        "cursor": {
          "ref": "eeb9e480-2e49-431b-a9a4-bac156ca4479",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a1afbd38-e71d-4456-ae60-b8b500f89141"
        },
        "item": {
          "id": "e8f6b12e-007e-4d66-af48-c033ec80120e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "81019f49-3df9-4fc1-b925-8a0090c4f4ec",
          "status": "Created",
          "code": 201,
          "responseTime": 553,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "f117a688-9f85-4afa-aed4-10ba6c9968bb",
        "cursor": {
          "ref": "04b80e72-982e-4909-b936-915d465cd346",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "308b325e-cee0-4ded-b332-868a84795238"
        },
        "item": {
          "id": "f117a688-9f85-4afa-aed4-10ba6c9968bb",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8091b2a5-81e1-4c65-8f11-2992c4cc9b1f",
          "status": "Created",
          "code": 201,
          "responseTime": 548,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2db11c9-915c-4428-966d-2b13004e8376",
        "cursor": {
          "ref": "7904f229-f584-4311-8b0c-19c7c64f8004",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2ac20290-27f8-486d-9924-67d2faa45102"
        },
        "item": {
          "id": "c2db11c9-915c-4428-966d-2b13004e8376",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f33a9714-5ce1-4179-b933-2cb5b021ec2a",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "c2db11c9-915c-4428-966d-2b13004e8376",
        "cursor": {
          "ref": "7904f229-f584-4311-8b0c-19c7c64f8004",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2ac20290-27f8-486d-9924-67d2faa45102"
        },
        "item": {
          "id": "c2db11c9-915c-4428-966d-2b13004e8376",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f33a9714-5ce1-4179-b933-2cb5b021ec2a",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "c2b88a78-0572-4bcf-a745-ef10bed6bb21",
        "cursor": {
          "ref": "2feae09b-aa53-48b7-8dbc-19eb9d9af144",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "46a74775-3285-43c5-b9d3-5e2bf9e87f30"
        },
        "item": {
          "id": "c2b88a78-0572-4bcf-a745-ef10bed6bb21",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "07e28ee3-da23-49fb-8908-7759bcad25e1",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "79f0ab4e-1ac0-48f4-99e3-f79b96d93ebf",
        "cursor": {
          "ref": "d052b467-ff39-4ec0-8390-c5018eb79d30",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a8bad780-4180-4992-b96a-73ccaa7e8745"
        },
        "item": {
          "id": "79f0ab4e-1ac0-48f4-99e3-f79b96d93ebf",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "dd993add-3b6f-450e-b740-aad6d33db497",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "31a8e583-b705-4849-adb5-07d08785c84c",
        "cursor": {
          "ref": "546b6d93-97d2-4245-ab58-4bb8b125e200",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "79600506-7f41-444c-9511-930a4150ea88"
        },
        "item": {
          "id": "31a8e583-b705-4849-adb5-07d08785c84c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "cbe5aef7-5184-49a0-b6d1-12ed5ab84ea0",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "608b04d4-a6b0-441e-aaaf-5d5eaa36589f",
        "cursor": {
          "ref": "595cd5d5-7593-448d-9c81-c6d1c4e18614",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "282971ea-2eb2-4b9d-8474-3e368b53e502"
        },
        "item": {
          "id": "608b04d4-a6b0-441e-aaaf-5d5eaa36589f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "79bd84c2-edb5-4a90-937f-ad8419fa0e2b",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "efa17a58-9edc-484a-ab69-b8d3655ee0f1",
        "cursor": {
          "ref": "fd4689a7-28f8-4612-aab9-545869a62c2d",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "826ed900-4e65-45d8-b9c8-bbcfdc5b2a40"
        },
        "item": {
          "id": "efa17a58-9edc-484a-ab69-b8d3655ee0f1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a5c6ea05-40f4-4367-a82f-c32b164dc7da",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "e20b13ff-da2e-4cb2-98fa-5781269887c1",
        "cursor": {
          "ref": "f89952ad-5165-4272-9a51-1d42c97e8ece",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "02c5c9f4-73a4-4e6f-8e8f-7348ba568245"
        },
        "item": {
          "id": "e20b13ff-da2e-4cb2-98fa-5781269887c1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3579d86f-8cd4-4dcc-b035-8c27e1a4710a",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "d6ac3491-4134-44df-965a-ffff46851ed6",
        "cursor": {
          "ref": "b349f4a3-83ad-43a8-a512-6241fbdca926",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f404cd24-a954-4bd2-b8b1-252baf4d8b1f"
        },
        "item": {
          "id": "d6ac3491-4134-44df-965a-ffff46851ed6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6957b3e4-462c-4824-a8fb-b88ecfe0377e",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "4bcf31be-d3b7-4c23-82bb-c4bad2829341",
        "cursor": {
          "ref": "f39f641b-cfe9-44ba-ba21-9a1281faaf70",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "93e0d6c7-d823-4773-9457-dc89fc6bc73d"
        },
        "item": {
          "id": "4bcf31be-d3b7-4c23-82bb-c4bad2829341",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0cac0c43-5454-4514-95e9-e29f13f40cc7",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "8b2119e4-6c4b-4bae-bc57-0c191610a4f2",
        "cursor": {
          "ref": "7c46a6ca-838d-4949-ba7e-74c200b0e7a9",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a531f53b-22b6-4ac7-b8ea-89ab1c17f06a"
        },
        "item": {
          "id": "8b2119e4-6c4b-4bae-bc57-0c191610a4f2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9ddc04f5-aef4-4857-8594-43d450e9af2a",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "95d496ea-f99b-4f77-a803-df346740d45a",
        "cursor": {
          "ref": "478274c6-db16-4227-a10c-904fec5fe3fa",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "68717dcd-a682-4361-890e-07c9dcc479d5"
        },
        "item": {
          "id": "95d496ea-f99b-4f77-a803-df346740d45a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ee7eb5b7-e28a-45a5-b421-5abb01c734d9",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "6ba7e6f6-fbfd-46cd-ac15-a86830d56b11",
        "cursor": {
          "ref": "77bd6ce0-2233-4fec-ad9e-432d19ad0699",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9c856819-196d-45fb-a55f-0d3c3b0b665c"
        },
        "item": {
          "id": "6ba7e6f6-fbfd-46cd-ac15-a86830d56b11",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1d42dbcb-4dae-4825-9e6c-38783dbe1b97",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "e331494f-e947-4124-83a2-724593840691",
        "cursor": {
          "ref": "d0e6931e-9ac9-46b6-b2a8-359851f4e3bb",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e1f40208-82a0-42b7-9be9-9cdda354f301"
        },
        "item": {
          "id": "e331494f-e947-4124-83a2-724593840691",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "84d39185-ef8a-47d1-9084-8eee89a5751b",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "2035453f-7d94-4bd9-9cd9-b14410cbd4e4",
        "cursor": {
          "ref": "e130f2c7-6090-4b0b-baa0-39d012b2cd91",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "110e6d21-5ecf-4ab0-b782-4a37917bb3b0"
        },
        "item": {
          "id": "2035453f-7d94-4bd9-9cd9-b14410cbd4e4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ff432a67-fb43-4cc7-9a99-812e34f1e68b",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "f4edfce6-a762-4b0f-86f8-6f0358b86446",
        "cursor": {
          "ref": "e6ccfe79-41c8-4a9c-a987-eaa501e4c8e6",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ed998c72-cdf2-47ec-9d3a-2ca7af94868c"
        },
        "item": {
          "id": "f4edfce6-a762-4b0f-86f8-6f0358b86446",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "490aa3b8-2065-4050-b776-cb00fc80af00",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "351c7493-fe13-49a9-9316-906e8456215d",
        "cursor": {
          "ref": "52a5c426-0781-414e-bd2c-73b2c5402110",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0a9b73a4-562a-4bae-a9fa-d98c159f4f23"
        },
        "item": {
          "id": "351c7493-fe13-49a9-9316-906e8456215d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b37e0110-c0ac-47a8-a23b-b60d0eb5f602",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "c114666d-850c-4cce-8537-3b1fcf936709",
        "cursor": {
          "ref": "7d8584ae-db95-450d-bbb7-c75a1a60584b",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1dcbf8b8-edf4-49fa-b5c1-a8519fc64cb3"
        },
        "item": {
          "id": "c114666d-850c-4cce-8537-3b1fcf936709",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "dbecedcd-d3cd-4631-abe0-df96c878943b",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "2d9d190d-9cbc-4975-907e-89caa15e8619",
        "cursor": {
          "ref": "b45b6c96-9575-4125-8312-5cd51717b5c4",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "188ebe9c-7b8e-45fa-a73c-5c0bdd222e25"
        },
        "item": {
          "id": "2d9d190d-9cbc-4975-907e-89caa15e8619",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6863d54e-79de-43d9-ba5f-a1ebb821b074",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "5a10209e-fdff-4380-bcf9-1f246032b4e8",
        "cursor": {
          "ref": "cee5dfa3-eb04-4a2e-9619-b8a07c25cb21",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f1f72ef5-483e-47ef-a411-36b9f50aefdd"
        },
        "item": {
          "id": "5a10209e-fdff-4380-bcf9-1f246032b4e8",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7cacead1-269d-4e7f-a089-3c91b788f581",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "a6fedfb6-feac-46d9-bfed-74b542adbcd8",
        "cursor": {
          "ref": "6752b019-556a-4dda-8428-e83b2b3f773f",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9f765115-7d44-4c33-99dd-8ff800f50f41"
        },
        "item": {
          "id": "a6fedfb6-feac-46d9-bfed-74b542adbcd8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "fbf1993b-ef2c-467f-b0e0-e26b7eded3b3",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "220dbee5-a24f-4a23-a0ad-5ed9026e2eb2",
        "cursor": {
          "ref": "b136f6e6-277e-4140-b9d2-542e2aa325af",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c02b7fc2-a523-464c-b026-af0fd492a62d"
        },
        "item": {
          "id": "220dbee5-a24f-4a23-a0ad-5ed9026e2eb2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c4b6c1af-1387-4a1a-807d-c62e7211dc10",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "8e6d7c53-e011-45d7-af7f-959ceb7597d4",
        "cursor": {
          "ref": "7339936f-8196-4371-9197-6796986b514f",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e59e0cc1-ed47-4988-a8a7-b6c3b8f86ccf"
        },
        "item": {
          "id": "8e6d7c53-e011-45d7-af7f-959ceb7597d4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2b050301-ee05-4713-8cc3-02273a5d41f4",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "594b32fd-8141-4e91-9f9a-d399e1e02801",
        "cursor": {
          "ref": "16fc1c35-39cb-4908-9ff5-b22ab194ec17",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "2b03e669-b4a3-4337-b25c-d7bbfba254fb"
        },
        "item": {
          "id": "594b32fd-8141-4e91-9f9a-d399e1e02801",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "cd6f251f-4ba4-45af-98b3-251775c98a46",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "6ab61019-61f7-469a-bef2-ab6b93084758",
        "cursor": {
          "ref": "e92b67f4-464d-444d-aaab-c8874ccac686",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "aa681122-2b30-432b-8c47-c98cfb2fc954"
        },
        "item": {
          "id": "6ab61019-61f7-469a-bef2-ab6b93084758",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "355c3ed7-32bf-481e-ab26-b5046a661316",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "2a87f9c2-9ca7-4845-99ff-f4b5368bf30b",
        "cursor": {
          "ref": "8989afee-6185-4bff-88e2-b5f389eeb526",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ec363fae-f3fc-4e61-9cb3-c41515dc1cdb"
        },
        "item": {
          "id": "2a87f9c2-9ca7-4845-99ff-f4b5368bf30b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d0a89117-07e9-4087-807e-16df93c3c517",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "95af4c33-19a0-40fb-82a6-3cbe41cac6c1",
        "cursor": {
          "ref": "e54d9b84-ca07-4434-94c4-3e0402a8c1a5",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "6a0b1654-a000-4b26-9ee1-a6dea11df1a6"
        },
        "item": {
          "id": "95af4c33-19a0-40fb-82a6-3cbe41cac6c1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "13a44ced-f945-4c3c-861f-84fc7182ae0b",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "a66b5291-b3fe-4d31-847f-e267ff955bcd",
        "cursor": {
          "ref": "20e1aa19-cae3-4881-a10f-4c966169d3c2",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "2b872bae-594d-43d3-91a4-343eaf4a1073"
        },
        "item": {
          "id": "a66b5291-b3fe-4d31-847f-e267ff955bcd",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "821b002e-7fcb-42d2-b210-95ac77daec14",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "f1638434-d885-4fa7-92b2-ec39fe8ddb19",
        "cursor": {
          "ref": "049c2d1d-d809-4f76-8209-46d77cb85ba1",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "968efe76-99a2-4011-a0a2-d6077f8e1adc"
        },
        "item": {
          "id": "f1638434-d885-4fa7-92b2-ec39fe8ddb19",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "bb9f1cc0-0bf6-4a38-ac6d-591d52b1b2c1",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "3a84e308-f665-4901-b544-326bf7e8876a",
        "cursor": {
          "ref": "9805b7da-0faa-4e4c-b4fd-0bbca3c37117",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "34665a22-504d-4cb0-9586-6fdfd26dad66"
        },
        "item": {
          "id": "3a84e308-f665-4901-b544-326bf7e8876a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e20872ae-598c-475f-b6e9-1f93a83be6b7",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "ab0db67a-071c-491b-a50b-15576ae44fc4",
        "cursor": {
          "ref": "84c02d1f-877a-4d57-be9f-8feffa9f136a",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a85a1ef4-bbf2-4442-9275-6141a2f40ff6"
        },
        "item": {
          "id": "ab0db67a-071c-491b-a50b-15576ae44fc4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "587f3c1b-05c4-4bac-bcea-4c0e80535edb",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "b51f387c-4fc0-4b14-93bc-9df7ffec6940",
        "cursor": {
          "ref": "138088bb-2e5a-4973-be6b-0f261ed3fe0b",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6c299e02-b357-4d09-9939-1d03fcfb45ef"
        },
        "item": {
          "id": "b51f387c-4fc0-4b14-93bc-9df7ffec6940",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "bf03c4ac-723a-4f60-a3ce-2bf08ac5683f",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "aeba2671-9bea-4d20-9474-c7fdebbda061",
        "cursor": {
          "ref": "81f182bc-7bc7-48c0-9d1d-39604ccda44e",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ae9de27c-84f9-446a-a05f-fc8df490e3ae"
        },
        "item": {
          "id": "aeba2671-9bea-4d20-9474-c7fdebbda061",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c8568aae-74d2-4fc3-a47d-42d6045b050a",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "25737deb-1f54-4d2d-a948-65b2e82f114e",
        "cursor": {
          "ref": "cbb7081b-5459-48f7-8cd0-6144142b88da",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "eb0b9311-36b7-4878-a159-103aa09702bb"
        },
        "item": {
          "id": "25737deb-1f54-4d2d-a948-65b2e82f114e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f9630fc8-ac04-46fc-bcae-38f3e91b3575",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e2924a-f2ff-465d-a733-2d0ca7a01953",
        "cursor": {
          "ref": "f89bbeb7-00b8-4b84-8425-e79f6578cf62",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0a692f75-0416-424d-a82a-018b45491ae6"
        },
        "item": {
          "id": "08e2924a-f2ff-465d-a733-2d0ca7a01953",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "2ac3a0ec-65c1-48d2-83ff-dbc32f9245f4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67fa795-7b7f-4051-92ca-549ad0d8f711",
        "cursor": {
          "ref": "b0c6bbfe-65f9-410a-a842-2d3cae747e9a",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "80cb429c-1262-4e82-848c-865c3eee99e8"
        },
        "item": {
          "id": "b67fa795-7b7f-4051-92ca-549ad0d8f711",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "eee2578f-3ec1-4dec-93cd-284d966f5b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67fa795-7b7f-4051-92ca-549ad0d8f711",
        "cursor": {
          "ref": "b0c6bbfe-65f9-410a-a842-2d3cae747e9a",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "80cb429c-1262-4e82-848c-865c3eee99e8"
        },
        "item": {
          "id": "b67fa795-7b7f-4051-92ca-549ad0d8f711",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "eee2578f-3ec1-4dec-93cd-284d966f5b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac33cba-d3a4-411b-a7c3-9608dce0ee0c",
        "cursor": {
          "ref": "e069e98f-31ac-4a37-9ed7-b55c1d552e15",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "56f54f8f-85ba-4dc5-983e-1dbaeb5c16d1"
        },
        "item": {
          "id": "9ac33cba-d3a4-411b-a7c3-9608dce0ee0c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c39f3708-26dc-4c95-a4e7-180471f8a45c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce8feffb-9b1b-41f3-87cd-84d3071bf6ed",
        "cursor": {
          "ref": "83cfbe7f-9ebb-483f-b925-b047281e6ce1",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "cfd07146-d1b3-4298-a456-f37881fcbe73"
        },
        "item": {
          "id": "ce8feffb-9b1b-41f3-87cd-84d3071bf6ed",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "17f657b1-0058-413e-86c1-4361278b3103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1625c26-4bd0-4cff-b49a-b124a19f6eed",
        "cursor": {
          "ref": "8c0c4817-80c7-431d-8747-f7cbf56e015c",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5cd37d16-e187-423e-b84f-93bd76452d87"
        },
        "item": {
          "id": "c1625c26-4bd0-4cff-b49a-b124a19f6eed",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1e321091-dc68-4cd8-a1b9-fd0674979dee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82bf1956-3099-4cb1-bda6-e24957a09c6b",
        "cursor": {
          "ref": "366059ae-4fab-441f-853a-ba5b30f3efc0",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d6e550f7-e903-4723-af56-b62d3f9b52f5"
        },
        "item": {
          "id": "82bf1956-3099-4cb1-bda6-e24957a09c6b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0418022b-0a69-46b0-8cc9-491867dbe9fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78ce545e-80a5-452f-ae6e-f9401fb251d4",
        "cursor": {
          "ref": "143efe4b-cbd8-4d8e-91dd-162663cc7839",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "061b81aa-7a02-4b02-951b-941a55d4bd7a"
        },
        "item": {
          "id": "78ce545e-80a5-452f-ae6e-f9401fb251d4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "76cbf2cf-02dd-4a18-8bc0-aa95f94eec52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d36b8f2d-eefe-4ad4-9f9f-6835e2c5dc44",
        "cursor": {
          "ref": "e631c356-7754-473f-ba37-f8e42250fba5",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "87200008-8f3a-40c7-91b2-c30371ac1b0c"
        },
        "item": {
          "id": "d36b8f2d-eefe-4ad4-9f9f-6835e2c5dc44",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3f3a5f68-7ccf-4318-b7ad-2f9441d86cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 353,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9575ca9-5e23-448b-8177-830894d338e4",
        "cursor": {
          "ref": "d1f09b13-066a-4351-a3f2-f75e6bc67829",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c1bcc84c-7559-4a6a-984b-4ed1eb333f6a"
        },
        "item": {
          "id": "d9575ca9-5e23-448b-8177-830894d338e4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "826f9631-6642-442b-9255-507f05f54edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99adf9e8-a12c-4319-9321-32f5896a65e3",
        "cursor": {
          "ref": "af757b43-6e5e-4f66-a26b-81c72caf5ce2",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2c36ceb4-4398-4c4e-bdde-2167f2feb2de"
        },
        "item": {
          "id": "99adf9e8-a12c-4319-9321-32f5896a65e3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a639e24a-a1ab-4c95-b49a-054b87a01acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86178604-0a6c-4af6-8ab0-9463a42c7bed",
        "cursor": {
          "ref": "08c88833-af2b-43a0-b1e4-51beb724700f",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "cc29446f-ce5c-4baa-961b-dd8eee8c1a23"
        },
        "item": {
          "id": "86178604-0a6c-4af6-8ab0-9463a42c7bed",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "15a8c2aa-8e5c-4d6e-bfc5-27a2fd905ce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab5a3f9-8b05-4455-9e16-c2805e3663b2",
        "cursor": {
          "ref": "647ab3a7-d820-4d7f-8d65-35e3da91e553",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "27526d92-b6fe-4d42-b901-4734c22a6b05"
        },
        "item": {
          "id": "aab5a3f9-8b05-4455-9e16-c2805e3663b2",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c56f23c8-1fac-459f-8095-90b16c79e403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f81592-0001-42dc-a59a-afd089544071",
        "cursor": {
          "ref": "e2e2ea71-0ce5-4d6a-a47a-640e21687afd",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "03e24c9c-488a-460e-8319-a9c2fa62fa6d"
        },
        "item": {
          "id": "97f81592-0001-42dc-a59a-afd089544071",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2c4ad93d-aebe-435e-b383-af2320e21840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea1874aa-b306-4d39-ab2d-0f8ecd25be01",
        "cursor": {
          "ref": "5dda1553-437a-4ca2-af4c-cb56f85dc518",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f294bbf7-5c48-4a55-ac99-140ce1f22002"
        },
        "item": {
          "id": "ea1874aa-b306-4d39-ab2d-0f8ecd25be01",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "3602956a-996d-4b1d-9371-1abae5d42ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01d48bd-d0e9-4394-8158-4fcc81059a7f",
        "cursor": {
          "ref": "a669a149-54d8-41ca-93b6-b0dc7f6ff1d6",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "eef6f9ec-1278-4490-9cfb-cb6318130ca5"
        },
        "item": {
          "id": "b01d48bd-d0e9-4394-8158-4fcc81059a7f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "8958d526-173d-4bcf-9100-37853029bbbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae8d3d36-cb40-434e-b74c-70ee5625845f",
        "cursor": {
          "ref": "5d9a789c-66aa-492f-b19c-61488535a8e0",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ee9a1a2d-071b-43d9-9d31-23745f5e15ef"
        },
        "item": {
          "id": "ae8d3d36-cb40-434e-b74c-70ee5625845f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "cce2ec5f-0ca5-429e-a247-8dd517c196c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e912d48c-36d5-4816-b18a-1c671149a366",
        "cursor": {
          "ref": "aa160d49-511f-4d26-88f3-01501b4839c6",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e2fd244a-4691-499e-b060-91d2a7b68333"
        },
        "item": {
          "id": "e912d48c-36d5-4816-b18a-1c671149a366",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "cbea4288-6c58-46a0-a1be-39f5c94e5eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f707b7f-cc87-48fa-b54c-59619c9b0c38",
        "cursor": {
          "ref": "31b08a00-4f4b-4087-bbea-bbf6f1c9846d",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b6503049-7ebf-4eca-8f3e-553cd838be65"
        },
        "item": {
          "id": "5f707b7f-cc87-48fa-b54c-59619c9b0c38",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5bba8c86-30c3-46ad-bf91-1dccd7286239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae3c9da5-8328-474b-9e5c-78b0cd7f57ab",
        "cursor": {
          "ref": "39644ac0-724d-4a5c-b1e8-c21ea362feba",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "181b0a33-36f9-49ee-8325-0c86b5056527"
        },
        "item": {
          "id": "ae3c9da5-8328-474b-9e5c-78b0cd7f57ab",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c909ed94-430f-4713-8e04-bc12e4e94682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa52904a-a05d-4875-aecc-22e9478af6c0",
        "cursor": {
          "ref": "61699608-df0f-496a-99ab-7ad118dfc0e0",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c6d2a60a-8649-4a13-8adf-b5179ef081b7"
        },
        "item": {
          "id": "fa52904a-a05d-4875-aecc-22e9478af6c0",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3d6b6d1a-120e-42a3-a9ee-954cea7b4274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b17c793-a153-4fbd-b8f7-f78227a6d3fc",
        "cursor": {
          "ref": "3194bc04-521b-47c2-ba10-0f6eaac35959",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ec164844-f56c-4eba-92fe-37e4c3d7d288"
        },
        "item": {
          "id": "8b17c793-a153-4fbd-b8f7-f78227a6d3fc",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d9f111ea-9143-401e-9ec8-83679b622390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c686d5a2-cea0-4fd5-ba5e-199623324970",
        "cursor": {
          "ref": "309cb453-82a7-495b-bedb-89f6c085d82d",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "21195a82-8e2f-4d1a-bc9b-c66621b1f5c2"
        },
        "item": {
          "id": "c686d5a2-cea0-4fd5-ba5e-199623324970",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e455db9c-4621-42eb-8d13-afa5ce6af7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7026e642-c1df-4782-adad-ec13bef02d81",
        "cursor": {
          "ref": "8f0b9b78-5ab2-4b69-9549-c0c70e01dd5d",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "40fd01fe-2df4-48f4-b007-9d2ef60cf713"
        },
        "item": {
          "id": "7026e642-c1df-4782-adad-ec13bef02d81",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4fb6a74c-71f2-4787-a8d7-74b4430d1472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "834b8f05-6e66-4d21-8cf1-f007b1a556e7",
        "cursor": {
          "ref": "b010bdd9-a7d7-4ad4-ac1d-df5aa1fdc712",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "93f5a379-937d-4a51-9ce8-e1d83f39e676"
        },
        "item": {
          "id": "834b8f05-6e66-4d21-8cf1-f007b1a556e7",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "44dc1585-8345-4053-bd18-33118f030bea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "facc7112-f155-4ec1-8b47-159cb85c6619",
        "cursor": {
          "ref": "af043fd2-7fa5-461c-870d-ed2373821351",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "edb486f0-6c01-4ccd-a088-124283ec0619"
        },
        "item": {
          "id": "facc7112-f155-4ec1-8b47-159cb85c6619",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7b627b63-7ade-4fae-9ace-88f559e74c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86adfdc-7d1d-47c5-b2d1-df5c4b5d9f28",
        "cursor": {
          "ref": "30c378a1-0b41-4fa9-aa3c-7beaf4d0de38",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "74cc813a-45dd-4e80-a59a-18fff65e2870"
        },
        "item": {
          "id": "e86adfdc-7d1d-47c5-b2d1-df5c4b5d9f28",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a9b578d5-af01-49a3-9552-ab211a5826f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54dd616c-5c08-4471-8513-ba43e7f4ab2a",
        "cursor": {
          "ref": "34eb58a9-1cd4-494a-9e1d-b617d4710cf5",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d59a8c2c-6166-45ba-bf74-c3725d10dfdb"
        },
        "item": {
          "id": "54dd616c-5c08-4471-8513-ba43e7f4ab2a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6f8c444e-869b-4ba4-a86f-c3000f6ed320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b028af6e-05a2-4833-be68-de55e43e610c",
        "cursor": {
          "ref": "e7e26139-84f2-48dc-b432-3ba24cffbb99",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "cffbc4d0-fdcd-4b34-9450-3a3a0dbadc3e"
        },
        "item": {
          "id": "b028af6e-05a2-4833-be68-de55e43e610c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9870f657-5e85-43bf-a157-27c66115edb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8deb897d-4ad3-452d-a284-f598dbf72006",
        "cursor": {
          "ref": "7c473810-d574-48be-b362-2c3b7c5ace4d",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0cc15d5c-680e-43a1-9d94-ced0bce13507"
        },
        "item": {
          "id": "8deb897d-4ad3-452d-a284-f598dbf72006",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9bee5216-b45a-4229-8d03-877ed8d78333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9977c90d-27c4-44cd-a2de-90bd8f4b8cf7",
        "cursor": {
          "ref": "585bd0e3-c5cf-4008-8acf-da9301c8043b",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "12242cbe-8d4c-4536-a18a-69d3dd2d9182"
        },
        "item": {
          "id": "9977c90d-27c4-44cd-a2de-90bd8f4b8cf7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a8e310c3-6a19-4dbc-a014-3f8a27027c49",
          "status": "OK",
          "code": 200,
          "responseTime": 235,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "4f9e4d6c-d1e4-4e56-9652-96762d7aabe7",
        "cursor": {
          "ref": "97ad5632-5955-43cc-aede-9e62d46814f7",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ecf2c347-fd71-4ffe-99fd-61249adb9a5f"
        },
        "item": {
          "id": "4f9e4d6c-d1e4-4e56-9652-96762d7aabe7",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "1eee2b53-8123-4824-aaa9-e8efe6def33c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2740e17c-d3bc-46ca-8a5f-7ef67a45f1bd",
        "cursor": {
          "ref": "d09f822a-cba3-4cdd-bd59-a3d8a638fdff",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3135ffd9-8010-49ad-8f4c-4b42dcc28e91"
        },
        "item": {
          "id": "2740e17c-d3bc-46ca-8a5f-7ef67a45f1bd",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "75f30e50-baef-4241-aa12-f4886390cbf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1780b739-c3b4-471c-b804-449768c2942e",
        "cursor": {
          "ref": "7a99218b-7fd9-403e-99b5-b480ab60f621",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d836186e-a111-4e42-a82f-74cdf16c8c87"
        },
        "item": {
          "id": "1780b739-c3b4-471c-b804-449768c2942e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c7e4c86c-3ce0-44b2-a399-f6974c16124f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd07b0d8-7ed6-46a2-bef6-b3a93679eb97",
        "cursor": {
          "ref": "f1076535-fa3d-4d76-9306-6415c5b7af36",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4e9da573-422a-441a-a021-6195679be8f5"
        },
        "item": {
          "id": "cd07b0d8-7ed6-46a2-bef6-b3a93679eb97",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "51ef6de9-d7b1-4414-9928-098ac01a1caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8552d855-aa9d-40e4-b510-b2fd6a5547b7",
        "cursor": {
          "ref": "62a19c07-6527-4f26-9918-609ee73d9c3d",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c231d263-59bb-4aab-8f7d-c8fbcf26d831"
        },
        "item": {
          "id": "8552d855-aa9d-40e4-b510-b2fd6a5547b7",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "dec2ce93-e790-41f3-829f-6b51e6c6ea2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac8ecf7-0415-435f-a3f9-c43ccde504bd",
        "cursor": {
          "ref": "83400fb2-6f82-4bf1-b6ab-a6888df42612",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d40e0c26-f928-4afe-9292-6415b59be943"
        },
        "item": {
          "id": "eac8ecf7-0415-435f-a3f9-c43ccde504bd",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "68ef3b0e-063b-4dc0-9f99-efa0067f9f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f473b0e-6a15-4e1a-acaa-11726978a098",
        "cursor": {
          "ref": "21d91bc7-766b-454c-867d-1052e5a8cc33",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "704203cb-9448-4335-9e22-f2570d5d9f3d"
        },
        "item": {
          "id": "0f473b0e-6a15-4e1a-acaa-11726978a098",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "674dfadf-0aea-4253-a8f3-4b3f5e548acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 285,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3d10f8-6dcb-48d0-af17-2c922cd40e56",
        "cursor": {
          "ref": "91bbe48f-34a8-4690-b49c-4f880c03479a",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9e925f25-c699-484b-a653-c3c343507993"
        },
        "item": {
          "id": "bb3d10f8-6dcb-48d0-af17-2c922cd40e56",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2311fef7-a160-46e5-ab66-cf326e6b4ea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f83f9100-7472-49ff-a0fe-5f4b635490d5",
        "cursor": {
          "ref": "4559fb63-cd28-429d-8c08-9763a1faf8e3",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e37bdb39-e5a4-4009-89e6-0f597e1244a5"
        },
        "item": {
          "id": "f83f9100-7472-49ff-a0fe-5f4b635490d5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d4f9a2ed-e501-43f2-8318-10852f47881c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f0cd7d3-44b3-4937-8ea8-38e83cc3bc04",
        "cursor": {
          "ref": "d22515b8-4390-4042-97f1-cfc50a02c6f5",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2a87e087-b757-4b46-a724-3176833e2fa1"
        },
        "item": {
          "id": "7f0cd7d3-44b3-4937-8ea8-38e83cc3bc04",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "850e8f6d-daa3-4ebc-84d3-667133ee00e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd995f24-6374-4274-b01f-6b3d572d85f4",
        "cursor": {
          "ref": "0375d109-1296-443d-80c2-81b205795040",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7b927fbe-5026-4412-98ad-e838897a9aab"
        },
        "item": {
          "id": "fd995f24-6374-4274-b01f-6b3d572d85f4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "434bb91c-40fc-4443-be7c-64361a3d5525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fba5f00-0bfb-48b1-8217-574d469d678f",
        "cursor": {
          "ref": "fbd75208-92a6-41a9-a26a-cdccffe90c04",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ad623505-8d7a-4c6f-9364-e44f66e664b0"
        },
        "item": {
          "id": "8fba5f00-0bfb-48b1-8217-574d469d678f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "08eb2734-f2d3-4620-92fb-8e01338d6043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94eae339-305a-4929-b3d3-9b961f4b3f84",
        "cursor": {
          "ref": "cd8a0180-a97c-4efe-bcbb-73e5d4195fb0",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c1bf0b14-ba6b-49f4-b9dc-7852c4618986"
        },
        "item": {
          "id": "94eae339-305a-4929-b3d3-9b961f4b3f84",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4fc122f7-70f7-4396-ab4b-2807d253b036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb37cb2a-0641-4df9-8934-9b5fb66ffc86",
        "cursor": {
          "ref": "f9e8f1f2-d1e0-4558-ad71-163db059fb8a",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5cb67b94-2d0e-424e-bd2f-32624d1f5481"
        },
        "item": {
          "id": "cb37cb2a-0641-4df9-8934-9b5fb66ffc86",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5933408d-60ee-4840-8e21-dc21ba5bc97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1054,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "746fc499-d4bc-48b6-8211-acd97ba1f4fe",
        "cursor": {
          "ref": "f1602546-d9f3-473f-9b02-a6f806dc932a",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d39d8a12-1a08-464e-b59c-873039cd60be"
        },
        "item": {
          "id": "746fc499-d4bc-48b6-8211-acd97ba1f4fe",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b146b645-c27b-4c4e-b6b6-b628a0e8042d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10bb4cc-9d70-4878-a46e-b699c846552b",
        "cursor": {
          "ref": "86888437-623e-4341-9c47-64ac13c74afd",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9ba42f65-1e4c-43c9-be13-5d63ba0913e1"
        },
        "item": {
          "id": "f10bb4cc-9d70-4878-a46e-b699c846552b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ad049f0f-9460-405b-86cb-24f847e35a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c18572-6502-4f07-8bc7-c74a0d93bbc5",
        "cursor": {
          "ref": "a357815f-66c0-46a0-86eb-65023878bb1c",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "39655409-9dc2-403c-878a-3d4b5ba2e5d0"
        },
        "item": {
          "id": "52c18572-6502-4f07-8bc7-c74a0d93bbc5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0fcf329d-591f-40b8-b2ee-a9a73537c249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d54b1adc-2cd6-4e57-8252-ffafe56ea7ab",
        "cursor": {
          "ref": "89f9e626-6cca-4f6c-b1b7-26bdbaac8911",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d4039a26-31c1-47e7-b8ee-8c29f9c83ff9"
        },
        "item": {
          "id": "d54b1adc-2cd6-4e57-8252-ffafe56ea7ab",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "508e4ca0-4631-4fcc-9cbe-1ef5ee0c4445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 267,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e97c1c19-7676-483b-86be-7d30294eee64",
        "cursor": {
          "ref": "727ec2e3-4a08-4fc1-93bb-9c0f03b62383",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3efc4358-ee34-47dd-beb8-4f9af3741321"
        },
        "item": {
          "id": "e97c1c19-7676-483b-86be-7d30294eee64",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a74dbb97-7fe3-449e-b0c6-8c7d8d189103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8161486-3a41-4cf9-957e-539e8a286648",
        "cursor": {
          "ref": "e3a51502-c5fa-404c-95e2-af407c3e0e2e",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "98dcfcf7-6c41-4130-b12d-6a7c0a6e3c1c"
        },
        "item": {
          "id": "f8161486-3a41-4cf9-957e-539e8a286648",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0401351d-a62d-418d-95c1-086336009252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f098b0a2-b712-4746-afa9-4126ee7efdc8",
        "cursor": {
          "ref": "7ff213c5-f24b-46a7-a804-1295ffdb95d2",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9773c69e-02b5-44c1-ba4e-25275b5c3879"
        },
        "item": {
          "id": "f098b0a2-b712-4746-afa9-4126ee7efdc8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "df48d8cc-08f8-4e2b-bcf5-f42c6b69ca9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 236,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "381fab3c-67d0-4abc-90a3-3f672eddd6cd",
        "cursor": {
          "ref": "10ba94fd-fc3c-470b-8156-f130605f6058",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d405a6f0-9b2a-4890-8ee6-8c5b0c1fa094"
        },
        "item": {
          "id": "381fab3c-67d0-4abc-90a3-3f672eddd6cd",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f21f9018-ca7f-4173-b56e-271320ad22ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0759e31-25c0-4183-a857-8699682139ca",
        "cursor": {
          "ref": "5771861d-86fb-4109-90e4-5166479d4af4",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "6484c37c-626d-443f-aee6-5c3ddecbe744"
        },
        "item": {
          "id": "e0759e31-25c0-4183-a857-8699682139ca",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5256f1ef-f62a-4cc5-80ce-a8871fcf56bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9a81a5e-eb92-46b9-81f4-49eabfcab316",
        "cursor": {
          "ref": "64e455e7-180e-46c8-931f-a8d030dff244",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "6aed1796-1fee-43d0-bbf9-8f853d18bbfa"
        },
        "item": {
          "id": "c9a81a5e-eb92-46b9-81f4-49eabfcab316",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d641b1a5-7c19-44e4-a4b6-45c75e694bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e01b9427-301e-45a5-9035-7be3432fbb18",
        "cursor": {
          "ref": "18e13a03-ed36-4dfd-8554-f7305e131fdd",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f35f836a-4f31-42c2-9435-ad137e3a1fc2"
        },
        "item": {
          "id": "e01b9427-301e-45a5-9035-7be3432fbb18",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1ad4c00e-8a97-4d25-bda6-d6d112d95e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107c1d79-e461-4ffa-b35f-e9988824fbb0",
        "cursor": {
          "ref": "e0f3c2e2-2074-4fce-9c2e-84a3dca16c56",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "eea47410-7a84-46b9-9db7-ae41110e474d"
        },
        "item": {
          "id": "107c1d79-e461-4ffa-b35f-e9988824fbb0",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "aca880d4-a4d7-4b28-8233-a100f33efab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23e0525-d579-41e2-b853-5704b999260f",
        "cursor": {
          "ref": "b163385c-1ee6-4710-8a11-a6e14f0e0e82",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b7317b35-73d7-4f48-b902-8382eeab9d47"
        },
        "item": {
          "id": "b23e0525-d579-41e2-b853-5704b999260f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ee205f39-e4ec-4c76-873d-cc66aad7003c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e087f30b-e652-48af-a1b9-c8bffae6e43b",
        "cursor": {
          "ref": "426c830c-fa2f-40e8-a70f-286cd683e17f",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4b4aee00-64a6-4d73-9d62-00fff30f7c14"
        },
        "item": {
          "id": "e087f30b-e652-48af-a1b9-c8bffae6e43b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9584b767-4962-4fe8-9b97-ff9b8338bf2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "996ba80d-4234-4412-b504-aa578d26f980",
        "cursor": {
          "ref": "2468ff08-df3e-4b18-9fa0-c3d36ade3958",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "cc76683c-51b0-4a20-957d-feaa3c98fd7f"
        },
        "item": {
          "id": "996ba80d-4234-4412-b504-aa578d26f980",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "489974b1-f1ec-4f4c-a1f9-45edc3a7dc18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4eb5fff-edd8-4343-beb1-8d8d0f9d6ac5",
        "cursor": {
          "ref": "e039d19f-a076-4857-a856-7e3efd259f84",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8c015704-0e74-48d5-9e13-db27d94a885c"
        },
        "item": {
          "id": "f4eb5fff-edd8-4343-beb1-8d8d0f9d6ac5",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5e9a0ad8-181c-4811-97a2-1bc71be245eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f8d65e-8aad-4065-8263-d8d9f58cd83e",
        "cursor": {
          "ref": "de17e3f4-c580-4fda-9327-aa862b852931",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "433a10bc-2045-4059-8ffd-e9918f25d995"
        },
        "item": {
          "id": "00f8d65e-8aad-4065-8263-d8d9f58cd83e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b843529d-5f1d-4271-a7f5-43c6cb18544b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91dff3d4-8b94-4c96-8344-3f98e54344ee",
        "cursor": {
          "ref": "e6835378-0209-42ab-b2e0-15fa2d30c258",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f5ea660b-a0b9-4165-b2b6-45318f65c2b6"
        },
        "item": {
          "id": "91dff3d4-8b94-4c96-8344-3f98e54344ee",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "45bb17d7-7883-4aa8-983b-c23ec50e15a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b14c23-05d9-4f1f-aad0-1bd74cf0c333",
        "cursor": {
          "ref": "aad09c64-819a-44c7-a51a-94227b59b936",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e8c2f8c2-c549-4b59-899e-43560e93a12b"
        },
        "item": {
          "id": "c3b14c23-05d9-4f1f-aad0-1bd74cf0c333",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a8ebc6e4-dc1c-4ab1-8d71-f6302b4609ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaead27d-635b-4096-8fe5-851080906365",
        "cursor": {
          "ref": "2275654b-456e-457d-84c7-ab49ee4f7455",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "863bf40b-0acb-423f-9026-19be041d487d"
        },
        "item": {
          "id": "aaead27d-635b-4096-8fe5-851080906365",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ca39aa6a-4d44-4b0f-92ae-381efe12c2e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad2afaa5-073d-4251-937d-3739209009d1",
        "cursor": {
          "ref": "812ce4bb-fe7f-4fd8-9884-7ff07819a5bc",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "79c3bd1d-1f37-4887-868d-070989d31686"
        },
        "item": {
          "id": "ad2afaa5-073d-4251-937d-3739209009d1",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "68c941c6-15f6-4f92-8f1a-d57ccff26886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f55e8ba-706f-4ec4-85b0-70e0d1b31eef",
        "cursor": {
          "ref": "e1116465-fb49-4fa5-82cc-b9d7450e0035",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4671ae79-2c6d-4050-adca-7789ea8022c8"
        },
        "item": {
          "id": "5f55e8ba-706f-4ec4-85b0-70e0d1b31eef",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d433fb8b-0d52-4ba1-817f-0c1686ccf210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f835ac93-171a-4bc1-98b8-e8e9fb00029b",
        "cursor": {
          "ref": "62fc7ae9-d035-4ae1-90ef-6430e854eca6",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b687dcd9-3fc3-4501-bfb6-b47527ca3cd3"
        },
        "item": {
          "id": "f835ac93-171a-4bc1-98b8-e8e9fb00029b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4ae25fcd-093b-4d41-a117-28da965aa71b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26cbfc50-09bf-4d32-b96c-2d6ffb489656",
        "cursor": {
          "ref": "5f44535e-3512-48f7-825c-b00813b28cfc",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2b800e6b-e665-4064-aab7-709ba77e3a9f"
        },
        "item": {
          "id": "26cbfc50-09bf-4d32-b96c-2d6ffb489656",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "80a2482f-8b8e-48af-bc9c-544cdfbdc59e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef5b393-7d8a-460a-9256-e078e7a36ade",
        "cursor": {
          "ref": "322f3588-45af-4e9d-9b4f-fbd540bfa522",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "79a7c819-8166-435e-9f9d-32fa3cf4e1b8"
        },
        "item": {
          "id": "1ef5b393-7d8a-460a-9256-e078e7a36ade",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "cdebc8f0-2945-4a8d-93ba-af74a19879d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21c994c1-8661-48db-a063-30847ac5f827",
        "cursor": {
          "ref": "9ba852ae-6a48-49c1-b9b1-6dece5e2894e",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9b13f273-0d3e-431c-81a1-19d22c019ccb"
        },
        "item": {
          "id": "21c994c1-8661-48db-a063-30847ac5f827",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6c4e2114-7e85-4458-9f41-d1dd8fe3d850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc184cc2-2a3b-47d6-9abf-d4ce034e8a07",
        "cursor": {
          "ref": "21d7c7b4-3c3e-4ca8-bea2-182e380de505",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5e8c3925-b2d0-4fc8-ab3e-336856d68a7c"
        },
        "item": {
          "id": "bc184cc2-2a3b-47d6-9abf-d4ce034e8a07",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0381ffce-3044-41f8-82b3-5194511ff1eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c316ff-a67a-4ba2-84ea-a45d63c82d1d",
        "cursor": {
          "ref": "5551d41e-5fe4-4ac2-a2e7-308b9f3d7b39",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "337c56a0-6160-49f7-b647-a3623d9bccc0"
        },
        "item": {
          "id": "a0c316ff-a67a-4ba2-84ea-a45d63c82d1d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "62ec5f3d-ba8c-4b81-9791-37eda80da39d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae20d2b9-0417-4355-b596-fe7fb1d50d26",
        "cursor": {
          "ref": "f1633b1c-532f-4695-8d47-c9d28a6916d0",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "08f14162-4d37-4ca5-b14b-a737491a2e17"
        },
        "item": {
          "id": "ae20d2b9-0417-4355-b596-fe7fb1d50d26",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "94e9c39c-a0bb-4d86-8e0c-b0d352ca5f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8459cb4e-890e-4181-80b1-218901664086",
        "cursor": {
          "ref": "6cf2b3ea-9fd4-4079-9668-507d53796ba6",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "df7d9612-757e-41b9-a711-d15079a79260"
        },
        "item": {
          "id": "8459cb4e-890e-4181-80b1-218901664086",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "40bbd7ab-853c-4a09-859a-f26cb4a8378f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a3154c-626d-498b-a53f-61e3433cf519",
        "cursor": {
          "ref": "ff4f08ed-109f-4e78-82da-591a0963b00f",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "27a77b1d-5872-430c-91f2-2485db808e77"
        },
        "item": {
          "id": "15a3154c-626d-498b-a53f-61e3433cf519",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "15aba322-8407-4c92-b194-69195695fe83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e00ff9-60f1-454f-8bab-ea8f67e21dcc",
        "cursor": {
          "ref": "ecbbe039-8e2f-4852-b6c5-a9d3db0cd8a3",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "517eb576-3b02-493f-8a67-a2903b2b4d8f"
        },
        "item": {
          "id": "a7e00ff9-60f1-454f-8bab-ea8f67e21dcc",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d9cf1aaf-0f79-4d81-bb89-f390101a8419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a32e967-e8ef-4ab1-96d2-6f5d48b9744b",
        "cursor": {
          "ref": "cd9bd598-1d78-4ccc-82c9-1153672aed34",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "82d22e66-8083-4a4f-a64b-e68578b4987a"
        },
        "item": {
          "id": "9a32e967-e8ef-4ab1-96d2-6f5d48b9744b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e7a1c69d-9769-482c-bcee-cadbedac3f27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17aefbdb-a6c3-417d-9f58-f9a8643faa81",
        "cursor": {
          "ref": "5d5be7a5-e20d-4260-a43f-9aa2f76faf4c",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b1847fba-acac-4be6-8b8c-df780049cb86"
        },
        "item": {
          "id": "17aefbdb-a6c3-417d-9f58-f9a8643faa81",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "69145472-66dc-4458-a33e-529d0d0de593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3771c80-e5a6-4141-93dd-50e9cccc43e4",
        "cursor": {
          "ref": "b2e5f14a-1495-4dd2-aa56-1ee1d93cdb59",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7948b961-3d73-45d3-b345-2c84e3d5fbbf"
        },
        "item": {
          "id": "b3771c80-e5a6-4141-93dd-50e9cccc43e4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "bf698954-3e81-4901-ad79-c41307ad726b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac78c9ee-643d-442d-a4c4-39484ddc3861",
        "cursor": {
          "ref": "69391652-4001-43db-b3dd-8826660eb81c",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "eeb76138-a784-4d4c-a8dd-e2c706d2d222"
        },
        "item": {
          "id": "ac78c9ee-643d-442d-a4c4-39484ddc3861",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "45f51930-a454-4b18-b3be-d0463ba7453e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884b47df-9248-4c85-88ca-36c595a1cbf1",
        "cursor": {
          "ref": "1dd8d1dc-b1e5-494e-8105-51cd558e3321",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a7e38f6b-3747-4157-b5cb-0de278ceb3d4"
        },
        "item": {
          "id": "884b47df-9248-4c85-88ca-36c595a1cbf1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f5da2827-b942-450d-8467-a1e5ad396313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c239f7a3-2167-41fe-90a0-894e9b9694b5",
        "cursor": {
          "ref": "3d91b249-427e-4e81-9382-0145ae4f2a39",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f343b1bb-7312-4274-af86-61b831b155ab"
        },
        "item": {
          "id": "c239f7a3-2167-41fe-90a0-894e9b9694b5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "20cd5975-4233-402c-a7a5-3edf499dce21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "930ed5e5-c13d-4829-bce3-397436633d43",
        "cursor": {
          "ref": "2e1a0c68-6ac8-445a-99fb-2385765cb0d7",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "dd12f3a6-428e-4241-bea7-7e5a4b84df28"
        },
        "item": {
          "id": "930ed5e5-c13d-4829-bce3-397436633d43",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "dba958ee-853b-4847-a511-c0046be5d8ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88defe11-2397-4e56-9a3c-cf7d4ecb1387",
        "cursor": {
          "ref": "5e65558d-86f7-46d9-aa3f-e07355a59e77",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "deb78d6c-c0b4-4670-a29a-17c50e6211c3"
        },
        "item": {
          "id": "88defe11-2397-4e56-9a3c-cf7d4ecb1387",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "5218cfdf-af51-48a9-9cae-73ac6ae2dce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de7ef34-42a0-41e7-ae36-5a79fb8dda2c",
        "cursor": {
          "ref": "2f6ea1d2-e782-428e-ba76-be1a0a35ef2f",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "befe2caa-0536-4979-ab6f-180400c2ae90"
        },
        "item": {
          "id": "9de7ef34-42a0-41e7-ae36-5a79fb8dda2c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6cc14707-5668-4b26-8de4-f54f7e663144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623b7c9f-7edd-468e-b99d-3758f4ad16c1",
        "cursor": {
          "ref": "d048b013-6099-44fb-a0d8-8251306316a9",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6c1c225c-0993-4703-bf01-14c07abbbafc"
        },
        "item": {
          "id": "623b7c9f-7edd-468e-b99d-3758f4ad16c1",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "3d4c77ed-ff85-4464-9927-d6b7e89be4b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d2ea3b-f76a-472a-acc3-91dfcfdcd9cf",
        "cursor": {
          "ref": "e8cbb2d4-8101-49c1-8e89-16754657a361",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "aafcceaf-d063-41a0-ac36-55272b9a227a"
        },
        "item": {
          "id": "f1d2ea3b-f76a-472a-acc3-91dfcfdcd9cf",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7e339e0d-9952-4fa7-88e6-0d43feceab91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3350e26e-6b82-4bbd-9553-d4619ee16af0",
        "cursor": {
          "ref": "6c695e3a-47cd-4163-be48-bbc59fd6ebad",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6c943b8c-b00d-4ef4-84c8-e339ed7fd693"
        },
        "item": {
          "id": "3350e26e-6b82-4bbd-9553-d4619ee16af0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5d4467a9-7b47-403d-9e3a-1812504d604a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5cfa0c1-e0a7-499f-854c-68a9b470c532",
        "cursor": {
          "ref": "a2aa7cab-b541-4c98-8d33-8cd4fa54804b",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c4e15808-e316-4bd5-a28f-d8742366c541"
        },
        "item": {
          "id": "f5cfa0c1-e0a7-499f-854c-68a9b470c532",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6a9d5f53-f93f-4e59-b3d1-c340c8f30bff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7d48774-d938-461b-92db-975a0d6f2cf0",
        "cursor": {
          "ref": "6e5cffbe-3a8b-410b-a15c-f5e9fc3d109d",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b128bb54-d2ee-4647-aaf5-4a893c40b287"
        },
        "item": {
          "id": "f7d48774-d938-461b-92db-975a0d6f2cf0",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a6910866-d352-499e-8376-73bc83083786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffe0e3ff-cd44-4acc-b932-eaed0746acd0",
        "cursor": {
          "ref": "e06ff629-a455-44e8-b4b5-b437e3c72f10",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f685730c-8b92-44d2-abef-5a2190fbf4e5"
        },
        "item": {
          "id": "ffe0e3ff-cd44-4acc-b932-eaed0746acd0",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "31a331d4-dcc5-48fa-8e0c-b84f51d4cff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910b4abe-cebb-4d8e-99ca-ee245a96b1dd",
        "cursor": {
          "ref": "8f2d84d5-859c-467c-9d08-ea92cf8a22d2",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7d64c021-d43c-4464-9e05-fae7c640001a"
        },
        "item": {
          "id": "910b4abe-cebb-4d8e-99ca-ee245a96b1dd",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6a46b1f1-2c53-468c-ad2e-c45735e68ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d55270-0e37-4b50-a772-9d887e2afe0f",
        "cursor": {
          "ref": "70416dcd-c738-4bd2-a4ef-84aa3554d341",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7fcb9cfe-c51b-49ba-b460-9d7dd7ac1c84"
        },
        "item": {
          "id": "10d55270-0e37-4b50-a772-9d887e2afe0f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "cc08c7f5-b6ef-4209-80aa-a4c773e966cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a07fe7f-f674-4a3e-9d08-980c7d8a7569",
        "cursor": {
          "ref": "367184c2-2a6b-4b87-b8f9-4c1816cae5b6",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d016b0fe-46c1-4841-bf77-0ca22faebac2"
        },
        "item": {
          "id": "6a07fe7f-f674-4a3e-9d08-980c7d8a7569",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4d0a595a-ed83-40a5-9a1b-240776bd15f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7d0038-8d82-4da0-9361-f149ef94787f",
        "cursor": {
          "ref": "ad99d6ea-20e5-4404-9c95-139bdb043bdd",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "939106ec-cc8a-4601-b257-0867231644a5"
        },
        "item": {
          "id": "8a7d0038-8d82-4da0-9361-f149ef94787f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "adfc87b8-3569-4fc0-bf08-59c077b2d9a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b1eba8-3ef6-477c-9e83-118f727a4dd8",
        "cursor": {
          "ref": "a0aa93d1-a49a-41b1-921d-9547e006d092",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "353d9e74-d494-4a95-8ae7-0dc4289c125f"
        },
        "item": {
          "id": "d3b1eba8-3ef6-477c-9e83-118f727a4dd8",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "095996c6-303d-47d8-bf9a-01e979d333fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd84b7c-3047-4fb5-83ce-4baba9dd7d27",
        "cursor": {
          "ref": "5d2c6f52-469a-49df-934a-eae81326f367",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "15db795e-3c1c-4d56-9d94-912084c90651"
        },
        "item": {
          "id": "3dd84b7c-3047-4fb5-83ce-4baba9dd7d27",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "98ac786c-0443-480d-9c23-2f56df73d2cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63964b6c-f5e5-4e68-ba05-a022da996d38",
        "cursor": {
          "ref": "4fcfdfa2-b2e5-421a-9eb2-8d11e0fbc919",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "10783176-f84c-478c-bd40-1d9ce5b2e4f2"
        },
        "item": {
          "id": "63964b6c-f5e5-4e68-ba05-a022da996d38",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7a235616-7b8a-432f-a7d1-885f88928cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "359e8ff9-25e9-4337-94f7-4a0731f4d041",
        "cursor": {
          "ref": "2a3861b2-9948-48f8-a6d4-de5068ccf9dd",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e511e763-5933-45bf-a553-4fd0d2a8430a"
        },
        "item": {
          "id": "359e8ff9-25e9-4337-94f7-4a0731f4d041",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ab00ec9e-bd88-470a-833d-b28ecf988e81",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8fa426-2b18-4eb8-aa00-cc4479fd367e",
        "cursor": {
          "ref": "24be0917-a5af-45c3-bb24-e477c4b0c5b2",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b541666e-2609-4959-9b42-d563d97c2ac4"
        },
        "item": {
          "id": "1f8fa426-2b18-4eb8-aa00-cc4479fd367e",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "0ff47578-831e-452b-a100-183038255d03",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ea0338-9490-4b90-9b19-0c22d8331c91",
        "cursor": {
          "ref": "81eeae04-868a-4152-b2e2-b8ec7b09533c",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "28ddaedd-0247-47a1-b2b8-22a75bc51f4c"
        },
        "item": {
          "id": "61ea0338-9490-4b90-9b19-0c22d8331c91",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6428f352-6dad-4fb4-9a02-e4e77f07add4",
          "status": "OK",
          "code": 200,
          "responseTime": 227,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "e03c6aa9-3057-48c1-ba21-1b61bbef2855",
        "cursor": {
          "ref": "f81ed0e7-15ce-4bbe-be59-6dd542999e62",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a9307995-52dc-4c4e-abb4-b84bfd8cd02e"
        },
        "item": {
          "id": "e03c6aa9-3057-48c1-ba21-1b61bbef2855",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b39abbbd-65d5-487e-ad17-a33315a11841",
          "status": "OK",
          "code": 200,
          "responseTime": 518,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4183e3c6-dae8-4a5d-90a3-cf8fc2fc18b8",
        "cursor": {
          "ref": "f7e0ccad-af8e-478f-b5f4-19d8228a3b94",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "79c1acf7-ac98-4fc0-a515-980b585e7bd6"
        },
        "item": {
          "id": "4183e3c6-dae8-4a5d-90a3-cf8fc2fc18b8",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "82cbb446-59c0-4744-883f-d8b0f194ec77",
          "status": "OK",
          "code": 200,
          "responseTime": 744,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b05f2a-f464-485f-ac12-926d74f97ec8",
        "cursor": {
          "ref": "4e8638e0-9817-46f6-a6a4-bf290cfd4a51",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f903e552-a88d-46ab-a675-a41fb4ab2a04"
        },
        "item": {
          "id": "58b05f2a-f464-485f-ac12-926d74f97ec8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "589f9187-76f7-4bfc-a7a4-e63b30805560",
          "status": "OK",
          "code": 200,
          "responseTime": 506,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70b7907-f117-4cfb-9d71-77f16e2aa2d8",
        "cursor": {
          "ref": "8e9931b4-e0bf-4d56-9064-45d2077c23d5",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4a8e624e-2232-49e4-8900-e3d47fc018eb"
        },
        "item": {
          "id": "b70b7907-f117-4cfb-9d71-77f16e2aa2d8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8f65532c-1816-4e42-87db-bae7bcf743f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70b7907-f117-4cfb-9d71-77f16e2aa2d8",
        "cursor": {
          "ref": "8e9931b4-e0bf-4d56-9064-45d2077c23d5",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4a8e624e-2232-49e4-8900-e3d47fc018eb"
        },
        "item": {
          "id": "b70b7907-f117-4cfb-9d71-77f16e2aa2d8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8f65532c-1816-4e42-87db-bae7bcf743f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70b7907-f117-4cfb-9d71-77f16e2aa2d8",
        "cursor": {
          "ref": "8e9931b4-e0bf-4d56-9064-45d2077c23d5",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4a8e624e-2232-49e4-8900-e3d47fc018eb"
        },
        "item": {
          "id": "b70b7907-f117-4cfb-9d71-77f16e2aa2d8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8f65532c-1816-4e42-87db-bae7bcf743f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c89cfd29-0b6e-48ae-aa53-a0cded2cec27",
        "cursor": {
          "ref": "419dd6bd-e4f1-4f02-9e7f-234c0948ff88",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c2aa5d3c-9483-4e8d-ac13-e814d52df413"
        },
        "item": {
          "id": "c89cfd29-0b6e-48ae-aa53-a0cded2cec27",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "658bb720-a228-418a-895e-e0f1fd9a19ef",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b35cd9cf-190f-46f2-905d-bfa8d4c0e6eb",
        "cursor": {
          "ref": "29241378-e2f1-4e0a-922d-9f96de814e5c",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "300fd5e7-d9d6-4369-b694-d82f4d2c4075"
        },
        "item": {
          "id": "b35cd9cf-190f-46f2-905d-bfa8d4c0e6eb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "116885f3-d408-41c0-9e97-4c41677cf770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "b35cd9cf-190f-46f2-905d-bfa8d4c0e6eb",
        "cursor": {
          "ref": "29241378-e2f1-4e0a-922d-9f96de814e5c",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "300fd5e7-d9d6-4369-b694-d82f4d2c4075"
        },
        "item": {
          "id": "b35cd9cf-190f-46f2-905d-bfa8d4c0e6eb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "116885f3-d408-41c0-9e97-4c41677cf770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "bc8ca7d7-54a6-4c7d-a8b3-80c8fff935cb",
        "cursor": {
          "ref": "70fb009b-1f2d-4f0b-87da-fe26c422f5e9",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9c86a5a8-5c4b-4f8c-96f2-67b4e6a241dc"
        },
        "item": {
          "id": "bc8ca7d7-54a6-4c7d-a8b3-80c8fff935cb",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "cf102efb-3c51-4132-aaf5-241336a6c276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8e4c8b6a-ba69-4821-8ccd-1a8f6c1c1360",
        "cursor": {
          "ref": "f873e491-26f8-488f-aec0-1c749b181fa2",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "1d1d85c6-02f8-48d6-a8d2-dfe5d2d14977"
        },
        "item": {
          "id": "8e4c8b6a-ba69-4821-8ccd-1a8f6c1c1360",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "aa8587de-8fe0-421d-b7e2-3c3e9cb13cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "8e4c8b6a-ba69-4821-8ccd-1a8f6c1c1360",
        "cursor": {
          "ref": "f873e491-26f8-488f-aec0-1c749b181fa2",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "1d1d85c6-02f8-48d6-a8d2-dfe5d2d14977"
        },
        "item": {
          "id": "8e4c8b6a-ba69-4821-8ccd-1a8f6c1c1360",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "aa8587de-8fe0-421d-b7e2-3c3e9cb13cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "b020f9b6-d997-4ae9-9955-3a886ed019ff",
        "cursor": {
          "ref": "660276b2-aa4f-4a14-a87b-084cec581371",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "720be994-2b18-4df0-851a-4f83c8172468"
        },
        "item": {
          "id": "b020f9b6-d997-4ae9-9955-3a886ed019ff",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "06fa954a-d23c-4170-855d-7640260ab111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}