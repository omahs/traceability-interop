{
  "collection": {
    "info": {
      "_postman_id": "5b283aa1-ef37-4929-9e42-64c5dd5b4b68",
      "name": "DID Web Discovery",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "94323b76-9d77-4be6-a267-ff11e23745a7",
        "name": "Get Organization DIDs",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": true,
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "4be96248-4396-4c1d-a041-f0bcacbf9730",
              "type": "text/javascript",
              "exec": [
                "// Some tests are skipped unless prerequisite tests pass and",
                "// update these variables to `pm.test`.",
                "var whenResponseIsOk         = pm.test.skip;",
                "var whenJsonIsValid          = pm.test.skip;",
                "var whenDidDocumentIsPresent = pm.test.skip;",
                "var whenHasAlsoKnownAs       = pm.test.skip;",
                "",
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "    whenResponseIsOk = pm.test;",
                "});",
                "",
                "whenResponseIsOk(\"must include valid JSON response body\", function() {",
                "    pm.response.json(); // will throw on parse failure",
                "    whenJsonIsValid = pm.test;",
                "});",
                "",
                "whenJsonIsValid(\"didDocument must be present in response body\", function() {",
                "    var jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('didDocument');",
                "    whenDidDocumentIsPresent = pm.test;",
                "});",
                "",
                "whenDidDocumentIsPresent(\"alsoKnownAs MUST be present\", function () {",
                "    var jsonData = pm.response.json().didDocument;",
                "    pm.expect(jsonData).to.have.property('alsoKnownAs');",
                "    whenHasAlsoKnownAs = pm.test;",
                "});",
                "",
                "whenHasAlsoKnownAs(\"alsoKnownAs MUST be an array\", function() {",
                "    var jsonData = pm.response.json().didDocument;",
                "    pm.expect(jsonData.alsoKnownAs).to.be.an('array');",
                "});",
                "",
                "whenHasAlsoKnownAs(\"alsoKnownAs values MUST be unique\", function() {",
                "    var jsonData = pm.response.json().didDocument;",
                "    pm.expect(new Set(jsonData.alsoKnownAs)).to.have.lengthOf(jsonData.alsoKnownAs.length);",
                "});",
                "",
                "whenDidDocumentIsPresent(\"verification method controller must match did subject\", function() {",
                "    var didDocument = pm.response.json().didDocument;",
                "    var vm = didDocument.verificationMethod || [];",
                "    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
                "});"
              ],
              "_lastExecutionId": "195c2483-3c0d-496b-bfbc-7e738420be18"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 7,
        "pending": 0,
        "failed": 1
      },
      "testScripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 426,
      "responseMin": 426,
      "responseMax": 426,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1649347116414,
      "completed": 1649347116890
    },
    "executions": [
      {
        "id": "94323b76-9d77-4be6-a267-ff11e23745a7",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 1,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3ce81122-49d6-4432-b5cc-83b909682208",
          "httpRequestId": "fafa45fa-5ac4-4cce-ae78-612a5b0f0ba5"
        },
        "item": {
          "id": "94323b76-9d77-4be6-a267-ff11e23745a7",
          "name": "Get Organization DIDs"
        },
        "response": {
          "id": "0e53fb7e-4849-4bb8-96be-752d85975fe2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 426,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "must include valid JSON response body",
            "skipped": true
          },
          {
            "assertion": "didDocument must be present in response body",
            "skipped": true
          },
          {
            "assertion": "alsoKnownAs MUST be present",
            "skipped": true
          },
          {
            "assertion": "alsoKnownAs MUST be an array",
            "skipped": true
          },
          {
            "assertion": "alsoKnownAs values MUST be unique",
            "skipped": true
          },
          {
            "assertion": "verification method controller must match did subject",
            "skipped": true
          }
        ]
      }
    ]
  }
}